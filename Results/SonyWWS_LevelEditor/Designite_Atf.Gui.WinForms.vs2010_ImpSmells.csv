Implementation smell,Namespace,Class,File,Method,Description
Long Method,Sce.Atf.Applications,PropertyEditingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditingCommands.cs,DoCommand,The method has 103 lines of code.
Long Method,Sce.Atf.Applications,RenameCommandDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\RenameCommandDialog.cs,InitializeComponent,The method has 173 lines of code.
Long Method,Sce.Atf.Applications,SkinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,Init,The method has 105 lines of code.
Long Method,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,Initialize,The method has 121 lines of code.
Long Method,Sce.Atf.Applications.NetworkTargetServices,TargetEditDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TargetEditDialog.cs,InitializeComponent,The method has 102 lines of code.
Long Method,Sce.Atf.Applications.WebServices,FeedbackForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\WebServices\FeedbackForm.cs,InitializeComponent,The method has 138 lines of code.
Long Method,Sce.Atf.Controls,CustomizeKeyboardDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CustomizeKeyboardDialog.cs,InitializeComponent,The method has 185 lines of code.
Long Method,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawSubItem,The method has 121 lines of code.
Long Method,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,InitializeComponent,The method has 141 lines of code.
Long Method,Sce.Atf.Controls,FindFileDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FindFileDialog.cs,InitializeComponent,The method has 101 lines of code.
Long Method,Sce.Atf.Controls,FindFileWithSuggestionDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FindFileWithSuggestionDialog.cs,InitializeComponent,The method has 115 lines of code.
Long Method,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,ProcessDialogKey,The method has 121 lines of code.
Long Method,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The method has 167 lines of code.
Long Method,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,ListTreeViewDrawSubItem,The method has 130 lines of code.
Long Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,Pick,The method has 139 lines of code.
Long Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The method has 136 lines of code.
Long Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_PreviewKeyDown,The method has 128 lines of code.
Long Method,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The method has 111 lines of code.
Long Method,Sce.Atf.Controls.Adaptable.Graphs,GroupingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupingCommands.cs,CreateGroup,The method has 112 lines of code.
Long Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Pick,The method has 305 lines of code.
Long Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The method has 199 lines of code.
Long Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,PickSubItem,The method has 101 lines of code.
Long Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetHierarchicalElementSizeInfo,The method has 110 lines of code.
Long Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphAdapter.cs,OnRender,The method has 149 lines of code.
Long Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,ConnectWires,The method has 131 lines of code.
Long Method,Sce.Atf.Controls.Adaptable.Graphs,GraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\GraphEdgeEditAdapter.cs,OnDragging,The method has 121 lines of code.
Long Method,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The method has 144 lines of code.
Long Method,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The method has 452 lines of code.
Long Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,Paste,The method has 145 lines of code.
Long Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The method has 144 lines of code.
Long Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PerformAction,The method has 200 lines of code.
Long Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,Translate,The method has 146 lines of code.
Long Method,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The method has 177 lines of code.
Long Method,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The method has 673 lines of code.
Long Method,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,InputBoxValidating,The method has 118 lines of code.
Long Method,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,DrawCurve,The method has 126 lines of code.
Long Method,Sce.Atf.Applications.Controls,PerformanceMonitorControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PerformanceMonitorControl.cs,InitializeComponent,The method has 129 lines of code.
Long Method,Sce.Atf.Controls.PropertyEditing,CollectionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EmbeddedCollectionEditor.cs,ProcessPendingChanges,The method has 168 lines of code.
Long Method,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,ProcessDialogKey,The method has 147 lines of code.
Long Method,Sce.Atf.Controls.PropertyEditing,PropertyGrid,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,PropertyGrid,The method has 146 lines of code.
Long Method,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,_MoveSelection,The method has 133 lines of code.
Long Method,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,GetMoveGhostInfo,The method has 145 lines of code.
Long Method,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,GetMoveTargets,The method has 109 lines of code.
Long Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PickSubTimeline,The method has 110 lines of code.
Long Method,Sce.Atf.Controls.Timelines,MoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\MoveManipulator.cs,MoveSelection,The method has 136 lines of code.
Long Method,Sce.Atf.Controls.Timelines,MoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\MoveManipulator.cs,GetMoveGhostInfo,The method has 130 lines of code.
Long Method,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,PickSubTimeline,The method has 108 lines of code.
Complex Method,Sce.Atf.Applications,AtfScriptVariables,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\AtfScriptVariables.cs,Initialize,Cyclomatic complexity of the method is 15
Complex Method,Sce.Atf.Applications,AutoDocumentService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\AutoDocumentService.cs,mainWindow_Loaded,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Applications,CommandService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\CommandService.cs,DoCommand,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,CommandService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\CommandService.cs,BuildDefaultMenusAndToolbars,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Applications,CommandService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\CommandService.cs,ProcessKey,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,ControlHostService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ControlHostService.cs,RegisterControl,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Applications,ControlHostService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ControlHostService.cs,ShowDockContent,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Applications,ControlHostService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ControlHostService.cs,DockHandlerSubscribe,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,ControlHostService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ControlHostService.cs,DockHandlerUnsubscribe,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,FilteredTreeControlEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\FilteredTreeControlEditor.cs,TreeControl_NodeExpandedChanging,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,ResourceLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\ResourceLister.cs,AddFolder,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,TreeControlAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\TreeControlAdapter.cs,ExpandPath,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,TreeListViewAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\TreeListViewAdapter.cs,HandleSelectionUpdates,Cyclomatic complexity of the method is 16
Complex Method,Sce.Atf.Applications,MainForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\MainForm.cs,SavePanelState,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,PaletteService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PaletteService.cs,searchInput_Updated,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,PropertyEditingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditingCommands.cs,CanDoCommand,Cyclomatic complexity of the method is 15
Complex Method,Sce.Atf.Applications,PropertyEditingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditingCommands.cs,DoCommand,Cyclomatic complexity of the method is 13
Complex Method,Sce.Atf.Applications,ClonedPropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,ClonedPropertyEditor,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Applications,RenameCommand,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\RenameCommand.cs,Rename,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Applications,SettingsService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsService.cs,RegisterUserSettings,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,WndProc,Cyclomatic complexity of the method is 23
Complex Method,Sce.Atf.Applications,SkinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,ConfirmCloseActiveDocument,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Applications,SkinStyleProperties,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,ProcessValueInfo,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,SkinService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,GetSetters,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,SkinService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,GetTypeFromString,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Applications,SkinService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,GetInstance,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Applications,SkinService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,ApplySkinToNonClientArea,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Applications,SkinService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,ApplyNewPropertyValues,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Applications,DefaultTypeConverter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,ConvertTo,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Applications,StandardLayoutCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardLayoutCommands.cs,DoCommand,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,Initialize,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,CanDoCommand,Cyclomatic complexity of the method is 13
Complex Method,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,DoCommand,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,DoReconcile,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,DoCheckIn,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,DoRevert,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications,QueryStringInput,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\QueryInputTree\QueryTextInput.cs,QueryStringInput,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Applications,QueryNumericalInput,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\QueryInputTree\QueryTextInput.cs,QueryNumericalInput,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Applications,SearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\SearchResultsListView.cs,OnMouseDown,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Applications.NetworkTargetServices,TargetEnumerationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TargetEnumerationService.cs,listView_ItemChecked,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Applications.NetworkTargetServices,TargetEnumerationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TargetEnumerationService.cs,UpdateTargetsView,Cyclomatic complexity of the method is 13
Complex Method,Sce.Atf.Applications.NetworkTargetServices,TargetEnumerationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TargetEnumerationService.cs,ListViewSelectTargets,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf,FindFileResolver,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\FindFileResolver.cs,Find,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf,FindFileResolver,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\FindFileResolver.cs,QueryUser,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,Intersects,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,RegisterImage,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf,WinFormsUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\WinFormsUtil.cs,CalculateDistance,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf,WinFormsUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\WinFormsUtil.cs,UpdateScrollbars,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf,WinFormsUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\WinFormsUtil.cs,ShellHookCallback,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls,AboutDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\AboutDialog.cs,AboutDialog,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,OnMouseMove,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,autoScrollTimer_Tick,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawItem,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawSubItem,Cyclomatic complexity of the method is 19
Complex Method,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawColumnHeader,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,Dispose,Cyclomatic complexity of the method is 15
Complex Method,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnMouseUp,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,DisableEditingControl,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,GroupingDataItem,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,path_SelectedIndexChanged,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,UpdateFolderListView,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls,ListViewItemComparer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,Compare,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls,NumericTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTextBox.cs,TryValidateText,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls,OverlayButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\OverlayButton.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls,SplitButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SplitButton.cs,OnPaint,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,RecalculateClientSize,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnMouseDown,Cyclomatic complexity of the method is 15
Complex Method,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,ProcessDialogKey,Cyclomatic complexity of the method is 28
Complex Method,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnKeyDown,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,Cyclomatic complexity of the method is 26
Complex Method,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,Pick,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls,TreeListControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListControl.cs,OnMouseDown,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls,TreeListControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListControl.cs,ResizeColumn,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls,TreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.Column.cs,ControlSelectedIndexChanged,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls,TreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.Column.cs,AddNode,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls,TreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.Column.cs,UpdateNode,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,WndProc,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,ListTreeViewDrawSubItem,Cyclomatic complexity of the method is 13
Complex Method,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawExtraneousStuff,Cyclomatic complexity of the method is 13
Complex Method,Sce.Atf.Controls,WindowLayoutManageDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\WindowLayoutManageDialog.cs,LayoutsAfterLabelEdit,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Adaptable,AnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotationAdapter.cs,control_ContextChanged,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Adaptable,AnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotationAdapter.cs,control_Paint,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,Pick,Cyclomatic complexity of the method is 17
Complex Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_Paint,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,OnMouseMove,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,OnBeginDrag,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,OnDragging,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,Cyclomatic complexity of the method is 16
Complex Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,ResizeAnnotation,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_KeyPress,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_PreviewKeyDown,Cyclomatic complexity of the method is 23
Complex Method,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,Cyclomatic complexity of the method is 20
Complex Method,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetHitDirection,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Adaptable,MouseTransformManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseTransformManipulator.cs,control_MouseMove,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,Pick,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,Draw,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,Copy,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,Insert,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,DomNode_ChildInserted,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,DomNode_ChildRemoved,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,Connect,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,CanMove,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,ValidTemplateReferences,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,WireStyleProvider<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\WireStyleProvider.cs,GetGroupPinChainData,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,GroupingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupingCommands.cs,CreateGroup,Cyclomatic complexity of the method is 19
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,GroupingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupingCommands.cs,CanDoCommand,Cyclomatic complexity of the method is 15
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,GroupingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupingCommands.cs,DoCommand,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,GroupingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupingCommands.cs,UpdateCommand,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,GroupingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupingCommands.cs,CreateGroup,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,GroupingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupingCommands.cs,CanDoTogglePinVisibility,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,PositioningFloatigPin,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,LayeringContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\LayeringContext.cs,CanInsert,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,LayeringContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\LayeringContext.cs,Insert,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,LayeringContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\LayeringContext.cs,GetCheckState,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitValidator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitValidator.cs,OnAttributeChanged,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitValidator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitValidator.cs,OnEnding,Cyclomatic complexity of the method is 16
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitValidator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitValidator.cs,UpdateWires,Cyclomatic complexity of the method is 15
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitValidator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitValidator.cs,ValidateEdges,Cyclomatic complexity of the method is 13
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitValidator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitValidator.cs,UpdateTemplateInfo,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,CircuitValidator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitValidator.cs,UpdateGroupPinConnectivity,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,ViewingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\ViewingContext.cs,GetBounds,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawEdgeUsingStyleInfo,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Pick,Cyclomatic complexity of the method is 32
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,Cyclomatic complexity of the method is 38
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawExpandedGroup,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,PickPin,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,PickSubItem,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetElementTypeInfo,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetElementSizeInfo,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetHierarchicalElementSizeInfo,Cyclomatic complexity of the method is 22
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetVisibleInputPins,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetVisibleOutputPins,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetWireBounds,Cyclomatic complexity of the method is 16
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphAdapter.cs,GetStyle,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphAdapter.cs,OnRender,Cyclomatic complexity of the method is 28
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphAdapter.cs,control_ContextChanged,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,DoMouseClick,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,ConnectWires,Cyclomatic complexity of the method is 16
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,GetFirstEdgeTo,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,GetFirstEdgeFrom,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphNodeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphNodeEditAdapter.cs,control_MouseMove,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphNodeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphNodeEditAdapter.cs,OnBeginDrag,Cyclomatic complexity of the method is 18
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphNodeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphNodeEditAdapter.cs,OnDragging,Cyclomatic complexity of the method is 17
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphNodeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphNodeEditAdapter.cs,EndDrag,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,Pick,Cyclomatic complexity of the method is 13
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,Pick,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Pick,Cyclomatic complexity of the method is 15
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,GraphAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\GraphAdapter.cs,control_ContextChanged,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,GraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\GraphEdgeEditAdapter.cs,OnDragging,Cyclomatic complexity of the method is 19
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,KeyboardIOGraphNavigator<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\KeyboardIOGraphNavigator.cs,PreviewKeyDown,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,Pick,Cyclomatic complexity of the method is 13
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,Pick,Cyclomatic complexity of the method is 17
Complex Method,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,Draw,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_HSL,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseDown,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseMove,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseUp,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,Cyclomatic complexity of the method is 16
Complex Method,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawMarker,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,OnKeyDown,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,ProcessCmdKey,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,Suggest,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,ProcessCmdKey,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnMouseMove,Cyclomatic complexity of the method is 18
Complex Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,Cyclomatic complexity of the method is 22
Complex Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,AdvancedOnMouseDown,Cyclomatic complexity of the method is 19
Complex Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,AdvancedOnMouseMove,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,AdvancedOnMouseUp,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,BasicOnMouseDown,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PerformAction,Cyclomatic complexity of the method is 30
Complex Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,ValidateCurveLimits,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,ScalePoints,Cyclomatic complexity of the method is 13
Complex Method,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,Translate,Cyclomatic complexity of the method is 29
Complex Method,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,ViewToModel,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.CurveEditing,NumberTextBox<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,TryParseT,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,Cyclomatic complexity of the method is 17
Complex Method,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,InputBoxValidating,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,UpdateInputBoxes,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,PickPoints,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,Pick,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,DrawCurve,Cyclomatic complexity of the method is 17
Complex Method,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,ComputeIndices,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.PropertyEditing,ArrayEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\ArrayEditingControl.cs,UpdateMoveButtons,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.PropertyEditing,ArrayEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\ArrayEditingControl.cs,SelectItemControl,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.PropertyEditing,CollectionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EmbeddedCollectionEditor.cs,ProcessPendingChanges,Cyclomatic complexity of the method is 18
Complex Method,Sce.Atf.Controls.PropertyEditing,CollectionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EmbeddedCollectionEditor.cs,UpdateMoveButtons,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.PropertyEditing,CollectionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EmbeddedCollectionEditor.cs,SelectItemControl,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.PropertyEditing,EnumUITypeEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EnumUITypeEditor.cs,EditValue,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.PropertyEditing,FileUriEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\FileUriEditor.cs,EditValue,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.PropertyEditing,FlagsUITypeEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\FlagsUITypeEditor.cs,EditValue,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,ProcessDialogKey,Cyclomatic complexity of the method is 32
Complex Method,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,MouseSelection,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnPaint,Cyclomatic complexity of the method is 16
Complex Method,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,LeaveEditModeWhenGrinDoesNotContainFocus,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,Pick,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnMouseMove,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnMouseUp,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.PropertyEditing,NestedCollectionEditorForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NestedCollectionEditorForm.cs,addButton_Click,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.PropertyEditing,PropertyEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,Bind,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.PropertyEditing,PropertyEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,SetPropertyFromTextBox,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.PropertyEditing,PropertyGrid,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,PropertyGrid,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.PropertyEditing,DescriptionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,SetDescription,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,Pick,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,OnMouseDown,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,OnMouseMove,Cyclomatic complexity of the method is 13
Complex Method,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,OnPaint,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,StartPropertyEdit,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.PropertyEditing,PropertyView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyView.cs,SortPropertiesFromPropertyNamesList,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.PropertyEditing,PropertyView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyView.cs,BuildProperty,Cyclomatic complexity of the method is 13
Complex Method,Sce.Atf.Controls.PropertyEditing,PropertyView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyView.cs,BuildCategories,Cyclomatic complexity of the method is 16
Complex Method,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,UpdateResults,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Dom,QueryPropertyValueAsNumberInput,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\QueryInputTree\DomNodeQueryRoot.cs,BuildPredicate,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,AnalyzeListeners,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Dom,TemplatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\TemplatingCommands.cs,CanDoCommand,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Dom,TemplatingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\TemplatingContext.cs,Insert,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,_MoveSelection,Cyclomatic complexity of the method is 32
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,GetMoveGhostInfo,Cyclomatic complexity of the method is 22
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,GetMoveTargets,Cyclomatic complexity of the method is 18
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,MoveSnapFilter,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dScaleManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScaleManipulator.cs,owner_MouseDownPicked,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,Resizer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScaleManipulator.cs,CreateGhostInfo,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dSelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSelectionManipulator.cs,Owner_MouseDownPicked,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dSelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSelectionManipulator.cs,Owner_KeyDown,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dSelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSelectionManipulator.cs,GetRangeOfEvents,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dSelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSelectionManipulator.cs,GetRangeOfGroups,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dSelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSelectionManipulator.cs,GetRangeOfTracks,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dSnapManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSnapManipulator.cs,GetSnapOffset,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,Pick,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,GetOwningTimeline,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,GetObjectsInOneDocument,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,OnMouseDown,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,OnMouseMove,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,GetBoundingRect,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,timelineDocument_ItemInserted,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawSubTimeline,Cyclomatic complexity of the method is 12
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawGroupsAndTracks,Cyclomatic complexity of the method is 18
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawGhosts,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PickSubTimeline,Cyclomatic complexity of the method is 30
Complex Method,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,LayoutSubTimeline,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Timelines,MoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\MoveManipulator.cs,GetMoveGhostInfo,Cyclomatic complexity of the method is 18
Complex Method,Sce.Atf.Controls.Timelines,MoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\MoveManipulator.cs,GetMoveTargets,Cyclomatic complexity of the method is 15
Complex Method,Sce.Atf.Controls.Timelines,MoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\MoveManipulator.cs,MoveSnapFilter,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Timelines,ScaleManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScaleManipulator.cs,owner_MouseDownPicked,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Timelines,Resizer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScaleManipulator.cs,CreateGhostInfo,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Timelines,SelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\SelectionManipulator.cs,Owner_MouseDownPicked,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines,SelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\SelectionManipulator.cs,Owner_KeyDown,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines,SelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\SelectionManipulator.cs,GetRangeOfEvents,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Timelines,SelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\SelectionManipulator.cs,GetRangeOfGroups,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines,SelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\SelectionManipulator.cs,GetRangeOfTracks,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines,SnapManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\SnapManipulator.cs,GetSnapOffset,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,GetObjectsInOneDocument,Cyclomatic complexity of the method is 11
Complex Method,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,OnMouseDown,Cyclomatic complexity of the method is 14
Complex Method,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,OnMouseMove,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,GetBoundingRect,Cyclomatic complexity of the method is 9
Complex Method,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,timelineDocument_ItemInserted,Cyclomatic complexity of the method is 8
Complex Method,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawSubTimeline,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawGroupsAndTracks,Cyclomatic complexity of the method is 18
Complex Method,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawGhosts,Cyclomatic complexity of the method is 10
Complex Method,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,PickSubTimeline,Cyclomatic complexity of the method is 29
Complex Method,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,LayoutSubTimeline,Cyclomatic complexity of the method is 12
Long Parameter List,Sce.Atf.Applications,WinFormsCommandServices,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\CommandService.cs,RegisterCommand,The method has 9 parameters. Parameters: commandService' commandTag' menuTag' groupTag' menuText' description' shortcut' imageName' client
Long Parameter List,Sce.Atf.Applications,WinFormsCommandServices,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\CommandService.cs,RegisterCommand,The method has 10 parameters. Parameters: commandService' commandTag' menuTag' groupTag' menuText' description' shortcut' imageName' visibility' client
Long Parameter List,Sce.Atf.Applications,ControlInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ControlInfo.cs,ControlInfo,The method has 5 parameters. Parameters: name' description' group' image' helpUrl
Long Parameter List,Sce.Atf.Applications,ControlHostServices,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\IControlHostService.cs,RegisterControl,The method has 6 parameters. Parameters: controlHostService' control' name' description' group' client
Long Parameter List,Sce.Atf.Applications,ControlHostServices,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\IControlHostService.cs,RegisterControl,The method has 8 parameters. Parameters: controlHostService' control' name' description' group' image' client' helpUrl
Long Parameter List,Sce.Atf.Applications,TreeListViewAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\TreeListViewAdapter.cs,AddChildrenToItemRecursively,The method has 7 parameters. Parameters: item' node' view' itemView' imageList' stateImageList' dictNodes
Long Parameter List,Sce.Atf.Applications,TreeListViewAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\TreeListViewAdapter.cs,CreateNodeForObject,The method has 5 parameters. Parameters: item' itemView' imageList' stateImageList' dictNodes
Long Parameter List,Sce.Atf.Applications,RenameCommand,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\RenameCommand.cs,Rename,The method has 5 parameters. Parameters: original' prefix' baseName' suffix' numericSuffix
Long Parameter List,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' x' y' cx' cy' uFlags
Long Parameter List,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,ExcludeClipRect,The method has 5 parameters. Parameters: hdc' nLeftRect' nTopRect' nRightRect' nBottomRect
Long Parameter List,Sce.Atf.Applications,SkinSetterAttributePropertyDescriptor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,SkinSetterAttributePropertyDescriptor,The method has 8 parameters. Parameters: domObj' name' attribute' category' description' isReadOnly' editor' typeConverter
Long Parameter List,Sce.Atf.Applications,FontDescriptor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,FontDescriptor,The method has 6 parameters. Parameters: domObj' name' category' description' editor' typeConverter
Long Parameter List,Sce.Atf.Applications.NetworkTargetServices,TargetDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TargetDialog.cs,TargetDialog,The method has 5 parameters. Parameters: targets' singleSelectionMode' defaultPortNumber' canEditPortNumber' protocols
Long Parameter List,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalGrid,The method has 5 parameters. Parameters: transform' graphRect' step' color' g
Long Parameter List,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalGrid,The method has 5 parameters. Parameters: transform' graphRect' step' color' g
Long Parameter List,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawVerticalGrid,The method has 5 parameters. Parameters: transform' graphRect' step' color' g
Long Parameter List,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawVerticalGrid,The method has 5 parameters. Parameters: transform' graphRect' step' color' g
Long Parameter List,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,LabelGrid,The method has 6 parameters. Parameters: transform' graphRect' step' font' textBrush' g
Long Parameter List,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalScaleGrid,The method has 5 parameters. Parameters: transform' graphRect' majorSpacing' linePen' g
Long Parameter List,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawVerticalScaleGrid,The method has 5 parameters. Parameters: transform' graphRect' majorSpacing' linePen' g
Long Parameter List,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalScale,The method has 9 parameters. Parameters: transform' graphRect' top' majorSpacing' minimumGraphStep' linePen' font' textBrush' g
Long Parameter List,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawVerticalScale,The method has 9 parameters. Parameters: transform' graphRect' left' majorSpacing' minimumGraphStep' linePen' font' textBrush' g
Long Parameter List,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawXYLabel,The method has 8 parameters. Parameters: x' y' position' backgroundBrush' linePen' font' textBrush' g
Long Parameter List,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,CreateLozengeImage,The method has 5 parameters. Parameters: color1' color2' outlinePen' shadowColor' cornerRadius
Long Parameter List,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawExpander,The method has 5 parameters. Parameters: x' y' expanded' g' p
Long Parameter List,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawExpander,The method has 7 parameters. Parameters: g' x' y' size' expanded' brush' pen
Long Parameter List,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawExpander,The method has 6 parameters. Parameters: x' y' size' pen' expanded' g
Long Parameter List,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawOfficeExpander,The method has 5 parameters. Parameters: x' y' pen' expanded' g
Long Parameter List,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawSortDirectionIndicator,The method has 7 parameters. Parameters: x' y' width' height' up' brush' g
Long Parameter List,Sce.Atf,MessageInterop,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Interop\MessageInterop.cs,MessageInterop,The method has 5 parameters. Parameters: hWnd' msg' wparam' lparam' result
Long Parameter List,Sce.Atf,MouseEventArgsInterop,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Interop\MouseEventArgsInterop.cs,MouseEventArgsInterop,The method has 5 parameters. Parameters: button' clicks' x' y' delta
Long Parameter List,Sce.Atf,MouseEventArgsInterop,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Interop\MouseEventArgsInterop.cs,MouseEventArgsInterop,The method has 5 parameters. Parameters: button' clicks' x' y' delta
Long Parameter List,Sce.Atf.Controls,AboutDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\AboutDialog.cs,AboutDialog,The method has 5 parameters. Parameters: title' url' clientControl' logo' credits
Long Parameter List,Sce.Atf.Controls,AboutDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\AboutDialog.cs,AboutDialog,The method has 6 parameters. Parameters: title' url' clientControl' logo' credits' addAtfInfo
Long Parameter List,Sce.Atf.Controls,HoverEventArgs<TObject;TPart>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\HoverEventArgs.cs,HoverEventArgs,The method has 5 parameters. Parameters: obj' part' subobj' subpart' adaptableControl
Long Parameter List,Sce.Atf.Controls,TreeItemRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawImage,The method has 5 parameters. Parameters: imageList' g' x' y' index
Long Parameter List,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawExtraneousStuff,The method has 5 parameters. Parameters: e' iOffset' expanderGradient' expanderPen' hierarchyLinePen
Long Parameter List,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawExpander,The method has 5 parameters. Parameters: gfx' bounds' expanderGradient' expanderPen' hierarchyLinePen
Long Parameter List,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawCollapser,The method has 6 parameters. Parameters: gfx' bounds' expanderGradient' expanderPen' hierarchyLinePen' bItemBelow
Long Parameter List,Sce.Atf.Controls,BalloonToolTipHelper,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\WindowLayoutNewDialog.cs,Show,The method has 5 parameters. Parameters: control' title' icon' format' args
Long Parameter List,Sce.Atf.Controls,BalloonToolTipHelper,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\WindowLayoutNewDialog.cs,Show,The method has 6 parameters. Parameters: control' point' title' icon' format' args
Long Parameter List,Sce.Atf.Controls,BalloonToolTipHelper,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\WindowLayoutNewDialog.cs,Show,The method has 6 parameters. Parameters: control' title' icon' timeoutMsec' format' args
Long Parameter List,Sce.Atf.Controls,BalloonToolTipHelper,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\WindowLayoutNewDialog.cs,Show,The method has 7 parameters. Parameters: control' point' title' icon' timeoutMsec' format' args
Long Parameter List,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The method has 5 parameters. Parameters: annotation' style' g' drawText' graphBound
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,Draw,The method has 7 parameters. Parameters: outputElement' outputPin' inputElement' inputPin' label' endPoint' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,DrawWire,The method has 6 parameters. Parameters: outputElement' outputPin' inputElement' inputPin' g' pen
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,DrawWire,The method has 5 parameters. Parameters: element' pin' p' fromOutput' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,DrawWire,The method has 6 parameters. Parameters: g' pen' x1' y1' x2' y2
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,Connect,The method has 5 parameters. Parameters: fromNode' fromRoute' toNode' toRoute' existingEdge
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The method has 7 parameters. Parameters: outputElement' outputPin' inputElement' inputPin' label' endPoint' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawPartialEdge,The method has 8 parameters. Parameters: outputElement' outputPin' inputElement' inputPin' label' startPoint' endPoint' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Pick,The method has 5 parameters. Parameters: nodes' edges' priorityEdge' p' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,PickEdge,The method has 5 parameters. Parameters: edge' p' g' xOffset' yOffset
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,PickPin,The method has 6 parameters. Parameters: element' inputSide' pinX' elementY' info' p
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,PickSubItem,The method has 5 parameters. Parameters: pickedElement' p' g' pickedSubInput' pickedSubOutput
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawWire,The method has 6 parameters. Parameters: outputElement' outputPin' inputElement' inputPin' g' pen
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawWire,The method has 5 parameters. Parameters: element' pin' p' fromOutput' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawWire,The method has 8 parameters. Parameters: g' pen' x1' y1' x2' y2' strokeWidth' strokeStyle
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,Draw,The method has 7 parameters. Parameters: fromNode' fromRoute' toNode' toRoute' label' endPoint' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,DrawEdgeSpline,The method has 7 parameters. Parameters: p1' p2' p3' p4' d' brush' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,GetTransitionPoints,The method has 5 parameters. Parameters: edge' p1' p2' p3' p4
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,GetTransitionPoints,The method has 6 parameters. Parameters: p1' normal1' p4' normal2' p2' p3
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,DrawArrow,The method has 5 parameters. Parameters: g' brush' p' dx' dy
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,DrawGroupPinNodeFakeEdge,The method has 5 parameters. Parameters: grpPin' grpPinPos' inputSide' style' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Draw,The method has 7 parameters. Parameters: fromNode' fromRoute' toNode' toRoute' label' endPoint' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,GetEdgeGeometry,The method has 6 parameters. Parameters: edge' route' startPoint' endPoint' circle' moreThan180
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,GraphRenderer<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\GraphRenderer.cs,Draw,The method has 7 parameters. Parameters: fromNode' fromRoute' toNode' toRoute' label' endPoint' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,Draw,The method has 7 parameters. Parameters: fromNode' fromRoute' toNode' toRoute' label' endPoint' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawEdgeSpline,The method has 7 parameters. Parameters: p1' p2' p3' p4' d' pen' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetTransitionPoints,The method has 5 parameters. Parameters: edge' p1' p2' p3' p4
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetTransitionPoints,The method has 6 parameters. Parameters: p1' normal1' p4' normal2' p2' p3
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawArrow,The method has 5 parameters. Parameters: g' pen' p' dx' dy
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,Draw,The method has 7 parameters. Parameters: fromNode' fromRoute' toNode' toRoute' label' endPoint' g
Long Parameter List,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,GetEdgeGeometry,The method has 6 parameters. Parameters: edge' route' startPoint' endPoint' circle' moreThan180
Long Parameter List,Sce.Atf.Controls.CurveEditing,CurveEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditor.cs,CurveEditor,The method has 5 parameters. Parameters: commandService' controlHostService' contextRegistry' curveEditingControl' controlInfo
Long Parameter List,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,PickPoints,The method has 5 parameters. Parameters: curves' pickRect' points' regions' singlePick
Long Parameter List,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,Pick,The method has 5 parameters. Parameters: curves' pickRect' points' regions' singlePick
Long Parameter List,Sce.Atf.Controls.PropertyEditing,ItemControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\ArrayEditingControl.cs,ItemControl,The method has 6 parameters. Parameters: index' item' singletonMode' indexColumnWidth' context' parentPropertyGridView
Long Parameter List,Sce.Atf.Controls.PropertyEditing,ItemControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\ArrayEditingControl.cs,Init,The method has 5 parameters. Parameters: index' item' singletonMode' indexColumnWidth' context
Long Parameter List,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,FillRowBackground,The method has 5 parameters. Parameters: g' defaultBrush' rowRect' row' selected
Long Parameter List,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,DrawValue,The method has 6 parameters. Parameters: g' defaultBrush' p' valueRect' row' selected
Long Parameter List,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,DrawColumnHeader,The method has 8 parameters. Parameters: g' p' x' y' rowHeight' xPadding' yPadding' menuBar
Long Parameter List,Sce.Atf.Controls.PropertyEditing,NestedCollectionEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NestedCollectionEditor.cs,CreateForm,The method has 5 parameters. Parameters: context' selectionContext' value' getCollectionItemCreators' getItemInfo
Long Parameter List,Sce.Atf.Controls.PropertyEditing,NestedCollectionEditorForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NestedCollectionEditorForm.cs,NestedCollectionEditorForm,The method has 5 parameters. Parameters: context' selectionContext' value' getCollectionItemCreators' getItemInfo
Long Parameter List,Sce.Atf.Controls.PropertyEditing,PropertyEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,DrawProperty,The method has 6 parameters. Parameters: descriptor' context' bounds' font' brush' g
Long Parameter List,Sce.Atf.Controls.PropertyEditing,PropertyEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,MsgWaitForMultipleObjects,The method has 5 parameters. Parameters: nCount' pHandles' bWaitAll' dwMilliseconds' dwWakeMask
Long Parameter List,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawCategoryRow,The method has 6 parameters. Parameters: category' expanded' x' y' width' g
Long Parameter List,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawPropertyRow,The method has 6 parameters. Parameters: property' x' y' width' middle' g
Long Parameter List,Sce.Atf.Controls.PropertyEditing,CustomizeAttribute,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyView.cs,CustomizeAttribute,The method has 9 parameters. Parameters: propertyName' columnWidth' disableSort' disableDragging' disableResize' disableEditing' hideDisplayName' horizontalEditorOffset' nameHasWholeRow
Long Parameter List,Sce.Atf.Controls.Timelines.Direct2D,Resizer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScaleManipulator.cs,Resize,The method has 6 parameters. Parameters: worldDrag' worldToView' viewStart' viewEnd' worldStart' worldEnd
Long Parameter List,Sce.Atf.Controls.Timelines.Direct2D,Resizer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScaleManipulator.cs,ScalePoint,The method has 5 parameters. Parameters: x' initialMin' initialMax' finalMin' finalMax
Long Parameter List,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,Print,The method has 7 parameters. Parameters: timeline' selection' activeGroup' activeTrack' transform' clientRectangle' marginBounds
Long Parameter List,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,Draw,The method has 6 parameters. Parameters: timeline' selection' activeGroup' activeTrack' transform' clientRectangle
Long Parameter List,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawSubTimeline,The method has 6 parameters. Parameters: path' selection' activeGroup' activeTrack' layout' c
Long Parameter List,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawSubTimeline,The method has 9 parameters. Parameters: path' timeline' subTimeline' expandedTimeline' selection' activeGroup' activeTrack' layout' c
Long Parameter List,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawMarkers,The method has 6 parameters. Parameters: path' timeline' selection' c' layout' clipBounds
Long Parameter List,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawGroupsAndTracks,The method has 7 parameters. Parameters: path' timeline' expandedTimeline' selection' c' layout' clipBounds
Long Parameter List,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PickSubTimeline,The method has 5 parameters. Parameters: path' pickRect' c' layout' result
Long Parameter List,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PickSubTimeline,The method has 6 parameters. Parameters: root' timeline' pickRect' c' layout' result
Long Parameter List,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,LayoutSubTimeline,The method has 6 parameters. Parameters: path' timeline' documentTop' expandedTimeline' c' result
Long Parameter List,Sce.Atf.Controls.Timelines,Resizer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScaleManipulator.cs,Resize,The method has 6 parameters. Parameters: worldDrag' worldToView' viewStart' viewEnd' worldStart' worldEnd
Long Parameter List,Sce.Atf.Controls.Timelines,Resizer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScaleManipulator.cs,ScalePoint,The method has 5 parameters. Parameters: x' initialMin' initialMax' finalMin' finalMax
Long Parameter List,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,Print,The method has 8 parameters. Parameters: timeline' selection' activeGroup' activeTrack' transform' clientRectangle' marginBounds' g
Long Parameter List,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,Draw,The method has 7 parameters. Parameters: timeline' selection' activeGroup' activeTrack' transform' clientRectangle' g
Long Parameter List,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawSubTimeline,The method has 6 parameters. Parameters: path' selection' activeGroup' activeTrack' layout' c
Long Parameter List,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawSubTimeline,The method has 9 parameters. Parameters: path' timeline' subTimeline' expandedTimeline' selection' activeGroup' activeTrack' layout' c
Long Parameter List,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawMarkers,The method has 6 parameters. Parameters: path' timeline' selection' c' layout' clipBounds
Long Parameter List,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawGroupsAndTracks,The method has 7 parameters. Parameters: path' timeline' expandedTimeline' selection' c' layout' clipBounds
Long Parameter List,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawGhosts,The method has 5 parameters. Parameters: ghosts' type' transform' clientRectangle' g
Long Parameter List,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,Pick,The method has 5 parameters. Parameters: timeline' pickRect' transform' clientRectangle' g
Long Parameter List,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,PickSubTimeline,The method has 5 parameters. Parameters: path' pickRect' c' layout' result
Long Parameter List,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,PickSubTimeline,The method has 6 parameters. Parameters: root' timeline' pickRect' c' layout' result
Long Parameter List,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,LayoutSubTimeline,The method has 6 parameters. Parameters: path' timeline' documentTop' expandedTimeline' c' result
Long Identifier,Sce.Atf.Applications,TreeListViewEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\TreeListViewEditor.cs,,The length of the parameter m_actualContextMenuCommandProviders is 35.
Long Identifier,Sce.Atf.Applications.NetworkTargetServices,TargetEnumerationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TargetEnumerationService.cs,,The length of the parameter m_actualContextMenuCommandProviders is 35.
Long Identifier,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,,The length of the parameter DrawSelectionRectangleUsingGdi is 30.
Long Identifier,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,,The length of the parameter m_columnHeaderTextColorDisabled is 31.
Long Identifier,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,,The length of the parameter m_columnHeaderCheckMarkColorDisabled is 36.
Long Identifier,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,,The length of the parameter m_columnHeaderTextBrushDisabled is 31.
Long Identifier,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,,The length of the parameter m_columnHeaderCheckMarkBrushDisabled is 36.
Long Identifier,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,,The length of the parameter currencyManager_PositionChanged is 31.
Long Identifier,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,,The length of the parameter viewOptionsToolStripDropDownButton is 34.
Long Identifier,Sce.Atf.Controls,TreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.Column.cs,,The length of the parameter m_virtualListAvoidSelectionRecursion is 36.
Long Identifier,Sce.Atf.Controls,TreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.Column.cs,,The length of the parameter m_doingRecursiveCheckStateChange is 32.
Long Identifier,Sce.Atf.Controls,TreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.Column.cs,,The length of the parameter m_virtualListOldSelectedIndices is 31.
Long Identifier,Sce.Atf.Controls,TreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.Column.cs,,The length of the parameter ExceptionTextOnlyAvailableOnVirtualList is 39.
Long Identifier,Sce.Atf.Controls,TreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.Column.cs,,The length of the parameter ExceptionTextSortingNotAllowedInVirtualList is 43.
Long Identifier,Sce.Atf.Controls,TreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.Column.cs,,The length of the parameter ExceptionTextAddingNotAllowedInVirtualList is 42.
Long Identifier,Sce.Atf.Controls,TreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.Column.cs,,The length of the parameter ExceptionTextRemovingNotAllowedInVirtualList is 44.
Long Identifier,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,ListTreeViewDrawSubItem,The length of the parameter extraneousFauxNonClientGridLinesRect is 36.
Long Identifier,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,,The length of the parameter m_modifiableHighlightTextColor is 30.
Long Identifier,Sce.Atf.Controls.Adaptable,MouseTransformManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseTransformManipulator.cs,,The length of the parameter s_defaultConstrainModifierKeys is 30.
Long Identifier,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,,The length of the parameter m_maxCollapsedGroupPinNameLength is 32.
Long Identifier,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,,The length of the parameter m_truncatedPinNameSubstringLength is 33.
Long Identifier,Sce.Atf.Controls.Adaptable.Graphs,KeyboardIOGraphNavigator<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\KeyboardIOGraphNavigator.cs,PreviewKeyDown,The length of the parameter pushOldSelectionIfSelectionChanges is 34.
Long Identifier,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,,The length of the parameter s_columnHeaderMouseDownProperty is 31.
Long Identifier,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,,The length of the parameter s_columnHeaderMouseDownPropertyIndex is 36.
Long Identifier,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,,The length of the parameter m_propertyBackgroundHighlightBrush is 34.
Long Statement,Sce.Atf.Applications,CommandInfos,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\CommandInfos.cs,GetCommandControls,The length of the statement  "                throw new InvalidOperationException("CommandInfo was registered to an ICommandService' but not specifically to a WinFormsCommandService."); " is 139.
Long Statement,Sce.Atf.Applications,CommandInfos,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\CommandInfos.cs,GetCommandControls,The length of the statement  "                throw new InvalidOperationException("WinForms CommandService to which CommandInfo thinks it's registered has no record of it."); " is 128.
Long Statement,Sce.Atf.Applications,WinFormsCommandServices,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\CommandService.cs,RegisterCommand,The length of the statement  "            CommandInfo info = new CommandInfo(commandTag' menuTag' groupTag' menuText' description' KeysInterop.ToAtf(shortcut)' imageName); " is 129.
Long Statement,Sce.Atf.Applications,WinFormsCommandServices,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\CommandService.cs,RegisterCommand,The length of the statement  "            CommandInfo info = new CommandInfo(commandTag' menuTag' groupTag' menuText' description' KeysInterop.ToAtf(shortcut)' imageName' visibility); " is 141.
Long Statement,Sce.Atf.Applications,FileDialogService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FileDialogService.cs,SaveFileName,The length of the statement  "            // Remove the path portion' if any' just as in ATF 3.5 and earlier. http://tracker.ship.scea.com/jira/browse/WWSATF-1406 " is 120.
Long Statement,Sce.Atf.Applications,FileDialogService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FileDialogService.cs,ConfirmFileClose,The length of the statement  "            dialog.YesButtonText = "&Save".Localize("The '&' is optional and means that Alt+S is the keyboard shortcut on this button"); " is 124.
Long Statement,Sce.Atf.Applications,FileDialogService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FileDialogService.cs,ConfirmFileClose,The length of the statement  "            dialog.NoButtonText = "&Discard".Localize("The '&' is optional and means that Alt+D is the keyboard shortcut on this button"); " is 126.
Long Statement,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,CloseApplication,The length of the statement  "            //Not all apps have documents' so an error from the DiscardAll command is okay (consider checking this on a per app basis) " is 122.
Long Statement,Sce.Atf.Applications,FilteredTreeView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\FilteredTreeView.cs,IsFullyExpaned,The length of the statement  "            return m_exemptedSet.Contains(parent) || !m_treeView.GetChildren(parent).Any(child => !IsMatched(child) && !m_exemptedSet.Contains(child));             " is 139.
Long Statement,Sce.Atf.Applications,HistoryLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\HistoryLister.cs,Initialize,The length of the statement  "                        "The '<' and '>' indicate that this is not a command name' but is the state of the document before any commands have been run.")) " is 129.
Long Statement,Sce.Atf.Applications,LayerLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\LayerLister.cs,contextRegistry_ActiveContextChanged,The length of the statement  "                TreeControl.Text = "Copy items from the document and paste them here to create layers whose visibility can be controlled by clicking on a check box.".Localize(); " is 161.
Long Statement,Sce.Atf.Applications,PrototypeLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\PrototypeLister.cs,contextRegistry_ActiveContextChanged,The length of the statement  "                "Copy items from the document and paste them here to create prototypes that can be dragged and dropped onto a canvas.".Localize() " is 129.
Long Statement,Sce.Atf.Applications,MainForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\MainForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainForm)); " is 128.
Long Statement,Sce.Atf.Applications,MenuInfos,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\MenuInfos.cs,GetMenuItem,The length of the statement  "                throw new InvalidTransactionException("MenuInfo was registered to an ICommandService' but not specifically to Sce.Atf.Applications.CommandService."); " is 149.
Long Statement,Sce.Atf.Applications,MenuInfos,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\MenuInfos.cs,GetMenuItem,The length of the statement  "                throw new InvalidTransactionException("The MenuInfo specified has no ToolStripMenuItem associated with it' which should have been set up in CommandService.RegisterMenuInfo()"); " is 176.
Long Statement,Sce.Atf.Applications,MenuInfos,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\MenuInfos.cs,GetToolStrip,The length of the statement  "                throw new InvalidTransactionException("MenuInfo was registered to an ICommandService' but not specifically to Sce.Atf.Applications.CommandService."); " is 149.
Long Statement,Sce.Atf.Applications,MenuInfos,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\MenuInfos.cs,GetToolStrip,The length of the statement  "                throw new InvalidTransactionException("The MenuInfo specified has no ToolStrip associated with it' which should have been set up in (or before) CommandService.RegisterMenuInfo()"); " is 180.
Long Statement,Sce.Atf.Applications,MenuInfos,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\MenuInfos.cs,SetToolStrip,The length of the statement  "                throw new NullReferenceException("MenuInfo has already been registered to a CommandService' and it is not the one specified."); " is 127.
Long Statement,Sce.Atf.Applications,PropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,Initialize,The length of the statement  "                    "Initial docking group for duplicated property editors\r\nCenter' CenterPermanent' and Hidden are not accepted".Localize()); " is 124.
Long Statement,Sce.Atf.Applications,PropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,OnPropertyGridMouseUp,The length of the statement  "                    .Where(x => !IsStandardEditCommand(x)); // filter out standard edit commands as they are not applicable for property editing' " is 125.
Long Statement,Sce.Atf.Applications,ClonedPropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,OnPropertyGridMouseUp,The length of the statement  "                        .Where(x => !m_propertyEditor.IsStandardEditCommand(x)); // filter out standard edit commands as they are not applicable for property editing' " is 142.
Long Statement,Sce.Atf.Applications,RenameCommandDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\RenameCommandDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RenameCommandDialog)); " is 139.
Long Statement,Sce.Atf.Applications,DomNodePropertySearchService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SearchAndReplace\DomNodePropertySearchService.cs,DoLayout,The length of the statement  "                    resultsBounds.Height = m_rootControl.Height - (m_rootControl.Margin.Top + m_rootControl.Margin.Bottom + scb.Height + 2); " is 120.
Long Statement,Sce.Atf.Applications,SettingsDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SettingsDialog)); " is 134.
Long Statement,Sce.Atf.Applications,SettingsLoadSaveDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsLoadSaveDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SettingsLoadSaveDialog)); " is 142.
Long Statement,Sce.Atf.Applications,SkinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,Init,The length of the statement  "            m_PropertyGrid = new PropertyGrid(PropertyGridMode.PropertySorting | PropertyGridMode.DisplayDescriptions | PropertyGridMode.HideResetAllButton); " is 145.
Long Statement,Sce.Atf.Applications,SkinService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,GetSetterType,The length of the statement  "                    throw new TypeLoadException(string.Format("{0} doesn't exist in this application. Skin cannot load."' styleTargetTypeString)); " is 126.
Long Statement,Sce.Atf.Applications,SkinService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,GetInstance,The length of the statement  "                    throw new InvalidOperationException("Setter '" + setter.PropertyName + "' doesn't have a valueInfo' nor listInfo' specified.  Must have one (and only one) of either."); " is 168.
Long Statement,Sce.Atf.Applications,UnhandledExceptionDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\UnhandledExceptionDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UnhandledExceptionDialog)); " is 144.
Long Statement,Sce.Atf.Applications,CheckInForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\CheckInForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CheckInForm)); " is 131.
Long Statement,Sce.Atf.Applications,ReconcileForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\ReconcileForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ReconcileForm)); " is 133.
Long Statement,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,CanDoCommand,The length of the statement  "            foreach (IResource anyResource in SourceControlContext.Resources) // only check when SourceControlContext has resources to take care " is 132.
Long Statement,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,UpdateCommand,The length of the statement  "                    commandState.Text = SourceControlService.Enabled ? "Disable Source Control".Localize() : "Enable Source Control".Localize(); " is 124.
Long Statement,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,UpdateCommand,The length of the statement  "                    m_sourceControlEnableCmd.GetButton().Image = SourceControlService.Enabled ? m_sourceControlEnableImage: m_sourceControlDisableImage; " is 132.
Long Statement,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,documentService_DocumentSaved,The length of the statement  "                DialogResult result = MessageBox.Show(GetDialogOwner()' message' "Add document to Version Control".Localize()' MessageBoxButtons.YesNo); " is 136.
Long Statement,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,OnDocumentDirtyChanged,The length of the statement  "            if (SourceControlService == null || document == null || !document.Dirty || CheckoutOnEditBehavior == CheckoutOnEditBehavior.Never) " is 130.
Long Statement,Sce.Atf.Applications.NetworkTargetServices,TargetDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TargetDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TargetDialog)); " is 132.
Long Statement,Sce.Atf.Applications.NetworkTargetServices,TargetEditDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TargetEditDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TargetEditDialog)); " is 136.
Long Statement,Sce.Atf.Applications.WebServices,FeedbackForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\WebServices\FeedbackForm.cs,ValidateData,The length of the statement  "                MessageBox.Show(this' "Assembly mapping attribute not found.\nCannot proceed"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 132.
Long Statement,Sce.Atf.Applications.WebServices,FeedbackForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\WebServices\FeedbackForm.cs,ValidateData,The length of the statement  "                if (!Regex.IsMatch(m_txtEmail.Text.Trim()' @"^([\w-\.]+)@((\[[0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}\.)|(([\w-]+\.)+))([a-zA-Z]{2'4}|[0-9]{1'3})(\]?)$")) " is 148.
Long Statement,Sce.Atf.Applications.WebServices,FeedbackForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\WebServices\FeedbackForm.cs,DoSubmit,The length of the statement  "                        m_bugService.submitBug(m_mappingName' m_userTextBox.Text' m_passwordTextBox.Text' m_titleTextBox.Text' desc' m_cmbPriority.SelectedIndex); " is 138.
Long Statement,Sce.Atf.Applications.WebServices,FeedbackForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\WebServices\FeedbackForm.cs,DoSubmit,The length of the statement  "                MessageBox.Show("There were errors while submitting this bug\n" + ex.Message'  "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 132.
Long Statement,Sce.Atf.Applications.WebServices,FeedbackForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\WebServices\FeedbackForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FeedbackForm)); " is 132.
Long Statement,Sce.Atf.Applications.WebServices,VersionUpdateService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\WebServices\VersionUpdateService.cs,Initialize,The length of the statement  "            ProjectMappingAttribute mapAttr = (ProjectMappingAttribute)Attribute.GetCustomAttribute(assembly' typeof(ProjectMappingAttribute)); " is 131.
Long Statement,Sce.Atf.Applications.WebServices,VersionUpdateService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\WebServices\VersionUpdateService.cs,RegisterSettings,The length of the statement  "                            new BoundPropertyDescriptor(this' () => CheckForUpdateAtStartup' "Check for update at startup".Localize()' null' "Check for product update at startup".Localize())' " is 163.
Long Statement,Sce.Atf.Applications.WebServices,VersionUpdateService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\WebServices\VersionUpdateService.cs,updateCheck_CheckComplete,The length of the statement  "                    MessageBox.Show(m_dialogOwner' "This software is up to date.".Localize()' "Updater".Localize()' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 146.
Long Statement,Sce.Atf,FormatEnumerator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\DragDrop\DragDropDataObject.cs,Next,The length of the statement  "                    throw new ArgumentException("The number of elements in the return array is less than the number of elements requested"); " is 120.
Long Statement,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawLozenge,The length of the statement  "                new Rectangle(bounds.Right - cornerRadius' bounds.Bottom - cornerRadius' cornerRadius + ShadowSize' cornerRadius + ShadowSize)' " is 127.
Long Statement,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawLozenge,The length of the statement  "                new Rectangle(bounds.Right - cornerRadius' bounds.Top + cornerRadius' cornerRadius + ShadowSize' bounds.Height - 2 * cornerRadius)' " is 131.
Long Statement,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawLozenge,The length of the statement  "                new Rectangle(bounds.Left + cornerRadius' bounds.Bottom - cornerRadius' bounds.Width - 2 * cornerRadius' cornerRadius + ShadowSize)' " is 132.
Long Statement,Sce.Atf,DragEventArgsInterop,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Interop\DragEventArgsInterop.cs,ToAtf,The length of the statement  "            return new AtfDragEventArgs(arg.Data' arg.KeyState' arg.X' arg.Y' (AtfDragDropEffects)arg.AllowedEffect' (AtfDragDropEffects)arg.Effect); " is 137.
Long Statement,Sce.Atf,DragEventArgsInterop,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Interop\DragEventArgsInterop.cs,ToWf,The length of the statement  "            return new WfDragEventArgs((IDataObject)arg.Data' arg.KeyState' arg.X' arg.Y' (WfDragDropEffects)arg.AllowedEffect' (WfDragDropEffects)arg.Effect); " is 147.
Long Statement,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,GetImage,The length of the statement  "                throw new ArgumentNullException("Image id is null. Call Sce.Atf.WinForms.Resources.Register() to force registration of image resources."); " is 138.
Long Statement,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,GetImage13,The length of the statement  "                throw new ArgumentNullException("Image id is null. Call Sce.Atf.WinForms.Resources.Register() to force registration of image resources."); " is 138.
Long Statement,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,GetImage16,The length of the statement  "                throw new ArgumentNullException("Image id is null. Call Sce.Atf.WinForms.Resources.Register() to force registration of image resources."); " is 138.
Long Statement,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,GetImage24,The length of the statement  "                throw new ArgumentNullException("Image id is null. Call Sce.Atf.WinForms.Resources.Register() to force registration of image resources."); " is 138.
Long Statement,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,GetImage32,The length of the statement  "                throw new ArgumentNullException("Image id is null. Call Sce.Atf.WinForms.Resources.Register() to force registration of image resources."); " is 138.
Long Statement,Sce.Atf.Controls,AboutDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\AboutDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AboutDialog)); " is 131.
Long Statement,Sce.Atf.Controls,AboutSysInfoDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\AboutSysInfoDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AboutSysInfoDialog)); " is 138.
Long Statement,Sce.Atf.Controls,BoolInputControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\BoolInputControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BoolInputControl)); " is 136.
Long Statement,Sce.Atf.Controls,ConfirmationDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConfirmationDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ConfirmationDialog)); " is 138.
Long Statement,Sce.Atf.Controls,CustomizeKeyboardDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CustomizeKeyboardDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CustomizeKeyboardDialog)); " is 143.
Long Statement,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawColumnHeader,The length of the statement  "                    e.Graphics.DrawString(m_tickSymbol' m_tickFont' Enabled ? m_columnHeaderCheckMarkBrush : m_columnHeaderCheckMarkBrushDisabled' pt); " is 131.
Long Statement,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,DataBoundListView_ColumnClick,The length of the statement  "                    m_sortDirection = m_sortDirection == ListSortDirection.Ascending ? ListSortDirection.Descending : ListSortDirection.Ascending; " is 126.
Long Statement,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,SetTextBoxFromProperty,The length of the statement  "            string propertyText = PropertyUtils.GetPropertyText(m_currencyManager.List[m_currentRow]' m_propertyDescriptors[m_currentCol]); " is 127.
Long Statement,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,SetComboBoxFromProperty,The length of the statement  "            string propertyText = PropertyUtils.GetPropertyText(m_currencyManager.List[m_currentRow]' m_propertyDescriptors[m_currentCol]); " is 127.
Long Statement,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,SetPropertyFromComboBox,The length of the statement  "                PropertyUtils.SetProperty(m_currencyManager.List[m_currentRow]' m_propertyDescriptors[m_currentCol]' m_comboBox.SelectedItem); " is 126.
Long Statement,Sce.Atf.Controls,ErrorDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ErrorDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ErrorDialog)); " is 131.
Long Statement,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FilteredFileDialogBase)); " is 142.
Long Statement,Sce.Atf.Controls,FindFileDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FindFileDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FindFileDialog)); " is 134.
Long Statement,Sce.Atf.Controls,FindFileWithSuggestionDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FindFileWithSuggestionDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FindFileWithSuggestionDialog)); " is 148.
Long Statement,Sce.Atf.Controls,HoverLabel,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\HoverLabel.cs,SetBounds,The length of the statement  "                Size = new Size((int)Math.Ceiling(labelSize.Width) + 2 * TextMargin' (int)Math.Ceiling(labelSize.Height) + 2 * TextMargin); " is 123.
Long Statement,Sce.Atf.Controls,ProgressDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ProgressDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ProgressDialog)); " is 134.
Long Statement,Sce.Atf.Controls,TabbedControlSelectorDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TabbedControlSelectorDialog.cs,TabbedControlSelectorDialog_KeyDown,The length of the statement  "                    SetActiveListBox((m_activeListBox == focusedPaneListBox) ? eListBoxType.UnfocusedPaneListBox : eListBoxType.FocusedPaneListBox); " is 128.
Long Statement,Sce.Atf.Controls,TabbedControlSelectorDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TabbedControlSelectorDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TabbedControlSelectorDialog)); " is 147.
Long Statement,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnKeyDown,The length of the statement  "            // If somebody else took care of this key press already (ie: be listening for a KeyDown event)' we don't want to do anything more " is 129.
Long Statement,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The length of the statement  "                        m_itemRenderer.DrawImage(m_stateImageList' g' info.StateImageLeft' rowCenterY - m_stateImageList.ImageSize.Height / 2' node.StateImageIndex); " is 141.
Long Statement,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The length of the statement  "                        m_itemRenderer.DrawImage(m_imageList' g' info.ImageLeft' rowCenterY - m_imageList.ImageSize.Height / 2' node.ImageIndex); " is 121.
Long Statement,Sce.Atf.Controls,WindowLayoutManageDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\WindowLayoutManageDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(WindowLayoutManageDialog)); " is 144.
Long Statement,Sce.Atf.Controls,WindowLayoutNewDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\WindowLayoutNewDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(WindowLayoutNewDialog)); " is 141.
Long Statement,Sce.Atf.Controls.Adaptable,CoordinateAxisAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\CoordinateAxisAdapter.cs,control_Paint,The length of the statement  "                    transform' canvasRect' false' m_verticalTickSpacing' 0' m_theme.OutlinePen' m_theme.Font' m_theme.TextBrush' e.Graphics); " is 121.
Long Statement,Sce.Atf.Controls.Adaptable,CoordinateAxisAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\CoordinateAxisAdapter.cs,control_Paint,The length of the statement  "                    transform' canvasRect' true' m_horizontalTickSpacing' 0' m_theme.OutlinePen' m_theme.Font' m_theme.TextBrush' e.Graphics); " is 122.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The length of the statement  "            //g.DrawLine(bounds.X' bounds.Y + Margin.Top-1' bounds.X + bounds.Width' bounds.Y + Margin.Top-1' ControlPaint.Dark(backColor)' borderThickness); " is 145.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The length of the statement  "                    var textLayout = D2dFactory.CreateTextLayout(annotation.Text' m_theme.TextFormat' contentBounds.Width' contentBounds.Height); " is 125.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The length of the statement  "                    var hitTestMetrics = textEditor.TextLayout.HitTestTextRange(textEditor.SelectionStart' textEditor.SelectionLength' 0' 0); " is 121.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The length of the statement  "                        var trackBounds = new RectangleF(contentBounds.Right - ScrollBarMargin - ScrollBarWidth' contentBounds.Y' ScrollBarWidth' contentBounds.Height); " is 144.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The length of the statement  "                    var thumbBounds = new RectangleF(contentBounds.Right - ScrollBarMargin - ScrollBarWidth' contentBounds.Y + vMin' ScrollBarWidth' vMax - vMin); " is 142.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,ResizeAnnotation,The length of the statement  "                    newBounds = new Rectangle(m_startBounds.X' m_startBounds.Y' m_startBounds.Width + delta.X' m_startBounds.Height + delta.Y); " is 123.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,ResizeAnnotation,The length of the statement  "                    newBounds = new Rectangle(currentPoint.X' currentPoint.Y' m_startBounds.Width - delta.X' m_startBounds.Height - delta.Y); " is 121.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,ResizeAnnotation,The length of the statement  "                    newBounds = new Rectangle(m_startBounds.X' currentPoint.Y' m_startBounds.Width + delta.X' m_startBounds.Height - delta.Y); " is 122.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,ResizeAnnotation,The length of the statement  "                    newBounds = new Rectangle(currentPoint.X' m_startBounds.Y' m_startBounds.Width - delta.X' m_startBounds.Height + delta.Y); " is 122.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_KeyPress,The length of the statement  "                    annotationEditor.SetSelection(TextEditor.SelectionMode.AbsoluteLeading' annotationEditor.CaretAbsolutePosition + 2' false' false); " is 130.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_PreviewKeyDown,The length of the statement  "                    annotationEditor.SetSelection(ctrlPressed ? TextEditor.SelectionMode.LeftWord : TextEditor.SelectionMode.Left' 1' shiftPressed' false); " is 135.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_PreviewKeyDown,The length of the statement  "                    annotationEditor.SetSelection(ctrlPressed ? TextEditor.SelectionMode.RightWord : TextEditor.SelectionMode.Right' 1' shiftPressed' false); " is 137.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_PreviewKeyDown,The length of the statement  "                    annotationEditor.SetSelection(ctrlPressed ? TextEditor.SelectionMode.First : TextEditor.SelectionMode.Home' 0' shiftPressed' false); " is 132.
Long Statement,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_PreviewKeyDown,The length of the statement  "                    annotationEditor.SetSelection(ctrlPressed ? TextEditor.SelectionMode.Last : TextEditor.SelectionMode.End' 0' shiftPressed' false); " is 130.
Long Statement,Sce.Atf.Controls.Adaptable,HoverAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\HoverAdapter.cs,hoverTimer_Tick,The length of the statement  "                var hoverArgs = new HoverEventArgs<object' object>(m_hoverItem' m_hoverPart' m_hoverSubItem' m_hoverSubPart' AdaptedControl); " is 125.
Long Statement,Sce.Atf.Controls.Adaptable,TransformAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\TransformAdapter.cs,SetTransform,The length of the statement  "                PointF translation = EnforceConstraints ? this.ConstrainTranslation(new PointF(xTranslation' yTranslation)) : new PointF(xTranslation' yTranslation); " is 149.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,CircuitControlRegistry,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitControlRegistry.cs,GetDomNode,The length of the statement  "            return (from ctrol in m_circuitNodeControls where ctrol.Value.Second.Control == control select ctrol.Key).FirstOrDefault(); " is 123.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,DomNode_AttributeChanged,The length of the statement  "                            CircuitUtil.GetDomNodeName(parent)' CircuitUtil.GetDomNodeName(e.DomNode)' e.AttributeInfo.Name' e.OldValue' e.NewValue); " is 121.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,Move,The length of the statement  "            CircuitUtil.GetSubGraph(oldContainer' movingItems' moduleSet' internalConnections' incomingConnections' outgoingConnections); " is 125.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,Resize,The length of the statement  "                // The label height is added back in by D2dCircuitRenderer.GetBounds(). http://tracker.ship.scea.com/jira/browse/WWSATF-1504 " is 124.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,IsSelfContainedOrIntersected,The length of the statement  "            containerLocalBound.Height -= GetTitleHeight(control);// no subcontent offset if element is moved out of the current container " is 126.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,WireStyleProvider<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\WireStyleProvider.cs,GetGroupPinChainData,The length of the statement  "                        Point p0 = circuitRender.GetPinPositionCenterY(firstGroupPin.InternalElement.Cast<TElement>()' firstGroupPin.InternalPinIndex' false' g); " is 137.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,WireStyleProvider<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\WireStyleProvider.cs,GetGroupPinChainData,The length of the statement  "                    Point p0 = circuitRender.GetPinPositionCenterY(connection.OutputElement.Cast<TElement>()' connection.OutputPin.Index' false' g); " is 128.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,WireStyleProvider<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\WireStyleProvider.cs,GetGroupPinChainData,The length of the statement  "                        Point pn = circuitRender.GetPinPositionCenterY(lastGroupPin.InternalElement.Cast<TElement>()' lastGroupPin.InternalPinIndex' true' g); " is 134.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,WireStyleProvider<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\WireStyleProvider.cs,GetGroupPinChainData,The length of the statement  "                    Point pn = circuitRender.GetPinPositionCenterY(connection.InputElement.Cast<TElement>()' connection.InputPin.Index' true' g); " is 125.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupingCommands.cs,CreateGroup,The length of the statement  "            CircuitUtil.GetSubGraph(graphContainer' elementsToGroup' modules' internalConnections' externalConnections' externalConnections); " is 129.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupingCommands.cs,DoCommand,The length of the statement  "                    transactionContext.DoTransaction(() => UngroupGroups(circuitEditingContext' selectionContext)' "Ungroup".Localize("a verb")); " is 125.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,OnDragging,The length of the statement  "                        m_draggingGroupPins[i].Bounds = new Rectangle(m_draggingGroupPins[i].Bounds.Location.X'  Constrain(m_originalPinY[i] + offset.Y)' " is 129.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,MeasureFakePins,The length of the statement  "                        //        fakePinNode.DesiredLocation = new Point(offset.X' topY + offset.Y + fakePinNode.GroupPin.Index * (PinNodeHeight + PinNodeMargin)); " is 140.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,MeasureFakePins,The length of the statement  "                                int delta = pin.DesiredLocation.Y - lastY - (CircuitGroupPinInfo.FloatingPinNodeHeight + CircuitGroupPinInfo.FloatingPinNodeMargin); " is 132.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,MeasureFakePins,The length of the statement  "                    //          SizeF nameSize = g.MeasureString(fakePinNode.SubGraphPin.Name' m_subGraphRenderer.GetElementFont(fakePinNode' g)); " is 126.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,AdjustLayout,The length of the statement  "                        floatingPins[j].DesiredLocation = new Point(floatingPins[j].DesiredLocation.X' Math.Max(floatingPins[j].DesiredLocation.Y + delta' minY)); " is 138.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,PositioningFloatigPin,The length of the statement  "                if (againstpin.Bounds.Location.Y + CircuitGroupPinInfo.FloatingPinNodeHeight + CircuitGroupPinInfo.FloatingPinNodeMargin < minY) " is 128.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,PositioningFloatigPin,The length of the statement  "                        if (againstPinNodes[j+1].Bounds.Location.Y - againstPinNodes[j ].Bounds.Location.Y >= 2 * (CircuitGroupPinInfo.FloatingPinNodeHeight + CircuitGroupPinInfo.FloatingPinNodeMargin)) " is 178.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,PositioningFloatigPin,The length of the statement  "                            int pinNewY = Constrain(againstPinNodes[j].Bounds.Location.Y + CircuitGroupPinInfo.FloatingPinNodeHeight + CircuitGroupPinInfo.FloatingPinNodeMargin); " is 150.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,PositioningFloatigPin,The length of the statement  "                            floatingPin.Bounds = new Rectangle(floatingPin.Bounds.Location.X' pinNewY' floatingPin.Bounds.Width' floatingPin.Bounds.Height); " is 128.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,PositioningFloatigPin,The length of the statement  "                int pinNewY = Constrain(topStaticPin.Bounds.Location.Y - (CircuitGroupPinInfo.FloatingPinNodeHeight + CircuitGroupPinInfo.FloatingPinNodeMargin)); " is 146.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,PositioningFloatigPin,The length of the statement  "                floatingPin.Bounds = new Rectangle(floatingPin.Bounds.Location.X' Constrain(floatingPin.DesiredLocation.Y)' floatingPin.Bounds.Width' floatingPin.Bounds.Height); " is 161.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,PinOverlap,The length of the statement  "            var freePinInterval = new Pair<int' int>(freePin.DesiredLocation.Y - CircuitGroupPinInfo.FloatingPinNodeMargin' freePin.DesiredLocation.Y + CircuitGroupPinInfo.FloatingPinNodeHeight + CircuitGroupPinInfo.FloatingPinNodeMargin); " is 227.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,PinOverlap,The length of the statement  "            var pinInterval = new Pair<int' int>(againstPin.Bounds.Location.Y - CircuitGroupPinInfo.FloatingPinNodeMargin' againstPin.Bounds.Location.Y + CircuitGroupPinInfo.FloatingPinNodeHeight + CircuitGroupPinInfo.FloatingPinNodeMargin); " is 229.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,CircuitValidator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitValidator.cs,AddNode,The length of the statement  "                // Disable automatically combining attribute setting operations' as operations such as grouping pin index changes better run its course    " is 135.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The length of the statement  "            if (RectangleSelectsWires && style == DiagramDrawingStyle.LastSelected) // last selected is not well defined in multi-edge selection    " is 132.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Pick,The length of the statement  "            //if (pickedElement != null) // if an element is picked' further check if its label or expander is picked. They take priority over wire picking. " is 144.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Pick,The length of the statement  "            //          new Rectangle((int)labelBounds.Left' (int)labelBounds.Top' (int)labelBounds.Width' (int)labelBounds.Height)' " is 120.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Pick,The length of the statement  "            //            var border = new RectangleF(bounds.Left - m_theme.PickTolerance' bounds.Y' 2 * m_theme.PickTolerance' bounds.Height); " is 131.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Pick,The length of the statement  "            //                    border = new RectangleF(bounds.Left' bounds.Y - m_theme.PickTolerance' bounds.Width' 2 * m_theme.PickTolerance); " is 134.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Pick,The length of the statement  "            //    // a rough check here probably should suffice most of the time: the bounds of the wire should not be enclosed by the picked node " is 134.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The length of the statement  "                    g.DrawBitmap(bitMap' new RectangleF(p.X + info.Interior.X' p.Y + info.Interior.Y' info.Interior.Width' info.Interior.Height)' 1' D2dBitmapInterpolationMode.Linear); " is 164.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,PickPin,The length of the statement  "                (element.Is<ICircuitGroupType<TElement' TWire' TPin>>() && element.Cast<ICircuitGroupType<TElement' TWire' TPin>>().Expanded)) " is 126.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,PickSubItem,The length of the statement  "                var group = current.Cast<ICircuitGroupType<TElement' TWire' TPin>>(); // the stack top must be a group if we can go down " is 120.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,GetDraggingEdge,The length of the statement  "            edge.StartPoint = edge.FromRoute == null ? Matrix3x2F.TransformPoint(invXform' m_edgeDragPoint) : m_draggingContext.FromRoutePos; " is 129.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,GetDraggingEdge,The length of the statement  "            edge.EndPoint = edge.ToRoute == null ? Matrix3x2F.TransformPoint(invXform' m_edgeDragPoint) : m_draggingContext.ToRoutePos; " is 123.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,MakeConnection,The length of the statement  "                DraggingContext.EditableGraph.Connect(dragFromNode' dragFromRoute' dragToNode' dragToRoute' m_draggingContext.ExistingEdge); " is 124.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,CanConnectTo,The length of the statement  "            m_draggingContext.DragToNodeHitPath = m_mousePick.HitPath; // update DragToNodeHitPath for DraggingContext.EditableGraph " is 120.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,CanConnectFrom,The length of the statement  "            m_draggingContext.DragFromNodeHitPath = m_mousePick.HitPath;// update DragFromNodeHitPath for DraggingContext.EditableGraph " is 123.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,DrawFloatingGroupPin,The length of the statement  "                    D2dUtil.DrawPin((int)(p.X + CircuitGroupPinInfo.FloatingPinBoxWidth)' (int)p.Y + Theme.PinSize / 2' false' true' m_pinBrush' g); " is 128.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,DrawFloatingGroupPin,The length of the statement  "                RectangleF bounds = new RectangleF(p.X' p.Y' CircuitGroupPinInfo.FloatingPinBoxWidth' CircuitGroupPinInfo.FloatingPinBoxHeight); " is 128.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,DrawFloatingGroupPin,The length of the statement  "                RectangleF bounds = new RectangleF(p.X' p.Y' CircuitGroupPinInfo.FloatingPinBoxWidth' CircuitGroupPinInfo.FloatingPinBoxHeight); " is 128.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,DrawFloatingGroupPin,The length of the statement  "                g.DrawRectangle(new RectangleF(p.X' p.Y' CircuitGroupPinInfo.FloatingPinBoxWidth' CircuitGroupPinInfo.FloatingPinBoxHeight)' m_subGraphPinNodePen); " is 147.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,DrawFloatingGroupPin,The length of the statement  "                g.DrawRectangle(new RectangleF(p.X' p.Y' CircuitGroupPinInfo.FloatingPinBoxWidth' CircuitGroupPinInfo.FloatingPinBoxHeight)' Theme.HotBrush); " is 141.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,GetBounds,The length of the statement  "            var result = new RectangleF(p.X' p.Y' CircuitGroupPinInfo.FloatingPinBoxWidth' CircuitGroupPinInfo.FloatingPinBoxHeight); " is 121.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,Pick,The length of the statement  "                RectangleF bounds = new RectangleF(grpPos.X' grpPos.Y' CircuitGroupPinInfo.FloatingPinBoxWidth' CircuitGroupPinInfo.FloatingPinBoxHeight); " is 138.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,Pick,The length of the statement  "                RectangleF labelBounds = new RectangleF(bounds.Left' bounds.Bottom + Theme.PinMargin' (int)nameSize.Width' Theme.RowSpacing); " is 125.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,Pick,The length of the statement  "                RectangleF bounds = new RectangleF(grpPos.X' grpPos.Y' CircuitGroupPinInfo.FloatingPinBoxWidth' CircuitGroupPinInfo.FloatingPinBoxHeight); " is 138.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,Pick,The length of the statement  "                 RectangleF labelBounds = new RectangleF(bounds.Right - (int)nameSize.Width' bounds.Bottom + Theme.PinMargin' (int)nameSize.Width' Theme.RowSpacing); " is 148.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,GetGroupPinLocation,The length of the statement  "                 return new PointF(VisibleWorldBounds.X + CircuitGroupPinInfo.FloatingPinBoxWidth + Theme.PinMargin' grpPin.Bounds.Location.Y); " is 126.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,GetGroupPinLocation,The length of the statement  "                 return new PointF(VisibleWorldBounds.X + VisibleWorldBounds.Width - Theme.PinMargin - 2 * CircuitGroupPinInfo.FloatingPinBoxWidth - 16' grpPin.Bounds.Location.Y); " is 162.
Long Statement,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Draw,The length of the statement  "                //                g.DrawLine(Pens.LightGray' new PointF(c.Center.X' c.Center.Y)' new PointF(startPoint.X' startPoint.Y)); " is 121.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ColorBox)); " is 128.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The length of the statement  "                        LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);  " is 185.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The length of the statement  "                        LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);  " is 186.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The length of the statement  "                        LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);  " is 186.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The length of the statement  "                        LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);  " is 189.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The length of the statement  "                        LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);  " is 191.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The length of the statement  "                        LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);  " is 191.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Hue,The length of the statement  "                LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);  " is 161.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Saturation,The length of the statement  "                LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);  " is 163.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Luminance,The length of the statement  "                LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);  " is 163.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The length of the statement  "                LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);  " is 157.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The length of the statement  "                LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);  " is 157.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The length of the statement  "                LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);  " is 159.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The length of the statement  "                    _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4)))); " is 136.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The length of the statement  "                    _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4)))); " is 136.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The length of the statement  "                    _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B)); " is 136.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_Hue.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 141.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_Sat.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 141.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_Bright.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 144.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_Red.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 141.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_Green.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 143.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_Blue.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 142.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_Cyan.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 142.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_Magenta.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 145.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_Yellow.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 144.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_K.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 139.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_Hex.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 141.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_lbl_Hue_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 11.25F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 152.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_lbl_Saturation_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 158.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_lbl_Bright_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_lbl_Cyan_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 152.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_lbl_Magenta_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_lbl_Yellow_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 154.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_txt_A.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0))); " is 139.
Long Statement,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The length of the statement  "            this.m_ctrl_BigBox.RGB = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))); " is 123.
Long Statement,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(VerticalColorSlider)); " is 139.
Long Statement,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The length of the statement  "                return;                                               //    since the last time it was drawn and we don't HAVE to redraw " is 120.
Long Statement,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,RegisterSettings,The length of the statement  "                        "Lock origin".Localize("This is the name of a command. Lock is a verb. Origin is like the origin of a graph.")' null' null)); " is 125.
Long Statement,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnMouseDown,The length of the statement  "            //    && (m_visibleCurveCount == 1 || !OnlyEditSelectedCurves || m_editSet.Count == 0 || m_editSet.Contains(c))).Reverse(); " is 123.
Long Statement,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The length of the statement  "            m_editModeButtons[0].ToolTipText = "Scale selected control points   " + KeysUtil.KeysToString(CurveCanvas.ShortcutKeys.Scale' true); " is 132.
Long Statement,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The length of the statement  "            m_editModeButtons[1].ToolTipText = "Move selected control points   " + KeysUtil.KeysToString(CurveCanvas.ShortcutKeys.Move' true); " is 130.
Long Statement,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,PickPoints,The length of the statement  "                    else if (curve.CurveInterpolation != InterpolationTypes.Linear && cpt.EditorData.SelectedRegion != PointSelectionRegions.None) " is 126.
Long Statement,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,PickPoints,The length of the statement  "                        bool pickTanOut = cpt.TangentOutType != CurveTangentTypes.Stepped && cpt.TangentOutType != CurveTangentTypes.SteppedNext; " is 121.
Long Statement,Sce.Atf.Applications.Controls,PerformanceMonitorControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PerformanceMonitorControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PerformanceMonitorControl)); " is 145.
Long Statement,Sce.Atf.Controls.PropertyEditing,ArrayEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\ArrayEditingControl.cs,UpdateMoveButtons,The length of the statement  "                    m_moveDownButton.ToolTipText = string.Format("Can't move down because last element selected".Localize()' selectedCount); " is 120.
Long Statement,Sce.Atf.Controls.PropertyEditing,ArrayEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\ArrayEditingControl.cs,RebuildItemControls,The length of the statement  "                    "Failed to create item controls' probably because there were not enough Window handles available. Consider using a different editor for collections of this size and nature.\r\n\r\n" " is 181.
Long Statement,Sce.Atf.Controls.PropertyEditing,CollectionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EmbeddedCollectionEditor.cs,ProcessPendingChanges,The length of the statement  "                    //m_toolStrip.Enabled = false; //This sets the focus to the next control in the tab group' which changes the property selection " is 127.
Long Statement,Sce.Atf.Controls.PropertyEditing,CollectionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EmbeddedCollectionEditor.cs,ProcessPendingChanges,The length of the statement  "                        "Failed to create item controls' probably because there were not enough Window handles available. Consider using a different editor for collections of this size and nature.\r\n\r\n" " is 181.
Long Statement,Sce.Atf.Controls.PropertyEditing,GridControlShowHidePropertiesDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridControlShowHidePropertiesDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GridControlShowHidePropertiesDialog)); " is 155.
Long Statement,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,GetPropertySortOrder,The length of the statement  "                        result = (columnInfo.NextSortDirection == ListSortDirection.Descending) ? ListSortDirection.Ascending : ListSortDirection.Descending; " is 133.
Long Statement,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnPaint,The length of the statement  "                        ControlPaint.DrawBorder3D(g' left' 0' rowHeight' rowHeight' Border3DStyle.Etched' Border3DSide.Bottom | Border3DSide.Right); " is 124.
Long Statement,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnPaint,The length of the statement  "                    DrawColumnHeader(g' s_columnHeaderMouseDownProperty' s_mouseMove.X - draggingClickOffsetX' 0' rowHeight' xPadding' yPadding' m_columnHeaderAlphaBrush); " is 151.
Long Statement,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnMouseMove,The length of the statement  "                    // calc how far the mouse moved to make sure the mouse has moved a bit so we dont kick off a drag event on tiny movements " is 121.
Long Statement,Sce.Atf.Controls.PropertyEditing,NestedCollectionEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NestedCollectionEditor.cs,EditValue,The length of the statement  "                IWindowsFormsEditorService editorService = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService)); " is 127.
Long Statement,Sce.Atf.Controls.PropertyEditing,NestedCollectionEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NestedCollectionEditor.cs,EditValue,The length of the statement  "                    NestedCollectionEditorForm collEditorFrm = CreateForm(context' m_selectionContext' value' e.GetCollectionItemCreators' e.GetItemInfo); " is 134.
Long Statement,Sce.Atf.Controls.PropertyEditing,NestedCollectionEditorForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NestedCollectionEditorForm.cs,UpdateAvailaibleTypes,The length of the statement  "                foreach (Pair<Type' NestedCollectionEditor.CreateCollectionObject> typeCreator in GetCollectionItemCreators(objectPath)) " is 120.
Long Statement,Sce.Atf.Controls.PropertyEditing,NestedCollectionEditorForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NestedCollectionEditorForm.cs,UpdateAvailaibleTypes,The length of the statement  "                    m_availaibleTypeCreators.Add(new Pair<Type' NestedCollectionEditor.CreateCollectionObject>(typeCreator.First' typeCreator.Second)); " is 131.
Long Statement,Sce.Atf.Controls.PropertyEditing,NestedCollectionEditorForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NestedCollectionEditorForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(NestedCollectionEditorForm)); " is 146.
Long Statement,Sce.Atf.Controls.PropertyEditing,DescriptionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,SetDescription,The length of the statement  "                    int splitter_distance = (int)Math.Max(m_propertyGrid.m_splitContainer.Height - sz.Height' 0.5f * m_propertyGrid.m_splitContainer.Height); " is 137.
Long Statement,Sce.Atf.Controls.PropertyEditing,DescriptionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,SetDescription,The length of the statement  "                    splitter_distance = Math.Min(splitter_distance' m_propertyGrid.m_splitContainer.Height - m_propertyGrid.m_splitContainer.Panel2MinSize); " is 136.
Long Statement,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawPropertyRow,The length of the statement  "                GdiUtil.DrawExpander(x + expanderX' y + (RowHeight - ExpanderSize) / 2' property.ChildrenExpanded' g' PropertyExpanderPen); " is 123.
Long Statement,Sce.Atf.Controls.PropertyEditing,PropertyView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyView.cs,MultiLevelSort,The length of the statement  "                result = string.Compare(pathA[pathA.Count - depth - 1].Descriptor.Name' pathB[pathB.Count - depth - 1].Descriptor.Name); " is 120.
Long Statement,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,UpdateResults,The length of the statement  "                    throw new InvalidOperationException("The class implementing IQueryableContext' which produced the results passed in' did not create results of type DomNodeQueryMatch.  Consider use DomNodeQueryable to create your search results."); " is 231.
Long Statement,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,GetDomNodeProperties,The length of the statement  "            ICustomTypeDescriptor iCustomTypeDescriptor = node.GetAdapter(typeof(CustomTypeDescriptorNodeAdapter)) as ICustomTypeDescriptor; " is 128.
Long Statement,Sce.Atf.Dom,TemplatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\TemplatingCommands.cs,AddExternalTemplateFolder,The length of the statement  "                // well' keep simple to use absolute uri for now' so we don't need to update relative uris when the SaveAs document to a different directory " is 140.
Long Statement,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,GetCanvasSize,The length of the statement  "            int canvasWidth = (int)Math.Ceiling(bounds.Right) - offset.X + Width / 2; // give user another half window's worth of canvas " is 124.
Long Statement,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,Draw,The length of the statement  "                m_graphics.DrawLine(new PointF(TrackIndent' m_timeScaleHeight)' new PointF(TrackIndent' c.ClientRectangle.Height)' m_headerLineBrush); " is 134.
Long Statement,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,Draw,The length of the statement  "                m_graphics.DrawLine(new PointF(HeaderWidth' m_timeScaleHeight)' new PointF(HeaderWidth' c.ClientRectangle.Height)' m_headerLineBrush); " is 134.
Long Statement,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawEventOverlay,The length of the statement  "            m_graphics.FillRectangle(new RectangleF(HeaderWidth' 0' c.ClientRectangle.Width' m_timeScaleHeight)' m_generalSolidColorBrush); " is 127.
Long Statement,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The length of the statement  "                        c.Graphics.DrawString(GetXPositionString(bounds.Left + m_keySize / 2' c)' c.Font' SystemBrushes.WindowText' bounds.Right + 16' bounds.Y); " is 137.
Long Statement,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,GetCanvasSize,The length of the statement  "            int canvasWidth = (int)Math.Ceiling(bounds.Right) - offset.X + Width / 2; // give user another half window's worth of canvas " is 124.
Complex Conditional,Sce.Atf.Applications,AutomationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\AutomationService.cs,CheckUnexpectedErrors,The conditional expression  "frm.Text == "Error" ||                      frm.Text == "Unexpected Error" ||                      frm.Text == "Microsoft .NET Framework" ||                      frm.GetType() == typeof(ThreadExceptionDialog)"  is complex.
Complex Conditional,Sce.Atf.Applications,ImageThumbnailResolver,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ImageThumbnailResolver.cs,Resolve,The conditional expression  "extension.EndsWith("jpg"' StringComparison.InvariantCultureIgnoreCase) ||                  extension.EndsWith("bmp"' StringComparison.InvariantCultureIgnoreCase) ||                  extension.EndsWith("png"' StringComparison.InvariantCultureIgnoreCase) ||                  extension.EndsWith("tif"' StringComparison.InvariantCultureIgnoreCase) ||                  extension.EndsWith("gif"' StringComparison.InvariantCultureIgnoreCase)"  is complex.
Complex Conditional,Sce.Atf.Applications,FilteredTreeControlEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\FilteredTreeControlEditor.cs,TreeControl_NodeExpandedChanging,The conditional expression  "m_updating || !m_searching || e.Node.Tag == null                   || treeView == null"  is complex.
Complex Conditional,Sce.Atf.Applications,FilteredTreeControlEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\FilteredTreeControlEditor.cs,TreeControl_NodeExpandedChanged,The conditional expression  "m_updating || !m_searching || e.Node.Tag == null                   || treeView == null"  is complex.
Complex Conditional,Sce.Atf.Applications,PropertyEditingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditingCommands.cs,CanPaste,The conditional expression  "srcDescriptor == null                  || destDescriptor == null                                 || destDescriptor.IsReadOnly                  || srcDescriptor.PropertyType != destDescriptor.PropertyType                  || (destDescriptor is ChildAttributeCollectionPropertyDescriptor)                  || (destDescriptor is ChildPropertyDescriptor)"  is complex.
Complex Conditional,Sce.Atf.Applications,DefaultTypeConverter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,CanConvertTo,The conditional expression  "destinationType == typeof(Double) ||                      destinationType == typeof(Single) ||                      destinationType.IsEnum ||                      destinationType == typeof(int) ||                      destinationType == typeof(byte) ||                      destinationType == typeof(bool) ||                      destinationType == typeof(Color) ||                      destinationType == typeof(string)"  is complex.
Complex Conditional,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,OnDocumentDirtyChanged,The conditional expression  "SourceControlService == null || document == null || !document.Dirty || CheckoutOnEditBehavior == CheckoutOnEditBehavior.Never"  is complex.
Complex Conditional,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,DoCheckIn,The conditional expression  "SourceControlService == null || m_contextRegistry == null ||                  SourceControlContext == null || !SourceControlService.AllowCheckIn"  is complex.
Complex Conditional,Sce.Atf,DragDropDataObject,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\DragDrop\DragDropDataObject.cs,GetCompatibleFormat,The conditional expression  "typeof(Stream).IsAssignableFrom(type) ||                  IsFormatEqual(format' DataFormats.Html) ||                  IsFormatEqual(format' DataFormats.Text) ||                  IsFormatEqual(format' DataFormats.Rtf) ||                  IsFormatEqual(format' DataFormats.OemText) ||                  IsFormatEqual(format' DataFormats.UnicodeText) ||                  IsFormatEqual(format' "ApplicationTrust") ||                  IsFormatEqual(format' DataFormats.FileDrop) ||                  IsFormatEqual(format' "FileName") ||                  IsFormatEqual(format' "FileNameW")"  is complex.
Complex Conditional,Sce.Atf,OleConverter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\DragDrop\OleConverter.cs,ConvertHandle,The conditional expression  "format.Equals(DataFormats.Text)                          || format.Equals(DataFormats.Rtf)                          || format.Equals(DataFormats.OemText)                          || format.Equals("FileName")"  is complex.
Complex Conditional,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,OnMouseMove,The conditional expression  "m_isDragging &&                  !m_dragOverThreshold &&                  (xDelta > m_dragThreshold || yDelta > m_dragThreshold)"  is complex.
Complex Conditional,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,GetListItem,The conditional expression  "m_cache != null && i >= 0 && i < m_cache.Length && m_cache[i] != null"  is complex.
Complex Conditional,Sce.Atf.Controls,NumericMatrixControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericMatrixControl.cs,Define,The conditional expression  "numericType != typeof(Int64) &&                  numericType != typeof(UInt64) &&                  numericType != typeof(Int32) &&                  numericType != typeof(UInt32) &&                  numericType != typeof(Int16) &&                  numericType != typeof(UInt16) &&                  numericType != typeof(SByte) &&                  numericType != typeof(Byte) &&                  numericType != typeof(Single) &&                  numericType != typeof(Double)"  is complex.
Complex Conditional,Sce.Atf.Controls,NumericTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTextBox.cs,NumericTextBox,The conditional expression  "numericType != typeof(Int64) &&                  numericType != typeof(UInt64) &&                  numericType != typeof(Int32) &&                  numericType != typeof(UInt32) &&                  numericType != typeof(Int16) &&                  numericType != typeof(UInt16) &&                  numericType != typeof(SByte) &&                  numericType != typeof(Byte) &&                  numericType != typeof(Single) &&                  numericType != typeof(Double)"  is complex.
Complex Conditional,Sce.Atf.Controls,NumericTupleControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTupleControl.cs,Define,The conditional expression  "numericType != typeof(Int64) &&                  numericType != typeof(UInt64) &&                  numericType != typeof(Int32) &&                  numericType != typeof(UInt32) &&                  numericType != typeof(Int16) &&                  numericType != typeof(UInt16) &&                  numericType != typeof(SByte) &&                  numericType != typeof(Byte) &&                  numericType != typeof(Single) &&                  numericType != typeof(Double)"  is complex.
Complex Conditional,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnMouseUp,The conditional expression  "LabelEditModeContains(LabelEditModes.EditOnClick) &&                          m_lastMouseDownWasDoubleClick == false &&                          e.Button == MouseButtons.Left &&                          hitRecord.Node == m_leftClickedSelectedNode &&                          hitRecord.Type == HitType.Label &&                          hitRecord.Node.AllowLabelEdit"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,OnBeginDrag,The conditional expression  "m_layoutContext != null && e.Button == MouseButtons.Left &&                     ((Control.ModifierKeys & Keys.Alt) == 0) && !AdaptedControl.Capture"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_KeyPress,The conditional expression  "(char.IsLowSurrogate(charBackOne) && char.IsHighSurrogate(charBackTwo)) ||                                          (charBackOne == '\n' && charBackTwo == '\r')"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable,HoverAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\HoverAdapter.cs,control_MouseMove,The conditional expression  "hitRecord != null &&                      (hitRecord.Item != m_hoverItem || hitRecord.Part != m_hoverPart ||                      hitRecord.SubItem != m_hoverSubItem || hitRecord.SubPart != m_hoverSubPart)"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,CanConnect,The conditional expression  "fromNode == null ||                  outputPin == null ||                  toNode == null ||                  inputPin == null ||                  outputPin.TypeName != inputPin.TypeName"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphAdapter.cs,OnRender,The conditional expression  "drawStyle == DiagramDrawingStyle.Selected ||                                  drawStyle == DiagramDrawingStyle.LastSelected ||                                  (drawStyle == DiagramDrawingStyle.Hot && m_selectionContext != null &&                                      m_selectionContext.SelectionContains(node))"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,MakeConnection,The conditional expression  "dragToNode != null && dragToRoute != null &&                  dragFromNode != null && dragFromRoute != null"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,DoMouseClick,The conditional expression  "m_draggingContext.DragToNode != null && m_draggingContext.DragToRoute != null &&                          m_draggingContext.DragFromNode != null && m_draggingContext.DragFromRoute != null"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphEdgeEditAdapter.cs,DoMouseClick,The conditional expression  "m_draggingContext.ExistingEdge == null || // this is a new edge                              m_draggingContext.ExistingEdge.ToNode != m_draggingContext.DragToNode ||                              m_draggingContext.ExistingEdge.ToRoute != m_draggingContext.DragToRoute ||                              m_draggingContext.ExistingEdge.FromNode != m_draggingContext.DragFromNode ||                              m_draggingContext.ExistingEdge.FromRoute != m_draggingContext.DragFromRoute"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphNodeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphNodeEditAdapter.cs,AllowDragging,The conditional expression  "c1 && c2 && c3 && c4"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphNodeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphNodeEditAdapter.cs,OnBeginDrag,The conditional expression  "m_layoutContext != null && e.Button == MouseButtons.Left &&                     ((Control.ModifierKeys & Keys.Alt) == 0) &&                     !AdaptedControl.Capture"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable.Graphs,GraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\GraphEdgeEditAdapter.cs,OnMouseUp,The conditional expression  "m_existingEdge == null || // this is a new edge                          m_existingEdge.ToNode != m_dragToNode ||                          m_existingEdge.ToRoute != m_dragToRoute ||                          m_existingEdge.FromNode != m_dragFromNode ||                          m_existingEdge.FromRoute != m_dragFromRoute"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable.Graphs,GraphEdgeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\GraphEdgeEditAdapter.cs,OnMouseUp,The conditional expression  "m_dragToNode != null &&                                  m_dragToRoute != null &&                                  m_dragFromNode != null &&                                  m_dragFromRoute != null"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable.Graphs,GraphNodeEditAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\GraphNodeEditAdapter.cs,OnMouseMove,The conditional expression  "m_mousePick.Node != null &&                          m_mousePick.Edge == null &&                          m_mousePick.FromRoute == null &&                          m_mousePick.ToRoute == null"  is complex.
Complex Conditional,Sce.Atf.Controls.Adaptable.Graphs,KeyboardGraphNavigator<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\KeyboardGraphNavigator.cs,control_PreviewKeyDown,The conditional expression  "keyData == Keys.Up ||                  keyData == Keys.Right ||                  keyData == Keys.Down ||                  keyData == Keys.Left"  is complex.
Complex Conditional,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,IsCompoundStatement,The conditional expression  "statement.StartsWith("if ") ||                  statement.StartsWith("while ") ||                  statement.StartsWith("for ") ||                  statement.StartsWith("try ") ||                  statement.StartsWith("with ") ||                  statement.StartsWith("def ") ||                  statement.StartsWith("class ")"  is complex.
Complex Conditional,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,OnMouseMove,The conditional expression  "m_startDrag && !m_dragOverThreshold                  && (Math.Abs(dx) > m_dragThreshold || Math.Abs(dy) > m_dragThreshold)"  is complex.
Complex Conditional,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,AdvancedOnMouseDown,The conditional expression  "(e.Button == MouseButtons.Middle && Control.ModifierKeys == Keys.None)                     || (e.Button == MouseButtons.Right && Control.ModifierKeys == Keys.Control)"  is complex.
Complex Conditional,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,AdvancedOnMouseDown,The conditional expression  "(e.Button == MouseButtons.Middle && Control.ModifierKeys == Keys.Shift)                     || (e.Button == MouseButtons.Right && Control.ModifierKeys == (Keys.Control | Keys.Shift))"  is complex.
Complex Conditional,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,AdvancedOnMouseDown,The conditional expression  "(e.Button == MouseButtons.Middle && Control.ModifierKeys == Keys.Alt)                   || (e.Button == MouseButtons.Right && Control.ModifierKeys == (Keys.Control | Keys.Alt))"  is complex.
Complex Conditional,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,AdvancedOnMouseUp,The conditional expression  "(e.Button == MouseButtons.Middle && Control.ModifierKeys == Keys.None)                  || (e.Button == MouseButtons.Right && Control.ModifierKeys == Keys.Control)"  is complex.
Complex Conditional,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,AdvancedOnMouseUp,The conditional expression  "(m_editSet.Count > 0 || m_selection.Count > 0 || m_visibleCurveCount == 1) && EditMode == EditModes.InsertPoint"  is complex.
Complex Conditional,Sce.Atf.Controls.CurveEditing,NumberTextBox<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,NumberTextBox,The conditional expression  "ttype == typeof(sbyte) || ttype == typeof(short)                          || ttype == typeof(int) || ttype == typeof(long)"  is complex.
Complex Conditional,Sce.Atf.Controls.CurveEditing,NumberTextBox<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,NumberTextBox,The conditional expression  "ttype == typeof(byte) || ttype == typeof(ushort)                          || ttype == typeof(uint) || ttype == typeof(ulong)"  is complex.
Complex Conditional,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,HitTest,The conditional expression  "(start < fpx && end < fpx) || (start > lpx && end > lpx)"  is complex.
Complex Conditional,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,DrawCurve,The conditional expression  "(fpt.X > x0 || lpt.X > x0) && (fpt.X < x1 || lpt.X < x1)"  is complex.
Complex Conditional,Sce.Atf.Controls.PropertyEditing,ArrayEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\ArrayEditingControl.cs,DomNode_AttributeChanged,The conditional expression  "adapter != null &&                   e.DomNode == adapter.DomNode &&                   m_context.Descriptor.Is<AttributePropertyDescriptor>() &&                  e.AttributeInfo == m_context.Descriptor.As<AttributePropertyDescriptor>().AttributeInfo"  is complex.
Complex Conditional,Sce.Atf.Controls.PropertyEditing,BoundedFloatEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\BoundedFloatEditor.cs,Initialize,The conditional expression  "parameters.Length < 2 ||                  !Single.TryParse(parameters[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out min) ||                  !Single.TryParse(parameters[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out max) ||                  min >= max"  is complex.
Complex Conditional,Sce.Atf.Controls.PropertyEditing,BoundedIntEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\BoundedIntEditor.cs,Initialize,The conditional expression  "parameters.Length < 2 ||                  !Int32.TryParse(parameters[0]' NumberStyles.Integer' CultureInfo.InvariantCulture' out min) ||                  !Int32.TryParse(parameters[1]' NumberStyles.Integer' CultureInfo.InvariantCulture' out max) ||                  min >= max"  is complex.
Complex Conditional,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnPaint,The conditional expression  "(!m_editingRowVisible) && p.Equals(SelectedProperty) && (m_selectedRows.LastSelected == j) && (SelectedCount != 0)"  is complex.
Complex Conditional,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnPaint,The conditional expression  "selected && m_editingRowVisible && (m_selectedRows.LastSelected == j) && (!p.DisableEditing)"  is complex.
Complex Conditional,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnMouseUp,The conditional expression  "hit.Property == SelectedProperty &&                      SelectedProperty != null &&                      m_selectedRows.Contains(hit.Row) &&                      (!SelectedProperty.DisableEditing) &&                      m_clickedOnSelectedRow"  is complex.
Complex Conditional,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,Pick,The conditional expression  "property.Control != null &&                              clientPnt.X > middleX &&                              (!property.NameHasWholeRow || clientPnt.Y >= top - propertyRowHeight + RowHeight)"  is complex.
Complex Conditional,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,GetPreferredHeight,The conditional expression  "(property.Category == null || property.Category.Expanded)                      && (property.Parent == null || property.Parent.ChildrenExpanded)"  is complex.
Complex Conditional,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,MouseMove,The conditional expression  "m_isDragging &&                  !m_dragOverThreshold &&                  (xDelta > m_dragThreshold || yDelta > m_dragThreshold)"  is complex.
Complex Conditional,Sce.Atf.Controls.Timelines.Direct2D,D2dSelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSelectionManipulator.cs,UpdateSelection,The conditional expression  "(modifiers & Keys.Shift) == 0 ||                      Anchor == null ||                      (Anchor.Last is IGroup && hitObject.Last is ITrack) ||                      (Anchor.Last is ITrack && hitObject.Last is IGroup) ||                      (Anchor.Last is IEvent && hitObject.Last is IEvent)"  is complex.
Complex Conditional,Sce.Atf.Controls.Timelines.Direct2D,D2dSplitManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSplitManipulator.cs,owner_MouseMovePicked,The conditional expression  "e.HitRecord.Type == HitType.Interval &&                      e.MouseEvent.Button == MouseButtons.None &&                      !m_owner.IsUsingMouse &&                      m_owner.IsEditable(e.HitRecord.HitPath)"  is complex.
Complex Conditional,Sce.Atf.Controls.Timelines.Direct2D,D2dSplitManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSplitManipulator.cs,owner_MouseDownPicked,The conditional expression  "m_active &&                  e.MouseEvent.Button == MouseButtons.Left &&                  !m_owner.IsUsingMouse &&                  m_owner.IsEditable(hitPath)"  is complex.
Complex Conditional,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,Pick,The conditional expression  "!(                  pickRect.Left > HeaderWidth &&                  pickRect.Right < clientRectangle.Width &&                  pickRect.Bottom > 0 &&                  pickRect.Bottom < TimeScaleHeight)"  is complex.
Complex Conditional,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PickSubTimeline,The conditional expression  "pickRect.Left > HeaderWidth &&                  pickRect.Right < clientRectangle.Width &&                  pickRect.Bottom > 0 &&                  pickRect.Bottom < TimeScaleHeight"  is complex.
Complex Conditional,Sce.Atf.Controls.Timelines,SelectionManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\SelectionManipulator.cs,UpdateSelection,The conditional expression  "(modifiers & Keys.Shift) == 0 ||                      Anchor == null ||                      (Anchor.Last is IGroup && hitObject.Last is ITrack) ||                      (Anchor.Last is ITrack && hitObject.Last is IGroup) ||                      (Anchor.Last is IEvent && hitObject.Last is IEvent)"  is complex.
Complex Conditional,Sce.Atf.Controls.Timelines,SplitManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\SplitManipulator.cs,owner_MouseMovePicked,The conditional expression  "e.HitRecord.Type == HitType.Interval &&                      e.MouseEvent.Button == MouseButtons.None &&                      !m_owner.IsUsingMouse &&                      m_owner.IsEditable(e.HitRecord.HitPath)"  is complex.
Complex Conditional,Sce.Atf.Controls.Timelines,SplitManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\SplitManipulator.cs,owner_MouseDownPicked,The conditional expression  "m_active &&                  e.MouseEvent.Button == MouseButtons.Left &&                  !m_owner.IsUsingMouse &&                  m_owner.IsEditable(hitPath)"  is complex.
Complex Conditional,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,Pick,The conditional expression  "!(                  pickRect.Left > HeaderWidth &&                  pickRect.Right < clientRectangle.Width &&                  pickRect.Bottom > 0 &&                  pickRect.Bottom < TimeScaleHeight)"  is complex.
Complex Conditional,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,PickSubTimeline,The conditional expression  "pickRect.Left > HeaderWidth &&                  pickRect.Right < clientRectangle.Width &&                  pickRect.Bottom > 0 &&                  pickRect.Bottom < TimeScaleHeight"  is complex.
Virtual Method Call from Constructor,Sce.Atf.Applications,GridPropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\GridPropertyEditor.cs,GridPropertyEditor,The constructor "GridPropertyEditor" calls a virtual method "Configure".
Virtual Method Call from Constructor,Sce.Atf.Applications,LayerLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\LayerLister.cs,LayerLister,The constructor "LayerLister" calls a virtual method "Configure".
Virtual Method Call from Constructor,Sce.Atf.Applications,ListViewEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\ListViewEditor.cs,ListViewEditor,The constructor "ListViewEditor" calls a virtual method "Configure".
Virtual Method Call from Constructor,Sce.Atf.Applications,PrototypeLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\PrototypeLister.cs,PrototypeLister,The constructor "PrototypeLister" calls a virtual method "Configure".
Virtual Method Call from Constructor,Sce.Atf.Applications,TreeControlEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\TreeControlEditor.cs,TreeControlEditor,The constructor "TreeControlEditor" calls a virtual method "Configure".
Virtual Method Call from Constructor,Sce.Atf.Applications,ClonedPropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,ClonedPropertyEditor,The constructor "ClonedPropertyEditor" calls a virtual method "Configure".
Virtual Method Call from Constructor,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,PropertyGridView,The constructor "PropertyGridView" calls a virtual method "ResetValue".
Virtual Method Call from Constructor,Sce.Atf.Dom,DomNodeReplaceToolStrip,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeReplaceToolStrip.cs,DomNodeReplaceToolStrip,The constructor "DomNodeReplaceToolStrip" calls a virtual method "GetToolStripItems".
Virtual Method Call from Constructor,Sce.Atf.Dom,DomNodeSearchToolStrip,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchToolStrip.cs,DomNodeSearchToolStrip,The constructor "DomNodeSearchToolStrip" calls a virtual method "GetToolStripItems".
Virtual Method Call from Constructor,Sce.Atf.Dom,TemplateLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\TemplateLister.cs,TemplateLister,The constructor "TemplateLister" calls a virtual method "Configure".
Virtual Method Call from Constructor,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,D2dTimelineControl,The constructor "D2dTimelineControl" calls a virtual method "Init".
Empty Catch Block,Sce.Atf.Applications,AutoDocumentService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\AutoDocumentService.cs,mainWindow_Loaded,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,AutomationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\AutomationService.cs,Initialize,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,AutomationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\AutomationService.cs,StartService,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,AutomationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\AutomationService.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,DefaultTabCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\DefaultTabCommands.cs,Initialize,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,TestCleanup,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,TestCleanup,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,ExecuteStatementSafe,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,ExecuteScriptSafe,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,ScriptConsole,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ScriptConsole.cs,Suggestions,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,SettingsService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsService.cs,SaveSettings,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,SingleInstanceService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SingleInstanceService.cs,SingleInstanceService,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,FontDescriptor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,GetValue,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Applications,SkinService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,SaveOriginalPropertyValues,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Controls,AboutSysInfoDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\AboutSysInfoDialog.cs,AboutSysInfoDialog,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,listView_SelectedIndexChanged,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,UpdateFolderListView,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,GetCompatibleData,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawEdgeSpline,The method has an empty catch block.
Empty Catch Block,Sce.Atf.Controls.FolderSelection,Reflector,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FolderSelectDialog.cs,New,The method has an empty catch block.
Magic Number,Sce.Atf.Applications,AutomationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\AutomationService.cs,GetUniquePortNumber,The following statement contains a magic number: const int basePortNumber = 4000;
Magic Number,Sce.Atf.Applications,AutomationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\AutomationService.cs,GetUniquePortNumber,The following statement contains a magic number: const int rangeSize = 2000;
Magic Number,Sce.Atf.Applications,CommandService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\CommandService.cs,ProcessKey,The following statement contains a magic number: m_webHelpTimer = new DispatcherTimer { Interval = TimeSpan.FromMilliseconds(1000) };
Magic Number,Sce.Atf.Applications,ControlHostService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ControlHostService.cs,ControlHostService,The following statement contains a magic number: MouseOverTabSwitchDelay = 250;
Magic Number,Sce.Atf.Applications,ControlHostService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ControlHostService.cs,UpdateDockContent,The following statement contains a magic number: dockContent.Icon =                  info.Image == null                      ? null                      : GdiUtil.CreateIcon(info.Image' 16' true);
Magic Number,Sce.Atf.Applications,ControlHostService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ControlHostService.cs,GetPersistenceId,The following statement contains a magic number: bool usedefault                  = string.IsNullOrEmpty(name)                  || name.Length > 64                  || name.IndexOfAny(s_pathDelimiters) > 0                  || name.Contains(".");
Magic Number,Sce.Atf.Applications,ControlHostService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ControlHostService.cs,SetDockPanelState,The following statement contains a magic number: int length = Math.Min(value.Length' 20);
Magic Number,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,Connect,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,Connect,The following statement contains a magic number: !connected && cnt++ < 100
Magic Number,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,ExecuteStatementSafe,The following statement contains a magic number: !t.Join(1000 * timeoutInSec)
Magic Number,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,ExecuteScriptSafe,The following statement contains a magic number: !t.Join(1000 * timeoutInSecs)
Magic Number,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,CloseApplication,The following statement contains a magic number: ExecuteStatementSafe("atfFile.DiscardAll()"' 20);
Magic Number,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,CloseApplication,The following statement contains a magic number: string result = ExecuteStatementSafe("atfFileExit.DoCommand(StandardCommand.FileExit)"' 15);
Magic Number,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,VerifyApplicationClosed,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Sce.Atf.Applications,FunctionalTestBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\FunctionalTestBase.cs,VerifyApplicationClosed,The following statement contains a magic number: !m_process.HasExited && cnt++ < 100
Magic Number,Sce.Atf.Applications,LayoutContexts,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ILayoutContext.cs,Center,The following statement contains a magic number: Point topLeft = new Point(                  center.X - bounds.Width / 2'                  center.Y - bounds.Height / 2);
Magic Number,Sce.Atf.Applications,LayoutContexts,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ILayoutContext.cs,Center,The following statement contains a magic number: Point topLeft = new Point(                  center.X - bounds.Width / 2'                  center.Y - bounds.Height / 2);
Magic Number,Sce.Atf.Applications,LayoutContexts,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ILayoutContext.cs,Center,The following statement contains a magic number: Point offset = new Point(                  center.X - (bounds.Left + bounds.Width / 2)'                  center.Y - (bounds.Top + bounds.Height / 2));
Magic Number,Sce.Atf.Applications,LayoutContexts,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ILayoutContext.cs,Center,The following statement contains a magic number: Point offset = new Point(                  center.X - (bounds.Left + bounds.Width / 2)'                  center.Y - (bounds.Top + bounds.Height / 2));
Magic Number,Sce.Atf.Applications,HistoryLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\HistoryLister.cs,ComputeColors,The following statement contains a magic number: m_redoForeColor = m_undoForeColor.GetBrightness() > 0.5f ?                  ControlPaint.Dark(m_undoForeColor' 0.3f): ControlPaint.Light(m_undoForeColor' 0.3f);
Magic Number,Sce.Atf.Applications,HistoryLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\HistoryLister.cs,ComputeColors,The following statement contains a magic number: m_redoForeColor = m_undoForeColor.GetBrightness() > 0.5f ?                  ControlPaint.Dark(m_undoForeColor' 0.3f): ControlPaint.Light(m_undoForeColor' 0.3f);
Magic Number,Sce.Atf.Applications,HistoryLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\HistoryLister.cs,ComputeColors,The following statement contains a magic number: m_redoForeColor = m_undoForeColor.GetBrightness() > 0.5f ?                  ControlPaint.Dark(m_undoForeColor' 0.3f): ControlPaint.Light(m_undoForeColor' 0.3f);
Magic Number,Sce.Atf.Applications,HistoryLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\HistoryLister.cs,ComputeColors,The following statement contains a magic number: m_redoBackColor = m_undoBackColor.GetBrightness() > 0.5f ?                  ControlPaint.Dark(m_undoBackColor' 0.15f) : ControlPaint.Light(m_undoBackColor' 0.15f);
Magic Number,Sce.Atf.Applications,HistoryLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\HistoryLister.cs,ComputeColors,The following statement contains a magic number: m_redoBackColor = m_undoBackColor.GetBrightness() > 0.5f ?                  ControlPaint.Dark(m_undoBackColor' 0.15f) : ControlPaint.Light(m_undoBackColor' 0.15f);
Magic Number,Sce.Atf.Applications,HistoryLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\HistoryLister.cs,ComputeColors,The following statement contains a magic number: m_redoBackColor = m_undoBackColor.GetBrightness() > 0.5f ?                  ControlPaint.Dark(m_undoBackColor' 0.15f) : ControlPaint.Light(m_undoBackColor' 0.15f);
Magic Number,Sce.Atf.Applications,CommandList,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\HistoryLister.cs,GetItemHeight,The following statement contains a magic number: return (int)Font.GetHeight() + 2;
Magic Number,Sce.Atf.Applications,ResourceLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\ResourceLister.cs,Initialize,The following statement contains a magic number: m_splitContainer.SplitterDistance = 10;
Magic Number,Sce.Atf.Applications,OutputService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\OutputService.cs,OutputMessage,The following statement contains a magic number: m_textBox.TextLength > 1048576
Magic Number,Sce.Atf.Applications,PropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,Initialize,The following statement contains a magic number: s_cloneImage = new Bitmap(16' 16' System.Drawing.Imaging.PixelFormat.Format32bppArgb);
Magic Number,Sce.Atf.Applications,PropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,Initialize,The following statement contains a magic number: s_cloneImage = new Bitmap(16' 16' System.Drawing.Imaging.PixelFormat.Format32bppArgb);
Magic Number,Sce.Atf.Applications,PropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,Initialize,The following statement contains a magic number: var rect = new Rectangle(1' 1' 8' 10);
Magic Number,Sce.Atf.Applications,PropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,Initialize,The following statement contains a magic number: var rect = new Rectangle(1' 1' 8' 10);
Magic Number,Sce.Atf.Applications,PropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,Initialize,The following statement contains a magic number: rect.Location = new Point(6' 5);
Magic Number,Sce.Atf.Applications,PropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,Initialize,The following statement contains a magic number: rect.Location = new Point(6' 5);
Magic Number,Sce.Atf.Applications,PropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,Initialize,The following statement contains a magic number: cloneButton.Size = new Size(29' 22);
Magic Number,Sce.Atf.Applications,PropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,Initialize,The following statement contains a magic number: cloneButton.Size = new Size(29' 22);
Magic Number,Sce.Atf.Applications,ClonedPropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,ClonedPropertyEditor,The following statement contains a magic number: m_selectionButton.Size = new Size(29' 22);
Magic Number,Sce.Atf.Applications,ClonedPropertyEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditor.cs,ClonedPropertyEditor,The following statement contains a magic number: m_selectionButton.Size = new Size(29' 22);
Magic Number,Sce.Atf.Applications,RenameCommandDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\RenameCommandDialog.cs,UpdatePreview,The following statement contains a magic number: const int maxNumToPreview = 20;
Magic Number,Sce.Atf.Applications,RenameCommandDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\RenameCommandDialog.cs,InitializeComponent,The following statement contains a magic number: this.firstNumericUpDown.Maximum = new decimal(new int[] {              -1'              2147483647'              0'              0});
Magic Number,Sce.Atf.Applications,DomNodePropertySearchService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SearchAndReplace\DomNodePropertySearchService.cs,DoLayout,The following statement contains a magic number: resultsBounds.Height = m_rootControl.Height - (m_rootControl.Margin.Top + m_rootControl.Margin.Bottom + scb.Height + 2);
Magic Number,Sce.Atf.Applications,SettingsDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsDialog.cs,SettingsDialog,The following statement contains a magic number: SplitterRatio = 0.33f;
Magic Number,Sce.Atf.Applications,SettingsService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsService.cs,SettingsService,The following statement contains a magic number: SplitterRatio = 0.33f;
Magic Number,Sce.Atf.Applications,SettingsService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsService.cs,RegisterUserSettings,The following statement contains a magic number: string[] path = pathName.Split(s_delimiters' 16);
Magic Number,Sce.Atf.Applications,SettingsService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsService.cs,GetSettingsPath,The following statement contains a magic number: string[] pathSegments = pathName.Split(s_delimiters' 16);
Magic Number,Sce.Atf.Applications,SettingsService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsService.cs,StringToXmlDoc,The following statement contains a magic number: int len = (strXml.Length > 20) ? 20 : strXml.Length;
Magic Number,Sce.Atf.Applications,SettingsService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsService.cs,StringToXmlDoc,The following statement contains a magic number: int len = (strXml.Length > 20) ? 20 : strXml.Length;
Magic Number,Sce.Atf.Applications,SettingsService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsService.cs,GetMutexName,The following statement contains a magic number: safeName = safeName.Substring(safeName.Length - 250);
Magic Number,Sce.Atf.Applications,SettingsService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsService.cs,GetMutexName,The following statement contains a magic number: safeName.Length > 250
Magic Number,Sce.Atf.Applications,SingleInstanceService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SingleInstanceService.cs,SingleInstanceService,The following statement contains a magic number: applicationId = applicationId.Substring(0' 250);
Magic Number,Sce.Atf.Applications,SingleInstanceService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SingleInstanceService.cs,SingleInstanceService,The following statement contains a magic number: applicationId.Length > 250
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,UpdateCaptionButtons,The following statement contains a magic number: int top = Math.Min(4' m_titleAndBorderSize - (capSize + 1));
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,UpdateCaptionButtons,The following statement contains a magic number: int iconSize = m_titleAndBorderSize - 2;
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,UpdateCaptionButtons,The following statement contains a magic number: int iconTop = 2;
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,UpdateCaptionButtons,The following statement contains a magic number: int iconLeft = 2;
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,UpdateCaptionButtons,The following statement contains a magic number: Rectangle btnBound = new Rectangle(m_winRect.Width - (capSize + 3)' top' capSize' capSize);
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,PaintTitleBar,The following statement contains a magic number: borderRect.Width -= 2;
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,PaintTitleBar,The following statement contains a magic number: borderRect.Height -= 2;
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,PaintTitleBar,The following statement contains a magic number: s_genPen.Width = 2.0f;
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,PaintTitleBar,The following statement contains a magic number: int w = m_iconRect.Width > 0 ? -(m_iconRect.Width + 1) : -6;
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,PaintTitleBar,The following statement contains a magic number: int x = m_iconRect.Right > 0 ? m_iconRect.Right : 6;
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,UpdateBounds,The following statement contains a magic number: m_borderSize = (w - cw) / 2;
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,UpdateBounds,The following statement contains a magic number: m_titleSize = (h - ch) - 2 * m_borderSize;
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,HiWord,The following statement contains a magic number: return (val >> 16) & 0xFFFF;
Magic Number,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,GetWindowLong,The following statement contains a magic number: IntPtr.Size == 4
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: ActiveBorderColor = Color.FromArgb(0' 121' 203);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: ActiveBorderColor = Color.FromArgb(0' 121' 203);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: InactiveBorderColor = Color.FromArgb(70' 70' 75);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: InactiveBorderColor = Color.FromArgb(70' 70' 75);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: InactiveBorderColor = Color.FromArgb(70' 70' 75);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: TitleBarBackColor = Color.FromArgb(45' 45' 48);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: TitleBarBackColor = Color.FromArgb(45' 45' 48);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: TitleBarBackColor = Color.FromArgb(45' 45' 48);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: TitleBarForeColor = Color.FromArgb(160' 160' 160);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: TitleBarForeColor = Color.FromArgb(160' 160' 160);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: TitleBarForeColor = Color.FromArgb(160' 160' 160);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: ActiveTitleBarForeColor = Color.FromArgb(250' 250' 250);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: ActiveTitleBarForeColor = Color.FromArgb(250' 250' 250);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: ActiveTitleBarForeColor = Color.FromArgb(250' 250' 250);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: CaptionButtonHoverColor = Color.FromArgb(70' 70' 75);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: CaptionButtonHoverColor = Color.FromArgb(70' 70' 75);
Magic Number,Sce.Atf.Applications,SkinInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,SkinInfo,The following statement contains a magic number: CaptionButtonHoverColor = Color.FromArgb(70' 70' 75);
Magic Number,Sce.Atf.Applications,CustomCaptionButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,Draw,The following statement contains a magic number: int margin = (int)(Bound.Height * 0.3f);
Magic Number,Sce.Atf.Applications,CustomCaptionButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,Draw,The following statement contains a magic number: s_genPen.Width = 2.0f;
Magic Number,Sce.Atf.Applications,SkinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,Init,The following statement contains a magic number: fileMenu.Size = new System.Drawing.Size(37' 20);
Magic Number,Sce.Atf.Applications,SkinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,Init,The following statement contains a magic number: fileMenu.Size = new System.Drawing.Size(37' 20);
Magic Number,Sce.Atf.Applications,SkinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,Init,The following statement contains a magic number: m_treeControl.Width = 150;
Magic Number,Sce.Atf.Applications,SkinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,Init,The following statement contains a magic number: m_PropertyGrid.TabIndex = 3;
Magic Number,Sce.Atf.Applications,SkinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,Init,The following statement contains a magic number: splitter.SplitterDistance = 100;
Magic Number,Sce.Atf.Applications,SkinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,Init,The following statement contains a magic number: ClientSize = new System.Drawing.Size(600' 400);
Magic Number,Sce.Atf.Applications,SkinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,Init,The following statement contains a magic number: ClientSize = new System.Drawing.Size(600' 400);
Magic Number,Sce.Atf.Applications,SkinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinEditor.cs,Init,The following statement contains a magic number: splitter.SplitterDistance = 170;
Magic Number,Sce.Atf.Applications,StandardLayoutCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardLayoutCommands.cs,AlignCenters,The following statement contains a magic number: int boundsCenter = (bounds.Left + bounds.Right) / 2;
Magic Number,Sce.Atf.Applications,StandardLayoutCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardLayoutCommands.cs,AlignCenters,The following statement contains a magic number: itemBounds.X = boundsCenter - itemBounds.Width / 2;
Magic Number,Sce.Atf.Applications,StandardLayoutCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardLayoutCommands.cs,AlignMiddles,The following statement contains a magic number: int boundsMiddle = (bounds.Top + bounds.Bottom) / 2;
Magic Number,Sce.Atf.Applications,StandardLayoutCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardLayoutCommands.cs,AlignMiddles,The following statement contains a magic number: itemBounds.Y = boundsMiddle - itemBounds.Height / 2;
Magic Number,Sce.Atf.Applications,StatusService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StatusService.cs,StatusService,The following statement contains a magic number: m_mainPanel.Width = 256;
Magic Number,Sce.Atf.Applications,StatusService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StatusService.cs,progressCallback,The following statement contains a magic number: int percent = (int)(100 * m_progress);
Magic Number,Sce.Atf.Applications,StringSearchInputUI,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\StringSearchInputUI.cs,StringSearchInputUI,The following statement contains a magic number: dropDownButton.Size = new System.Drawing.Size(29' 22);
Magic Number,Sce.Atf.Applications,StringSearchInputUI,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\StringSearchInputUI.cs,StringSearchInputUI,The following statement contains a magic number: dropDownButton.Size = new System.Drawing.Size(29' 22);
Magic Number,Sce.Atf.Applications,StringSearchInputUI,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\StringSearchInputUI.cs,StringSearchInputUI,The following statement contains a magic number: clearSearchButton.Size = new System.Drawing.Size(29' 22);
Magic Number,Sce.Atf.Applications,StringSearchInputUI,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\StringSearchInputUI.cs,StringSearchInputUI,The following statement contains a magic number: clearSearchButton.Size = new System.Drawing.Size(29' 22);
Magic Number,Sce.Atf.Applications,StringSearchInputUI,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\StringSearchInputUI.cs,StringSearchInputUI,The following statement contains a magic number: m_patternTextBox.MaximumWidth = 1080;
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TargetEnumerationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TargetEnumerationService.cs,SetUpTargetsView,The following statement contains a magic number: m_userControl = new UserControl { Margin = new Padding(3) };
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TargetEnumerationService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TargetEnumerationService.cs,UpdateTargetsView,The following statement contains a magic number: itemsToAdd.Count > 3
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TargetTcpSocket,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TargetTcpSocket.cs,Connect,The following statement contains a magic number: m_theSocket.SendTimeout = 5000;
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DataReadyHandler,The following statement contains a magic number: m_numBytesReceivedThisCommand < 4
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DataReadyHandler,The following statement contains a magic number: m_numBytesReceivedThisCommand == 8
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DataReadyHandler,The following statement contains a magic number: m_numBytesReceivedThisCommand == m_tcpCommand.m_payloadSize + 8
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeInt,The following statement contains a magic number: byte[] temp = new byte[4];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeInt,The following statement contains a magic number: temp[0] = data[startIndex + 3];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeInt,The following statement contains a magic number: temp[1] = data[startIndex + 2];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeInt,The following statement contains a magic number: temp[2] = data[startIndex + 1];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeInt,The following statement contains a magic number: temp[3] = data[startIndex + 0];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeInt,The following statement contains a magic number: return 4;
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: byte[] temp = new byte[8];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[0] = data[startIndex + 7];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[1] = data[startIndex + 6];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[2] = data[startIndex + 5];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[2] = data[startIndex + 5];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[3] = data[startIndex + 4];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[3] = data[startIndex + 4];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[4] = data[startIndex + 3];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[4] = data[startIndex + 3];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[5] = data[startIndex + 2];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[5] = data[startIndex + 2];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[6] = data[startIndex + 1];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: temp[7] = data[startIndex + 0];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeUInt64,The following statement contains a magic number: return 8;
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeFloat,The following statement contains a magic number: byte[] temp = new byte[4];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeFloat,The following statement contains a magic number: temp[0] = data[startIndex + 3];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeFloat,The following statement contains a magic number: temp[1] = data[startIndex + 2];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeFloat,The following statement contains a magic number: temp[2] = data[startIndex + 1];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeFloat,The following statement contains a magic number: temp[3] = data[startIndex + 0];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeFloat,The following statement contains a magic number: return 4;
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,DecodeString,The following statement contains a magic number: return (strLen + 4);
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,EncodeInt,The following statement contains a magic number: byte[] retval = new byte[4];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,EncodeInt,The following statement contains a magic number: retval[0] = temp[3];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,EncodeInt,The following statement contains a magic number: retval[1] = temp[2];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,EncodeInt,The following statement contains a magic number: retval[2] = temp[1];
Magic Number,Sce.Atf.Applications.NetworkTargetServices,TcpCommandClient,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\NetworkTargetServices\TcpCommandClient.cs,EncodeInt,The following statement contains a magic number: retval[3] = temp[0];
Magic Number,Sce.Atf.Applications.WebServices,FeedbackForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\WebServices\FeedbackForm.cs,FeedbackForm,The following statement contains a magic number: m_cmbPriority.SelectedIndex = 2;
Magic Number,Sce.Atf.Applications.WebServices,VersionCheck,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\WebServices\VersionCheck.cs,DoCheck,The following statement contains a magic number: url = ((string)versionInfo[2]).Trim();
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalGrid,The following statement contains a magic number: double yScale = transform.Elements[3];
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalGrid,The following statement contains a magic number: double yScale = transform.Elements[3];
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,LabelGrid,The following statement contains a magic number: double yScale = transform.Elements[3];
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,LabelGrid,The following statement contains a magic number: const int MIN_LABEL_SPACING = 96;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,LabelGrid,The following statement contains a magic number: screenStep *= 2;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,LabelGrid,The following statement contains a magic number: step *= 2;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalScaleGrid,The following statement contains a magic number: double yScale = transform.Elements[3];
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalScale,The following statement contains a magic number: majorTickStart = tickEnd + 12;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalScale,The following statement contains a magic number: minorTickStart = tickEnd + 6;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalScale,The following statement contains a magic number: textStart = tickEnd + 8;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalScale,The following statement contains a magic number: int numMinorTicks = D2dUtil.CalculateNumMinorTicks(majorGraphStep' minimumGraphStep' 5);
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawHorizontalScale,The following statement contains a magic number: string xString = String.Format("{0:G8}"' Math.Round(x' 6));
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawVerticalScale,The following statement contains a magic number: double yScale = transform.Elements[3];
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawVerticalScale,The following statement contains a magic number: vertical.Rotate(90);
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawVerticalScale,The following statement contains a magic number: minorTickStart = tickEnd - 6;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawVerticalScale,The following statement contains a magic number: textStart = tickEnd - 19;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawVerticalScale,The following statement contains a magic number: int numMinorTicks = D2dUtil.CalculateNumMinorTicks(majorGraphStep' minimumGraphStep' 5);
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawVerticalScale,The following statement contains a magic number: string xString = String.Format("{0:G8}"' Math.Round(x' 6));
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawVerticalScale,The following statement contains a magic number: g.DrawString(xString' font' textBrush' (float)cx + 2' (float)textStart);
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawXYLabel,The following statement contains a magic number: Rectangle box = new Rectangle(position.X + 8' position.Y + 8' (int)size.Width + 2' (int)size.Height + 2);
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawXYLabel,The following statement contains a magic number: Rectangle box = new Rectangle(position.X + 8' position.Y + 8' (int)size.Width + 2' (int)size.Height + 2);
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawXYLabel,The following statement contains a magic number: Rectangle box = new Rectangle(position.X + 8' position.Y + 8' (int)size.Width + 2' (int)size.Height + 2);
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,DrawXYLabel,The following statement contains a magic number: Rectangle box = new Rectangle(position.X + 8' position.Y + 8' (int)size.Width + 2' (int)size.Height + 2);
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,CreateFadedPen,The following statement contains a magic number: const int FADE_START = 64;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,CreateFadedPen,The following statement contains a magic number: const int FADE_END = 4;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,CreateFadedPen,The following statement contains a magic number: int alpha = (int)(255 * (screenStep - FADE_END) / (FADE_START - FADE_END));
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,ComputeOpacity,The following statement contains a magic number: const int FADE_START = 64;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,ComputeOpacity,The following statement contains a magic number: const int FADE_END = 4;
Magic Number,Sce.Atf,ChartUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ChartUtil.cs,ComputeOpacity,The following statement contains a magic number: return (int )( 255 * (screenStep - FADE_END) / (FADE_START - FADE_END));
Magic Number,Sce.Atf,DropDescriptionHelper,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\DragDrop\DropDescriptionHelper.cs,SetDropDescription,The following statement contains a magic number: format != null && format.Length > 259
Magic Number,Sce.Atf,DropDescriptionHelper,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\DragDrop\DropDescriptionHelper.cs,SetDropDescription,The following statement contains a magic number: insert != null && insert.Length > 259
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,MeasureDisplayString,The following statement contains a magic number: const int width = 32;
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,MeasureDisplayString,The following statement contains a magic number: anagra.DrawString(text + "|"' font' Brushes.Black' width - measured_width' -font.Height / 2);
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,CreateLozengeImage,The following statement contains a magic number: int diameter = 2 * cornerRadius;
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawLozenge,The following statement contains a magic number: int cornerRadius = (lozengeImage.Width - ShadowSize) / 2;
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawLozenge,The following statement contains a magic number: g.DrawImage(lozengeImage'                  new Rectangle(bounds.Left + cornerRadius' bounds.Top' bounds.Width - 2 * cornerRadius' cornerRadius)'                  new Rectangle(cornerRadius' 0' 1' cornerRadius)' GraphicsUnit.Pixel);
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawLozenge,The following statement contains a magic number: g.DrawImage(lozengeImage'                  new Rectangle(bounds.Right - cornerRadius' bounds.Top + cornerRadius' cornerRadius + ShadowSize' bounds.Height - 2 * cornerRadius)'                  new Rectangle(cornerRadius' cornerRadius' cornerRadius + ShadowSize' 1)' GraphicsUnit.Pixel);
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawLozenge,The following statement contains a magic number: g.DrawImage(lozengeImage'                  new Rectangle(bounds.Left + cornerRadius' bounds.Bottom - cornerRadius' bounds.Width - 2 * cornerRadius' cornerRadius + ShadowSize)'                  new Rectangle(cornerRadius' cornerRadius' 1' cornerRadius + ShadowSize)' GraphicsUnit.Pixel);
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawLozenge,The following statement contains a magic number: g.DrawImage(lozengeImage'                  new Rectangle(bounds.Left' bounds.Top + cornerRadius' cornerRadius' bounds.Height - 2 * cornerRadius)'                  new Rectangle(0' cornerRadius' cornerRadius' 1)' GraphicsUnit.Pixel);
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawLozenge,The following statement contains a magic number: g.DrawImage(lozengeImage'                  new Rectangle(                      bounds.Left + cornerRadius - 1'                      bounds.Top + cornerRadius - 1'                      bounds.Width - 2 * cornerRadius + 1'                      bounds.Height - 2 * cornerRadius + 1)'                  new Rectangle(cornerRadius' cornerRadius' 1' 1)'                  GraphicsUnit.Pixel);
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawLozenge,The following statement contains a magic number: g.DrawImage(lozengeImage'                  new Rectangle(                      bounds.Left + cornerRadius - 1'                      bounds.Top + cornerRadius - 1'                      bounds.Width - 2 * cornerRadius + 1'                      bounds.Height - 2 * cornerRadius + 1)'                  new Rectangle(cornerRadius' cornerRadius' 1' 1)'                  GraphicsUnit.Pixel);
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawExpander,The following statement contains a magic number: s_expanderPoints[2] = new Point(x + size' y);
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawExpander,The following statement contains a magic number: s_expanderPoints[2] = new Point(x + size' y);
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawOfficeExpander,The following statement contains a magic number: int xMid = x + OfficeExpanderSize / 2;
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawOfficeExpander,The following statement contains a magic number: int yMid = y + OfficeExpanderSize / 2;
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawSortDirectionIndicator,The following statement contains a magic number: s_directionIndicatorPoints[2] = new Point(x + width / 2' y + height);
Magic Number,Sce.Atf,GdiUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\GdiUtil.cs,DrawSortDirectionIndicator,The following statement contains a magic number: s_directionIndicatorPoints[2] = new Point(x + width / 2' y + height);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,RegisterImage,The following statement contains a magic number: image.Width == 13 && image.Height == 13
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,RegisterImage,The following statement contains a magic number: image.Width == 13 && image.Height == 13
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,RegisterImage,The following statement contains a magic number: image16 = GdiUtil.ResizeImage(image16' 16);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,RegisterImage,The following statement contains a magic number: image24 = GdiUtil.ResizeImage(image24' 24);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,RegisterImage,The following statement contains a magic number: image32 = GdiUtil.ResizeImage(image32' 32);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,GetImage13,The following statement contains a magic number: image = GdiUtil.ResizeImage(image' 13);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,GetImage16,The following statement contains a magic number: image = GdiUtil.ResizeImage(image' 16);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,GetImage24,The following statement contains a magic number: image = GdiUtil.ResizeImage(image' 24);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,GetImage32,The following statement contains a magic number: image = GdiUtil.ResizeImage(image' 32);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,ResourceUtil,The following statement contains a magic number: s_images13.ImageSize = new Size(13' 13);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,ResourceUtil,The following statement contains a magic number: s_images13.ImageSize = new Size(13' 13);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,ResourceUtil,The following statement contains a magic number: s_images16.ImageSize = new Size(16' 16);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,ResourceUtil,The following statement contains a magic number: s_images16.ImageSize = new Size(16' 16);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,ResourceUtil,The following statement contains a magic number: s_images24.ImageSize = new Size(24' 24);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,ResourceUtil,The following statement contains a magic number: s_images24.ImageSize = new Size(24' 24);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,ResourceUtil,The following statement contains a magic number: s_images32.ImageSize = new Size(32' 32);
Magic Number,Sce.Atf,ResourceUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\ResourceUtil.cs,ResourceUtil,The following statement contains a magic number: s_images32.ImageSize = new Size(32' 32);
Magic Number,Sce.Atf,WinFormsUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\WinFormsUtil.cs,UpdateScrollbars,The following statement contains a magic number: vScrollBar.SmallChange = Math.Max(1' vScrollBar.LargeChange / 10);
Magic Number,Sce.Atf,WinFormsUtil,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\WinFormsUtil.cs,UpdateScrollbars,The following statement contains a magic number: hScrollBar.SmallChange = Math.Max(1' hScrollBar.LargeChange / 10);
Magic Number,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,CanvasControl,The following statement contains a magic number: m_autoScrollTimer.Interval = 10;
Magic Number,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,Frame,The following statement contains a magic number: Point clientCenter = new Point(                  (int)(clientRect.Left + clientRect.Width / 2)'                  (int)(clientRect.Top + clientRect.Height / 2));
Magic Number,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,Frame,The following statement contains a magic number: Point clientCenter = new Point(                  (int)(clientRect.Left + clientRect.Width / 2)'                  (int)(clientRect.Top + clientRect.Height / 2));
Magic Number,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,Frame,The following statement contains a magic number: Point canvasCenter = new Point(                  (int)(targetCanvasRect.Left + targetCanvasRect.Width / 2)'                  (int)(targetCanvasRect.Top + targetCanvasRect.Height / 2));
Magic Number,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,Frame,The following statement contains a magic number: Point canvasCenter = new Point(                  (int)(targetCanvasRect.Left + targetCanvasRect.Width / 2)'                  (int)(targetCanvasRect.Top + targetCanvasRect.Height / 2));
Magic Number,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,autoScrollTimer_Tick,The following statement contains a magic number: const int autoScrollSpeed = 10;
Magic Number,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,ZoomAboutCenter,The following statement contains a magic number: PointF zoomCenter = new PointF(                  (float)(m_scroll.X - Width / 2) / (float)m_canvasSize.Width'                  (float)(m_scroll.Y - Height / 2) / (float)m_canvasSize.Height);
Magic Number,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,ZoomAboutCenter,The following statement contains a magic number: PointF zoomCenter = new PointF(                  (float)(m_scroll.X - Width / 2) / (float)m_canvasSize.Width'                  (float)(m_scroll.Y - Height / 2) / (float)m_canvasSize.Height);
Magic Number,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,ZoomAboutCenter,The following statement contains a magic number: ScrollPosition = new Point(                  (int)(-zoomCenter.X * m_canvasSize.Width - Width / 2)'                  (int)(-zoomCenter.Y * m_canvasSize.Height - Height / 2));
Magic Number,Sce.Atf.Controls,CanvasControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CanvasControl.cs,ZoomAboutCenter,The following statement contains a magic number: ScrollPosition = new Point(                  (int)(-zoomCenter.X * m_canvasSize.Width - Width / 2)'                  (int)(-zoomCenter.Y * m_canvasSize.Height - Height / 2));
Magic Number,Sce.Atf.Controls,CollapsibleGroupBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CollapsibleGroupBox.cs,CollapsibleGroupBox,The following statement contains a magic number: m_btnFont = new Font(m_btn.Font.FontFamily' 8.0f);
Magic Number,Sce.Atf.Controls,CustomizeKeyboardDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CustomizeKeyboardDialog.cs,btnAllDefault_Click,The following statement contains a magic number: numCommandsToReset < 10
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,DataBoundListView,The following statement contains a magic number: ColumnHeaderSeparatorColor = Color.FromArgb(228' 229' 230);
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,DataBoundListView,The following statement contains a magic number: ColumnHeaderSeparatorColor = Color.FromArgb(228' 229' 230);
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,DataBoundListView,The following statement contains a magic number: ColumnHeaderSeparatorColor = Color.FromArgb(228' 229' 230);
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,listView_ColumnWidthChanged,The following statement contains a magic number: m_lastNewWidth > 0 && Math.Abs(m_lastNewWidth - Columns[e.ColumnIndex].Width) > 100
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,listView_ColumnWidthChanging,The following statement contains a magic number: float wMin = g.MeasureString(Columns[e.ColumnIndex].Text' HeaderFont).Width +                                   s_sortAscendingImage.Width + 8 +2;
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,listView_ColumnWidthChanging,The following statement contains a magic number: float wMin = g.MeasureString(Columns[e.ColumnIndex].Text' HeaderFont).Width +                                   s_sortAscendingImage.Width + 8 +2;
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,listView_ColumnWidthChanging,The following statement contains a magic number: wMin += CheckBoxWidth + 2;
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawItem,The following statement contains a magic number: rowIndex%2 == 0
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawColumnHeader,The following statement contains a magic number: bound.Y += 3;
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawColumnHeader,The following statement contains a magic number: bound.X += 8;
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawColumnHeader,The following statement contains a magic number: w += CheckBoxWidth + 2;
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawColumnHeader,The following statement contains a magic number: Point pt = new Point(e.Bounds.Location.X + e.Bounds.Width - s_sortAscendingImage.Width - 4'                          e.Bounds.Top + (e.Bounds.Height - s_sortAscendingImage.Height) / 2);
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawColumnHeader,The following statement contains a magic number: Point pt = new Point(e.Bounds.Location.X + e.Bounds.Width - s_sortAscendingImage.Width - 4'                          e.Bounds.Top + (e.Bounds.Height - s_sortAscendingImage.Height) / 2);
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawColumnHeader,The following statement contains a magic number: e.Bounds.Width > w + s_sortAscendingImage.Width + 8
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawColumnHeader,The following statement contains a magic number: Point pt = new Point(e.Bounds.Location.X' e.Bounds.Top + 3);
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawColumnHeader,The following statement contains a magic number: e.Graphics.DrawLine(m_columnHeaderSeparatorPen' CheckBoxWidth' e.Bounds.Top'                          CheckBoxWidth' e.Bounds.Bottom - 2);
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,WndProc,The following statement contains a magic number: rowIndex%2 == 0
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,AutoResizeColumns,The following statement contains a magic number: float width = g.MeasureString(Columns[columnIndex].Text' HeaderFont).Width +                          2 * s_sortAscendingImage.Width + Margin.Left + Margin.Right +18;
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,AutoResizeColumns,The following statement contains a magic number: float width = g.MeasureString(Columns[columnIndex].Text' HeaderFont).Width +                          2 * s_sortAscendingImage.Width + Margin.Left + Margin.Right +18;
Magic Number,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,AutoResizeColumns,The following statement contains a magic number: float w = g.MeasureString(Items[itemIndex].SubItems[columnIndex].Text' Font).Width + Margin.Left + Margin.Right +18;
Magic Number,Sce.Atf.Controls,DataEditorTheme,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\DataEditorTheme.cs,DataEditorTheme,The following statement contains a magic number: m_padding = new Padding(8);
Magic Number,Sce.Atf.Controls,DataEditorTheme,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\DataEditorTheme.cs,DataEditorTheme,The following statement contains a magic number: m__defaultSliderWidth = 100;
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,FloatDataEditor,The following statement contains a magic number: Epsilon = 0.000001f;
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,PaintValue,The following statement contains a magic number: float slideY = area.Y + area.Height / 2;
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,PaintValue,The following statement contains a magic number: var thumbRectangle = new Rectangle((int)thumbX - 8' (int)area.Top' 18' 18);
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,PaintValue,The following statement contains a magic number: var thumbRectangle = new Rectangle((int)thumbX - 8' (int)area.Top' 18' 18);
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,PaintValue,The following statement contains a magic number: var thumbRectangle = new Rectangle((int)thumbX - 8' (int)area.Top' 18' 18);
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,DrawThumb,The following statement contains a magic number: s_thumbPoints[2] = new Point(bounds.Right' bounds.Top + bounds.Height * 3 / 4);
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,DrawThumb,The following statement contains a magic number: s_thumbPoints[2] = new Point(bounds.Right' bounds.Top + bounds.Height * 3 / 4);
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,DrawThumb,The following statement contains a magic number: s_thumbPoints[2] = new Point(bounds.Right' bounds.Top + bounds.Height * 3 / 4);
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,DrawThumb,The following statement contains a magic number: s_thumbPoints[3] = new Point((bounds.Left + bounds.Right) / 2' bounds.Top + bounds.Height);
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,DrawThumb,The following statement contains a magic number: s_thumbPoints[3] = new Point((bounds.Left + bounds.Right) / 2' bounds.Top + bounds.Height);
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,DrawThumb,The following statement contains a magic number: s_thumbPoints[4] = new Point(bounds.Left' bounds.Top + bounds.Height * 3 / 4);
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,DrawThumb,The following statement contains a magic number: s_thumbPoints[4] = new Point(bounds.Left' bounds.Top + bounds.Height * 3 / 4);
Magic Number,Sce.Atf.Controls,FloatDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\FloatDataEditor.cs,DrawThumb,The following statement contains a magic number: s_thumbPoints[4] = new Point(bounds.Left' bounds.Top + bounds.Height * 3 / 4);
Magic Number,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,FilteredFileDialogBase,The following statement contains a magic number: listView1.Columns.Add("Name"' 250' HorizontalAlignment.Left);
Magic Number,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,FilteredFileDialogBase,The following statement contains a magic number: listView1.Columns.Add("Date Modified"' 130' HorizontalAlignment.Left);
Magic Number,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,FilteredFileDialogBase,The following statement contains a magic number: listView1.Columns.Add("Size"' listView1.Width - 250 - 130 - 20' HorizontalAlignment.Right);
Magic Number,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,FilteredFileDialogBase,The following statement contains a magic number: listView1.Columns.Add("Size"' listView1.Width - 250 - 130 - 20' HorizontalAlignment.Right);
Magic Number,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,FilteredFileDialogBase,The following statement contains a magic number: listView1.Columns.Add("Size"' listView1.Width - 250 - 130 - 20' HorizontalAlignment.Right);
Magic Number,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,lookInComboBox_DrawItem,The following statement contains a magic number: e.Graphics.DrawImage(listView1.SmallImageList.Images[3]' new Point(e.Bounds.X + e.Index * 16' e.Bounds.Y));
Magic Number,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,lookInComboBox_DrawItem,The following statement contains a magic number: e.Graphics.DrawImage(listView1.SmallImageList.Images[3]' new Point(e.Bounds.X + e.Index * 16' e.Bounds.Y));
Magic Number,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,lookInComboBox_DrawItem,The following statement contains a magic number: e.Graphics.DrawString(text' ((Control)sender).Font'                    brush' e.Bounds.X + (e.Index + 1) * 16' e.Bounds.Y);
Magic Number,Sce.Atf.Controls,FilteredFileDialogBase,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FilteredFileDialogBase.cs,GoToComputer,The following statement contains a magic number: item.ImageIndex = 2;
Magic Number,Sce.Atf.Controls,FloatInputControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FloatInputControl.cs,FloatInputControl,The following statement contains a magic number: m_spinner.Changed += (sender' e) =>              {                  // might be better to expose delta as property                  float delta = (m_max - m_min) / 100.0f;                  float newValue = Value + (float)e.Value * delta;                  SetValue(newValue' false);              };
Magic Number,Sce.Atf.Controls,FloatInputControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FloatInputControl.cs,FloatInputControl,The following statement contains a magic number: m_textBox.SizeChanged += (sender' e) => Height = m_textBox.Height + 3;
Magic Number,Sce.Atf.Controls,FloatInputControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FloatInputControl.cs,OnPaint,The following statement contains a magic number: Rectangle rec                  = new Rectangle(m_textBox.Location.X' m_textBox.Height' w' 3);
Magic Number,Sce.Atf.Controls,HoverLabel,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\HoverLabel.cs,SetBounds,The following statement contains a magic number: Size = new Size((int)Math.Ceiling(labelSize.Width) + 2 * TextMargin' (int)Math.Ceiling(labelSize.Height) + 2 * TextMargin);
Magic Number,Sce.Atf.Controls,HoverLabel,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\HoverLabel.cs,SetBounds,The following statement contains a magic number: Size = new Size((int)Math.Ceiling(labelSize.Width) + 2 * TextMargin' (int)Math.Ceiling(labelSize.Height) + 2 * TextMargin);
Magic Number,Sce.Atf.Controls,IntInputControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\IntInputControl.cs,IntInputControl,The following statement contains a magic number: m_textBox.SizeChanged += (sender' e) => this.Height = m_textBox.Height + 3;
Magic Number,Sce.Atf.Controls,IntInputControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\IntInputControl.cs,OnPaint,The following statement contains a magic number: Rectangle rec                  = new Rectangle(m_textBox.Location.X' m_textBox.Height' w' 3);
Magic Number,Sce.Atf.Controls,NoFocusTrackBar,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NoFocusTrackBar.cs,MakeParam,The following statement contains a magic number: return (hiWord << 16) | (loWord & 0xffff);
Magic Number,Sce.Atf.Controls,NumericMatrixControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericMatrixControl.cs,AreEqual,The following statement contains a magic number: return MathUtil.AreApproxEqual((Single[])array1' (Single[])array2' 0.000001);
Magic Number,Sce.Atf.Controls,NumericMatrixControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericMatrixControl.cs,AreEqual,The following statement contains a magic number: return MathUtil.AreApproxEqual((Double[])array1' (Double[])array2' 0.000001);
Magic Number,Sce.Atf.Controls,NumericTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTextBox.cs,OnMouseDown,The following statement contains a magic number: e.Button == MouseButtons.Left &&                  e.Clicks == 2
Magic Number,Sce.Atf.Controls,NumericTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTextBox.cs,Flush,The following statement contains a magic number: equal =                          m_lastEdit != null &&                          MathUtil.AreApproxEqual((Single)m_lastEdit' (Single)value' 0.000001);
Magic Number,Sce.Atf.Controls,CompactSpinner,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTextBox.cs,OnPaint,The following statement contains a magic number: int midy = this.Height / 2;
Magic Number,Sce.Atf.Controls,CompactSpinner,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTextBox.cs,OnPaint,The following statement contains a magic number: pen.Width = 4;
Magic Number,Sce.Atf.Controls,NumericTupleControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTupleControl.cs,NumericTupleControl,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls,NumericTupleControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTupleControl.cs,NumericTupleControl,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls,NumericTupleControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTupleControl.cs,NumericTupleControl,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls,NumericTupleControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTupleControl.cs,NumericTupleControl,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls,NumericTupleControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTupleControl.cs,NumericTupleControl,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls,NumericTupleControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTupleControl.cs,NumericTupleControl,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls,NumericTupleControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTupleControl.cs,NumericTupleControl,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls,NumericTupleControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTupleControl.cs,NumericTupleControl,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls,NumericTupleControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTupleControl.cs,NumericTupleControl,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls,NumericTupleControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\NumericTupleControl.cs,NumericTupleControl,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls,OverlayButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\OverlayButton.cs,OverlayButton,The following statement contains a magic number: m_bound = new Rectangle(0'0'16'16);
Magic Number,Sce.Atf.Controls,OverlayButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\OverlayButton.cs,OverlayButton,The following statement contains a magic number: m_bound = new Rectangle(0'0'16'16);
Magic Number,Sce.Atf.Controls,OverlayButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\OverlayButton.cs,Draw,The following statement contains a magic number: m_pressedImage = CreateNewBitmap(m_backgroundImage' 0.0f' -0.1f);
Magic Number,Sce.Atf.Controls,OverlayButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\OverlayButton.cs,Draw,The following statement contains a magic number: m_hoverImage = CreateNewBitmap(m_backgroundImage' 0.8f' 0.1f);
Magic Number,Sce.Atf.Controls,OverlayButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\OverlayButton.cs,Draw,The following statement contains a magic number: m_hoverImage = CreateNewBitmap(m_backgroundImage' 0.8f' 0.1f);
Magic Number,Sce.Atf.Controls,OverlayButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\OverlayButton.cs,Draw,The following statement contains a magic number: g.DrawString(Text' Parent.Font' brush'                         m_bound.Left + (m_bound.Width - size.Width) / 2.0f'                         m_bound.Top + (m_bound.Height - size.Height) / 2.0f);
Magic Number,Sce.Atf.Controls,OverlayButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\OverlayButton.cs,Draw,The following statement contains a magic number: g.DrawString(Text' Parent.Font' brush'                         m_bound.Left + (m_bound.Width - size.Width) / 2.0f'                         m_bound.Top + (m_bound.Height - size.Height) / 2.0f);
Magic Number,Sce.Atf.Controls,ProgressDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: progressBar1.Step = 5;
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawBorder3D(                      e.Graphics'                      x - m_splitterThickness / 2'                      -1'                      m_splitterThickness'                      Height + 2);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawBorder3D(                      e.Graphics'                      x - m_splitterThickness / 2'                      -1'                      m_splitterThickness'                      Height + 2);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawBorder3D(                      e.Graphics'                      -1'                      y - m_splitterThickness / 2'                      Width + 2'                      m_splitterThickness);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawBorder3D(                      e.Graphics'                      -1'                      y - m_splitterThickness / 2'                      Width + 2'                      m_splitterThickness);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawBorder3D(                      e.Graphics'                      x - m_splitterThickness / 2'                      y - m_splitterThickness / 2'                      m_splitterThickness'                      m_splitterThickness'                      Border3DStyle.Flat'                      Border3DSide.Middle);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawBorder3D(                      e.Graphics'                      x - m_splitterThickness / 2'                      y - m_splitterThickness / 2'                      m_splitterThickness'                      m_splitterThickness'                      Border3DStyle.Flat'                      Border3DSide.Middle);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: rect.Inflate(2' 2);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: rect.Inflate(2' 2);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawBorder(                          e.Graphics'                          rect'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawBorder(                          e.Graphics'                          rect'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawBorder(                          e.Graphics'                          rect'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,OnPaint,The following statement contains a magic number: ControlPaint.DrawBorder(                          e.Graphics'                          rect'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid'                          Color.Blue'                          2'                          ButtonBorderStyle.Solid);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeTopLeft,The following statement contains a magic number: int x = (int)(m_splitX * Width) - m_splitterThickness / 2;
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeTopLeft,The following statement contains a magic number: int y = (int)(m_splitY * Height) - m_splitterThickness / 2;
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeTopLeft,The following statement contains a magic number: m_topLeft.Bounds = new Rectangle(1' 1' x - 2' y - 2);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeTopLeft,The following statement contains a magic number: m_topLeft.Bounds = new Rectangle(1' 1' x - 2' y - 2);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeTopRight,The following statement contains a magic number: int x = (int)(m_splitX * Width) - m_splitterThickness / 2 + m_splitterThickness;
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeTopRight,The following statement contains a magic number: int y = (int)(m_splitY * Height) - m_splitterThickness / 2;
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeTopRight,The following statement contains a magic number: m_topRight.Bounds = new Rectangle(x' 1' Width - x - 1' y - 2);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeBottomLeft,The following statement contains a magic number: int x = (int)(m_splitX * Width) - m_splitterThickness / 2;
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeBottomLeft,The following statement contains a magic number: int y = (int)(m_splitY * Height) - m_splitterThickness / 2 + m_splitterThickness;
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeBottomLeft,The following statement contains a magic number: m_bottomLeft.Bounds = new Rectangle(1' y' x - 2' Height - y - 1);
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeBottomRight,The following statement contains a magic number: int x = (int)(m_splitX * Width) - m_splitterThickness / 2 + m_splitterThickness;
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,SizeBottomRight,The following statement contains a magic number: int y = (int)(m_splitY * Height) - m_splitterThickness / 2 + m_splitterThickness;
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,IsOverSplitX,The following statement contains a magic number: return Math.Abs(GetSplitX() - x) < m_splitterThickness / 2 + m_tolerance;
Magic Number,Sce.Atf.Controls,QuadPanelControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\QuadPanelControl.cs,IsOverSplitY,The following statement contains a magic number: return Math.Abs(GetSplitY() - y) < m_splitterThickness / 2 + m_tolerance;
Magic Number,Sce.Atf.Controls,SplitButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SplitButton.cs,GetPreferredSize,The following statement contains a magic number: return preferredSize + new Size(PushButtonWidth + BorderSize*2' 0);
Magic Number,Sce.Atf.Controls,SplitButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SplitButton.cs,OnPaint,The following statement contains a magic number: m_dropDownRectangle = new Rectangle(bounds.Right - PushButtonWidth - 1' BorderSize' PushButtonWidth'                                                bounds.Height - BorderSize*2);
Magic Number,Sce.Atf.Controls,SplitButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SplitButton.cs,OnPaint,The following statement contains a magic number: var focusRect =                  new Rectangle(internalBorder'                                internalBorder'                                bounds.Width - m_dropDownRectangle.Width - internalBorder'                                bounds.Height - (internalBorder*2));
Magic Number,Sce.Atf.Controls,SplitButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: var middle = new Point(Convert.ToInt32(dropDownRect.Left + dropDownRect.Width/2)'                                     Convert.ToInt32(dropDownRect.Top + dropDownRect.Height/2));
Magic Number,Sce.Atf.Controls,SplitButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: var middle = new Point(Convert.ToInt32(dropDownRect.Left + dropDownRect.Width/2)'                                     Convert.ToInt32(dropDownRect.Top + dropDownRect.Height/2));
Magic Number,Sce.Atf.Controls,SplitButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: middle.X += (dropDownRect.Width%2);
Magic Number,Sce.Atf.Controls,SplitButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: var arrow = new[]                              {                                  new Point(middle.X - 2' middle.Y - 1)' new Point(middle.X + 3' middle.Y - 1)'                                  new Point(middle.X' middle.Y + 2)                              };
Magic Number,Sce.Atf.Controls,SplitButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: var arrow = new[]                              {                                  new Point(middle.X - 2' middle.Y - 1)' new Point(middle.X + 3' middle.Y - 1)'                                  new Point(middle.X' middle.Y + 2)                              };
Magic Number,Sce.Atf.Controls,SplitButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SplitButton.cs,PaintArrow,The following statement contains a magic number: var arrow = new[]                              {                                  new Point(middle.X - 2' middle.Y - 1)' new Point(middle.X + 3' middle.Y - 1)'                                  new Point(middle.X' middle.Y + 2)                              };
Magic Number,Sce.Atf.Controls,BackgroundThread,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThreadSafeProgressDialog.cs,ThreadUnsafeUpdateLocation,The following statement contains a magic number: point.Offset((bounds.Width - m_dialog.Width) / 2' (bounds.Height - m_dialog.Height) / 2);
Magic Number,Sce.Atf.Controls,BackgroundThread,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThreadSafeProgressDialog.cs,ThreadUnsafeUpdateLocation,The following statement contains a magic number: point.Offset((bounds.Width - m_dialog.Width) / 2' (bounds.Height - m_dialog.Height) / 2);
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,ThumbnailControl,The following statement contains a magic number: m_hoverTimer = new Timer {Interval = 500};
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,OnPaint,The following statement contains a magic number: Rectangle indicatorRect = new Rectangle(                                  new Point(position.X - 2' position.Y - 2)'                                  m_indicatorImages.ImageSize);
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,OnPaint,The following statement contains a magic number: Rectangle indicatorRect = new Rectangle(                                  new Point(position.X - 2' position.Y - 2)'                                  m_indicatorImages.ImageSize);
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,HoverTimerTick,The following statement contains a magic number: m_hoverLabel =                      new HoverLabel(m_hoverThumbnail.Description)                          {                              Location = new Point(MousePosition.X - 8' MousePosition.Y + 8)                          };
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,HoverTimerTick,The following statement contains a magic number: m_hoverLabel =                      new HoverLabel(m_hoverThumbnail.Description)                          {                              Location = new Point(MousePosition.X - 8' MousePosition.Y + 8)                          };
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,RecalculateClientSize,The following statement contains a magic number: thumbsPerCol = (ClientSize.Height - ThumbnailMargin) / (m_thumbnailSize + (2 * ThumbnailMargin) + m_fontHeight);
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,RecalculateClientSize,The following statement contains a magic number: (m_items.Count % 2) == 0
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,RecalculateClientSize,The following statement contains a magic number: size.Height = ((thumbsPerCol) * (m_thumbnailSize + (2 * ThumbnailMargin) + m_fontHeight)) + ThumbnailMargin;
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,GetThumbnailRect,The following statement contains a magic number: int xInset = Math.Max(0' m_thumbnailSize - thumbSize.Width) / 2;
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,GetThumbnailRect,The following statement contains a magic number: int yInset = Math.Max(0' m_thumbnailSize - thumbSize.Height) / 2;
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,GetThumbnailBoundaryRect,The following statement contains a magic number: return new Rectangle(position.X - 4' position.Y - 4'                  m_thumbnailSize + 8' m_thumbnailSize + 8);
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,GetThumbnailBoundaryRect,The following statement contains a magic number: return new Rectangle(position.X - 4' position.Y - 4'                  m_thumbnailSize + 8' m_thumbnailSize + 8);
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,GetThumbnailBoundaryRect,The following statement contains a magic number: return new Rectangle(position.X - 4' position.Y - 4'                  m_thumbnailSize + 8' m_thumbnailSize + 8);
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,GetThumbnailBoundaryRect,The following statement contains a magic number: return new Rectangle(position.X - 4' position.Y - 4'                  m_thumbnailSize + 8' m_thumbnailSize + 8);
Magic Number,Sce.Atf.Controls,ThumbnailControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ThumbnailControl.cs,NextThumbnailPosition,The following statement contains a magic number: position.Y += m_thumbnailSize + m_fontHeight + (2 * ThumbnailMargin);
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,TreeControl,The following statement contains a magic number: m_dragHoverExpandTimer.Interval = 1000;
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,TreeControl,The following statement contains a magic number: m_autoScrollTimer.Interval = 200;
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,TreeControl,The following statement contains a magic number: m_vScrollBar.SmallChange = 8;
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnMouseDown,The following statement contains a magic number: m_lastMouseDownWasDoubleClick = (e.Clicks == 2);
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnMouseWheel,The following statement contains a magic number: int value = m_vScrollBar.Value - e.Delta / 2;
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: int halfExpanderWidth = expanderSize.Width / 2;
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: int halfExpanderHeight = expanderSize.Height / 2;
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: int halfCheckBoxHeight = m_itemRenderer.CheckBoxSize.Height / 2;
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: List<int> segmentYs = new List<int>(16);
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: int rowCenterY = info.Y + rowHeight / 2;
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: m_itemRenderer.DrawImage(m_stateImageList' g' info.StateImageLeft' rowCenterY - m_stateImageList.ImageSize.Height / 2' node.StateImageIndex);
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: m_itemRenderer.DrawImage(m_imageList' g' info.ImageLeft' rowCenterY - m_imageList.ImageSize.Height / 2' node.ImageIndex);
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: g.DrawImage(m_filterImage' info.ImageLeft + m_filterImage.Width' rowCenterY - (m_filterImage.Height + yPadding) / 2);
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: m_itemRenderer.DrawLabel(node' g' info.LabelLeft + filterOffset' rowCenterY - node.LabelHeight / 2);
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: m_itemRenderer.DrawData(node' g' info.LabelLeft + filterOffset' rowCenterY - node.LabelHeight / 2);
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: g.DrawLine(Pens.Red'                              new Point(info.X - Indent + halfExpanderWidth' info.Y -2)'                              new Point(info.X - Indent + halfExpanderWidth + 100' info.Y - 2));
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: g.DrawLine(Pens.Red'                              new Point(info.X - Indent + halfExpanderWidth' info.Y -2)'                              new Point(info.X - Indent + halfExpanderWidth + 100' info.Y - 2));
Magic Number,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnPaint,The following statement contains a magic number: g.DrawLine(Pens.Red'                              new Point(info.X - Indent + halfExpanderWidth' info.Y -2)'                              new Point(info.X - Indent + halfExpanderWidth + 100' info.Y - 2));
Magic Number,Sce.Atf.Controls,TreeItemRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,MeasureDisplayStringWidth,The following statement contains a magic number: RectangleF rect = new RectangleF(0' 0' 1600' 1600);
Magic Number,Sce.Atf.Controls,TreeItemRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,MeasureDisplayStringWidth,The following statement contains a magic number: RectangleF rect = new RectangleF(0' 0' 1600' 1600);
Magic Number,Sce.Atf.Controls,TreeItemRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawLabel,The following statement contains a magic number: matchedRect.X += 2;
Magic Number,Sce.Atf.Controls,TreeItemRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawLabel,The following statement contains a magic number: matchedRect.Width -= 2;
Magic Number,Sce.Atf.Controls,TreeItemRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawBackground,The following statement contains a magic number: bgRect.Y -= 3;
Magic Number,Sce.Atf.Controls,TreeItemRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawCheckBox,The following statement contains a magic number: var rect2 = Rectangle.Inflate(bounds'-4' -4);
Magic Number,Sce.Atf.Controls,TreeItemRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawCheckBox,The following statement contains a magic number: var rect2 = Rectangle.Inflate(bounds'-4' -4);
Magic Number,Sce.Atf.Controls,TreeItemRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawCategory,The following statement contains a magic number: var color1 = (CategoryStartColor.A == 0) ?                  ColorUtil.GetShade(Owner.BackColor' 0.97f) :                  CategoryStartColor;
Magic Number,Sce.Atf.Controls,TreeItemRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawCategory,The following statement contains a magic number: var color2 = (CategoryEndColor.A == 0) ?                  ColorUtil.GetShade(CategoryStartColor' 0.9f) :                  CategoryEndColor;
Magic Number,Sce.Atf.Controls,ChristmasTreeRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,ChristmasTreeRenderer,The following statement contains a magic number: ExpanderSize = new Size(16' 8);
Magic Number,Sce.Atf.Controls,ChristmasTreeRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,ChristmasTreeRenderer,The following statement contains a magic number: ExpanderSize = new Size(16' 8);
Magic Number,Sce.Atf.Controls,ChristmasTreeRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,ChristmasTreeRenderer,The following statement contains a magic number: CheckBoxSize = new Size(40' 32);
Magic Number,Sce.Atf.Controls,ChristmasTreeRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,ChristmasTreeRenderer,The following statement contains a magic number: CheckBoxSize = new Size(40' 32);
Magic Number,Sce.Atf.Controls,ChristmasTreeRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawExpander,The following statement contains a magic number: Size lineLength = new Size(ExpanderSize.Width - 2' ExpanderSize.Height - 2);
Magic Number,Sce.Atf.Controls,ChristmasTreeRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawExpander,The following statement contains a magic number: Size lineLength = new Size(ExpanderSize.Width - 2' ExpanderSize.Height - 2);
Magic Number,Sce.Atf.Controls,ChristmasTreeRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawExpander,The following statement contains a magic number: Point center = new Point(ExpanderSize.Width / 2' ExpanderSize.Height / 2);
Magic Number,Sce.Atf.Controls,ChristmasTreeRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeItemRenderer.cs,DrawExpander,The following statement contains a magic number: Point center = new Point(ExpanderSize.Width / 2' ExpanderSize.Height / 2);
Magic Number,Sce.Atf.Controls,TreeListControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListControl.cs,TreeListControl,The following statement contains a magic number: ContentVerticalOffset = FontHeight+2;
Magic Number,Sce.Atf.Controls,TreeListControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListControl.cs,OnPaint,The following statement contains a magic number: Rectangle textRect = new Rectangle(leftOffset + 3' Margin.Top' column.ActualWidth' ContentVerticalOffset);
Magic Number,Sce.Atf.Controls,TreeListControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine(m_seperatorPen' 0' ContentVerticalOffset + 2' ActualClientSize.Width'                      ContentVerticalOffset + 2);
Magic Number,Sce.Atf.Controls,TreeListControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListControl.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawLine(m_seperatorPen' 0' ContentVerticalOffset + 2' ActualClientSize.Width'                      ContentVerticalOffset + 2);
Magic Number,Sce.Atf.Controls,TreeListControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListControl.cs,HitColumnSeperator,The following statement contains a magic number: x <= (left + 2) && x >= (left - 2)
Magic Number,Sce.Atf.Controls,TreeListControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListControl.cs,HitColumnSeperator,The following statement contains a magic number: x <= (left + 2) && x >= (left - 2)
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawExtraneousStuff,The following statement contains a magic number: FindExpandedRelativeAboveAtLevel(nodeThis' i + 2' out nodeTemp);
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawExpander,The following statement contains a magic number: const int iRectOffset = 5;
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawExpander,The following statement contains a magic number: const int iTwoTimesRectOffset = iRectOffset * 2;
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawExpander,The following statement contains a magic number: const int iLineOffset = 3;
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawExpander,The following statement contains a magic number: Point center =                      new Point(                          bounds.X + (bounds.Width / 2)'                          bounds.Y + (bounds.Height / 2));
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawExpander,The following statement contains a magic number: Point center =                      new Point(                          bounds.X + (bounds.Width / 2)'                          bounds.Y + (bounds.Height / 2));
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawCollapser,The following statement contains a magic number: const int iRectOffset = 5;
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawCollapser,The following statement contains a magic number: const int iTwoTimesRectOffset = iRectOffset * 2;
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawCollapser,The following statement contains a magic number: const int iLineOffset = 3;
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawCollapser,The following statement contains a magic number: Point center =                      new Point(                          bounds.X + (bounds.Width / 2)'                          bounds.Y + (bounds.Height / 2));
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawCollapser,The following statement contains a magic number: Point center =                      new Point(                          bounds.X + (bounds.Width / 2)'                          bounds.Y + (bounds.Height / 2));
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawVerticalLine,The following statement contains a magic number: Point center =                      new Point(                          bounds.X + (bounds.Width / 2)'                          bounds.Y + (bounds.Height / 2));
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawVerticalLine,The following statement contains a magic number: Point center =                      new Point(                          bounds.X + (bounds.Width / 2)'                          bounds.Y + (bounds.Height / 2));
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawElbow,The following statement contains a magic number: Point center =                      new Point(                          bounds.X + (bounds.Width / 2)'                          bounds.Y + (bounds.Height / 2));
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawElbow,The following statement contains a magic number: Point center =                      new Point(                          bounds.X + (bounds.Width / 2)'                          bounds.Y + (bounds.Height / 2));
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawHorizontalLine,The following statement contains a magic number: Point center =                      new Point(                          bounds.X + (bounds.Width / 2)'                          bounds.Y + (bounds.Height / 2));
Magic Number,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,DrawHorizontalLine,The following statement contains a magic number: Point center =                      new Point(                          bounds.X + (bounds.Width / 2)'                          bounds.Y + (bounds.Height / 2));
Magic Number,Sce.Atf.Controls,BalloonToolTipHelper,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\WindowLayoutNewDialog.cs,BalloonToolTipHelper,The following statement contains a magic number: m_toolTip =                  new ToolTip                      {                          IsBalloon = true'                          ReshowDelay = 9999'                          ShowAlways = true'                          UseFading = true                      };
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,Initialize,The following statement contains a magic number: menuItem.Image = CreateBackColorIcon(m_colorPresets[i].Color' 24' 24);
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,Initialize,The following statement contains a magic number: menuItem.Image = CreateBackColorIcon(m_colorPresets[i].Color' 24' 24);
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,InitColorPresets,The following statement contains a magic number: m_colorPresets = new ColorPreset[6];
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,InitColorPresets,The following statement contains a magic number: m_colorPresets[2] = new ColorPreset()                  {                      Name = "Green".Localize()'                      Color = Color.FromArgb(178' 255' 161)                  };
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,InitColorPresets,The following statement contains a magic number: m_colorPresets[2] = new ColorPreset()                  {                      Name = "Green".Localize()'                      Color = Color.FromArgb(178' 255' 161)                  };
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,InitColorPresets,The following statement contains a magic number: m_colorPresets[2] = new ColorPreset()                  {                      Name = "Green".Localize()'                      Color = Color.FromArgb(178' 255' 161)                  };
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,InitColorPresets,The following statement contains a magic number: m_colorPresets[2] = new ColorPreset()                  {                      Name = "Green".Localize()'                      Color = Color.FromArgb(178' 255' 161)                  };
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,InitColorPresets,The following statement contains a magic number: m_colorPresets[3] = new ColorPreset()                  {                      Name = "Pink".Localize()'                      Color = Color.LightPink                  };
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,InitColorPresets,The following statement contains a magic number: m_colorPresets[4] = new ColorPreset()                  {                      Name = "Purple".Localize()'                      Color = Color.FromArgb(182' 202' 255)                  };
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,InitColorPresets,The following statement contains a magic number: m_colorPresets[4] = new ColorPreset()                  {                      Name = "Purple".Localize()'                      Color = Color.FromArgb(182' 202' 255)                  };
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,InitColorPresets,The following statement contains a magic number: m_colorPresets[4] = new ColorPreset()                  {                      Name = "Purple".Localize()'                      Color = Color.FromArgb(182' 202' 255)                  };
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,InitColorPresets,The following statement contains a magic number: m_colorPresets[4] = new ColorPreset()                  {                      Name = "Purple".Localize()'                      Color = Color.FromArgb(182' 202' 255)                  };
Magic Number,Sce.Atf.Controls.Adaptable,AnnotatingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotatingCommands.cs,InitColorPresets,The following statement contains a magic number: m_colorPresets[5] = new ColorPreset()                  {                      Name = "Gray".Localize()'                      Color = Color.LightGray                  };
Magic Number,Sce.Atf.Controls.Adaptable,AnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotationAdapter.cs,Pick,The following statement contains a magic number: bounds.Inflate(tolerance * -2' tolerance * -2);
Magic Number,Sce.Atf.Controls.Adaptable,AnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotationAdapter.cs,Pick,The following statement contains a magic number: bounds.Inflate(tolerance * -2' tolerance * -2);
Magic Number,Sce.Atf.Controls.Adaptable,AnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotationAdapter.cs,control_Paint,The following statement contains a magic number: float scale = Math.Min(m[0]' m[3]);
Magic Number,Sce.Atf.Controls.Adaptable,AnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotationAdapter.cs,control_Paint,The following statement contains a magic number: Matrix newTransform = new Matrix(scale' m[1]' m[2]' scale' m[4]' m[5]);
Magic Number,Sce.Atf.Controls.Adaptable,AnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotationAdapter.cs,control_Paint,The following statement contains a magic number: Matrix newTransform = new Matrix(scale' m[1]' m[2]' scale' m[4]' m[5]);
Magic Number,Sce.Atf.Controls.Adaptable,AnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AnnotationAdapter.cs,control_Paint,The following statement contains a magic number: Matrix newTransform = new Matrix(scale' m[1]' m[2]' scale' m[4]' m[5]);
Magic Number,Sce.Atf.Controls.Adaptable,AutoTranslateAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AutoTranslateAdapter.cs,AutoTranslateAdapter,The following statement contains a magic number: m_timer.Interval = 10;
Magic Number,Sce.Atf.Controls.Adaptable,AutoTranslateAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\AutoTranslateAdapter.cs,timer_Tick,The following statement contains a magic number: const int Speed = 10;
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,D2dAnnotationAdapter,The following statement contains a magic number: m_solidBrush = D2dFactory.CreateSolidBrush(Color.FromArgb(128' 120' 120' 120));
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,D2dAnnotationAdapter,The following statement contains a magic number: m_solidBrush = D2dFactory.CreateSolidBrush(Color.FromArgb(128' 120' 120' 120));
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,D2dAnnotationAdapter,The following statement contains a magic number: m_solidBrush = D2dFactory.CreateSolidBrush(Color.FromArgb(128' 120' 120' 120));
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,D2dAnnotationAdapter,The following statement contains a magic number: m_solidBrush = D2dFactory.CreateSolidBrush(Color.FromArgb(128' 120' 120' 120));
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,Pick,The following statement contains a magic number: var scrollbarRect = new Rectangle(bounds.Right - Margin.Right - ScrollBarWidth - 2 * ScrollBarMargin' bounds.Y'                                  ScrollBarWidth + 2 * ScrollBarMargin' bounds.Height);
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,Pick,The following statement contains a magic number: var scrollbarRect = new Rectangle(bounds.Right - Margin.Right - ScrollBarWidth - 2 * ScrollBarMargin' bounds.Y'                                  ScrollBarWidth + 2 * ScrollBarMargin' bounds.Height);
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_Paint,The following statement contains a magic number: m_theme.TextHighlightBrush.Opacity = 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_Paint,The following statement contains a magic number: bool drawText = (m_scaleX * m_theme.TextFormat.FontHeight) > 5.0f;
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_Paint,The following statement contains a magic number: annotation.SetTextSize(new Size(180'100));
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_Paint,The following statement contains a magic number: annotation.SetTextSize(new Size(180'100));
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The following statement contains a magic number: float borderThickness = 2.0f/m_scaleX;
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The following statement contains a magic number: textLayout.LayoutWidth = contentBounds.Width - ScrollBarWidth - 2 * ScrollBarMargin;
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The following statement contains a magic number: textBounds.Width -= ScrollBarWidth + 2 * ScrollBarMargin;
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The following statement contains a magic number: ratio > 1.1f || ratio < 0.9f
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,DrawAnnotation,The following statement contains a magic number: ratio > 1.1f || ratio < 0.9f
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,GetBounds,The following statement contains a magic number: bounds.Size = new Size((int)textSizeF.Width + 2 * Margin.Size.Width' (int)textSizeF.Height + 2 * Margin.Size.Height);
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,GetBounds,The following statement contains a magic number: bounds.Size = new Size((int)textSizeF.Width + 2 * Margin.Size.Width' (int)textSizeF.Height + 2 * Margin.Size.Height);
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_KeyPress,The following statement contains a magic number: switch (e.KeyChar)              {                  case  '\r':                                          transactionContext.DoTransaction(() =>                          {                              DeleteTextSelection(annotation);                              InsertText(annotation' "\r\n");                            }' EditAnnotation);                      annotationEditor.SetSelection(TextEditor.SelectionMode.AbsoluteLeading' annotationEditor.CaretAbsolutePosition + 2' false' false);                      break;                  case '\b':                      transactionContext.DoTransaction(() =>                          {                              if (annotationEditor.CaretAbsolutePosition != annotationEditor.CaretAnchorPosition)                                  DeleteTextSelection(annotation);                              else if (annotationEditor.CaretAbsolutePosition > 0)                              {                                  int count = 1;                                  // Need special case for surrogate pairs and CR/LF pair.                                  if (annotationEditor.CaretAbsolutePosition >= 2                                      && annotationEditor.CaretAbsolutePosition <= annotation.Text.Length)                                  {                                      char charBackOne = annotation.Text[annotationEditor.CaretAbsolutePosition - 1];                                      char charBackTwo = annotation.Text[annotationEditor.CaretAbsolutePosition - 2];                                      if ((char.IsLowSurrogate(charBackOne) && char.IsHighSurrogate(charBackTwo)) ||                                          (charBackOne == '\n' && charBackTwo == '\r'))                                      {                                          count = 2;                                      }                                  }                                  annotationEditor.SetSelection(TextEditor.SelectionMode.LeftChar' count' false' false);                                  string newText = annotationEditor.RemoveTextAt(annotation.Text' annotationEditor.CaretPosition' count);                                  textProperty.SetValue(annotation' newText' null);                              }                          }' EditAnnotation);                      break;                  default:                      if (e.KeyChar >= 0x20) // allow normal characters                       {                          InsertChar(annotation' annotationEditor' e.KeyChar);                          AdaptedControl.Invalidate();                      }                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_KeyPress,The following statement contains a magic number: switch (e.KeyChar)              {                  case  '\r':                                          transactionContext.DoTransaction(() =>                          {                              DeleteTextSelection(annotation);                              InsertText(annotation' "\r\n");                            }' EditAnnotation);                      annotationEditor.SetSelection(TextEditor.SelectionMode.AbsoluteLeading' annotationEditor.CaretAbsolutePosition + 2' false' false);                      break;                  case '\b':                      transactionContext.DoTransaction(() =>                          {                              if (annotationEditor.CaretAbsolutePosition != annotationEditor.CaretAnchorPosition)                                  DeleteTextSelection(annotation);                              else if (annotationEditor.CaretAbsolutePosition > 0)                              {                                  int count = 1;                                  // Need special case for surrogate pairs and CR/LF pair.                                  if (annotationEditor.CaretAbsolutePosition >= 2                                      && annotationEditor.CaretAbsolutePosition <= annotation.Text.Length)                                  {                                      char charBackOne = annotation.Text[annotationEditor.CaretAbsolutePosition - 1];                                      char charBackTwo = annotation.Text[annotationEditor.CaretAbsolutePosition - 2];                                      if ((char.IsLowSurrogate(charBackOne) && char.IsHighSurrogate(charBackTwo)) ||                                          (charBackOne == '\n' && charBackTwo == '\r'))                                      {                                          count = 2;                                      }                                  }                                  annotationEditor.SetSelection(TextEditor.SelectionMode.LeftChar' count' false' false);                                  string newText = annotationEditor.RemoveTextAt(annotation.Text' annotationEditor.CaretPosition' count);                                  textProperty.SetValue(annotation' newText' null);                              }                          }' EditAnnotation);                      break;                  default:                      if (e.KeyChar >= 0x20) // allow normal characters                       {                          InsertChar(annotation' annotationEditor' e.KeyChar);                          AdaptedControl.Invalidate();                      }                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_KeyPress,The following statement contains a magic number: switch (e.KeyChar)              {                  case  '\r':                                          transactionContext.DoTransaction(() =>                          {                              DeleteTextSelection(annotation);                              InsertText(annotation' "\r\n");                            }' EditAnnotation);                      annotationEditor.SetSelection(TextEditor.SelectionMode.AbsoluteLeading' annotationEditor.CaretAbsolutePosition + 2' false' false);                      break;                  case '\b':                      transactionContext.DoTransaction(() =>                          {                              if (annotationEditor.CaretAbsolutePosition != annotationEditor.CaretAnchorPosition)                                  DeleteTextSelection(annotation);                              else if (annotationEditor.CaretAbsolutePosition > 0)                              {                                  int count = 1;                                  // Need special case for surrogate pairs and CR/LF pair.                                  if (annotationEditor.CaretAbsolutePosition >= 2                                      && annotationEditor.CaretAbsolutePosition <= annotation.Text.Length)                                  {                                      char charBackOne = annotation.Text[annotationEditor.CaretAbsolutePosition - 1];                                      char charBackTwo = annotation.Text[annotationEditor.CaretAbsolutePosition - 2];                                      if ((char.IsLowSurrogate(charBackOne) && char.IsHighSurrogate(charBackTwo)) ||                                          (charBackOne == '\n' && charBackTwo == '\r'))                                      {                                          count = 2;                                      }                                  }                                  annotationEditor.SetSelection(TextEditor.SelectionMode.LeftChar' count' false' false);                                  string newText = annotationEditor.RemoveTextAt(annotation.Text' annotationEditor.CaretPosition' count);                                  textProperty.SetValue(annotation' newText' null);                              }                          }' EditAnnotation);                      break;                  default:                      if (e.KeyChar >= 0x20) // allow normal characters                       {                          InsertChar(annotation' annotationEditor' e.KeyChar);                          AdaptedControl.Invalidate();                      }                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_KeyPress,The following statement contains a magic number: switch (e.KeyChar)              {                  case  '\r':                                          transactionContext.DoTransaction(() =>                          {                              DeleteTextSelection(annotation);                              InsertText(annotation' "\r\n");                            }' EditAnnotation);                      annotationEditor.SetSelection(TextEditor.SelectionMode.AbsoluteLeading' annotationEditor.CaretAbsolutePosition + 2' false' false);                      break;                  case '\b':                      transactionContext.DoTransaction(() =>                          {                              if (annotationEditor.CaretAbsolutePosition != annotationEditor.CaretAnchorPosition)                                  DeleteTextSelection(annotation);                              else if (annotationEditor.CaretAbsolutePosition > 0)                              {                                  int count = 1;                                  // Need special case for surrogate pairs and CR/LF pair.                                  if (annotationEditor.CaretAbsolutePosition >= 2                                      && annotationEditor.CaretAbsolutePosition <= annotation.Text.Length)                                  {                                      char charBackOne = annotation.Text[annotationEditor.CaretAbsolutePosition - 1];                                      char charBackTwo = annotation.Text[annotationEditor.CaretAbsolutePosition - 2];                                      if ((char.IsLowSurrogate(charBackOne) && char.IsHighSurrogate(charBackTwo)) ||                                          (charBackOne == '\n' && charBackTwo == '\r'))                                      {                                          count = 2;                                      }                                  }                                  annotationEditor.SetSelection(TextEditor.SelectionMode.LeftChar' count' false' false);                                  string newText = annotationEditor.RemoveTextAt(annotation.Text' annotationEditor.CaretPosition' count);                                  textProperty.SetValue(annotation' newText' null);                              }                          }' EditAnnotation);                      break;                  default:                      if (e.KeyChar >= 0x20) // allow normal characters                       {                          InsertChar(annotation' annotationEditor' e.KeyChar);                          AdaptedControl.Invalidate();                      }                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,HideCaret,The following statement contains a magic number: User32.SetCaretPos(-10' 0);
Magic Number,Sce.Atf.Controls.Adaptable,D2dGridAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dGridAdapter.cs,SetGridColor,The following statement contains a magic number: float intensity = ((float)gridColor.R + (float)gridColor.G + (float)gridColor.B) / 3;
Magic Number,Sce.Atf.Controls.Adaptable,D2dGridAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dGridAdapter.cs,SetGridColor,The following statement contains a magic number: float shading = (intensity < 128) ? m_gridContrast : -m_gridContrast;
Magic Number,Sce.Atf.Controls.Adaptable,GridAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\GridAdapter.cs,SetGridColor,The following statement contains a magic number: float intensity = ((float)gridColor.R + (float)gridColor.G + (float)gridColor.B) / 3;
Magic Number,Sce.Atf.Controls.Adaptable,GridAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\GridAdapter.cs,SetGridColor,The following statement contains a magic number: float shading =  (intensity < 128) ? m_gridContrast : -m_gridContrast;
Magic Number,Sce.Atf.Controls.Adaptable,HoverAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\HoverAdapter.cs,HoverAdapter,The following statement contains a magic number: m_hoverTimer.Interval = 10;
Magic Number,Sce.Atf.Controls.Adaptable,TransformAdapters,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\ITransformAdapter.cs,SetTransform,The following statement contains a magic number: transformAdapter.SetTransform(m[0]' m[3]' m[4]' m[5]);
Magic Number,Sce.Atf.Controls.Adaptable,TransformAdapters,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\ITransformAdapter.cs,SetTransform,The following statement contains a magic number: transformAdapter.SetTransform(m[0]' m[3]' m[4]' m[5]);
Magic Number,Sce.Atf.Controls.Adaptable,TransformAdapters,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\ITransformAdapter.cs,SetTransform,The following statement contains a magic number: transformAdapter.SetTransform(m[0]' m[3]' m[4]' m[5]);
Magic Number,Sce.Atf.Controls.Adaptable,LabelEditAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\LabelEditAdapter.cs,BeginEdit,The following statement contains a magic number: fontScale *= transform.Elements[3];
Magic Number,Sce.Atf.Controls.Adaptable,LabelEditAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\LabelEditAdapter.cs,SizeTextBox,The following statement contains a magic number: int textBoxY = m_labelBounds.Y + m_labelBounds.Height / 2 - actualSize.Height / 2;
Magic Number,Sce.Atf.Controls.Adaptable,LabelEditAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\LabelEditAdapter.cs,SizeTextBox,The following statement contains a magic number: int textBoxY = m_labelBounds.Y + m_labelBounds.Height / 2 - actualSize.Height / 2;
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)                  {                      case Direction.Left:                          dragDir = new PointF(1' 0);                          break;                      case Direction.Right:                          dragDir = new PointF(-1' 0);                          break;                      case Direction.Top:                          dragDir = new PointF(0' 1);                          break;                      case Direction.Bottom:                          dragDir = new PointF(0' -1);                          break;                      case Direction.TopLeft:                          dragDir = new PointF(.707f' .707f);                          break;                      case Direction.BottomRight:                          dragDir = new PointF(-.707f' -.707f);                          break;                      case Direction.TopRight:                          dragDir = new PointF(-.707f' .707f);                          break;                      case Direction.BottomLeft:                          dragDir = new PointF(.707f' -.707f);                          break;                  }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)                  {                      case Direction.Left:                          dragDir = new PointF(1' 0);                          break;                      case Direction.Right:                          dragDir = new PointF(-1' 0);                          break;                      case Direction.Top:                          dragDir = new PointF(0' 1);                          break;                      case Direction.Bottom:                          dragDir = new PointF(0' -1);                          break;                      case Direction.TopLeft:                          dragDir = new PointF(.707f' .707f);                          break;                      case Direction.BottomRight:                          dragDir = new PointF(-.707f' -.707f);                          break;                      case Direction.TopRight:                          dragDir = new PointF(-.707f' .707f);                          break;                      case Direction.BottomLeft:                          dragDir = new PointF(.707f' -.707f);                          break;                  }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)                  {                      case Direction.Left:                          dragDir = new PointF(1' 0);                          break;                      case Direction.Right:                          dragDir = new PointF(-1' 0);                          break;                      case Direction.Top:                          dragDir = new PointF(0' 1);                          break;                      case Direction.Bottom:                          dragDir = new PointF(0' -1);                          break;                      case Direction.TopLeft:                          dragDir = new PointF(.707f' .707f);                          break;                      case Direction.BottomRight:                          dragDir = new PointF(-.707f' -.707f);                          break;                      case Direction.TopRight:                          dragDir = new PointF(-.707f' .707f);                          break;                      case Direction.BottomLeft:                          dragDir = new PointF(.707f' -.707f);                          break;                  }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)                  {                      case Direction.Left:                          dragDir = new PointF(1' 0);                          break;                      case Direction.Right:                          dragDir = new PointF(-1' 0);                          break;                      case Direction.Top:                          dragDir = new PointF(0' 1);                          break;                      case Direction.Bottom:                          dragDir = new PointF(0' -1);                          break;                      case Direction.TopLeft:                          dragDir = new PointF(.707f' .707f);                          break;                      case Direction.BottomRight:                          dragDir = new PointF(-.707f' -.707f);                          break;                      case Direction.TopRight:                          dragDir = new PointF(-.707f' .707f);                          break;                      case Direction.BottomLeft:                          dragDir = new PointF(.707f' -.707f);                          break;                  }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)                  {                      case Direction.Left:                          dragDir = new PointF(1' 0);                          break;                      case Direction.Right:                          dragDir = new PointF(-1' 0);                          break;                      case Direction.Top:                          dragDir = new PointF(0' 1);                          break;                      case Direction.Bottom:                          dragDir = new PointF(0' -1);                          break;                      case Direction.TopLeft:                          dragDir = new PointF(.707f' .707f);                          break;                      case Direction.BottomRight:                          dragDir = new PointF(-.707f' -.707f);                          break;                      case Direction.TopRight:                          dragDir = new PointF(-.707f' .707f);                          break;                      case Direction.BottomLeft:                          dragDir = new PointF(.707f' -.707f);                          break;                  }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)                  {                      case Direction.Left:                          dragDir = new PointF(1' 0);                          break;                      case Direction.Right:                          dragDir = new PointF(-1' 0);                          break;                      case Direction.Top:                          dragDir = new PointF(0' 1);                          break;                      case Direction.Bottom:                          dragDir = new PointF(0' -1);                          break;                      case Direction.TopLeft:                          dragDir = new PointF(.707f' .707f);                          break;                      case Direction.BottomRight:                          dragDir = new PointF(-.707f' -.707f);                          break;                      case Direction.TopRight:                          dragDir = new PointF(-.707f' .707f);                          break;                      case Direction.BottomLeft:                          dragDir = new PointF(.707f' -.707f);                          break;                  }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)                  {                      case Direction.Left:                          dragDir = new PointF(1' 0);                          break;                      case Direction.Right:                          dragDir = new PointF(-1' 0);                          break;                      case Direction.Top:                          dragDir = new PointF(0' 1);                          break;                      case Direction.Bottom:                          dragDir = new PointF(0' -1);                          break;                      case Direction.TopLeft:                          dragDir = new PointF(.707f' .707f);                          break;                      case Direction.BottomRight:                          dragDir = new PointF(-.707f' -.707f);                          break;                      case Direction.TopRight:                          dragDir = new PointF(-.707f' .707f);                          break;                      case Direction.BottomLeft:                          dragDir = new PointF(.707f' -.707f);                          break;                  }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)                  {                      case Direction.Left:                          dragDir = new PointF(1' 0);                          break;                      case Direction.Right:                          dragDir = new PointF(-1' 0);                          break;                      case Direction.Top:                          dragDir = new PointF(0' 1);                          break;                      case Direction.Bottom:                          dragDir = new PointF(0' -1);                          break;                      case Direction.TopLeft:                          dragDir = new PointF(.707f' .707f);                          break;                      case Direction.BottomRight:                          dragDir = new PointF(-.707f' -.707f);                          break;                      case Direction.TopRight:                          dragDir = new PointF(-.707f' .707f);                          break;                      case Direction.BottomLeft:                          dragDir = new PointF(.707f' -.707f);                          break;                  }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)              {                  case Direction.Left:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.Y += delta.X * 0.5f;                          currentBounds.Height -= delta.X;                      }                      break;                  case Direction.Right:                      currentBounds.Width += delta.X;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.Y -= delta.X * 0.5f;                          currentBounds.Height += delta.X;                      }                      break;                  case Direction.Top:                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.X += delta.Y * 0.5f;                          currentBounds.Width -= delta.Y;                      }                      break;                  case Direction.Bottom:                      currentBounds.Height += delta.Y;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.X -= delta.Y * 0.5f;                          currentBounds.Width += delta.Y;                      }                      break;                  case Direction.TopLeft:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      break;                  case Direction.BottomRight:                      currentBounds.Width += delta.X;                      currentBounds.Height += delta.Y;                      break;                  case Direction.TopRight:                      currentBounds.Width += delta.X;                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      break;                  case Direction.BottomLeft:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      currentBounds.Height += delta.Y;                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)              {                  case Direction.Left:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.Y += delta.X * 0.5f;                          currentBounds.Height -= delta.X;                      }                      break;                  case Direction.Right:                      currentBounds.Width += delta.X;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.Y -= delta.X * 0.5f;                          currentBounds.Height += delta.X;                      }                      break;                  case Direction.Top:                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.X += delta.Y * 0.5f;                          currentBounds.Width -= delta.Y;                      }                      break;                  case Direction.Bottom:                      currentBounds.Height += delta.Y;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.X -= delta.Y * 0.5f;                          currentBounds.Width += delta.Y;                      }                      break;                  case Direction.TopLeft:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      break;                  case Direction.BottomRight:                      currentBounds.Width += delta.X;                      currentBounds.Height += delta.Y;                      break;                  case Direction.TopRight:                      currentBounds.Width += delta.X;                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      break;                  case Direction.BottomLeft:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      currentBounds.Height += delta.Y;                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)              {                  case Direction.Left:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.Y += delta.X * 0.5f;                          currentBounds.Height -= delta.X;                      }                      break;                  case Direction.Right:                      currentBounds.Width += delta.X;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.Y -= delta.X * 0.5f;                          currentBounds.Height += delta.X;                      }                      break;                  case Direction.Top:                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.X += delta.Y * 0.5f;                          currentBounds.Width -= delta.Y;                      }                      break;                  case Direction.Bottom:                      currentBounds.Height += delta.Y;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.X -= delta.Y * 0.5f;                          currentBounds.Width += delta.Y;                      }                      break;                  case Direction.TopLeft:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      break;                  case Direction.BottomRight:                      currentBounds.Width += delta.X;                      currentBounds.Height += delta.Y;                      break;                  case Direction.TopRight:                      currentBounds.Width += delta.X;                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      break;                  case Direction.BottomLeft:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      currentBounds.Height += delta.Y;                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following statement contains a magic number: switch (m_direction)              {                  case Direction.Left:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.Y += delta.X * 0.5f;                          currentBounds.Height -= delta.X;                      }                      break;                  case Direction.Right:                      currentBounds.Width += delta.X;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.Y -= delta.X * 0.5f;                          currentBounds.Height += delta.X;                      }                      break;                  case Direction.Top:                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.X += delta.Y * 0.5f;                          currentBounds.Width -= delta.Y;                      }                      break;                  case Direction.Bottom:                      currentBounds.Height += delta.Y;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.X -= delta.Y * 0.5f;                          currentBounds.Width += delta.Y;                      }                      break;                  case Direction.TopLeft:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      break;                  case Direction.BottomRight:                      currentBounds.Width += delta.X;                      currentBounds.Height += delta.Y;                      break;                  case Direction.TopRight:                      currentBounds.Width += delta.X;                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      break;                  case Direction.BottomLeft:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      currentBounds.Height += delta.Y;                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetHandleRect,The following statement contains a magic number: Rectangle result = new Rectangle(                  bounds.X + bounds.Width / 2 - HandleSize'                  bounds.Y + bounds.Height / 2 - HandleSize'                  HandleSize * 2'                  HandleSize * 2);
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetHandleRect,The following statement contains a magic number: Rectangle result = new Rectangle(                  bounds.X + bounds.Width / 2 - HandleSize'                  bounds.Y + bounds.Height / 2 - HandleSize'                  HandleSize * 2'                  HandleSize * 2);
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetHandleRect,The following statement contains a magic number: Rectangle result = new Rectangle(                  bounds.X + bounds.Width / 2 - HandleSize'                  bounds.Y + bounds.Height / 2 - HandleSize'                  HandleSize * 2'                  HandleSize * 2);
Magic Number,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetHandleRect,The following statement contains a magic number: Rectangle result = new Rectangle(                  bounds.X + bounds.Width / 2 - HandleSize'                  bounds.Y + bounds.Height / 2 - HandleSize'                  HandleSize * 2'                  HandleSize * 2);
Magic Number,Sce.Atf.Controls.Adaptable,MouseWheelManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseWheelManipulator.cs,control_MouseWheel,The following statement contains a magic number: float delta = 1.0f + e.Delta / 1200.0f;
Magic Number,Sce.Atf.Controls.Adaptable,ScrollbarAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\ScrollbarAdapter.cs,UpdateScrollbars,The following statement contains a magic number: int minTransX = (int)(canvasRect.X * scale.X - viewRect.Width * 0.5f);
Magic Number,Sce.Atf.Controls.Adaptable,ScrollbarAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\ScrollbarAdapter.cs,UpdateScrollbars,The following statement contains a magic number: int minTransY = (int)(canvasRect.Y * scale.Y - viewRect.Height * 0.5f);
Magic Number,Sce.Atf.Controls.Adaptable,ScrollbarAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\ScrollbarAdapter.cs,UpdateScrollbars,The following statement contains a magic number: int maxTransX = (int)(canvasRect.Right * scale.X - viewRect.Width * 0.5f);
Magic Number,Sce.Atf.Controls.Adaptable,ScrollbarAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\ScrollbarAdapter.cs,UpdateScrollbars,The following statement contains a magic number: int maxTransY = (int)(canvasRect.Bottom * scale.Y - viewRect.Height * 0.5f);
Magic Number,Sce.Atf.Controls.Adaptable,SelectionAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\SelectionAdapter.cs,control_DragDrop,The following statement contains a magic number: const int offset = 20;
Magic Number,Sce.Atf.Controls.Adaptable,TransformAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\TransformAdapter.cs,SetTransform,The following statement contains a magic number: m[0] != scale.X || m[3] != scale.Y
Magic Number,Sce.Atf.Controls.Adaptable,TransformAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\TransformAdapter.cs,SetTransform,The following statement contains a magic number: m[4] != translation.X || m[5] != translation.Y
Magic Number,Sce.Atf.Controls.Adaptable,TransformAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\TransformAdapter.cs,SetTransform,The following statement contains a magic number: m[4] != translation.X || m[5] != translation.Y
Magic Number,Sce.Atf.Controls.Adaptable,TransformAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\TransformAdapter.cs,SetTranslation,The following statement contains a magic number: SetTransform(m[0]' m[3]' translation.X' translation.Y);
Magic Number,Sce.Atf.Controls.Adaptable,ViewingAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\ViewingAdapter.cs,Frame,The following statement contains a magic number: crect.X +=(int) (crect.Width - gBounds.Width * scale) / 2;
Magic Number,Sce.Atf.Controls.Adaptable,ViewingAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\ViewingAdapter.cs,Frame,The following statement contains a magic number: crect.Y += (int)(crect.Height - gBounds.Height * scale) / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,Draw,The following statement contains a magic number: s_pathTransform.Translate(-2 * p.X' -2 * p.Y);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,Draw,The following statement contains a magic number: s_pathTransform.Translate(-2 * p.X' -2 * p.Y);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,Draw,The following statement contains a magic number: RectangleF alignRect = new RectangleF(                          bounds.Left - MaxNameOverhang' bounds.Bottom + PinMargin' bounds.Width + 2 * MaxNameOverhang' m_rowSpacing);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,DrawGhost,The following statement contains a magic number: s_pathTransform.Translate(-2 * p.X' -2 * p.Y);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,DrawGhost,The following statement contains a magic number: s_pathTransform.Translate(-2 * p.X' -2 * p.Y);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,DrawOutline,The following statement contains a magic number: s_pathTransform.Translate(2 * -p.X' 2 * -p.Y);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,DrawOutline,The following statement contains a magic number: s_pathTransform.Translate(2 * -p.X' 2 * -p.Y);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,PickInput,The following statement contains a magic number: int y = ep.Y + m_rowSpacing + 2 * PinMargin + m_pinOffset;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,PickOutput,The following statement contains a magic number: int y = ep.Y + m_rowSpacing + 2 * PinMargin + m_pinOffset;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,GetElementSizeInfo,The following statement contains a magic number: int width = (int)typeNameSize.Width + 2 * PinMargin;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,GetElementSizeInfo,The following statement contains a magic number: int height = m_rowSpacing + 2 * PinMargin;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,GetElementSizeInfo,The following statement contains a magic number: double rowWidth = 2 * PinMargin;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,GetElementSizeInfo,The following statement contains a magic number: width = Math.Max(width' type.InteriorSize.Width + 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,BuildGraphics,The following statement contains a magic number: const float r = 6;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,BuildGraphics,The following statement contains a magic number: const float d = 2 * r;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,BuildGraphics,The following statement contains a magic number: gp.AddArc(width - d' 0' d' d' 270' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,BuildGraphics,The following statement contains a magic number: gp.AddArc(width - d' 0' d' d' 270' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,BuildGraphics,The following statement contains a magic number: gp.AddArc(width - d' height - d' d' d' 0' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,BuildGraphics,The following statement contains a magic number: gp.AddArc(0' height - d' d' d' 90' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,BuildGraphics,The following statement contains a magic number: gp.AddArc(0' height - d' d' d' 90' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,BuildGraphics,The following statement contains a magic number: gp.AddArc(0' 0' d' d' 180' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,BuildGraphics,The following statement contains a magic number: gp.AddArc(0' 0' d' d' 180' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,GetTangentLength,The following statement contains a magic number: const int minTanLen = 32;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,GetTangentLength,The following statement contains a magic number: int tanLen = Math.Abs(x1 - x2) / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,GetPinOffset,The following statement contains a magic number: return m_rowSpacing + 2 * PinMargin + index * m_rowSpacing + m_pinOffset + m_pinSize / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,GetPinOffset,The following statement contains a magic number: return m_rowSpacing + 2 * PinMargin + index * m_rowSpacing + m_pinOffset + m_pinSize / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\CircuitRenderer.cs,SetPinSpacing,The following statement contains a magic number: m_pinOffset = (fontHeight - m_pinSize) / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,Insert,The following statement contains a magic number: Point center = new Point(control.Width / 2' control.Height / 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,CircuitEditingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\CircuitEditingContext.cs,Insert,The following statement contains a magic number: Point center = new Point(control.Width / 2' control.Height / 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,WireStyleProvider<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\WireStyleProvider.cs,SetupBezierCurve,The following statement contains a magic number: float tanLen = Math.Abs(p1.X - p0.X) / 2.0f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,GroupingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupingCommands.cs,CreateGroup,The following statement contains a magic number: circuitEditingContext.Center(new object[] { newGroup }' new Point(                      bounds.X + bounds.Width / 2'                      bounds.Y + bounds.Height / 2));
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,GroupingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupingCommands.cs,CreateGroup,The following statement contains a magic number: circuitEditingContext.Center(new object[] { newGroup }' new Point(                      bounds.X + bounds.Width / 2'                      bounds.Y + bounds.Height / 2));
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,MeasureFakePins,The following statement contains a magic number: fakePinNode.DesiredLocation = new Point( offset.X' fakePinNode.InternalElement.Bounds.Location.Y + pinOffset - 8);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,AdjustLayout,The following statement contains a magic number: pass < 2
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,GroupPinEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\GroupPinEditor.cs,PositioningFloatigPin,The following statement contains a magic number: againstPinNodes[j+1].Bounds.Location.Y - againstPinNodes[j ].Bounds.Location.Y >= 2 * (CircuitGroupPinInfo.FloatingPinNodeHeight + CircuitGroupPinInfo.FloatingPinNodeMargin)
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,ViewingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\ViewingContext.cs,SetCanvasBounds,The following statement contains a magic number: bounds.Width = Math.Max(bounds.Width * 2' clientRect.Width * 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,ViewingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\ViewingContext.cs,SetCanvasBounds,The following statement contains a magic number: bounds.Width = Math.Max(bounds.Width * 2' clientRect.Width * 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,ViewingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\ViewingContext.cs,SetCanvasBounds,The following statement contains a magic number: bounds.Height = Math.Max(bounds.Height * 2' clientRect.Height * 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,ViewingContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\ViewingContext.cs,SetCanvasBounds,The following statement contains a magic number: bounds.Height = Math.Max(bounds.Height * 2' clientRect.Height * 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,D2dCircuitRenderer,The following statement contains a magic number: m_elementBody.RadiusX = 6;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,D2dCircuitRenderer,The following statement contains a magic number: m_elementBody.RadiusY = 6;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,D2dCircuitRenderer,The following statement contains a magic number: EdgeThickness = 2.0f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,D2dCircuitRenderer,The following statement contains a magic number: MaxCollapsedGroupPinNameLength = 25;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetPinPositionCenterY,The following statement contains a magic number: pt.Y += m_pinSize / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetPinPosition,The following statement contains a magic number: op.X -= m_pinSize / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Pick,The following statement contains a magic number: var border = new RectangleF(bounds.Left - m_theme.PickTolerance' bounds.Y' 2 * m_theme.PickTolerance' bounds.Height);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The following statement contains a magic number: bool useRoundedRect = RoundedBorder ? (scaleX * m_elementBody.RadiusX) > 3.0f : false;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The following statement contains a magic number: var lowerRect = new RectangleF(bounds.X' bounds.Y + titleHeight * 0.5f' bounds.Width' titleHeight * 0.5f);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The following statement contains a magic number: var lowerRect = new RectangleF(bounds.X' bounds.Y + titleHeight * 0.5f' bounds.Width' titleHeight * 0.5f);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The following statement contains a magic number: !TitleBackgroundFilled &&                  (info.Size.Height > TitleHeight + 2 * m_pinMargin)
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The following statement contains a magic number: var alignRect = new RectangleF(bounds.Left - MaxNameOverhang' bounds.Bottom + m_pinMargin'                          bounds.Width + 2 * MaxNameOverhang' m_rowSpacing);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The following statement contains a magic number: g.DrawLink(p.X + bounds.Width - m_pinMargin - 2 - 2 * ExpanderSize' //make room for GetShowPinsRect()                      p.Y + 2 * m_pinMargin + 1' ExpanderSize' m_theme.HotBrush);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The following statement contains a magic number: g.DrawLink(p.X + bounds.Width - m_pinMargin - 2 - 2 * ExpanderSize' //make room for GetShowPinsRect()                      p.Y + 2 * m_pinMargin + 1' ExpanderSize' m_theme.HotBrush);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The following statement contains a magic number: g.DrawLink(p.X + bounds.Width - m_pinMargin - 2 - 2 * ExpanderSize' //make room for GetShowPinsRect()                      p.Y + 2 * m_pinMargin + 1' ExpanderSize' m_theme.HotBrush);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,Draw,The following statement contains a magic number: g.DrawEyeIcon(showPinsRect' showUnconnectedPins ? m_theme.TextBrush : m_theme.HiddenBrush' 0.5f);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawExpandedGroupPins,The following statement contains a magic number: g.DrawRectangle(new RectangleF(x1 - m_pinSize / 2' y1 - m_pinSize / 2' m_pinSize' m_pinSize)'                                      grpPin.Info.Color' 1.0f' null);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawExpandedGroupPins,The following statement contains a magic number: g.DrawRectangle(new RectangleF(x1 - m_pinSize / 2' y1 - m_pinSize / 2' m_pinSize' m_pinSize)'                                      grpPin.Info.Color' 1.0f' null);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawExpandedGroupPins,The following statement contains a magic number: g.DrawRectangle(new RectangleF(x1 - m_pinSize / 2' y1 - m_pinSize / 2' m_pinSize' m_pinSize)'                                      grpPin.Info.Color' 1.0f' null);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawExpandedGroupPins,The following statement contains a magic number: g.DrawRectangle(new RectangleF(x1 - m_pinSize / 2' y1 - m_pinSize / 2' m_pinSize' m_pinSize)'                                      grpPin.Info.Color' 1.0f' null);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawOutline,The following statement contains a magic number: bool useRoundedRect = RoundedBorder ? (scaleX * m_elementBody.RadiusX) > 3.0f : false;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawOutline,The following statement contains a magic number: g.DrawRoundedRectangle(m_elementBody' pen' 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,PickOutput,The following statement contains a magic number: pinX = element.Bounds.X + info.Size.Width - m_pinSize / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetElementSizeInfo,The following statement contains a magic number: rowWidth = 2 * m_pinMargin;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetElementSizeInfo,The following statement contains a magic number: width = Math.Max(width' type.InteriorSize.Width + 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,CalculateElementHeight,The following statement contains a magic number: int height = m_rowSpacing + 2 * m_pinMargin;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawWire,The following statement contains a magic number: x1 += m_pinSize / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawWire,The following statement contains a magic number: int y1 = op.Y + GetPinOffset(outputElement' outputPin.Index' false)                  + m_pinSize / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawWire,The following statement contains a magic number: x2 -= m_pinSize / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawWire,The following statement contains a magic number: int y2 = ip.Y + GetPinOffset(inputElement' inputPin.Index' true)              + m_pinSize / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawWire,The following statement contains a magic number: x += m_pinSize * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,DrawWire,The following statement contains a magic number: float y = m_pinSize / 2 + ep.Y + GetPinOffset(element' pin.Index' !fromOutput);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetTangentLength,The following statement contains a magic number: const int minTanLen = 32;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetTangentLength,The following statement contains a magic number: float tanLen = Math.Abs(x1 - x2) / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,SetPinSpacing,The following statement contains a magic number: m_groupPinExpandedOffset = 2 * m_rowSpacing;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,SetPinSpacing,The following statement contains a magic number: m_subContentOffset = new Point(m_rowSpacing + 4 * m_pinMargin' m_rowSpacing + 4 * m_pinMargin);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,SetPinSpacing,The following statement contains a magic number: m_subContentOffset = new Point(m_rowSpacing + 4 * m_pinMargin' m_rowSpacing + 4 * m_pinMargin);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetExpanderRect,The following statement contains a magic number: return new RectangleF(p.X + m_pinMargin + 1' p.Y + 2 * m_pinMargin + 1' ExpanderSize' ExpanderSize);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,GetShowPinsRect,The following statement contains a magic number: return new RectangleF(                  bounds.Right - m_pinMargin - 1 - ExpanderSize'                  bounds.Y + 2 * m_pinMargin + 1'                  ExpanderSize'                  ExpanderSize);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dCircuitRenderer.cs,ParentWorldOffset,The following statement contains a magic number: int margin = m_rowSpacing + 4 * m_pinMargin;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dGraphAdapter<TNode;TEdge;TEdgeRoute>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dGraphAdapter.cs,DrawAssociatedEdges,The following statement contains a magic number: edgeVisit == 2
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,Draw,The following statement contains a magic number: Vec2F midpoint = curve.Evaluate(0.5f);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,Pick,The following statement contains a magic number: bounds.Inflate(-2 * tolerance' -2 * tolerance);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,Pick,The following statement contains a magic number: bounds.Inflate(-2 * tolerance' -2 * tolerance);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,Pick,The following statement contains a magic number: RectangleF labelBounds = new RectangleF(                      bounds.X + CornerRadius'                      bounds.Y + Margin'                      bounds.Width - 2 * CornerRadius'                      m_theme.TextFormat.FontHeight);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: innerEllipse.RadiusX = 4;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: innerEllipse.RadiusY = 4;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (state.Type)              {                  case StateType.Start:                                          g.FillEllipse(innerEllipse' m_theme.TextBrush);                      break;                  case StateType.Final:                      g.DrawEllipse(ellipse' m_theme.OutlineBrush' 3.0f);                      g.FillEllipse(innerEllipse' m_theme.TextBrush);                                          break;                  case StateType.ShallowHistory:                      g.DrawText("H"' m_centerText' bounds' m_theme.TextBrush);                      break;                  case StateType.DeepHistory:                                      g.DrawText("H*"' m_centerText' bounds' m_theme.TextBrush);                      break;                  case StateType.Conditional:                                          g.DrawText("C"' m_centerText' bounds' m_theme.TextBrush);                                          break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,Draw,The following statement contains a magic number: Vec2F midpoint = curve.Evaluate(0.5f);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,Draw,The following statement contains a magic number: midpoint.X += 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,GetTransitionPoints,The following statement contains a magic number: int d = (int)Math.Sqrt(dx * dx + dy * dy) / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,GetTransitionPoints,The following statement contains a magic number: d = Math.Min(d' 64);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,PointToParameter,The following statement contains a magic number: float cx = bounds.X + bounds.Width * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,PointToParameter,The following statement contains a magic number: float cy = bounds.Y + bounds.Height * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,PointToParameter,The following statement contains a magic number: float dx = bounds.Width * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,PointToParameter,The following statement contains a magic number: float dy = bounds.Height * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,PointToParameter,The following statement contains a magic number: result += (y + dy) / (dy * 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,ParameterToPoint,The following statement contains a magic number: t < 2
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,DrawArrow,The following statement contains a magic number: const float cos = 0.866f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,DrawArrow,The following statement contains a magic number: const float sin = 0.500f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,DrawFloatingGroupPin,The following statement contains a magic number: Theme.StrokeWidth = 2.0f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,GetThumbtackRect,The following statement contains a magic number: return new RectangleF(p.X + xOffset' p.Y + Theme.PinSize / 2.0f' D2dUtil.ThumbtackSize' D2dUtil.ThumbtackSize);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,GetVisibilityCheckRect,The following statement contains a magic number: float width = CircuitGroupPinInfo.FloatingPinBoxWidth - Theme.PinSize - 3;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,GetVisibilityCheckRect,The following statement contains a magic number: eyeRect = new RectangleF(p.X - 2 - width' pinRect.Y' width' pinRect.Height);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dSubCircuitRenderer<TElement;TWire;TPin>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dSubCircuitRenderer.cs,DrawGroupPinNodeFakeEdge,The following statement contains a magic number: float y1 = op.Y + CircuitGroupPinInfo.FloatingPinBoxHeight / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Draw,The following statement contains a magic number: PointF textPoint = new PointF((end.X + start.X) * 0.5f' (end.Y + start.Y) * 0.5f);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Draw,The following statement contains a magic number: PointF textPoint = new PointF((end.X + start.X) * 0.5f' (end.Y + start.Y) * 0.5f);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Draw,The following statement contains a magic number: RectangleF textBox = new RectangleF(textPoint.X - 512' textPoint.Y' 1024' m_theme.Font.Height);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Draw,The following statement contains a magic number: RectangleF textBox = new RectangleF(textPoint.X - 512' textPoint.Y' 1024' m_theme.Font.Height);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Pick,The following statement contains a magic number: labelBounds = new Rectangle(                      labelBounds.X' labelBounds.Y + dHeight / 2' labelBounds.Width' labelBounds.Height - dHeight);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,GetEdgeGeometry,The following statement contains a magic number: circle.Radius *= 0.85f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,GetEdgeGeometry,The following statement contains a magic number: float offset = route * m_routeOffset / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Draw,The following statement contains a magic number: textPoint = (endPoint + startPoint) * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Draw,The following statement contains a magic number: RectangleF textBox = new RectangleF(textPoint.X - 512' textPoint.Y' 1024' m_theme.Font.Height);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,Draw,The following statement contains a magic number: RectangleF textBox = new RectangleF(textPoint.X - 512' textPoint.Y' 1024' m_theme.Font.Height);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,GetLabelBounds,The following statement contains a magic number: textPoint = (endPoint + startPoint) * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,GetLabelBounds,The following statement contains a magic number: float width = 32;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,GetLabelBounds,The following statement contains a magic number: return new Rectangle((int)(textPoint.X - width * 0.5f)' (int)textPoint.Y' (int)width' (int)height);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,DrawArrow,The following statement contains a magic number: const double cos = -0.866;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,DrawArrow,The following statement contains a magic number: const double sin = -0.500;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,DigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\DigraphRenderer.cs,GetBoundary,The following statement contains a magic number: float r = bounds.Width / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,GraphViewCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\GraphViewCommands.cs,ZoomView,The following statement contains a magic number: clientPoint = new Point(adaptableControl.Width/2' adaptableControl.Height/2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,GraphViewCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\GraphViewCommands.cs,ZoomView,The following statement contains a magic number: clientPoint = new Point(adaptableControl.Width/2' adaptableControl.Height/2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,Draw,The following statement contains a magic number: Vec2F midpoint = curve.Evaluate(0.5f);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,Draw,The following statement contains a magic number: midpoint.X += 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,Pick,The following statement contains a magic number: bounds.Inflate(-2 * tolerance' -2 * tolerance);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,Pick,The following statement contains a magic number: bounds.Inflate(-2 * tolerance' -2 * tolerance);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,Pick,The following statement contains a magic number: Rectangle labelBounds = new Rectangle(                      bounds.X + CornerRadius'                      bounds.Y + Margin'                      bounds.Width - 2 * CornerRadius'                      m_theme.Font.Height);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: int size = CornerRadius * 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following statement contains a magic number: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetStatePath,The following statement contains a magic number: const int d = 2 * CornerRadius;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetStatePath,The following statement contains a magic number: gp.AddArc(bounds.X' bounds.Y' d' d' 180' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetStatePath,The following statement contains a magic number: gp.AddArc(bounds.X' bounds.Y' d' d' 180' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetStatePath,The following statement contains a magic number: gp.AddArc(bounds.X + bounds.Width - d' bounds.Y' d' d' 270' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetStatePath,The following statement contains a magic number: gp.AddArc(bounds.X + bounds.Width - d' bounds.Y' d' d' 270' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetStatePath,The following statement contains a magic number: gp.AddArc(bounds.X + bounds.Width - d' bounds.Y + bounds.Height - d' d' d' 0' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetStatePath,The following statement contains a magic number: gp.AddArc(bounds.X' bounds.Y + bounds.Height - d' d' d' 90' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetStatePath,The following statement contains a magic number: gp.AddArc(bounds.X' bounds.Y + bounds.Height - d' d' d' 90' 90);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetStatePath,The following statement contains a magic number: gp.AddLine(bounds.X' bounds.Y + bounds.Height - d' bounds.X' bounds.Y + d / 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,Draw,The following statement contains a magic number: Vec2F midpoint = curve.Evaluate(0.5f);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,Draw,The following statement contains a magic number: midpoint.X += 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetTransitionPoints,The following statement contains a magic number: int d = (int)Math.Sqrt(dx * dx + dy * dy) / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,GetTransitionPoints,The following statement contains a magic number: d = Math.Min(d' 64);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,PointToParameter,The following statement contains a magic number: float cx = bounds.X + bounds.Width * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,PointToParameter,The following statement contains a magic number: float cy = bounds.Y + bounds.Height * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,PointToParameter,The following statement contains a magic number: float dx = bounds.Width * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,PointToParameter,The following statement contains a magic number: float dy = bounds.Height * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,PointToParameter,The following statement contains a magic number: result += (y + dy) / (dy * 2);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,ParameterToPoint,The following statement contains a magic number: t < 2
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawArrow,The following statement contains a magic number: const double cos = 0.866;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawArrow,The following statement contains a magic number: const double sin = 0.500;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,Draw,The following statement contains a magic number: PointF textPoint = new PointF((end.X + start.X) * 0.5f' (end.Y + start.Y) * 0.5f);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,Draw,The following statement contains a magic number: PointF textPoint = new PointF((end.X + start.X) * 0.5f' (end.Y + start.Y) * 0.5f);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,Draw,The following statement contains a magic number: RectangleF textBox = new RectangleF(textPoint.X - 512' textPoint.Y' 1024' m_theme.TextFormat.FontHeight);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,Draw,The following statement contains a magic number: RectangleF textBox = new RectangleF(textPoint.X - 512' textPoint.Y' 1024' m_theme.TextFormat.FontHeight);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,Pick,The following statement contains a magic number: labelBounds = new RectangleF(                      labelBounds.X' labelBounds.Y + dHeight / 2' labelBounds.Width' labelBounds.Height - dHeight);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,GetEdgeGeometry,The following statement contains a magic number: circle.Radius *= 0.85f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,GetEdgeGeometry,The following statement contains a magic number: float offset = route * m_routeOffset / 2;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,Draw,The following statement contains a magic number: textPoint = (endPoint + startPoint) * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,Draw,The following statement contains a magic number: RectangleF textBox = new RectangleF(textPoint.X - 512' textPoint.Y' 1024' m_theme.TextFormat.FontHeight);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,Draw,The following statement contains a magic number: RectangleF textBox = new RectangleF(textPoint.X - 512' textPoint.Y' 1024' m_theme.TextFormat.FontHeight);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,GetLabelBounds,The following statement contains a magic number: textPoint = (endPoint + startPoint) * 0.5f;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,GetLabelBounds,The following statement contains a magic number: float width = 32;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,GetLabelBounds,The following statement contains a magic number: return new Rectangle((int)(textPoint.X - width * 0.5f)' (int)textPoint.Y' (int)width' (int)height);
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,DrawArrow,The following statement contains a magic number: const double cos = -0.866;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,DrawArrow,The following statement contains a magic number: const double sin = -0.500;
Magic Number,Sce.Atf.Controls.Adaptable.Graphs,D2dDigraphRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dDigraphRenderer.cs,GetBoundary,The following statement contains a magic number: float r = bounds.Width / 2;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,HSL_to_RGB,The following statement contains a magic number: int alpha =    Round(255 * hsl.A);
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,HSL_to_RGB,The following statement contains a magic number: Max = Round(hsl.L * 255);
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,HSL_to_RGB,The following statement contains a magic number: Min = Round((1.0 - hsl.S)*(hsl.L/1.0)*255);
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,HSL_to_RGB,The following statement contains a magic number: q   = (double)(Max - Min)/255;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,HSL_to_RGB,The following statement contains a magic number: Mid = Round(((hsl.H - 0) * q) * 1530 + Min);
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,HSL_to_RGB,The following statement contains a magic number: hsl.H >= 0 && hsl.H <= (double)1/6
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_HSL,The following statement contains a magic number: hsl.A = (double)c.A/255;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_HSL,The following statement contains a magic number: hsl.L = (double)Max/255;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_HSL,The following statement contains a magic number: hsl.H = (double)(360 + q * (c.G - c.B))/360;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_HSL,The following statement contains a magic number: hsl.H = (double)(360 + q * (c.G - c.B))/360;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.A = (double)c.A/255;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.C = (double)(255 - c.R)/255;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.C = (double)(255 - c.R)/255;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.M = (double)(255 - c.G)/255;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.M = (double)(255 - c.G)/255;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.Y = (double)(255 - c.B)/255;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,RGB_to_CMYK,The following statement contains a magic number: _cmyk.Y = (double)(255 - c.B)/255;
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,CMYK_to_RGB,The following statement contains a magic number: alpha =    Round(255 * _cmyk.A);
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,CMYK_to_RGB,The following statement contains a magic number: red =      Round(255 - (255 * _cmyk.C));
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,CMYK_to_RGB,The following statement contains a magic number: red =      Round(255 - (255 * _cmyk.C));
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,CMYK_to_RGB,The following statement contains a magic number: green =    Round(255 - (255 * _cmyk.M));
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,CMYK_to_RGB,The following statement contains a magic number: green =    Round(255 - (255 * _cmyk.M));
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,CMYK_to_RGB,The following statement contains a magic number: blue =     Round(255 - (255 * _cmyk.Y));
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,CMYK_to_RGB,The following statement contains a magic number: blue =     Round(255 - (255 * _cmyk.Y));
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,Round,The following statement contains a magic number: int temp = (int)(val * 100);
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,Round,The following statement contains a magic number: (temp % 100) >= 50
Magic Number,Sce.Atf.Controls.ColorEditing,AdobeColors,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\AdobeColors.cs,Round,The following statement contains a magic number: (temp % 100) >= 50
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: x = Width - 4;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: x > Width - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: y = Height - 4;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseDown,The following statement contains a magic number: y > Height - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: x = Width - 4;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: x > Width - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: y = Height - 4;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseMove,The following statement contains a magic number: y > Height - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: int x = e.X - 2' y = e.Y - 2;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: x = Width - 4;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: x > Width - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: y = Height - 4;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ctrl2DColorBox_MouseUp,The following statement contains a magic number: y > Height - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: start_x = m_iMarker_X - 5;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: start_y = m_iMarker_Y - 5;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: end_x = m_iMarker_X + 5;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: end_y = m_iMarker_Y + 5;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: end_x = Width - 4;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: end_x > Width - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: end_y = Height - 4;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: end_y > Height - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following statement contains a magic number: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawMarker,The following statement contains a magic number: x = Width - 4;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawMarker,The following statement contains a magic number: x > Width - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawMarker,The following statement contains a magic number: y = Height - 4;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawMarker,The following statement contains a magic number: y > Height - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawMarker,The following statement contains a magic number: _hsl.L < (double)200/255
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawMarker,The following statement contains a magic number: _hsl.L < (double)200/255
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawMarker,The following statement contains a magic number: g.DrawEllipse(pen' x - 3' y - 3' 10' 10);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawMarker,The following statement contains a magic number: g.DrawEllipse(pen' x - 3' y - 3' 10' 10);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawMarker,The following statement contains a magic number: g.DrawEllipse(pen' x - 3' y - 3' 10' 10);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawMarker,The following statement contains a magic number: g.DrawEllipse(pen' x - 3' y - 3' 10' 10);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 2' 0' 0' 0);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' 0' 0' 0' Height - 2);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 1' 1' Width - 3' Height - 3);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 1' 1' Width - 3' Height - 3);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Hue,The following statement contains a magic number: hsl_start.L = 1.0 - (double)i/(Height - 4);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Hue,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Hue,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Hue,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Hue,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Hue,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Hue,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Hue,The following statement contains a magic number: i < Height - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Saturation,The following statement contains a magic number: hsl_start.H = (double)i/(Width - 4);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Saturation,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Saturation,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Saturation,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Saturation,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Saturation,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(i + 2' 2' 1' Height - 4));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Saturation,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(i + 2' 2' 1' Height - 4));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Saturation,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(i + 2' 2' 1' Height - 4));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Saturation,The following statement contains a magic number: i < Width - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Luminance,The following statement contains a magic number: hsl_start.H = (double)i/(Width - 4);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Luminance,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Luminance,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Luminance,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Luminance,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' 1' Height - 4)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Luminance,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(i + 2' 2' 1' Height - 4));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Luminance,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(i + 2' 2' 1' Height - 4));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Luminance,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(i + 2' 2' 1' Height - 4));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Luminance,The following statement contains a magic number: i < Width - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The following statement contains a magic number: int green = Round(255 - (255 * (double)i/(Height - 4)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The following statement contains a magic number: int green = Round(255 - (255 * (double)i/(Height - 4)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The following statement contains a magic number: int green = Round(255 - (255 * (double)i/(Height - 4)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Red,The following statement contains a magic number: i < Height - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The following statement contains a magic number: int red = Round(255 - (255 * (double)i/(Height - 4)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The following statement contains a magic number: int red = Round(255 - (255 * (double)i/(Height - 4)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The following statement contains a magic number: int red = Round(255 - (255 * (double)i/(Height - 4)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(red' green' 0)' Color.FromArgb(red' green' 255)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Green,The following statement contains a magic number: i < Height - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The following statement contains a magic number: int green = Round(255 - (255 * (double)i/(Height - 4)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The following statement contains a magic number: int green = Round(255 - (255 * (double)i/(Height - 4)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The following statement contains a magic number: int green = Round(255 - (255 * (double)i/(Height - 4)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The following statement contains a magic number: LinearGradientBrush br = new LinearGradientBrush(new Rectangle(2'2' Width - 4' 1)' Color.FromArgb(0' green' blue)' Color.FromArgb(255' green' blue)' 0' false);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The following statement contains a magic number: g.FillRectangle(br'new Rectangle(2'i + 2' Width - 4' 1));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Draw_Style_Blue,The following statement contains a magic number: i < Height - 4
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Round,The following statement contains a magic number: int temp = (int)(val * 100);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Round,The following statement contains a magic number: (temp % 100) >= 50
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Round,The following statement contains a magic number: (temp % 100) >= 50
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,SetStartColor,The following statement contains a magic number: m_txt_Hex.MaxLength = 8;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,SetStartColor,The following statement contains a magic number: m_txt_Hue.Text = Round(m_hsl.H * 360).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,SetStartColor,The following statement contains a magic number: m_txt_Sat.Text = Round(m_hsl.S * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,SetStartColor,The following statement contains a magic number: m_txt_Bright.Text = Round(m_hsl.L * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,SetStartColor,The following statement contains a magic number: m_txt_Cyan.Text = Round(m_cmyk.C * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,SetStartColor,The following statement contains a magic number: m_txt_Magenta.Text = Round(m_cmyk.M * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,SetStartColor,The following statement contains a magic number: m_txt_Yellow.Text = Round(m_cmyk.Y * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,SetStartColor,The following statement contains a magic number: m_txt_K.Text = Round(m_cmyk.K * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_pbx_BlankBox.Location = new System.Drawing.Point(316' 11);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_pbx_BlankBox.Location = new System.Drawing.Point(316' 11);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_pbx_BlankBox.Size = new System.Drawing.Size(62' 70);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_pbx_BlankBox.Size = new System.Drawing.Size(62' 70);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_pbx_BlankBox.TabIndex = 3;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_OK.Location = new System.Drawing.Point(412' 12);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_OK.Location = new System.Drawing.Point(412' 12);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_OK.Size = new System.Drawing.Size(72' 23);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_OK.Size = new System.Drawing.Size(72' 23);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_OK.TabIndex = 4;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_Cancel.Location = new System.Drawing.Point(412' 41);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_Cancel.Location = new System.Drawing.Point(412' 41);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_Cancel.Size = new System.Drawing.Size(72' 23);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_Cancel.Size = new System.Drawing.Size(72' 23);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_cmd_Cancel.TabIndex = 5;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hue.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hue.Location = new System.Drawing.Point(352' 101);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hue.Location = new System.Drawing.Point(352' 101);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hue.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hue.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hue.TabIndex = 6;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Sat.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Sat.Location = new System.Drawing.Point(352' 126);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Sat.Location = new System.Drawing.Point(352' 126);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Sat.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Sat.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Sat.TabIndex = 7;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Bright.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Bright.Location = new System.Drawing.Point(352' 151);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Bright.Location = new System.Drawing.Point(352' 151);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Bright.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Bright.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Bright.TabIndex = 8;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Red.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Red.Location = new System.Drawing.Point(352' 190);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Red.Location = new System.Drawing.Point(352' 190);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Red.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Red.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Red.TabIndex = 9;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Green.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Green.Location = new System.Drawing.Point(352' 215);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Green.Location = new System.Drawing.Point(352' 215);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Green.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Green.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Green.TabIndex = 10;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Blue.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Blue.Location = new System.Drawing.Point(352' 240);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Blue.Location = new System.Drawing.Point(352' 240);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Blue.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Blue.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Blue.TabIndex = 11;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Cyan.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Cyan.Location = new System.Drawing.Point(447' 101);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Cyan.Location = new System.Drawing.Point(447' 101);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Cyan.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Cyan.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Cyan.TabIndex = 15;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Magenta.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Magenta.Location = new System.Drawing.Point(447' 126);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Magenta.Location = new System.Drawing.Point(447' 126);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Magenta.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Magenta.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Magenta.TabIndex = 16;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Yellow.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Yellow.Location = new System.Drawing.Point(447' 151);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Yellow.Location = new System.Drawing.Point(447' 151);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Yellow.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Yellow.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Yellow.TabIndex = 17;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_K.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_K.Location = new System.Drawing.Point(447' 176);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_K.Location = new System.Drawing.Point(447' 176);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_K.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_K.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_K.TabIndex = 18;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.Location = new System.Drawing.Point(416' 239);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.Location = new System.Drawing.Point(416' 239);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.MaxLength = 8;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.Size = new System.Drawing.Size(66' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.Size = new System.Drawing.Size(66' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_Hex.TabIndex = 19;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Hue.Location = new System.Drawing.Point(316' 101);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Hue.Location = new System.Drawing.Point(316' 101);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Hue.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Hue.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Hue.TabIndex = 20;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Sat.Location = new System.Drawing.Point(316' 126);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Sat.Location = new System.Drawing.Point(316' 126);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Sat.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Sat.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Sat.TabIndex = 21;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Bright.Location = new System.Drawing.Point(316' 151);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Bright.Location = new System.Drawing.Point(316' 151);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Bright.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Bright.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Bright.TabIndex = 22;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Red.Location = new System.Drawing.Point(316' 190);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Red.Location = new System.Drawing.Point(316' 190);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Red.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Red.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Red.TabIndex = 23;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Green.Location = new System.Drawing.Point(316' 215);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Green.Location = new System.Drawing.Point(316' 215);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Green.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Green.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Green.TabIndex = 24;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Blue.Location = new System.Drawing.Point(316' 240);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Blue.Location = new System.Drawing.Point(316' 240);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Blue.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Blue.Size = new System.Drawing.Size(38' 24);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_rbtn_Blue.TabIndex = 25;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_HexPound.Location = new System.Drawing.Point(402' 243);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_HexPound.Location = new System.Drawing.Point(402' 243);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_HexPound.Size = new System.Drawing.Size(16' 14);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_HexPound.Size = new System.Drawing.Size(16' 14);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_HexPound.TabIndex = 27;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan.Location = new System.Drawing.Point(423' 105);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan.Location = new System.Drawing.Point(423' 105);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan.Size = new System.Drawing.Size(24' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan.Size = new System.Drawing.Size(24' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan.TabIndex = 31;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta.Location = new System.Drawing.Point(423' 131);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta.Location = new System.Drawing.Point(423' 131);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta.Size = new System.Drawing.Size(24' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta.Size = new System.Drawing.Size(24' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta.TabIndex = 32;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow.Location = new System.Drawing.Point(423' 156);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow.Location = new System.Drawing.Point(423' 156);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow.Size = new System.Drawing.Size(24' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow.Size = new System.Drawing.Size(24' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow.TabIndex = 33;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_K.Location = new System.Drawing.Point(423' 181);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_K.Location = new System.Drawing.Point(423' 181);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_K.Size = new System.Drawing.Size(24' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_K.Size = new System.Drawing.Size(24' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_K.TabIndex = 34;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Primary_Color.Location = new System.Drawing.Point(317' 12);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Primary_Color.Location = new System.Drawing.Point(317' 12);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Primary_Color.Size = new System.Drawing.Size(60' 34);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Primary_Color.Size = new System.Drawing.Size(60' 34);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Primary_Color.TabIndex = 36;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Secondary_Color.Location = new System.Drawing.Point(317' 46);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Secondary_Color.Location = new System.Drawing.Point(317' 46);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Secondary_Color.Size = new System.Drawing.Size(60' 34);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Secondary_Color.Size = new System.Drawing.Size(60' 34);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Secondary_Color.TabIndex = 37;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Hue_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 11.25F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Hue_Symbol.Location = new System.Drawing.Point(389' 102);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Hue_Symbol.Location = new System.Drawing.Point(389' 102);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Hue_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Hue_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Hue_Symbol.TabIndex = 40;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Saturation_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Saturation_Symbol.Location = new System.Drawing.Point(389' 130);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Saturation_Symbol.Location = new System.Drawing.Point(389' 130);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Saturation_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Saturation_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Saturation_Symbol.TabIndex = 41;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Bright_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Bright_Symbol.Location = new System.Drawing.Point(389' 155);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Bright_Symbol.Location = new System.Drawing.Point(389' 155);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Bright_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Bright_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Bright_Symbol.TabIndex = 42;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan_Symbol.Location = new System.Drawing.Point(483' 103);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan_Symbol.Location = new System.Drawing.Point(483' 103);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Cyan_Symbol.TabIndex = 43;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta_Symbol.Location = new System.Drawing.Point(483' 130);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta_Symbol.Location = new System.Drawing.Point(483' 130);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Magenta_Symbol.TabIndex = 44;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow_Symbol.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9.75F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow_Symbol.Location = new System.Drawing.Point(483' 155);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow_Symbol.Location = new System.Drawing.Point(483' 155);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow_Symbol.Size = new System.Drawing.Size(16' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_Yellow_Symbol.TabIndex = 45;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_A.Font = new System.Drawing.Font("Microsoft Sans Serif"' 9F' System.Drawing.FontStyle.Regular' GraphicsUnit.Point' ((byte)(0)));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_A.Location = new System.Drawing.Point(447' 208);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_A.Location = new System.Drawing.Point(447' 208);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_A.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_A.Size = new System.Drawing.Size(35' 21);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_txt_A.TabIndex = 46;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_A.Location = new System.Drawing.Point(404' 213);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_A.Location = new System.Drawing.Point(404' 213);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_A.Size = new System.Drawing.Size(43' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_A.Size = new System.Drawing.Size(43' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_lbl_A.TabIndex = 47;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.Location = new System.Drawing.Point(10' 11);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.Location = new System.Drawing.Point(10' 11);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.RGB = System.Drawing.Color.FromArgb(((int)(((byte)(255))))' ((int)(((byte)(0))))' ((int)(((byte)(0)))));
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.Size = new System.Drawing.Size(260' 260);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.Size = new System.Drawing.Size(260' 260);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_BigBox.TabIndex = 39;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_ThinBox.Location = new System.Drawing.Point(271' 9);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_ThinBox.Location = new System.Drawing.Point(271' 9);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_ThinBox.Size = new System.Drawing.Size(40' 264);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_ThinBox.Size = new System.Drawing.Size(40' 264);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.m_ctrl_ThinBox.TabIndex = 38;
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(513' 280);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(513' 280);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_BigBox_ColorChanged,The following statement contains a magic number: m_txt_Hue.Text =        Round(m_hsl.H * 360).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_BigBox_ColorChanged,The following statement contains a magic number: m_txt_Sat.Text =        Round(m_hsl.S * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_BigBox_ColorChanged,The following statement contains a magic number: m_txt_Bright.Text =     Round(m_hsl.L * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_BigBox_ColorChanged,The following statement contains a magic number: m_txt_Cyan.Text =       Round(m_cmyk.C * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_BigBox_ColorChanged,The following statement contains a magic number: m_txt_Magenta.Text =    Round(m_cmyk.M * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_BigBox_ColorChanged,The following statement contains a magic number: m_txt_Yellow.Text =     Round(m_cmyk.Y * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_BigBox_ColorChanged,The following statement contains a magic number: m_txt_K.Text =          Round(m_cmyk.K * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_ThinBox_ColorChanged,The following statement contains a magic number: m_txt_Hue.Text =        Round(m_hsl.H * 360).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_ThinBox_ColorChanged,The following statement contains a magic number: m_txt_Sat.Text =        Round(m_hsl.S * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_ThinBox_ColorChanged,The following statement contains a magic number: m_txt_Bright.Text =     Round(m_hsl.L * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_ThinBox_ColorChanged,The following statement contains a magic number: m_txt_Cyan.Text =       Round(m_cmyk.C * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_ThinBox_ColorChanged,The following statement contains a magic number: m_txt_Magenta.Text =    Round(m_cmyk.M * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_ThinBox_ColorChanged,The following statement contains a magic number: m_txt_Yellow.Text =     Round(m_cmyk.Y * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_ctrl_ThinBox_ColorChanged,The following statement contains a magic number: m_txt_K.Text =          Round(m_cmyk.K * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Hue.Text =        Round(m_hsl.H * 360).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Sat.Text =        Round(m_hsl.S * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Bright.Text =     Round(m_hsl.L * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Cyan.Text =       Round(m_cmyk.C * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Magenta.Text =    Round(m_cmyk.M * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_Yellow.Text =     Round(m_cmyk.Y * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Primary_Color_Click,The following statement contains a magic number: m_txt_K.Text =          Round(m_cmyk.K * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Hue.Text =        Round(m_hsl.H * 360).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Sat.Text =        Round(m_hsl.S * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Bright.Text =     Round(m_hsl.L * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Cyan.Text =       Round(m_cmyk.C * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Magenta.Text =    Round(m_cmyk.M * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_Yellow.Text =     Round(m_cmyk.Y * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,m_lbl_Secondary_Color_Click,The following statement contains a magic number: m_txt_K.Text =          Round(m_cmyk.K * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,Round,The following statement contains a magic number: int temp = (int)(val * 100);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,Round,The following statement contains a magic number: (temp % 100) >= 50
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,Round,The following statement contains a magic number: (temp % 100) >= 50
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,WriteHexData,The following statement contains a magic number: string alpha = Convert.ToString(rgb.A' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,WriteHexData,The following statement contains a magic number: alpha.Length < 2
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,WriteHexData,The following statement contains a magic number: string red = Convert.ToString(rgb.R' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,WriteHexData,The following statement contains a magic number: red.Length < 2
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,WriteHexData,The following statement contains a magic number: string green = Convert.ToString(rgb.G' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,WriteHexData,The following statement contains a magic number: green.Length < 2
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,WriteHexData,The following statement contains a magic number: string blue = Convert.ToString(rgb.B' 16);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,WriteHexData,The following statement contains a magic number: blue.Length < 2
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,ParseHexData,The following statement contains a magic number: int length = (m_enableAlpha ? 8 : 6);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,ParseHexData,The following statement contains a magic number: int length = (m_enableAlpha ? 8 : 6);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,ParseHexData,The following statement contains a magic number: a_text = hex_data.Substring(0' 2);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,ParseHexData,The following statement contains a magic number: r_text = hex_data.Substring(2' 2);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,ParseHexData,The following statement contains a magic number: r_text = hex_data.Substring(2' 2);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,ParseHexData,The following statement contains a magic number: g_text = hex_data.Substring(4' 2);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,ParseHexData,The following statement contains a magic number: g_text = hex_data.Substring(4' 2);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,ParseHexData,The following statement contains a magic number: b_text = hex_data.Substring(6' 2);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,ParseHexData,The following statement contains a magic number: b_text = hex_data.Substring(6' 2);
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Hue.Text =        Round(m_hsl.H * 360).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Sat.Text =        Round(m_hsl.S * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Bright.Text =     Round(m_hsl.L * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Cyan.Text =       Round(m_cmyk.C * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Magenta.Text =    Round(m_cmyk.M * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_Yellow.Text =     Round(m_cmyk.Y * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,UpdateTextBoxes,The following statement contains a magic number: m_txt_K.Text =          Round(m_cmyk.K * 100).ToString();
Magic Number,Sce.Atf.Controls.ColorEditing,ColorPicker,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorPicker.cs,MakeOpaque,The following statement contains a magic number: return Color.FromArgb(255' color.R' color.G' color.B);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ctrl1DColorBar_MouseDown,The following statement contains a magic number: y -= 4;
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ctrl1DColorBar_MouseDown,The following statement contains a magic number: y = Height - 9;
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ctrl1DColorBar_MouseDown,The following statement contains a magic number: y > Height - 9
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ctrl1DColorBar_MouseMove,The following statement contains a magic number: y -= 4;
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ctrl1DColorBar_MouseMove,The following statement contains a magic number: y = Height - 9;
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ctrl1DColorBar_MouseMove,The following statement contains a magic number: y > Height - 9
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ctrl1DColorBar_MouseUp,The following statement contains a magic number: y -= 4;
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ctrl1DColorBar_MouseUp,The following statement contains a magic number: y = Height - 9;
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ctrl1DColorBar_MouseUp,The following statement contains a magic number: y > Height - 9
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ClearSlider,The following statement contains a magic number: g.FillRectangle(brush' 0' 0' 8' Height);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ClearSlider,The following statement contains a magic number: g.FillRectangle(brush' Width - 8' 0' 8' Height);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ClearSlider,The following statement contains a magic number: g.FillRectangle(brush' Width - 8' 0' 8' Height);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: position = Height - 9;
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: position > Height - 9
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: Pen pencil = new Pen(Color.FromArgb(116'114'106));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: Pen pencil = new Pen(Color.FromArgb(116'114'106));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: Pen pencil = new Pen(Color.FromArgb(116'114'106));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: Point[] arrow = new Point[7];
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[1] = new Point(3'position);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(7'position + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(7'position + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(7'position + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(3'position + 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(3'position + 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(3'position + 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[4] = new Point(1'position + 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[4] = new Point(1'position + 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[5] = new Point(0'position + 7);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[5] = new Point(0'position + 7);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[6] = new Point(0'position + 1);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[0] = new Point(Width - 2'position);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[1] = new Point(Width - 4'position);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(Width - 8'position + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(Width - 8'position + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[2] = new Point(Width - 8'position + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(Width - 4'position + 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(Width - 4'position + 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[3] = new Point(Width - 4'position + 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[4] = new Point(Width - 2'position + 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[4] = new Point(Width - 2'position + 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[4] = new Point(Width - 2'position + 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[5] = new Point(Width - 1'position + 7);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[5] = new Point(Width - 1'position + 7);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawSlider,The following statement contains a magic number: arrow[6] = new Point(Width - 1'position + 1);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: pencil = new Pen(Color.FromArgb(172'168'153));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 10' 2' 9' 2);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 10' 2' 9' 2);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 10' 2' 9' 2);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 10' 2' 9' 2);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' 9' 2' 9' Height - 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' 9' 2' 9' Height - 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' 9' 2' 9' Height - 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' 9' 2' 9' Height - 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 9' 2' Width - 9'Height - 3);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 9' 2' Width - 9'Height - 3);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 9' 2' Width - 9'Height - 3);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 9' 2' Width - 9'Height - 3);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 9'Height - 3' 9'Height - 3);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 9'Height - 3' 9'Height - 3);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 9'Height - 3' 9'Height - 3);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawLine(pencil' Width - 9'Height - 3' 9'Height - 3);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 10' 3' Width - 20' Height - 7);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 10' 3' Width - 20' Height - 7);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 10' 3' Width - 20' Height - 7);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle(pencil' 10' 3' Width - 20' Height - 7);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Hue,The following statement contains a magic number: _hsl.H = 1.0 - (double)i/(Height - 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Hue,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Hue,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Hue,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Hue,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Hue,The following statement contains a magic number: i < Height - 8
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Saturation,The following statement contains a magic number: _hsl.S = 1.0 - (double)i/(Height - 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Saturation,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Saturation,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Saturation,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Saturation,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Saturation,The following statement contains a magic number: i < Height - 8
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Luminance,The following statement contains a magic number: _hsl.L = 1.0 - (double)i/(Height - 8);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Luminance,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Luminance,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Luminance,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Luminance,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Luminance,The following statement contains a magic number: i < Height - 8
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Red,The following statement contains a magic number: int red = 255 - Round(255 * (double)i/(Height - 8));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Red,The following statement contains a magic number: int red = 255 - Round(255 * (double)i/(Height - 8));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Red,The following statement contains a magic number: int red = 255 - Round(255 * (double)i/(Height - 8));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Red,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Red,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Red,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Red,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Red,The following statement contains a magic number: i < Height - 8
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Green,The following statement contains a magic number: int green = 255 - Round(255 * (double)i/(Height - 8));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Green,The following statement contains a magic number: int green = 255 - Round(255 * (double)i/(Height - 8));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Green,The following statement contains a magic number: int green = 255 - Round(255 * (double)i/(Height - 8));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Green,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Green,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Green,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Green,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Green,The following statement contains a magic number: i < Height - 8
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Blue,The following statement contains a magic number: int blue = 255 - Round(255 * (double)i/(Height - 8));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Blue,The following statement contains a magic number: int blue = 255 - Round(255 * (double)i/(Height - 8));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Blue,The following statement contains a magic number: int blue = 255 - Round(255 * (double)i/(Height - 8));
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Blue,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Blue,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Blue,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Blue,The following statement contains a magic number: g.DrawLine(pen' 11' i + 4' Width - 11' i + 4);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Draw_Style_Blue,The following statement contains a magic number: i < Height - 8
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following statement contains a magic number: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Round,The following statement contains a magic number: int temp = (int)(val * 100);
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Round,The following statement contains a magic number: (temp % 100) >= 50
Magic Number,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Round,The following statement contains a magic number: (temp % 100) >= 50
Magic Number,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,ConsoleTextBox,The following statement contains a magic number: Font = new Font("Lucida Console"' 8F' FontStyle.Regular' GraphicsUnit.Point' 0);
Magic Number,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,ConsoleTextBox,The following statement contains a magic number: m_suggestionListBox = new SuggestionListBox              {                  InsertText = InsertTextAtCaret'                  ItemHeight = 11'                  RemoveText = RemoveTextBeforeCaret'                  Suggest = Suggest              };
Magic Number,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,Suggest,The following statement contains a magic number: int itemCount = Math.Min(count' 8);
Magic Number,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,Suggest,The following statement contains a magic number: int height = Math.Max(pt.Y - 8' bottom - pt.Y);
Magic Number,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,Suggest,The following statement contains a magic number: height = Math.Min(height' itemHeight * itemCount + 4);
Magic Number,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,Suggest,The following statement contains a magic number: m_suggestionListBox.Bounds = new Rectangle(pt.X + 3' y' maxWidth + 25' height);
Magic Number,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,Suggest,The following statement contains a magic number: m_suggestionListBox.Bounds = new Rectangle(pt.X + 3' y' maxWidth + 25' height);
Magic Number,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,Suggest,The following statement contains a magic number: pt.Y < bottom - 3
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Cartesian2dCanvas,The following statement contains a magic number: Size = new Size(400' 400);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Cartesian2dCanvas,The following statement contains a magic number: Size = new Size(400' 400);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Cartesian2dCanvas,The following statement contains a magic number: BackColor =  Color.FromArgb(150' 150' 150);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Cartesian2dCanvas,The following statement contains a magic number: BackColor =  Color.FromArgb(150' 150' 150);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Cartesian2dCanvas,The following statement contains a magic number: BackColor =  Color.FromArgb(150' 150' 150);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Cartesian2dCanvas,The following statement contains a magic number: m_scaleTextFont = new Font(Font.Name' 8.25f);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Cartesian2dCanvas,The following statement contains a magic number: MinimumSize = new Size(10' 10);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Cartesian2dCanvas,The following statement contains a magic number: MinimumSize = new Size(10' 10);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following statement contains a magic number: float hh = h / 2;
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following statement contains a magic number: float hw = w / 2;
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      {                          Zoom = new Vec2F(w / rect.Width' h / rect.Height);                          Vec2F center = new Vec2F(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          break;                      }                  case OriginLockMode.Center:                      {                          float absleft = Math.Abs(rect.Left);                          float absright = Math.Abs(rect.Right);                          float fx = Math.Max(absleft' absright);                          float abstop = Math.Abs(rect.Top);                          float absbottom = Math.Abs(rect.Bottom);                          float fy = Math.Max(abstop' absbottom);                          Zoom = new Vec2F(hw / fx' hh / fy);                          break;                      }                  case OriginLockMode.Left:                      {                                                  if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              Zoom = new Vec2F(w / fx' h / rect.Height);                              Vec2F center = new Vec2F(left + fx / 2' rect.Y + rect.Height / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftTop:                        if (rect.Right > 0 && rect.Bottom > 0)                      {                          float left = Math.Max(0' rect.Left);                          float fx = (left > 0) ? rect.Width : rect.Right;                            float top = Math.Max(0' rect.Top);                          float fy = (top > 0) ? rect.Height : rect.Bottom;                          Zoom = new Vec2F(w / fx' h / fy);                          Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                      }                                   break;                  case OriginLockMode.LeftBottom:                      {                          if (rect.Right > 0 && rect.Bottom > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                                float top = Math.Max(0' rect.Top);                              float fy = (top > 0) ? rect.Height : rect.Bottom;                              Zoom = new Vec2F(w / fx' h / fy);                              Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftMiddle:                      {                          if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              float abstop = Math.Abs(rect.Top);                              float absbottom = Math.Abs(rect.Bottom);                              float fy = Math.Max(abstop' absbottom);                              Zoom = new Vec2F(w / fx' hh / fy);                              Vec2F center = new Vec2F(left + fx / 2' 0);                              Pan = new Vec2F(hw - center.X * Zoom.X' Pan.Y);                          }                          break;                      }              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      {                          Zoom = new Vec2F(w / rect.Width' h / rect.Height);                          Vec2F center = new Vec2F(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          break;                      }                  case OriginLockMode.Center:                      {                          float absleft = Math.Abs(rect.Left);                          float absright = Math.Abs(rect.Right);                          float fx = Math.Max(absleft' absright);                          float abstop = Math.Abs(rect.Top);                          float absbottom = Math.Abs(rect.Bottom);                          float fy = Math.Max(abstop' absbottom);                          Zoom = new Vec2F(hw / fx' hh / fy);                          break;                      }                  case OriginLockMode.Left:                      {                                                  if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              Zoom = new Vec2F(w / fx' h / rect.Height);                              Vec2F center = new Vec2F(left + fx / 2' rect.Y + rect.Height / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftTop:                        if (rect.Right > 0 && rect.Bottom > 0)                      {                          float left = Math.Max(0' rect.Left);                          float fx = (left > 0) ? rect.Width : rect.Right;                            float top = Math.Max(0' rect.Top);                          float fy = (top > 0) ? rect.Height : rect.Bottom;                          Zoom = new Vec2F(w / fx' h / fy);                          Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                      }                                   break;                  case OriginLockMode.LeftBottom:                      {                          if (rect.Right > 0 && rect.Bottom > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                                float top = Math.Max(0' rect.Top);                              float fy = (top > 0) ? rect.Height : rect.Bottom;                              Zoom = new Vec2F(w / fx' h / fy);                              Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftMiddle:                      {                          if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              float abstop = Math.Abs(rect.Top);                              float absbottom = Math.Abs(rect.Bottom);                              float fy = Math.Max(abstop' absbottom);                              Zoom = new Vec2F(w / fx' hh / fy);                              Vec2F center = new Vec2F(left + fx / 2' 0);                              Pan = new Vec2F(hw - center.X * Zoom.X' Pan.Y);                          }                          break;                      }              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      {                          Zoom = new Vec2F(w / rect.Width' h / rect.Height);                          Vec2F center = new Vec2F(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          break;                      }                  case OriginLockMode.Center:                      {                          float absleft = Math.Abs(rect.Left);                          float absright = Math.Abs(rect.Right);                          float fx = Math.Max(absleft' absright);                          float abstop = Math.Abs(rect.Top);                          float absbottom = Math.Abs(rect.Bottom);                          float fy = Math.Max(abstop' absbottom);                          Zoom = new Vec2F(hw / fx' hh / fy);                          break;                      }                  case OriginLockMode.Left:                      {                                                  if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              Zoom = new Vec2F(w / fx' h / rect.Height);                              Vec2F center = new Vec2F(left + fx / 2' rect.Y + rect.Height / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftTop:                        if (rect.Right > 0 && rect.Bottom > 0)                      {                          float left = Math.Max(0' rect.Left);                          float fx = (left > 0) ? rect.Width : rect.Right;                            float top = Math.Max(0' rect.Top);                          float fy = (top > 0) ? rect.Height : rect.Bottom;                          Zoom = new Vec2F(w / fx' h / fy);                          Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                      }                                   break;                  case OriginLockMode.LeftBottom:                      {                          if (rect.Right > 0 && rect.Bottom > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                                float top = Math.Max(0' rect.Top);                              float fy = (top > 0) ? rect.Height : rect.Bottom;                              Zoom = new Vec2F(w / fx' h / fy);                              Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftMiddle:                      {                          if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              float abstop = Math.Abs(rect.Top);                              float absbottom = Math.Abs(rect.Bottom);                              float fy = Math.Max(abstop' absbottom);                              Zoom = new Vec2F(w / fx' hh / fy);                              Vec2F center = new Vec2F(left + fx / 2' 0);                              Pan = new Vec2F(hw - center.X * Zoom.X' Pan.Y);                          }                          break;                      }              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      {                          Zoom = new Vec2F(w / rect.Width' h / rect.Height);                          Vec2F center = new Vec2F(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          break;                      }                  case OriginLockMode.Center:                      {                          float absleft = Math.Abs(rect.Left);                          float absright = Math.Abs(rect.Right);                          float fx = Math.Max(absleft' absright);                          float abstop = Math.Abs(rect.Top);                          float absbottom = Math.Abs(rect.Bottom);                          float fy = Math.Max(abstop' absbottom);                          Zoom = new Vec2F(hw / fx' hh / fy);                          break;                      }                  case OriginLockMode.Left:                      {                                                  if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              Zoom = new Vec2F(w / fx' h / rect.Height);                              Vec2F center = new Vec2F(left + fx / 2' rect.Y + rect.Height / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftTop:                        if (rect.Right > 0 && rect.Bottom > 0)                      {                          float left = Math.Max(0' rect.Left);                          float fx = (left > 0) ? rect.Width : rect.Right;                            float top = Math.Max(0' rect.Top);                          float fy = (top > 0) ? rect.Height : rect.Bottom;                          Zoom = new Vec2F(w / fx' h / fy);                          Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                      }                                   break;                  case OriginLockMode.LeftBottom:                      {                          if (rect.Right > 0 && rect.Bottom > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                                float top = Math.Max(0' rect.Top);                              float fy = (top > 0) ? rect.Height : rect.Bottom;                              Zoom = new Vec2F(w / fx' h / fy);                              Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftMiddle:                      {                          if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              float abstop = Math.Abs(rect.Top);                              float absbottom = Math.Abs(rect.Bottom);                              float fy = Math.Max(abstop' absbottom);                              Zoom = new Vec2F(w / fx' hh / fy);                              Vec2F center = new Vec2F(left + fx / 2' 0);                              Pan = new Vec2F(hw - center.X * Zoom.X' Pan.Y);                          }                          break;                      }              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      {                          Zoom = new Vec2F(w / rect.Width' h / rect.Height);                          Vec2F center = new Vec2F(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          break;                      }                  case OriginLockMode.Center:                      {                          float absleft = Math.Abs(rect.Left);                          float absright = Math.Abs(rect.Right);                          float fx = Math.Max(absleft' absright);                          float abstop = Math.Abs(rect.Top);                          float absbottom = Math.Abs(rect.Bottom);                          float fy = Math.Max(abstop' absbottom);                          Zoom = new Vec2F(hw / fx' hh / fy);                          break;                      }                  case OriginLockMode.Left:                      {                                                  if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              Zoom = new Vec2F(w / fx' h / rect.Height);                              Vec2F center = new Vec2F(left + fx / 2' rect.Y + rect.Height / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftTop:                        if (rect.Right > 0 && rect.Bottom > 0)                      {                          float left = Math.Max(0' rect.Left);                          float fx = (left > 0) ? rect.Width : rect.Right;                            float top = Math.Max(0' rect.Top);                          float fy = (top > 0) ? rect.Height : rect.Bottom;                          Zoom = new Vec2F(w / fx' h / fy);                          Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                      }                                   break;                  case OriginLockMode.LeftBottom:                      {                          if (rect.Right > 0 && rect.Bottom > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                                float top = Math.Max(0' rect.Top);                              float fy = (top > 0) ? rect.Height : rect.Bottom;                              Zoom = new Vec2F(w / fx' h / fy);                              Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftMiddle:                      {                          if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              float abstop = Math.Abs(rect.Top);                              float absbottom = Math.Abs(rect.Bottom);                              float fy = Math.Max(abstop' absbottom);                              Zoom = new Vec2F(w / fx' hh / fy);                              Vec2F center = new Vec2F(left + fx / 2' 0);                              Pan = new Vec2F(hw - center.X * Zoom.X' Pan.Y);                          }                          break;                      }              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      {                          Zoom = new Vec2F(w / rect.Width' h / rect.Height);                          Vec2F center = new Vec2F(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          break;                      }                  case OriginLockMode.Center:                      {                          float absleft = Math.Abs(rect.Left);                          float absright = Math.Abs(rect.Right);                          float fx = Math.Max(absleft' absright);                          float abstop = Math.Abs(rect.Top);                          float absbottom = Math.Abs(rect.Bottom);                          float fy = Math.Max(abstop' absbottom);                          Zoom = new Vec2F(hw / fx' hh / fy);                          break;                      }                  case OriginLockMode.Left:                      {                                                  if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              Zoom = new Vec2F(w / fx' h / rect.Height);                              Vec2F center = new Vec2F(left + fx / 2' rect.Y + rect.Height / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftTop:                        if (rect.Right > 0 && rect.Bottom > 0)                      {                          float left = Math.Max(0' rect.Left);                          float fx = (left > 0) ? rect.Width : rect.Right;                            float top = Math.Max(0' rect.Top);                          float fy = (top > 0) ? rect.Height : rect.Bottom;                          Zoom = new Vec2F(w / fx' h / fy);                          Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                      }                                   break;                  case OriginLockMode.LeftBottom:                      {                          if (rect.Right > 0 && rect.Bottom > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                                float top = Math.Max(0' rect.Top);                              float fy = (top > 0) ? rect.Height : rect.Bottom;                              Zoom = new Vec2F(w / fx' h / fy);                              Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftMiddle:                      {                          if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              float abstop = Math.Abs(rect.Top);                              float absbottom = Math.Abs(rect.Bottom);                              float fy = Math.Max(abstop' absbottom);                              Zoom = new Vec2F(w / fx' hh / fy);                              Vec2F center = new Vec2F(left + fx / 2' 0);                              Pan = new Vec2F(hw - center.X * Zoom.X' Pan.Y);                          }                          break;                      }              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      {                          Zoom = new Vec2F(w / rect.Width' h / rect.Height);                          Vec2F center = new Vec2F(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          break;                      }                  case OriginLockMode.Center:                      {                          float absleft = Math.Abs(rect.Left);                          float absright = Math.Abs(rect.Right);                          float fx = Math.Max(absleft' absright);                          float abstop = Math.Abs(rect.Top);                          float absbottom = Math.Abs(rect.Bottom);                          float fy = Math.Max(abstop' absbottom);                          Zoom = new Vec2F(hw / fx' hh / fy);                          break;                      }                  case OriginLockMode.Left:                      {                                                  if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              Zoom = new Vec2F(w / fx' h / rect.Height);                              Vec2F center = new Vec2F(left + fx / 2' rect.Y + rect.Height / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftTop:                        if (rect.Right > 0 && rect.Bottom > 0)                      {                          float left = Math.Max(0' rect.Left);                          float fx = (left > 0) ? rect.Width : rect.Right;                            float top = Math.Max(0' rect.Top);                          float fy = (top > 0) ? rect.Height : rect.Bottom;                          Zoom = new Vec2F(w / fx' h / fy);                          Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                      }                                   break;                  case OriginLockMode.LeftBottom:                      {                          if (rect.Right > 0 && rect.Bottom > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                                float top = Math.Max(0' rect.Top);                              float fy = (top > 0) ? rect.Height : rect.Bottom;                              Zoom = new Vec2F(w / fx' h / fy);                              Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftMiddle:                      {                          if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              float abstop = Math.Abs(rect.Top);                              float absbottom = Math.Abs(rect.Bottom);                              float fy = Math.Max(abstop' absbottom);                              Zoom = new Vec2F(w / fx' hh / fy);                              Vec2F center = new Vec2F(left + fx / 2' 0);                              Pan = new Vec2F(hw - center.X * Zoom.X' Pan.Y);                          }                          break;                      }              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      {                          Zoom = new Vec2F(w / rect.Width' h / rect.Height);                          Vec2F center = new Vec2F(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          break;                      }                  case OriginLockMode.Center:                      {                          float absleft = Math.Abs(rect.Left);                          float absright = Math.Abs(rect.Right);                          float fx = Math.Max(absleft' absright);                          float abstop = Math.Abs(rect.Top);                          float absbottom = Math.Abs(rect.Bottom);                          float fy = Math.Max(abstop' absbottom);                          Zoom = new Vec2F(hw / fx' hh / fy);                          break;                      }                  case OriginLockMode.Left:                      {                                                  if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              Zoom = new Vec2F(w / fx' h / rect.Height);                              Vec2F center = new Vec2F(left + fx / 2' rect.Y + rect.Height / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftTop:                        if (rect.Right > 0 && rect.Bottom > 0)                      {                          float left = Math.Max(0' rect.Left);                          float fx = (left > 0) ? rect.Width : rect.Right;                            float top = Math.Max(0' rect.Top);                          float fy = (top > 0) ? rect.Height : rect.Bottom;                          Zoom = new Vec2F(w / fx' h / fy);                          Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                      }                                   break;                  case OriginLockMode.LeftBottom:                      {                          if (rect.Right > 0 && rect.Bottom > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                                float top = Math.Max(0' rect.Top);                              float fy = (top > 0) ? rect.Height : rect.Bottom;                              Zoom = new Vec2F(w / fx' h / fy);                              Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftMiddle:                      {                          if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              float abstop = Math.Abs(rect.Top);                              float absbottom = Math.Abs(rect.Bottom);                              float fy = Math.Max(abstop' absbottom);                              Zoom = new Vec2F(w / fx' hh / fy);                              Vec2F center = new Vec2F(left + fx / 2' 0);                              Pan = new Vec2F(hw - center.X * Zoom.X' Pan.Y);                          }                          break;                      }              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      {                          Zoom = new Vec2F(w / rect.Width' h / rect.Height);                          Vec2F center = new Vec2F(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          break;                      }                  case OriginLockMode.Center:                      {                          float absleft = Math.Abs(rect.Left);                          float absright = Math.Abs(rect.Right);                          float fx = Math.Max(absleft' absright);                          float abstop = Math.Abs(rect.Top);                          float absbottom = Math.Abs(rect.Bottom);                          float fy = Math.Max(abstop' absbottom);                          Zoom = new Vec2F(hw / fx' hh / fy);                          break;                      }                  case OriginLockMode.Left:                      {                                                  if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              Zoom = new Vec2F(w / fx' h / rect.Height);                              Vec2F center = new Vec2F(left + fx / 2' rect.Y + rect.Height / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftTop:                        if (rect.Right > 0 && rect.Bottom > 0)                      {                          float left = Math.Max(0' rect.Left);                          float fx = (left > 0) ? rect.Width : rect.Right;                            float top = Math.Max(0' rect.Top);                          float fy = (top > 0) ? rect.Height : rect.Bottom;                          Zoom = new Vec2F(w / fx' h / fy);                          Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                      }                                   break;                  case OriginLockMode.LeftBottom:                      {                          if (rect.Right > 0 && rect.Bottom > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                                float top = Math.Max(0' rect.Top);                              float fy = (top > 0) ? rect.Height : rect.Bottom;                              Zoom = new Vec2F(w / fx' h / fy);                              Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftMiddle:                      {                          if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              float abstop = Math.Abs(rect.Top);                              float absbottom = Math.Abs(rect.Bottom);                              float fy = Math.Max(abstop' absbottom);                              Zoom = new Vec2F(w / fx' hh / fy);                              Vec2F center = new Vec2F(left + fx / 2' 0);                              Pan = new Vec2F(hw - center.X * Zoom.X' Pan.Y);                          }                          break;                      }              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,PanToOrigin,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      Pan_d = new PointD(ClientSize.Width / 2' ClientSize.Height / 2);                      break;                  case OriginLockMode.LeftTop:                      Pan_d = new PointD(1' 1);                      break;                  case OriginLockMode.Left:                                      case OriginLockMode.LeftMiddle:                      Pan_d = new PointD(1' ClientSize.Height / 2);                      break;                  case OriginLockMode.LeftBottom:                      Pan_d = new PointD(1' ClientSize.Height);                      break;                                  }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,PanToOrigin,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      Pan_d = new PointD(ClientSize.Width / 2' ClientSize.Height / 2);                      break;                  case OriginLockMode.LeftTop:                      Pan_d = new PointD(1' 1);                      break;                  case OriginLockMode.Left:                                      case OriginLockMode.LeftMiddle:                      Pan_d = new PointD(1' ClientSize.Height / 2);                      break;                  case OriginLockMode.LeftBottom:                      Pan_d = new PointD(1' ClientSize.Height);                      break;                                  }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,PanToOrigin,The following statement contains a magic number: switch(m_lockorg)              {                  case OriginLockMode.Free:                      Pan_d = new PointD(ClientSize.Width / 2' ClientSize.Height / 2);                      break;                  case OriginLockMode.LeftTop:                      Pan_d = new PointD(1' 1);                      break;                  case OriginLockMode.Left:                                      case OriginLockMode.LeftMiddle:                      Pan_d = new PointD(1' ClientSize.Height / 2);                      break;                  case OriginLockMode.LeftBottom:                      Pan_d = new PointD(1' ClientSize.Height);                      break;                                  }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,DrawHorizontalScale,The following statement contains a magic number: string strVal = Math.Round(x' 9).ToString();
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,DrawHorizontalScale,The following statement contains a magic number: float hw = sz.Width * 0.5f;
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,DrawVerticalScale,The following statement contains a magic number: string strVal = Math.Round(y' 9).ToString();
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,DrawVerticalScale,The following statement contains a magic number: g.DrawString(strVal' m_scaleTextFont' m_scaleTextBrush' GridTextMargin' ypos - textHeight / 2);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,DrawXYLabel,The following statement contains a magic number: float margin = Math.Min( 2.0f * m_axisLabelFont.Height'40);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,DrawXYLabel,The following statement contains a magic number: float margin = Math.Min( 2.0f * m_axisLabelFont.Height'40);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,DrawXYLabel,The following statement contains a magic number: float leadingspace = 120;
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,DrawXYLabel,The following statement contains a magic number: g.RotateTransform(-90);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,OnMouseWheel,The following statement contains a magic number: float zf = (1.0f + e.Delta / 1200.0f);
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,UpdatePan,The following statement contains a magic number: switch (m_lockorg)              {                  case OriginLockMode.Free:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = float.MaxValue;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.Center:                      m_minOffsetX = w / 2;                                          m_maxOffsetX = w / 2;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.Left:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.LeftTop:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = -float.MaxValue;                      m_maxOffsetY = 1;                      break;                  case OriginLockMode.LeftMiddle:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.LeftBottom:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h - 1;                      m_maxOffsetY = float.MaxValue;                      break;              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,UpdatePan,The following statement contains a magic number: switch (m_lockorg)              {                  case OriginLockMode.Free:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = float.MaxValue;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.Center:                      m_minOffsetX = w / 2;                                          m_maxOffsetX = w / 2;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.Left:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.LeftTop:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = -float.MaxValue;                      m_maxOffsetY = 1;                      break;                  case OriginLockMode.LeftMiddle:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.LeftBottom:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h - 1;                      m_maxOffsetY = float.MaxValue;                      break;              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,UpdatePan,The following statement contains a magic number: switch (m_lockorg)              {                  case OriginLockMode.Free:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = float.MaxValue;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.Center:                      m_minOffsetX = w / 2;                                          m_maxOffsetX = w / 2;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.Left:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.LeftTop:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = -float.MaxValue;                      m_maxOffsetY = 1;                      break;                  case OriginLockMode.LeftMiddle:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.LeftBottom:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h - 1;                      m_maxOffsetY = float.MaxValue;                      break;              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,UpdatePan,The following statement contains a magic number: switch (m_lockorg)              {                  case OriginLockMode.Free:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = float.MaxValue;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.Center:                      m_minOffsetX = w / 2;                                          m_maxOffsetX = w / 2;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.Left:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.LeftTop:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = -float.MaxValue;                      m_maxOffsetY = 1;                      break;                  case OriginLockMode.LeftMiddle:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.LeftBottom:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h - 1;                      m_maxOffsetY = float.MaxValue;                      break;              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,UpdatePan,The following statement contains a magic number: switch (m_lockorg)              {                  case OriginLockMode.Free:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = float.MaxValue;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.Center:                      m_minOffsetX = w / 2;                                          m_maxOffsetX = w / 2;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.Left:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.LeftTop:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = -float.MaxValue;                      m_maxOffsetY = 1;                      break;                  case OriginLockMode.LeftMiddle:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.LeftBottom:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h - 1;                      m_maxOffsetY = float.MaxValue;                      break;              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,UpdatePan,The following statement contains a magic number: switch (m_lockorg)              {                  case OriginLockMode.Free:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = float.MaxValue;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.Center:                      m_minOffsetX = w / 2;                                          m_maxOffsetX = w / 2;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.Left:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.LeftTop:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = -float.MaxValue;                      m_maxOffsetY = 1;                      break;                  case OriginLockMode.LeftMiddle:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.LeftBottom:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h - 1;                      m_maxOffsetY = float.MaxValue;                      break;              }
Magic Number,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,ComputeGridSpan,The following statement contains a magic number: double baseNum = Math.Pow(10' digit);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,CurveCanvas,The following statement contains a magic number: s_marqueePen = new Pen(Color.FromArgb(40' 40' 40));
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,CurveCanvas,The following statement contains a magic number: s_marqueePen = new Pen(Color.FromArgb(40' 40' 40));
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,CurveCanvas,The following statement contains a magic number: s_marqueePen = new Pen(Color.FromArgb(40' 40' 40));
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,CurveCanvas,The following statement contains a magic number: s_marqueePen.DashPattern = new float[] { 3' 3 };
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,CurveCanvas,The following statement contains a magic number: s_marqueePen.DashPattern = new float[] { 3' 3 };
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,FitSelection,The following statement contains a magic number: float padding = 0.1f;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,FitAll,The following statement contains a magic number: float padding = 0.1f;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: float thickness = m_editSet.Contains(curve) ? 2.6f : 1.0f;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: Pen pen = new Pen(Color.Black' 2);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: Rectangle pvRect = new Rectangle((int)scalePivot.X - 4' (int)scalePivot.Y - 4' 8' 8);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: Rectangle pvRect = new Rectangle((int)scalePivot.X - 4' (int)scalePivot.Y - 4' 8' 8);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: Rectangle pvRect = new Rectangle((int)scalePivot.X - 4' (int)scalePivot.Y - 4' 8' 8);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: Rectangle pvRect = new Rectangle((int)scalePivot.X - 4' (int)scalePivot.Y - 4' 8' 8);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DrawPasteAtIndicators,The following statement contains a magic number: RectangleF ptRect = new RectangleF(0' 0' 9' 9);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DrawPasteAtIndicators,The following statement contains a magic number: RectangleF ptRect = new RectangleF(0' 0' 9' 9);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DrawPasteAtIndicators,The following statement contains a magic number: ptRect.X = pt.X - ptRect.Width / 2;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DrawPasteAtIndicators,The following statement contains a magic number: ptRect.Y = pt.Y - ptRect.Height / 2;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PerformAction,The following statement contains a magic number: switch (action)              {                  case MouseEditAction.PasteAtMove:                      {                          m_currentX.Position = CurrentGraphPoint.X;                      }                      break;                  case MouseEditAction.Panning:                      {                          Pan_d = new PointD(ClickPan_d.X + dx' ClickPan_d.Y + dy);                      }                      break;                  case MouseEditAction.Zooming:                      {                                                  float xScale = 1 + 4.0f * Math.Abs(dx / Width);                          if (dx < 0) xScale = 1.0f / xScale;                            float yScale = 1 + 4.0f * Math.Abs(dy / Height);                          if (dy > 0) yScale = 1.0f / yScale;                            Zoom_d = new PointD(ClickZoom_d.X * xScale' ClickZoom_d.Y * yScale);                          Pan_d = new PointD((ClickPoint.X - m_zoomCenterStart.X * Zoom_d.X)'                              (ClickPoint.Y - m_zoomCenterStart.Y * Zoom_d.Y));                                             }                      break;                  case MouseEditAction.Select:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          SetSelection(points' regions);                      }                      break;                  case MouseEditAction.AddToSelection:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          AddToSelection(points' regions);                      }                      break;                  case MouseEditAction.RemoveFromSelection:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          RemoveFromSelection(points' regions);                      }                      break;                  case MouseEditAction.ToggleSelection:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          ToggleSelection(points' regions);                      }                      break;                    case MouseEditAction.MoveSelectionAlongX:                  case MouseEditAction.MoveSelectionAlongY:                  case MouseEditAction.MoveSelection:                      {                          m_updateCurveLimits = true;                          float gdx = 0;                          float gdy = 0;                          if (action == MouseEditAction.MoveSelectionAlongX)                          {                              gdx = CurrentGraphPoint.X - ClickGraphPoint.X;                          }                          else if (action == MouseEditAction.MoveSelectionAlongY)                          {                              gdy = CurrentGraphPoint.Y - ClickGraphPoint.Y;                          }                          else                          {                              gdx = CurrentGraphPoint.X - ClickGraphPoint.X;                              gdy = CurrentGraphPoint.Y - ClickGraphPoint.Y;                          }                          Translate(gdx' gdy);                                             }                      break;                    case MouseEditAction.PivotScaleAlongX:                  case MouseEditAction.PivotScaleAlongY:                  case MouseEditAction.PivotScale:                      {                          m_updateCurveLimits = true;                          float scale = 10.0f;                          float xScale = 0;                          float yScale = 0;                          if (action == MouseEditAction.PivotScaleAlongX)                          {                              xScale = 1 + scale * dx / (float)Width;                          }                          else if (action == MouseEditAction.PivotScaleAlongY)                          {                              yScale = 1 + scale * -dy / (float)Height;                          }                          else                          {                              xScale = 1 + scale * dx / (float)Width;                              yScale = 1 + scale * -dy / (float)Height;                          }                          ScalePoints(xScale' yScale);                      }                      break;                    case MouseEditAction.InsertPoint:                  case MouseEditAction.AddControlPoint:                      {                          m_updateCurveLimits = true;                                                    // collect curves                           IEnumerable<ICurve> curves = null;                          if (m_visibleCurveCount == 1)                          {                              var curve = m_curves.First(c => c.Visible);                              curves = new[]{curve};                          }                          else                          {                              curves = m_editSet.Count > 0 ? (IEnumerable<ICurve>)m_editSet : m_selectedCurves;                          }                            bool insert = action == MouseEditAction.InsertPoint;                          var transName = insert ? "Insert Control Point".Localize() : "Add Control Point".Localize();                          Vec2F pt = insert ? CurrentGraphPoint : ClickGraphPoint;                          m_transactionContext.DoTransaction(delegate                          {                              curves.ForEach(curve => CurveUtils.AddControlPoint(curve' pt' insert));                          }' transName);                                                                         }                      break;                    case MouseEditAction.AddControlPointToEmptyCurve:                      {                          m_updateCurveLimits = true;                          if (m_curves.Count >0)                          {                              ICurve emptyCurve = null;                              foreach (ICurve curve in m_curves)                              {                                  if (curve.Visible && curve.ControlPoints.Count == 0)                                  {                                      emptyCurve = curve;                                      break;                                  }                              }                              if (emptyCurve != null)                              {                                  // create control point and add it the emptyCurve curve.                                                          m_transactionContext.DoTransaction(delegate                                  {                                      CurveUtils.AddControlPoint(emptyCurve' ClickGraphPoint' false);                                      regions.Add(PointSelectionRegions.Point);                                      points.Add(emptyCurve.ControlPoints[0]);                                      AddToSelection(points' regions);                                  }' "Add Control Point".Localize());                                                                  }                          }                      }                      break;                  case MouseEditAction.CurveLimitResize:                      {                          try                          {                              Editing = true;                              if (m_limitHit != null)                              {                                  if (m_limitSide == CurveLimitSides.Left)                                      m_limitHit.MinX = CurrentGraphPoint.X;                                  else if (m_limitSide == CurveLimitSides.Right)                                      m_limitHit.MaxX = CurrentGraphPoint.X;                                  else if (m_limitSide == CurveLimitSides.Top)                                      m_limitHit.MaxY = CurrentGraphPoint.Y;                                  else if (m_limitSide == CurveLimitSides.Bottom)                                      m_limitHit.MinY = CurrentGraphPoint.Y;                                    ValidateCurveLimits(m_limitHit' m_limitSide);                              }                          }                          catch (InvalidTransactionException ex)                          {                              if (m_transactionContext.InTransaction)                                  m_transactionContext.Cancel();                                if (ex.ReportError)                                  Outputs.WriteLine(OutputMessageType.Error' ex.Message);                          }                          finally                          {                              Editing = false;                                                      }                      }                      break;                  default:                      break;              }
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PerformAction,The following statement contains a magic number: switch (action)              {                  case MouseEditAction.PasteAtMove:                      {                          m_currentX.Position = CurrentGraphPoint.X;                      }                      break;                  case MouseEditAction.Panning:                      {                          Pan_d = new PointD(ClickPan_d.X + dx' ClickPan_d.Y + dy);                      }                      break;                  case MouseEditAction.Zooming:                      {                                                  float xScale = 1 + 4.0f * Math.Abs(dx / Width);                          if (dx < 0) xScale = 1.0f / xScale;                            float yScale = 1 + 4.0f * Math.Abs(dy / Height);                          if (dy > 0) yScale = 1.0f / yScale;                            Zoom_d = new PointD(ClickZoom_d.X * xScale' ClickZoom_d.Y * yScale);                          Pan_d = new PointD((ClickPoint.X - m_zoomCenterStart.X * Zoom_d.X)'                              (ClickPoint.Y - m_zoomCenterStart.Y * Zoom_d.Y));                                             }                      break;                  case MouseEditAction.Select:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          SetSelection(points' regions);                      }                      break;                  case MouseEditAction.AddToSelection:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          AddToSelection(points' regions);                      }                      break;                  case MouseEditAction.RemoveFromSelection:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          RemoveFromSelection(points' regions);                      }                      break;                  case MouseEditAction.ToggleSelection:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          ToggleSelection(points' regions);                      }                      break;                    case MouseEditAction.MoveSelectionAlongX:                  case MouseEditAction.MoveSelectionAlongY:                  case MouseEditAction.MoveSelection:                      {                          m_updateCurveLimits = true;                          float gdx = 0;                          float gdy = 0;                          if (action == MouseEditAction.MoveSelectionAlongX)                          {                              gdx = CurrentGraphPoint.X - ClickGraphPoint.X;                          }                          else if (action == MouseEditAction.MoveSelectionAlongY)                          {                              gdy = CurrentGraphPoint.Y - ClickGraphPoint.Y;                          }                          else                          {                              gdx = CurrentGraphPoint.X - ClickGraphPoint.X;                              gdy = CurrentGraphPoint.Y - ClickGraphPoint.Y;                          }                          Translate(gdx' gdy);                                             }                      break;                    case MouseEditAction.PivotScaleAlongX:                  case MouseEditAction.PivotScaleAlongY:                  case MouseEditAction.PivotScale:                      {                          m_updateCurveLimits = true;                          float scale = 10.0f;                          float xScale = 0;                          float yScale = 0;                          if (action == MouseEditAction.PivotScaleAlongX)                          {                              xScale = 1 + scale * dx / (float)Width;                          }                          else if (action == MouseEditAction.PivotScaleAlongY)                          {                              yScale = 1 + scale * -dy / (float)Height;                          }                          else                          {                              xScale = 1 + scale * dx / (float)Width;                              yScale = 1 + scale * -dy / (float)Height;                          }                          ScalePoints(xScale' yScale);                      }                      break;                    case MouseEditAction.InsertPoint:                  case MouseEditAction.AddControlPoint:                      {                          m_updateCurveLimits = true;                                                    // collect curves                           IEnumerable<ICurve> curves = null;                          if (m_visibleCurveCount == 1)                          {                              var curve = m_curves.First(c => c.Visible);                              curves = new[]{curve};                          }                          else                          {                              curves = m_editSet.Count > 0 ? (IEnumerable<ICurve>)m_editSet : m_selectedCurves;                          }                            bool insert = action == MouseEditAction.InsertPoint;                          var transName = insert ? "Insert Control Point".Localize() : "Add Control Point".Localize();                          Vec2F pt = insert ? CurrentGraphPoint : ClickGraphPoint;                          m_transactionContext.DoTransaction(delegate                          {                              curves.ForEach(curve => CurveUtils.AddControlPoint(curve' pt' insert));                          }' transName);                                                                         }                      break;                    case MouseEditAction.AddControlPointToEmptyCurve:                      {                          m_updateCurveLimits = true;                          if (m_curves.Count >0)                          {                              ICurve emptyCurve = null;                              foreach (ICurve curve in m_curves)                              {                                  if (curve.Visible && curve.ControlPoints.Count == 0)                                  {                                      emptyCurve = curve;                                      break;                                  }                              }                              if (emptyCurve != null)                              {                                  // create control point and add it the emptyCurve curve.                                                          m_transactionContext.DoTransaction(delegate                                  {                                      CurveUtils.AddControlPoint(emptyCurve' ClickGraphPoint' false);                                      regions.Add(PointSelectionRegions.Point);                                      points.Add(emptyCurve.ControlPoints[0]);                                      AddToSelection(points' regions);                                  }' "Add Control Point".Localize());                                                                  }                          }                      }                      break;                  case MouseEditAction.CurveLimitResize:                      {                          try                          {                              Editing = true;                              if (m_limitHit != null)                              {                                  if (m_limitSide == CurveLimitSides.Left)                                      m_limitHit.MinX = CurrentGraphPoint.X;                                  else if (m_limitSide == CurveLimitSides.Right)                                      m_limitHit.MaxX = CurrentGraphPoint.X;                                  else if (m_limitSide == CurveLimitSides.Top)                                      m_limitHit.MaxY = CurrentGraphPoint.Y;                                  else if (m_limitSide == CurveLimitSides.Bottom)                                      m_limitHit.MinY = CurrentGraphPoint.Y;                                    ValidateCurveLimits(m_limitHit' m_limitSide);                              }                          }                          catch (InvalidTransactionException ex)                          {                              if (m_transactionContext.InTransaction)                                  m_transactionContext.Cancel();                                if (ex.ReportError)                                  Outputs.WriteLine(OutputMessageType.Error' ex.Message);                          }                          finally                          {                              Editing = false;                                                      }                      }                      break;                  default:                      break;              }
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PerformAction,The following statement contains a magic number: switch (action)              {                  case MouseEditAction.PasteAtMove:                      {                          m_currentX.Position = CurrentGraphPoint.X;                      }                      break;                  case MouseEditAction.Panning:                      {                          Pan_d = new PointD(ClickPan_d.X + dx' ClickPan_d.Y + dy);                      }                      break;                  case MouseEditAction.Zooming:                      {                                                  float xScale = 1 + 4.0f * Math.Abs(dx / Width);                          if (dx < 0) xScale = 1.0f / xScale;                            float yScale = 1 + 4.0f * Math.Abs(dy / Height);                          if (dy > 0) yScale = 1.0f / yScale;                            Zoom_d = new PointD(ClickZoom_d.X * xScale' ClickZoom_d.Y * yScale);                          Pan_d = new PointD((ClickPoint.X - m_zoomCenterStart.X * Zoom_d.X)'                              (ClickPoint.Y - m_zoomCenterStart.Y * Zoom_d.Y));                                             }                      break;                  case MouseEditAction.Select:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          SetSelection(points' regions);                      }                      break;                  case MouseEditAction.AddToSelection:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          AddToSelection(points' regions);                      }                      break;                  case MouseEditAction.RemoveFromSelection:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          RemoveFromSelection(points' regions);                      }                      break;                  case MouseEditAction.ToggleSelection:                      {                          m_renderer.Pick(m_pickableCurves' pickRect' points' regions' singlePick);                          ToggleSelection(points' regions);                      }                      break;                    case MouseEditAction.MoveSelectionAlongX:                  case MouseEditAction.MoveSelectionAlongY:                  case MouseEditAction.MoveSelection:                      {                          m_updateCurveLimits = true;                          float gdx = 0;                          float gdy = 0;                          if (action == MouseEditAction.MoveSelectionAlongX)                          {                              gdx = CurrentGraphPoint.X - ClickGraphPoint.X;                          }                          else if (action == MouseEditAction.MoveSelectionAlongY)                          {                              gdy = CurrentGraphPoint.Y - ClickGraphPoint.Y;                          }                          else                          {                              gdx = CurrentGraphPoint.X - ClickGraphPoint.X;                              gdy = CurrentGraphPoint.Y - ClickGraphPoint.Y;                          }                          Translate(gdx' gdy);                                             }                      break;                    case MouseEditAction.PivotScaleAlongX:                  case MouseEditAction.PivotScaleAlongY:                  case MouseEditAction.PivotScale:                      {                          m_updateCurveLimits = true;                          float scale = 10.0f;                          float xScale = 0;                          float yScale = 0;                          if (action == MouseEditAction.PivotScaleAlongX)                          {                              xScale = 1 + scale * dx / (float)Width;                          }                          else if (action == MouseEditAction.PivotScaleAlongY)                          {                              yScale = 1 + scale * -dy / (float)Height;                          }                          else                          {                              xScale = 1 + scale * dx / (float)Width;                              yScale = 1 + scale * -dy / (float)Height;                          }                          ScalePoints(xScale' yScale);                      }                      break;                    case MouseEditAction.InsertPoint:                  case MouseEditAction.AddControlPoint:                      {                          m_updateCurveLimits = true;                                                    // collect curves                           IEnumerable<ICurve> curves = null;                          if (m_visibleCurveCount == 1)                          {                              var curve = m_curves.First(c => c.Visible);                              curves = new[]{curve};                          }                          else                          {                              curves = m_editSet.Count > 0 ? (IEnumerable<ICurve>)m_editSet : m_selectedCurves;                          }                            bool insert = action == MouseEditAction.InsertPoint;                          var transName = insert ? "Insert Control Point".Localize() : "Add Control Point".Localize();                          Vec2F pt = insert ? CurrentGraphPoint : ClickGraphPoint;                          m_transactionContext.DoTransaction(delegate                          {                              curves.ForEach(curve => CurveUtils.AddControlPoint(curve' pt' insert));                          }' transName);                                                                         }                      break;                    case MouseEditAction.AddControlPointToEmptyCurve:                      {                          m_updateCurveLimits = true;                          if (m_curves.Count >0)                          {                              ICurve emptyCurve = null;                              foreach (ICurve curve in m_curves)                              {                                  if (curve.Visible && curve.ControlPoints.Count == 0)                                  {                                      emptyCurve = curve;                                      break;                                  }                              }                              if (emptyCurve != null)                              {                                  // create control point and add it the emptyCurve curve.                                                          m_transactionContext.DoTransaction(delegate                                  {                                      CurveUtils.AddControlPoint(emptyCurve' ClickGraphPoint' false);                                      regions.Add(PointSelectionRegions.Point);                                      points.Add(emptyCurve.ControlPoints[0]);                                      AddToSelection(points' regions);                                  }' "Add Control Point".Localize());                                                                  }                          }                      }                      break;                  case MouseEditAction.CurveLimitResize:                      {                          try                          {                              Editing = true;                              if (m_limitHit != null)                              {                                  if (m_limitSide == CurveLimitSides.Left)                                      m_limitHit.MinX = CurrentGraphPoint.X;                                  else if (m_limitSide == CurveLimitSides.Right)                                      m_limitHit.MaxX = CurrentGraphPoint.X;                                  else if (m_limitSide == CurveLimitSides.Top)                                      m_limitHit.MaxY = CurrentGraphPoint.Y;                                  else if (m_limitSide == CurveLimitSides.Bottom)                                      m_limitHit.MinY = CurrentGraphPoint.Y;                                    ValidateCurveLimits(m_limitHit' m_limitSide);                              }                          }                          catch (InvalidTransactionException ex)                          {                              if (m_transactionContext.InTransaction)                                  m_transactionContext.Cancel();                                if (ex.ReportError)                                  Outputs.WriteLine(OutputMessageType.Error' ex.Message);                          }                          finally                          {                              Editing = false;                                                      }                      }                      break;                  default:                      break;              }
Magic Number,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PickCurveLimits,The following statement contains a magic number: const float pickTol = 4;
Magic Number,Sce.Atf.Controls.CurveEditing,CurrentX,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,CurrentX,The following statement contains a magic number: HoverColor = Color.FromArgb(255' 255' 128);
Magic Number,Sce.Atf.Controls.CurveEditing,CurrentX,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,CurrentX,The following statement contains a magic number: HoverColor = Color.FromArgb(255' 255' 128);
Magic Number,Sce.Atf.Controls.CurveEditing,CurrentX,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,CurrentX,The following statement contains a magic number: HoverColor = Color.FromArgb(255' 255' 128);
Magic Number,Sce.Atf.Controls.CurveEditing,CurrentX,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,HitTest,The following statement contains a magic number: const float pickTolerance = 3;
Magic Number,Sce.Atf.Controls.CurveEditing,CurrentX,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,Draw,The following statement contains a magic number: float xs = m_canvas.ClientRectangle.Width / 2;
Magic Number,Sce.Atf.Controls.CurveEditing,CurrentX,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,Draw,The following statement contains a magic number: float leftEdge = crect.X + 3;
Magic Number,Sce.Atf.Controls.CurveEditing,CurrentX,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,Draw,The following statement contains a magic number: float rightEdge = crect.Right - 3;
Magic Number,Sce.Atf.Controls.CurveEditing,CurrentX,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,Draw,The following statement contains a magic number: float strValY = m_canvas.Bottom - 2f * m_canvas.ScaleTextFont.Height - GridTextMargin - 8.0f;
Magic Number,Sce.Atf.Controls.CurveEditing,CurrentX,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,Draw,The following statement contains a magic number: float strValY = m_canvas.Bottom - 2f * m_canvas.ScaleTextFont.Height - GridTextMargin - 8.0f;
Magic Number,Sce.Atf.Controls.CurveEditing,CurrentX,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,Draw,The following statement contains a magic number: string strVal = Math.Round(Position' 4).ToString();
Magic Number,Sce.Atf.Controls.CurveEditing,CurrentX,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,Draw,The following statement contains a magic number: g.DrawString(strVal' m_canvas.ScaleTextFont' s_brush' new PointF(cPos + 4' strValY));
Magic Number,Sce.Atf.Controls.CurveEditing,CustomToolStripMenuItem,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,GetButtonRect,The following statement contains a magic number: buttonRect.Height -= (2 * ButtonMargin + 1);
Magic Number,Sce.Atf.Controls.CurveEditing,CustomToolStripMenuItem,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: fillRect.Height += 2;
Magic Number,Sce.Atf.Controls.CurveEditing,CustomToolStripMenuItem,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: dotRect.Y = m_buttonRect.Bottom - 2;
Magic Number,Sce.Atf.Controls.CurveEditing,CustomToolStripMenuItem,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: dotRect.X += (m_buttonRect.Width - 5) / 2;
Magic Number,Sce.Atf.Controls.CurveEditing,CustomToolStripMenuItem,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: dotRect.X += (m_buttonRect.Width - 5) / 2;
Magic Number,Sce.Atf.Controls.CurveEditing,CustomToolStripMenuItem,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: dotRect.X += 2;
Magic Number,Sce.Atf.Controls.CurveEditing,CustomToolStripMenuItem,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnPaint,The following statement contains a magic number: dotRect.X += 2;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_startField = new InputField<float>("Start".Localize()' 150);
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_xOffsetField = new InputField<float>("X Offset".Localize()' 150);
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_yOffsetField = new InputField<float>("Y Offset".Localize()' 150);
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_copiesField = new InputField<uint>("Copies".Localize()' 100);
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: ClientSize = new Size(530' 410);
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: ClientSize = new Size(530' 410);
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_clipboardRdo.TabIndex = 2;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_startField.TabIndex = 3;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_xOffsetField.TabIndex = 4;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_yOffsetField.TabIndex = 5;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_copiesField.TabIndex = 6;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_mergeRdo.TabIndex = 2;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_connectChk.TabIndex = 3;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_buttonsPanel.TabIndex = 2;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,PasteOptionsForm,The following statement contains a magic number: m_closeBtn.TabIndex = 2;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: int outerMargin = 4;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: int grpLeftRightMargin = 16;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: int leftPadding = 30;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: int vSpacing = 8;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: int vSpacingGrp = 16;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: int hSpacing = 4;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: int pad = 16;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: int cw = ClientSize.Width - 2 * grpLeftRightMargin;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: m_pasteAtgrp.Height = m_currentRdo.Height + 2 * pad + 3 * vSpacingGrp + vSpacing + 4 * m_startField.Height;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: m_pasteAtgrp.Height = m_currentRdo.Height + 2 * pad + 3 * vSpacingGrp + vSpacing + 4 * m_startField.Height;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: m_pasteAtgrp.Height = m_currentRdo.Height + 2 * pad + 3 * vSpacingGrp + vSpacing + 4 * m_startField.Height;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: int txtLeft = m_xlocLbl.Width + 6;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: m_xlocLbl.Location = new Point(leftPadding' pad + (m_startRdo.Height - m_xlocLbl.Height) / 2);
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: m_pasteMethodGrp.Height = 2 * pad + m_insertRdo.Height + vSpacing + m_connectChk.Height;
Magic Number,Sce.Atf.Controls.CurveEditing,PasteOptionsForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: btnW = Math.Max(btnW' okBtnW) * 2;
Magic Number,Sce.Atf.Controls.CurveEditing,InputField<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,InputField,The following statement contains a magic number: m_txtWidth = 20;
Magic Number,Sce.Atf.Controls.CurveEditing,InputField<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,InputField,The following statement contains a magic number: m_txtWidth < 20
Magic Number,Sce.Atf.Controls.CurveEditing,InputField<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,InputField,The following statement contains a magic number: m_txtBox.Location = new Point(26' 1);
Magic Number,Sce.Atf.Controls.CurveEditing,InputField<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,InputField,The following statement contains a magic number: m_txtBox.Size = new Size(m_txtWidth' 30);
Magic Number,Sce.Atf.Controls.CurveEditing,InputField<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,InputField,The following statement contains a magic number: Size = new Size(200' 30);
Magic Number,Sce.Atf.Controls.CurveEditing,InputField<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,InputField,The following statement contains a magic number: Size = new Size(200' 30);
Magic Number,Sce.Atf.Controls.CurveEditing,InputField<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: Width = m_label.Width + m_txtBox.Width + 3;
Magic Number,Sce.Atf.Controls.CurveEditing,InputField<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: m_label.Location = new Point(1' (Height - m_label.Height) / 2);
Magic Number,Sce.Atf.Controls.CurveEditing,InputField<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,DoLayout,The following statement contains a magic number: m_txtBox.Location = new Point(m_label.Bounds.Right' (Height - m_txtBox.Height) / 2);
Magic Number,Sce.Atf.Controls.CurveEditing,NumberTextBox<T>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,OnMouseDown,The following statement contains a magic number: e.Button == MouseButtons.Left &&                          e.Clicks == 2
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_editModeButtons = new ToolStripButton[4];
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentBtns = new ToolStripButton[5];
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_infinityBtns = new ToolStripButton[4];
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_menu.Size = new Size(898' 31);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_menu.Size = new Size(898' 31);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentsMenuItem.Size = new Size(100' 27);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentsMenuItem.Size = new Size(100' 27);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_InTangentMenuItem.Size = new Size(205' 28);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_InTangentMenuItem.Size = new Size(205' 28);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_outTangentMenuItem.Size = new Size(205' 28);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_outTangentMenuItem.Size = new Size(205' 28);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_curveTypeSelector.Width = 70;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_topStrip.Location = new Point(0' 31);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_topStrip.Size = new Size(898' 32);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_topStrip.Size = new Size(898' 32);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_topStrip.MinimumSize = new Size(32' 32);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_topStrip.MinimumSize = new Size(32' 32);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_editModeButtons[2].Name = "InsertPoint";
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_editModeButtons[2].Tag = EditModes.InsertPoint;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_editModeButtons[2].Image = new Bitmap(typeof(CurveUtils)' "Resources.InsertKeysTool.png");
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_editModeButtons[2].ToolTipText = "Insert control point";
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_editModeButtons[3].Name = "AddPoint";
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_editModeButtons[3].Tag = EditModes.AddPoint;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_editModeButtons[3].Image = new Bitmap(typeof(CurveUtils)' "Resources.AddKeysTool.png");
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_editModeButtons[3].ToolTipText = "Add control point";
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_xTxtBox.Size = new Size(100' 30);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_xTxtBox.Size = new Size(100' 30);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_yTxtBox.Size = new Size(100' 30);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_yTxtBox.Size = new Size(100' 30);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentBtns[2].Tag = CurveTangentTypes.Linear;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentBtns[2].Image = new Bitmap(typeof(CurveUtils)' "Resources.LinearTangents.png");
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentBtns[2].ToolTipText = "Linear";
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentBtns[3].Tag = CurveTangentTypes.Flat;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentBtns[3].Image = new Bitmap(typeof(CurveUtils)' "Resources.FlatTangents.png");
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentBtns[3].ToolTipText = "Flat";
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentBtns[4].Tag = CurveTangentTypes.Stepped;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentBtns[4].Image = new Bitmap(typeof(CurveUtils)' "Resources.StepTangents.png");
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_tangentBtns[4].ToolTipText = "Step";
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: i <= 3
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_infinityBtns[2].Tag = CurveLoopTypes.Cycle;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_infinityBtns[2].Image = new Bitmap(typeof(CurveUtils)' "Resources.CycleAfter.png");
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_infinityBtns[2].ToolTipText = "Cycle After";
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_infinityBtns[3].Tag = CurveLoopTypes.CycleWithOffset;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_infinityBtns[3].Image = new Bitmap(typeof(CurveUtils)' "Resources.CycleAfterwithOffset.png");
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_infinityBtns[3].ToolTipText = "Cycle After with Offset";
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_bottomStrip.Location = new Point(0' 549);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_bottomStrip.Size = new Size(898' 26);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_bottomStrip.Size = new Size(898' 26);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_bottomStrip.TabIndex = 2;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_MousePos.Size = new Size(250' 27);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_MousePos.Size = new Size(250' 27);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_curveControl.Location = new Point(24' 61);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_curveControl.Location = new Point(24' 61);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_curveControl.Size = new Size(900' 600);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_curveControl.Size = new Size(900' 600);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_curveControl.MouseMove += delegate(object sender' MouseEventArgs e)              {                  PointD gp = m_curveControl.ClientToGraph_d(e.X' e.Y);                  m_MousePos.Text = string.Format("{0}' {1}"' Math.Round(gp.X' 4)' Math.Round(gp.Y' 4));              };
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_curveControl.MouseMove += delegate(object sender' MouseEventArgs e)              {                  PointD gp = m_curveControl.ClientToGraph_d(e.X' e.Y);                  m_MousePos.Text = string.Format("{0}' {1}"' Math.Round(gp.X' 4)' Math.Round(gp.Y' 4));              };
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_TangentsSep1.Size = new Size(202' 6);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_TangentsSep1.Size = new Size(202' 6);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: splitContainer1.Location = new Point(0' 48);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: splitContainer1.Panel1MinSize = 30;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: splitContainer1.Panel2MinSize = 30;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: splitContainer1.Size = new Size(898' 520);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: splitContainer1.Size = new Size(898' 520);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: splitContainer1.SplitterDistance = 180;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: splitContainer1.SplitterIncrement = 5;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: splitContainer1.SplitterWidth = 4;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_curvesListView.Size = new Size(300' 300);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_curvesListView.Size = new Size(300' 300);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: m_curvesListView.Columns.Add("Curves"' 250);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: ClientSize = new Size(898' 575);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,Init,The following statement contains a magic number: ClientSize = new Size(898' 575);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,PopulateListView,The following statement contains a magic number: name = name.Substring(0' 250);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,PopulateListView,The following statement contains a magic number: name.Length > 250
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,InputBoxValidating,The following statement contains a magic number: str = str.Substring(2);
Magic Number,Sce.Atf.Controls.CurveEditing,HelpForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,HelpForm,The following statement contains a magic number: Size = new Size(700' 450);
Magic Number,Sce.Atf.Controls.CurveEditing,HelpForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,HelpForm,The following statement contains a magic number: Size = new Size(700' 450);
Magic Number,Sce.Atf.Controls.CurveEditing,HelpForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,HelpForm,The following statement contains a magic number: Font = new Font(Font.Name' 12);
Magic Number,Sce.Atf.Controls.CurveEditing,HelpForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,HelpForm,The following statement contains a magic number: m_textBox.Font = new Font("Lucida Console"' 11.25F' FontStyle.Regular' GraphicsUnit.Point' 0);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: label1.Location = new Point(12' 13);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: label1.Location = new Point(12' 13);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: label1.Size = new Size(18' 18);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: label1.Size = new Size(18' 18);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: label2.Location = new Point(13' 43);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: label2.Location = new Point(13' 43);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: label2.Size = new Size(17' 18);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: label2.Size = new Size(17' 18);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: txtBoxX.Location = new Point(36' 7);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: txtBoxX.Location = new Point(36' 7);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: txtBoxX.Size = new Size(197' 24);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: txtBoxX.Size = new Size(197' 24);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: txtBoxX.TabIndex = 2;
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: textBoxY.Location = new Point(36' 37);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: textBoxY.Location = new Point(36' 37);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: textBoxY.Size = new Size(197' 24);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: textBoxY.Size = new Size(197' 24);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: textBoxY.TabIndex = 3;
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: cancelBtn.Location = new Point(158' 77);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: cancelBtn.Location = new Point(158' 77);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: cancelBtn.Size = new Size(75' 29);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: cancelBtn.Size = new Size(75' 29);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: cancelBtn.TabIndex = 5;
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: OkBtn.Location = new Point(77' 77);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: OkBtn.Location = new Point(77' 77);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: OkBtn.Size = new Size(75' 29);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: OkBtn.Size = new Size(75' 29);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: OkBtn.TabIndex = 6;
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: ClientSize = new Size(248' 111);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: ClientSize = new Size(248' 111);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: Font = new Font("Microsoft Sans Serif"' 11.25F' FontStyle.Regular' GraphicsUnit.Point' ((0)));
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: Margin = new Padding(4' 4' 4' 4);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: Margin = new Padding(4' 4' 4' 4);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: Margin = new Padding(4' 4' 4' 4);
Magic Number,Sce.Atf.Controls.CurveEditing,AddPointDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,AddPointDialog,The following statement contains a magic number: Margin = new Padding(4' 4' 4' 4);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditor.cs,selectionContext_SelectionChanged,The following statement contains a magic number: float hue = (i * 360.0f) / (float)curveList.Count;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditor.cs,selectionContext_SelectionChanged,The following statement contains a magic number: curve.CurveColor = ColorUtil.FromAhsb(255' hue' 1.0f' 0.5f);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditor.cs,selectionContext_SelectionChanged,The following statement contains a magic number: curve.CurveColor = ColorUtil.FromAhsb(255' hue' 1.0f' 0.5f);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,DrawCurve,The following statement contains a magic number: float bound = 500;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,DrawControlPoints,The following statement contains a magic number: float halfPointSize = m_pointSize / 2;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,DrawControlPoint,The following statement contains a magic number: float halfPointSize = m_pointSize / 2;
Magic Number,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,DrawArrow,The following statement contains a magic number: s_arrowPts[2] = new PointF(leftFin.X' leftFin.Y);
Magic Number,Sce.Atf.Controls.CurveEditing,CurveRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveRenderer.cs,ComputeIndices,The following statement contains a magic number: rIndex = -2;
Magic Number,Sce.Atf.Controls.DataEditing,BoolDataEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataEditing\BoolDataEditor.cs,PaintValue,The following statement contains a magic number: const int checkBoxWidth = 12;
Magic Number,Sce.Atf.Controls.FolderSelection,FolderSelectDialog,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\FolderSelectDialog.cs,ShowDialog,The following statement contains a magic number: Environment.OSVersion.Version.Major >= 6
Magic Number,Sce.Atf.Applications.Controls,PerformanceMonitorControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PerformanceMonitorControl.cs,TimerTick,The following statement contains a magic number: m_fps = (float)(m_intervalFrameCount * 1000 / actualInterval.TotalMilliseconds);
Magic Number,Sce.Atf.Applications.Controls,PerformanceMonitorControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PerformanceMonitorControl.cs,UpdateDisplay,The following statement contains a magic number: ManagedMemoryLabel.Text = (m_managedBytes / 1024).ToString("N0") + " K";
Magic Number,Sce.Atf.Applications.Controls,PerformanceMonitorControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PerformanceMonitorControl.cs,UpdateDisplay,The following statement contains a magic number: UnmanagedMemoryLabel.Text = (m_unmanagedBytes / 1024).ToString("N0") + " K";
Magic Number,Sce.Atf.Applications.Controls,PerformanceMonitorControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PerformanceMonitorControl.cs,ClipboardBtn_Click,The following statement contains a magic number: builder.AppendFormat("Managed memory (KB): {0}".Localize()' (m_managedBytes / 1024));
Magic Number,Sce.Atf.Applications.Controls,PerformanceMonitorControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PerformanceMonitorControl.cs,ClipboardBtn_Click,The following statement contains a magic number: builder.AppendFormat("Unmanaged memory (KB): {0}".Localize()' (m_unmanagedBytes / 1024));
Magic Number,Sce.Atf.Applications.Controls,PerformanceMonitorControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PerformanceMonitorControl.cs,StressTestBtn_Click,The following statement contains a magic number: var allFrames = new List<long>(1000);
Magic Number,Sce.Atf.Applications.Controls,PerformanceMonitorControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PerformanceMonitorControl.cs,StressTestBtn_Click,The following statement contains a magic number: int secondsRemaining = (StressTestDuration / 1000) - (int)actualInterval.TotalSeconds;
Magic Number,Sce.Atf.Controls.PropertyEditing,ArrayEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\ArrayEditingControl.cs,RebuildItemControls,The following statement contains a magic number: m_indexColumnWidth = Math.Max(30' (array.Length * 2).ToString().Length * 10);
Magic Number,Sce.Atf.Controls.PropertyEditing,ArrayEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\ArrayEditingControl.cs,RebuildItemControls,The following statement contains a magic number: m_indexColumnWidth = Math.Max(30' (array.Length * 2).ToString().Length * 10);
Magic Number,Sce.Atf.Controls.PropertyEditing,ArrayEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\ArrayEditingControl.cs,RebuildItemControls,The following statement contains a magic number: m_indexColumnWidth = Math.Max(30' (array.Length * 2).ToString().Length * 10);
Magic Number,Sce.Atf.Controls.PropertyEditing,BoolControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\BoolEditor.cs,OnSizeChanged,The following statement contains a magic number: m_checkBox.Location = new Point(m_topAndLeftMargin' (Height - m_checkBox.Height) / 2 + 1);
Magic Number,Sce.Atf.Controls.PropertyEditing,BoundedFloatEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\BoundedFloatEditor.cs,Initialize,The following statement contains a magic number: parameters.Length < 2 ||                  !Single.TryParse(parameters[0]' NumberStyles.Float' CultureInfo.InvariantCulture' out min) ||                  !Single.TryParse(parameters[1]' NumberStyles.Float' CultureInfo.InvariantCulture' out max) ||                  min >= max
Magic Number,Sce.Atf.Controls.PropertyEditing,BoundedIntEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\BoundedIntEditor.cs,Initialize,The following statement contains a magic number: parameters.Length < 2 ||                  !Int32.TryParse(parameters[0]' NumberStyles.Integer' CultureInfo.InvariantCulture' out min) ||                  !Int32.TryParse(parameters[1]' NumberStyles.Integer' CultureInfo.InvariantCulture' out max) ||                  min >= max
Magic Number,Sce.Atf.Controls.PropertyEditing,CollectionEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\CollectionEditingControl.cs,GetInsertionIndex,The following statement contains a magic number: int index = ((y + (ItemHeight / 2)) / ItemHeight) + TopIndex;
Magic Number,Sce.Atf.Controls.PropertyEditing,EmbeddedCollectionEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EmbeddedCollectionEditor.cs,GetEditingControl,The following statement contains a magic number: bool toolStripLabelEnabled = (Parameters != null && Parameters.Length > 2 && Boolean.Parse(Parameters[2]));
Magic Number,Sce.Atf.Controls.PropertyEditing,EmbeddedCollectionEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EmbeddedCollectionEditor.cs,GetEditingControl,The following statement contains a magic number: bool toolStripLabelEnabled = (Parameters != null && Parameters.Length > 2 && Boolean.Parse(Parameters[2]));
Magic Number,Sce.Atf.Controls.PropertyEditing,CollectionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EmbeddedCollectionEditor.cs,ProcessPendingChanges,The following statement contains a magic number: m_indexColumnWidth = Math.Max(30' (itemCount * 2).ToString().Length * 10);
Magic Number,Sce.Atf.Controls.PropertyEditing,CollectionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EmbeddedCollectionEditor.cs,ProcessPendingChanges,The following statement contains a magic number: m_indexColumnWidth = Math.Max(30' (itemCount * 2).ToString().Length * 10);
Magic Number,Sce.Atf.Controls.PropertyEditing,CollectionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EmbeddedCollectionEditor.cs,ProcessPendingChanges,The following statement contains a magic number: m_indexColumnWidth = Math.Max(30' (itemCount * 2).ToString().Length * 10);
Magic Number,Sce.Atf.Controls.PropertyEditing,EnumUITypeEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EnumUITypeEditor.cs,EditValue,The following statement contains a magic number: height > listBox.Height - 4
Magic Number,Sce.Atf.Controls.PropertyEditing,EnumUITypeEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\EnumUITypeEditor.cs,EditValue,The following statement contains a magic number: listBox.Width = (int)width + 6;
Magic Number,Sce.Atf.Controls.PropertyEditing,FlagsUITypeEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\FlagsUITypeEditor.cs,EditValue,The following statement contains a magic number: height > checkedListBox.Height - 4
Magic Number,Sce.Atf.Controls.PropertyEditing,FlagsUITypeEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\FlagsUITypeEditor.cs,EditValue,The following statement contains a magic number: checkedListBox.Width = (int)width + 31;
Magic Number,Sce.Atf.Controls.PropertyEditing,GridControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridControl.cs,GridControl,The following statement contains a magic number: m_descriptionLabel.MaximumWidth = 5000;
Magic Number,Sce.Atf.Controls.PropertyEditing,GridControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridControl.cs,GridControl,The following statement contains a magic number: Font = new Font("Segoe UI"' 9.0f);
Magic Number,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,GridView,The following statement contains a magic number: Color color2 = ColorUtil.GetShade(color1' 1.2f);
Magic Number,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,ApplyColumnBestFit,The following statement contains a magic number: int padding = 4;
Magic Number,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnMouseWheel,The following statement contains a magic number: int value = m_vScrollBar.Value - e.Delta / 2;
Magic Number,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,Pick,The following statement contains a magic number: pt.Y < HeaderHeight &&                          pt.X >= left &&                          pt.X <= left + ExpanderSize + 2 * xPadding
Magic Number,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,SetPens,The following statement contains a magic number: Color color = Color.FromArgb(255' backColor.R * 200 / 255' backColor.G * 200 / 255' backColor.B * 200 / 255);
Magic Number,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,SetPens,The following statement contains a magic number: Color color = Color.FromArgb(255' backColor.R * 200 / 255' backColor.G * 200 / 255' backColor.B * 200 / 255);
Magic Number,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,SetPens,The following statement contains a magic number: Color color = Color.FromArgb(255' backColor.R * 200 / 255' backColor.G * 200 / 255' backColor.B * 200 / 255);
Magic Number,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,SetPens,The following statement contains a magic number: Color color = Color.FromArgb(255' backColor.R * 200 / 255' backColor.G * 200 / 255' backColor.B * 200 / 255);
Magic Number,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,SetPens,The following statement contains a magic number: Color color = Color.FromArgb(255' backColor.R * 200 / 255' backColor.G * 200 / 255' backColor.B * 200 / 255);
Magic Number,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,SetPens,The following statement contains a magic number: Color color = Color.FromArgb(255' backColor.R * 200 / 255' backColor.G * 200 / 255' backColor.B * 200 / 255);
Magic Number,Sce.Atf.Controls.PropertyEditing,GridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,SetPens,The following statement contains a magic number: Color color = Color.FromArgb(255' backColor.R * 200 / 255' backColor.G * 200 / 255' backColor.B * 200 / 255);
Magic Number,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,DrawColumnHeader,The following statement contains a magic number: Sce.Atf.GdiUtil.DrawSortDirectionIndicator(                          textRect.Right + xPadding'                          textRect.Top + rowHeight / 2 - 1 - Sce.Atf.GdiUtil.SortDirectionIndicatorHeight / 2'                          info.NextSortDirection == ListSortDirection.Descending'                          g);
Magic Number,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,DrawColumnHeader,The following statement contains a magic number: Sce.Atf.GdiUtil.DrawSortDirectionIndicator(                          textRect.Right + xPadding'                          textRect.Top + rowHeight / 2 - 1 - Sce.Atf.GdiUtil.SortDirectionIndicatorHeight / 2'                          info.NextSortDirection == ListSortDirection.Descending'                          g);
Magic Number,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnMouseMove,The following statement contains a magic number: (s_columnHeaderMouseDown) && (e.Button == MouseButtons.Left) && (deltaSquared > 2)
Magic Number,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnMouseMove,The following statement contains a magic number: s_mouseMove.X >= (left + (int)(m_gridView.GetColumnInfo(p).Width * 0.5))
Magic Number,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnMouseMove,The following statement contains a magic number: m_dropColumnX += 2;
Magic Number,Sce.Atf.Controls.PropertyEditing,EnumEditorControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\LongEnumEditor.cs,EnumEditorControl,The following statement contains a magic number: MaxDropDownItems = 6;
Magic Number,Sce.Atf.Controls.PropertyEditing,NestedCollectionEditorForm,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NestedCollectionEditorForm.cs,Bind,The following statement contains a magic number: m_treeControl.Location = new Point(comboBox1.Location.X' comboBox1.Location.Y + 2 * FontHeight);
Magic Number,Sce.Atf.Controls.PropertyEditing,NumericTupleEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NumericTupleEditor.cs,Define,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls.PropertyEditing,NumericTupleEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NumericTupleEditor.cs,Define,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls.PropertyEditing,NumericTupleEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NumericTupleEditor.cs,Define,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls.PropertyEditing,NumericTupleEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NumericTupleEditor.cs,Define,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls.PropertyEditing,NumericTupleEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NumericTupleEditor.cs,Define,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls.PropertyEditing,NumericTupleEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NumericTupleEditor.cs,Define,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls.PropertyEditing,NumericTupleEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NumericTupleEditor.cs,Define,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls.PropertyEditing,NumericTupleEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NumericTupleEditor.cs,Define,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls.PropertyEditing,NumericTupleEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NumericTupleEditor.cs,Define,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls.PropertyEditing,NumericTupleEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NumericTupleEditor.cs,Define,The following statement contains a magic number: m_labelColors = new Color[]              {                  Color.FromArgb(200'40'0)'                  Color.FromArgb(100'160'0)'                  Color.FromArgb(40'120'240)'                  Color.FromArgb(20'20'20)'              };
Magic Number,Sce.Atf.Controls.PropertyEditing,NumericTupleEditor,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\NumericTupleEditor.cs,GetEditingControl,The following statement contains a magic number: editingControl.Height = editingControl.Font.Height + 2;
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,PropertyEditingControl,The following statement contains a magic number: m_editButton.Left = base.Right - 18;
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,PropertyEditingControl,The following statement contains a magic number: m_editButton.Size = new Size(18' 18);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,PropertyEditingControl,The following statement contains a magic number: m_editButton.Size = new Size(18' 18);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,DropDownControl,The following statement contains a magic number: MsgWaitForMultipleObjects(0' 0' true' 250' 255);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,DropDownControl,The following statement contains a magic number: MsgWaitForMultipleObjects(0' 0' true' 250' 255);
Magic Number,Sce.Atf.Controls.PropertyEditing,EditButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,OnPaint,The following statement contains a magic number: int x = r.X + r.Width / 2 - 5;
Magic Number,Sce.Atf.Controls.PropertyEditing,EditButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,OnPaint,The following statement contains a magic number: int x = r.X + r.Width / 2 - 5;
Magic Number,Sce.Atf.Controls.PropertyEditing,EditButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,OnPaint,The following statement contains a magic number: int y = r.Bottom - 5;
Magic Number,Sce.Atf.Controls.PropertyEditing,EditButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle(brush' x' y' 2' 2);
Magic Number,Sce.Atf.Controls.PropertyEditing,EditButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle(brush' x' y' 2' 2);
Magic Number,Sce.Atf.Controls.PropertyEditing,EditButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle(brush' x + 4' y' 2' 2);
Magic Number,Sce.Atf.Controls.PropertyEditing,EditButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle(brush' x + 4' y' 2' 2);
Magic Number,Sce.Atf.Controls.PropertyEditing,EditButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle(brush' x + 4' y' 2' 2);
Magic Number,Sce.Atf.Controls.PropertyEditing,EditButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle(brush' x + 8' y' 2' 2);
Magic Number,Sce.Atf.Controls.PropertyEditing,EditButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle(brush' x + 8' y' 2' 2);
Magic Number,Sce.Atf.Controls.PropertyEditing,EditButton,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyEditingControl.cs,OnPaint,The following statement contains a magic number: g.FillRectangle(brush' x + 8' y' 2' 2);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGrid,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,PropertyGrid,The following statement contains a magic number: dropDownButton.Size = new System.Drawing.Size(29' 22);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGrid,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,PropertyGrid,The following statement contains a magic number: dropDownButton.Size = new System.Drawing.Size(29' 22);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGrid,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,PropertyGrid,The following statement contains a magic number: m_patternTextBox.MaximumWidth = 1080;
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGrid,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,PropertyGrid,The following statement contains a magic number: clearSearchButton.Size = new System.Drawing.Size(29' 22);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGrid,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,PropertyGrid,The following statement contains a magic number: clearSearchButton.Size = new System.Drawing.Size(29' 22);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGrid,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,PropertyGrid,The following statement contains a magic number: resetAllButton.Size = new Size(29' 22);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGrid,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,PropertyGrid,The following statement contains a magic number: resetAllButton.Size = new Size(29' 22);
Magic Number,Sce.Atf.Controls.PropertyEditing,DescriptionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,ParseMarkup,The following statement contains a magic number: string c = i + 2 < tokens.Count ? tokens[i + 2] : string.Empty;
Magic Number,Sce.Atf.Controls.PropertyEditing,DescriptionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,ParseMarkup,The following statement contains a magic number: string c = i + 2 < tokens.Count ? tokens[i + 2] : string.Empty;
Magic Number,Sce.Atf.Controls.PropertyEditing,DescriptionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,ParseMarkup,The following statement contains a magic number: string d = i + 3 < tokens.Count ? tokens[i + 3] : string.Empty;
Magic Number,Sce.Atf.Controls.PropertyEditing,DescriptionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,ParseMarkup,The following statement contains a magic number: string d = i + 3 < tokens.Count ? tokens[i + 3] : string.Empty;
Magic Number,Sce.Atf.Controls.PropertyEditing,DescriptionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,ParseMarkup,The following statement contains a magic number: string e = i + 4 < tokens.Count ? tokens[i + 4] : string.Empty;
Magic Number,Sce.Atf.Controls.PropertyEditing,DescriptionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,ParseMarkup,The following statement contains a magic number: string e = i + 4 < tokens.Count ? tokens[i + 4] : string.Empty;
Magic Number,Sce.Atf.Controls.PropertyEditing,DescriptionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,ParseMarkup,The following statement contains a magic number: i += 4;
Magic Number,Sce.Atf.Controls.PropertyEditing,DescriptionControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGrid.cs,ConvertToRtf,The following statement contains a magic number: codePoint < 128
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,PropertyGridView,The following statement contains a magic number: m_editingControl.EditButtonSize = new Size(17' 17);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,PropertyGridView,The following statement contains a magic number: m_editingControl.EditButtonSize = new Size(17' 17);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,PropertyGridView,The following statement contains a magic number: Font = new Font("Segoe UI"' 9.0f);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,OnMouseMove,The following statement contains a magic number: m_toolTip.Show(property.Descriptor.Description' this' e.X' e.Y + 20);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,OnMouseWheel,The following statement contains a magic number: int value = m_scrollBar.Value - e.Delta / 2;
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,OnPaint,The following statement contains a magic number: const int SubCategoryIndent = 13;
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,AutoAdjustSplitter,The following statement contains a magic number: int maxPropNameWidth = ExpanderSize * 2;
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,AutoAdjustSplitter,The following statement contains a magic number: int expanderX = ExpanderSize * 2 * (depth + 1);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,AutoAdjustSplitter,The following statement contains a magic number: m_splitterAmount = Math.Min(0.65f' (float)maxPropNameWidth / (float)Width);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,SelectProperty,The following statement contains a magic number: SetVerticalScroll(itemPosition.Second - 2 * RowHeight);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawCategoryRow,The following statement contains a magic number: int yPadding = (int)((RowHeight - FontHeight) / 2);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawCategoryRow,The following statement contains a magic number: GdiUtil.DrawExpander(x + xPadding' y + (RowHeight - ExpanderSize) / 2' expanded' g' CategoryExpanderPen);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawCategoryRow,The following statement contains a magic number: int offset = ExpanderSize + 2 * xPadding;
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawPropertyRow,The following statement contains a magic number: int yPadding = (int)((RowHeight - FontHeight) / 2);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawPropertyRow,The following statement contains a magic number: int expanderX = ExpanderSize * 2 * depth;
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawPropertyRow,The following statement contains a magic number: GdiUtil.DrawExpander(x + expanderX' y + (RowHeight - ExpanderSize) / 2' property.ChildrenExpanded' g' PropertyExpanderPen);
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawPropertyRow,The following statement contains a magic number: nameWidth = width - 2*xPadding;
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawPropertyRow,The following statement contains a magic number: m_resetButton.Top = (height - m_resetButton.Height) / 2 + y;
Magic Number,Sce.Atf.Controls.PropertyEditing,PropertyGridView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\PropertyGridView.cs,DrawPropertyRow,The following statement contains a magic number: m_resetButton.Left = middle - m_resetButton.Width - 3;
Magic Number,Sce.Atf.Dom,DomNodeReplaceToolStrip,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeReplaceToolStrip.cs,DomNodeReplaceToolStrip,The following statement contains a magic number: Size = new System.Drawing.Size(292' 25);
Magic Number,Sce.Atf.Dom,DomNodeReplaceToolStrip,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeReplaceToolStrip.cs,DomNodeReplaceToolStrip,The following statement contains a magic number: Size = new System.Drawing.Size(292' 25);
Magic Number,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,DomNodeSearchResultsListView,The following statement contains a magic number: Columns.Add("Node Name"' -2' HorizontalAlignment.Center);
Magic Number,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,DomNodeSearchResultsListView,The following statement contains a magic number: Columns.Add("Type"' -2' HorizontalAlignment.Center);
Magic Number,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,DomNodeSearchResultsListView,The following statement contains a magic number: Columns.Add("Property"' -2' HorizontalAlignment.Right);
Magic Number,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,DomNodeSearchResultsListView,The following statement contains a magic number: Columns.Add("Value"' -2' HorizontalAlignment.Left);
Magic Number,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,DomNodeSearchResultsListView,The following statement contains a magic number: Columns.Add("Node Name"' -2' HorizontalAlignment.Center);
Magic Number,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,DomNodeSearchResultsListView,The following statement contains a magic number: Columns.Add("Type"' -2' HorizontalAlignment.Center);
Magic Number,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,DomNodeSearchResultsListView,The following statement contains a magic number: Columns.Add("Property"' -2' HorizontalAlignment.Right);
Magic Number,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,DomNodeSearchResultsListView,The following statement contains a magic number: Columns.Add("Value"' -2' HorizontalAlignment.Left);
Magic Number,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,UpdateResults,The following statement contains a magic number: ListViewItem newItem = new ListViewItem(new string[2] { nodeName' nodeType });
Magic Number,Sce.Atf.Dom,DomNodeSearchResultsListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchResultsListView.cs,UpdateResults,The following statement contains a magic number: int width = g.MeasureString(headerData.LongestString' Font).ToSize().Width + 15;
Magic Number,Sce.Atf.Dom,DomNodeSearchToolStrip,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchToolStrip.cs,DomNodeSearchToolStrip,The following statement contains a magic number: Size = new System.Drawing.Size(292' 25);
Magic Number,Sce.Atf.Dom,DomNodeSearchToolStrip,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\DomNodeSearchToolStrip.cs,DomNodeSearchToolStrip,The following statement contains a magic number: Size = new System.Drawing.Size(292' 25);
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: int x = 2;
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: int y = 2;
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: btn.Width = size.Width + 20;
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: x += btn.Width + 2;
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: btn.Width = size.Width + 20;
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: x += btn.Width + 2;
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: TreeListView.Columns[0].Width = 60;
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: TreeListView.Columns[1].Width = 600;
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: TreeListView.Columns[2].Width = 400;
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: TreeListView.Columns[2].Width = 400;
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: TreeListView.Control.Location = new Point(0' y + 2);
Magic Number,Sce.Atf.Dom,DomRecorder,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Dom\DomRecorder.cs,DomRecorder,The following statement contains a magic number: TreeListView.Control.Height = m_uberControl.Height - y - 2;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Init,The following statement contains a magic number: GhostGroupBrush = graphics.CreateSolidBrush(Color.FromArgb(128' Color.Gray));
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Init,The following statement contains a magic number: GhostTrackBrush = graphics.CreateSolidBrush(Color.FromArgb(128' Color.Gray));
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                        float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                      c.Graphics.FillRectangle(                          realPart'                          new PointF(0' realPart.Top)'new PointF(0' realPart.Bottom)'                          color' endColor);                        if (hasTail)                      {                          endColor = ColorUtil.FromAhsb(64' h' s * 0.3f' b);                          RectangleF tailPart = new RectangleF(                              realPart.Right'                              bounds.Y'                              bounds.Width - realPart.Width'                              bounds.Height);                          c.Graphics.FillRectangle(tailPart' endColor);                      }                        if (color.R + color.G + color.B < 3 * 160)                          TextBrush.Color = SystemColors.HighlightText;                      else                          TextBrush.Color = SystemColors.WindowText;                        c.Graphics.DrawText(interval.Name' c.TextFormat' bounds.Location' TextBrush);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(                              new RectangleF(bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2)'                              SelectedBrush' 3.0f);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' Color.FromArgb(128' color));                      bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                      float x = showRight ? bounds.Right : bounds.Left;                      c.Graphics.DrawText(                          GetXPositionString(x' c)'                          c.TextFormat'                          new PointF(x' bounds.Bottom - c.FontHeight)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                        float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                      c.Graphics.FillRectangle(                          realPart'                          new PointF(0' realPart.Top)'new PointF(0' realPart.Bottom)'                          color' endColor);                        if (hasTail)                      {                          endColor = ColorUtil.FromAhsb(64' h' s * 0.3f' b);                          RectangleF tailPart = new RectangleF(                              realPart.Right'                              bounds.Y'                              bounds.Width - realPart.Width'                              bounds.Height);                          c.Graphics.FillRectangle(tailPart' endColor);                      }                        if (color.R + color.G + color.B < 3 * 160)                          TextBrush.Color = SystemColors.HighlightText;                      else                          TextBrush.Color = SystemColors.WindowText;                        c.Graphics.DrawText(interval.Name' c.TextFormat' bounds.Location' TextBrush);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(                              new RectangleF(bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2)'                              SelectedBrush' 3.0f);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' Color.FromArgb(128' color));                      bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                      float x = showRight ? bounds.Right : bounds.Left;                      c.Graphics.DrawText(                          GetXPositionString(x' c)'                          c.TextFormat'                          new PointF(x' bounds.Bottom - c.FontHeight)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                        float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                      c.Graphics.FillRectangle(                          realPart'                          new PointF(0' realPart.Top)'new PointF(0' realPart.Bottom)'                          color' endColor);                        if (hasTail)                      {                          endColor = ColorUtil.FromAhsb(64' h' s * 0.3f' b);                          RectangleF tailPart = new RectangleF(                              realPart.Right'                              bounds.Y'                              bounds.Width - realPart.Width'                              bounds.Height);                          c.Graphics.FillRectangle(tailPart' endColor);                      }                        if (color.R + color.G + color.B < 3 * 160)                          TextBrush.Color = SystemColors.HighlightText;                      else                          TextBrush.Color = SystemColors.WindowText;                        c.Graphics.DrawText(interval.Name' c.TextFormat' bounds.Location' TextBrush);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(                              new RectangleF(bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2)'                              SelectedBrush' 3.0f);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' Color.FromArgb(128' color));                      bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                      float x = showRight ? bounds.Right : bounds.Left;                      c.Graphics.DrawText(                          GetXPositionString(x' c)'                          c.TextFormat'                          new PointF(x' bounds.Bottom - c.FontHeight)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                        float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                      c.Graphics.FillRectangle(                          realPart'                          new PointF(0' realPart.Top)'new PointF(0' realPart.Bottom)'                          color' endColor);                        if (hasTail)                      {                          endColor = ColorUtil.FromAhsb(64' h' s * 0.3f' b);                          RectangleF tailPart = new RectangleF(                              realPart.Right'                              bounds.Y'                              bounds.Width - realPart.Width'                              bounds.Height);                          c.Graphics.FillRectangle(tailPart' endColor);                      }                        if (color.R + color.G + color.B < 3 * 160)                          TextBrush.Color = SystemColors.HighlightText;                      else                          TextBrush.Color = SystemColors.WindowText;                        c.Graphics.DrawText(interval.Name' c.TextFormat' bounds.Location' TextBrush);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(                              new RectangleF(bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2)'                              SelectedBrush' 3.0f);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' Color.FromArgb(128' color));                      bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                      float x = showRight ? bounds.Right : bounds.Left;                      c.Graphics.DrawText(                          GetXPositionString(x' c)'                          c.TextFormat'                          new PointF(x' bounds.Bottom - c.FontHeight)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                        float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                      c.Graphics.FillRectangle(                          realPart'                          new PointF(0' realPart.Top)'new PointF(0' realPart.Bottom)'                          color' endColor);                        if (hasTail)                      {                          endColor = ColorUtil.FromAhsb(64' h' s * 0.3f' b);                          RectangleF tailPart = new RectangleF(                              realPart.Right'                              bounds.Y'                              bounds.Width - realPart.Width'                              bounds.Height);                          c.Graphics.FillRectangle(tailPart' endColor);                      }                        if (color.R + color.G + color.B < 3 * 160)                          TextBrush.Color = SystemColors.HighlightText;                      else                          TextBrush.Color = SystemColors.WindowText;                        c.Graphics.DrawText(interval.Name' c.TextFormat' bounds.Location' TextBrush);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(                              new RectangleF(bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2)'                              SelectedBrush' 3.0f);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' Color.FromArgb(128' color));                      bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                      float x = showRight ? bounds.Right : bounds.Left;                      c.Graphics.DrawText(                          GetXPositionString(x' c)'                          c.TextFormat'                          new PointF(x' bounds.Bottom - c.FontHeight)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                        float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                      c.Graphics.FillRectangle(                          realPart'                          new PointF(0' realPart.Top)'new PointF(0' realPart.Bottom)'                          color' endColor);                        if (hasTail)                      {                          endColor = ColorUtil.FromAhsb(64' h' s * 0.3f' b);                          RectangleF tailPart = new RectangleF(                              realPart.Right'                              bounds.Y'                              bounds.Width - realPart.Width'                              bounds.Height);                          c.Graphics.FillRectangle(tailPart' endColor);                      }                        if (color.R + color.G + color.B < 3 * 160)                          TextBrush.Color = SystemColors.HighlightText;                      else                          TextBrush.Color = SystemColors.WindowText;                        c.Graphics.DrawText(interval.Name' c.TextFormat' bounds.Location' TextBrush);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(                              new RectangleF(bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2)'                              SelectedBrush' 3.0f);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' Color.FromArgb(128' color));                      bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                      float x = showRight ? bounds.Right : bounds.Left;                      c.Graphics.DrawText(                          GetXPositionString(x' c)'                          c.TextFormat'                          new PointF(x' bounds.Bottom - c.FontHeight)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                        float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                      c.Graphics.FillRectangle(                          realPart'                          new PointF(0' realPart.Top)'new PointF(0' realPart.Bottom)'                          color' endColor);                        if (hasTail)                      {                          endColor = ColorUtil.FromAhsb(64' h' s * 0.3f' b);                          RectangleF tailPart = new RectangleF(                              realPart.Right'                              bounds.Y'                              bounds.Width - realPart.Width'                              bounds.Height);                          c.Graphics.FillRectangle(tailPart' endColor);                      }                        if (color.R + color.G + color.B < 3 * 160)                          TextBrush.Color = SystemColors.HighlightText;                      else                          TextBrush.Color = SystemColors.WindowText;                        c.Graphics.DrawText(interval.Name' c.TextFormat' bounds.Location' TextBrush);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(                              new RectangleF(bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2)'                              SelectedBrush' 3.0f);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' Color.FromArgb(128' color));                      bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                      float x = showRight ? bounds.Right : bounds.Left;                      c.Graphics.DrawText(                          GetXPositionString(x' c)'                          c.TextFormat'                          new PointF(x' bounds.Bottom - c.FontHeight)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                        float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                      c.Graphics.FillRectangle(                          realPart'                          new PointF(0' realPart.Top)'new PointF(0' realPart.Bottom)'                          color' endColor);                        if (hasTail)                      {                          endColor = ColorUtil.FromAhsb(64' h' s * 0.3f' b);                          RectangleF tailPart = new RectangleF(                              realPart.Right'                              bounds.Y'                              bounds.Width - realPart.Width'                              bounds.Height);                          c.Graphics.FillRectangle(tailPart' endColor);                      }                        if (color.R + color.G + color.B < 3 * 160)                          TextBrush.Color = SystemColors.HighlightText;                      else                          TextBrush.Color = SystemColors.WindowText;                        c.Graphics.DrawText(interval.Name' c.TextFormat' bounds.Location' TextBrush);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(                              new RectangleF(bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2)'                              SelectedBrush' 3.0f);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' Color.FromArgb(128' color));                      bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                      float x = showRight ? bounds.Right : bounds.Left;                      c.Graphics.DrawText(                          GetXPositionString(x' c)'                          c.TextFormat'                          new PointF(x' bounds.Bottom - c.FontHeight)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                        float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                      c.Graphics.FillRectangle(                          realPart'                          new PointF(0' realPart.Top)'new PointF(0' realPart.Bottom)'                          color' endColor);                        if (hasTail)                      {                          endColor = ColorUtil.FromAhsb(64' h' s * 0.3f' b);                          RectangleF tailPart = new RectangleF(                              realPart.Right'                              bounds.Y'                              bounds.Width - realPart.Width'                              bounds.Height);                          c.Graphics.FillRectangle(tailPart' endColor);                      }                        if (color.R + color.G + color.B < 3 * 160)                          TextBrush.Color = SystemColors.HighlightText;                      else                          TextBrush.Color = SystemColors.WindowText;                        c.Graphics.DrawText(interval.Name' c.TextFormat' bounds.Location' TextBrush);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(                              new RectangleF(bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2)'                              SelectedBrush' 3.0f);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' Color.FromArgb(128' color));                      bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                      float x = showRight ? bounds.Right : bounds.Left;                      c.Graphics.DrawText(                          GetXPositionString(x' c)'                          c.TextFormat'                          new PointF(x' bounds.Bottom - c.FontHeight)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.FillEllipse(bounds' color);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          D2dAntialiasMode originalAntiAliasMode = c.Graphics.AntialiasMode;                          c.Graphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          c.Graphics.DrawEllipse(                              new D2dEllipse(                                  new PointF(bounds.X + bounds.Width * 0.5f' bounds.Y + bounds.Height * 0.5f)'                                  bounds.Width * 0.5f' bounds.Height * 0.5f)'                              SelectedBrush' 3.0f);                          c.Graphics.AntialiasMode = originalAntiAliasMode;                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillEllipse(bounds' Color.FromArgb(128' color));                      c.Graphics.DrawText(                          GetXPositionString(bounds.Left + KeySize * 0.5f' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.FillEllipse(bounds' color);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          D2dAntialiasMode originalAntiAliasMode = c.Graphics.AntialiasMode;                          c.Graphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          c.Graphics.DrawEllipse(                              new D2dEllipse(                                  new PointF(bounds.X + bounds.Width * 0.5f' bounds.Y + bounds.Height * 0.5f)'                                  bounds.Width * 0.5f' bounds.Height * 0.5f)'                              SelectedBrush' 3.0f);                          c.Graphics.AntialiasMode = originalAntiAliasMode;                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillEllipse(bounds' Color.FromArgb(128' color));                      c.Graphics.DrawText(                          GetXPositionString(bounds.Left + KeySize * 0.5f' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.FillEllipse(bounds' color);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          D2dAntialiasMode originalAntiAliasMode = c.Graphics.AntialiasMode;                          c.Graphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          c.Graphics.DrawEllipse(                              new D2dEllipse(                                  new PointF(bounds.X + bounds.Width * 0.5f' bounds.Y + bounds.Height * 0.5f)'                                  bounds.Width * 0.5f' bounds.Height * 0.5f)'                              SelectedBrush' 3.0f);                          c.Graphics.AntialiasMode = originalAntiAliasMode;                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillEllipse(bounds' Color.FromArgb(128' color));                      c.Graphics.DrawText(                          GetXPositionString(bounds.Left + KeySize * 0.5f' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.FillEllipse(bounds' color);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          D2dAntialiasMode originalAntiAliasMode = c.Graphics.AntialiasMode;                          c.Graphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          c.Graphics.DrawEllipse(                              new D2dEllipse(                                  new PointF(bounds.X + bounds.Width * 0.5f' bounds.Y + bounds.Height * 0.5f)'                                  bounds.Width * 0.5f' bounds.Height * 0.5f)'                              SelectedBrush' 3.0f);                          c.Graphics.AntialiasMode = originalAntiAliasMode;                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillEllipse(bounds' Color.FromArgb(128' color));                      c.Graphics.DrawText(                          GetXPositionString(bounds.Left + KeySize * 0.5f' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.FillEllipse(bounds' color);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          D2dAntialiasMode originalAntiAliasMode = c.Graphics.AntialiasMode;                          c.Graphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          c.Graphics.DrawEllipse(                              new D2dEllipse(                                  new PointF(bounds.X + bounds.Width * 0.5f' bounds.Y + bounds.Height * 0.5f)'                                  bounds.Width * 0.5f' bounds.Height * 0.5f)'                              SelectedBrush' 3.0f);                          c.Graphics.AntialiasMode = originalAntiAliasMode;                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillEllipse(bounds' Color.FromArgb(128' color));                      c.Graphics.DrawText(                          GetXPositionString(bounds.Left + KeySize * 0.5f' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.FillEllipse(bounds' color);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          D2dAntialiasMode originalAntiAliasMode = c.Graphics.AntialiasMode;                          c.Graphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          c.Graphics.DrawEllipse(                              new D2dEllipse(                                  new PointF(bounds.X + bounds.Width * 0.5f' bounds.Y + bounds.Height * 0.5f)'                                  bounds.Width * 0.5f' bounds.Height * 0.5f)'                              SelectedBrush' 3.0f);                          c.Graphics.AntialiasMode = originalAntiAliasMode;                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillEllipse(bounds' Color.FromArgb(128' color));                      c.Graphics.DrawText(                          GetXPositionString(bounds.Left + KeySize * 0.5f' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.FillEllipse(bounds' color);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          D2dAntialiasMode originalAntiAliasMode = c.Graphics.AntialiasMode;                          c.Graphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          c.Graphics.DrawEllipse(                              new D2dEllipse(                                  new PointF(bounds.X + bounds.Width * 0.5f' bounds.Y + bounds.Height * 0.5f)'                                  bounds.Width * 0.5f' bounds.Height * 0.5f)'                              SelectedBrush' 3.0f);                          c.Graphics.AntialiasMode = originalAntiAliasMode;                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillEllipse(bounds' Color.FromArgb(128' color));                      c.Graphics.DrawText(                          GetXPositionString(bounds.Left + KeySize * 0.5f' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.FillEllipse(bounds' color);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          D2dAntialiasMode originalAntiAliasMode = c.Graphics.AntialiasMode;                          c.Graphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          c.Graphics.DrawEllipse(                              new D2dEllipse(                                  new PointF(bounds.X + bounds.Width * 0.5f' bounds.Y + bounds.Height * 0.5f)'                                  bounds.Width * 0.5f' bounds.Height * 0.5f)'                              SelectedBrush' 3.0f);                          c.Graphics.AntialiasMode = originalAntiAliasMode;                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillEllipse(bounds' Color.FromArgb(128' color));                      c.Graphics.DrawText(                          GetXPositionString(bounds.Left + KeySize * 0.5f' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(bounds' InvalidBrush);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: float middle = bounds.X + bounds.Width / 2;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.DrawLine(middle' bounds.Top' middle' bounds.Bottom' color' 1.0f' null);                        bool selected = (drawMode & DrawMode.Selected) != 0;                      Color handleColor = selected ? Color.Tomato : color;                      RectangleF handleRect =                          new RectangleF(bounds.X' bounds.Y' bounds.Width' bounds.Width);                      c.Graphics.FillRectangle(handleRect' handleColor);                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(                          new RectangleF(middle' bounds.Y' 1' bounds.Height)' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.DrawLine(middle' bounds.Top' middle' bounds.Bottom' Color.FromArgb(128' color)' 1.0f' null);                      c.Graphics.DrawText(                          GetXPositionString(middle' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.DrawRectangle(bounds' Color.DimGray' 1.0f' null);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.DrawLine(middle' bounds.Top' middle' bounds.Bottom' color' 1.0f' null);                        bool selected = (drawMode & DrawMode.Selected) != 0;                      Color handleColor = selected ? Color.Tomato : color;                      RectangleF handleRect =                          new RectangleF(bounds.X' bounds.Y' bounds.Width' bounds.Width);                      c.Graphics.FillRectangle(handleRect' handleColor);                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(                          new RectangleF(middle' bounds.Y' 1' bounds.Height)' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.DrawLine(middle' bounds.Top' middle' bounds.Bottom' Color.FromArgb(128' color)' 1.0f' null);                      c.Graphics.DrawText(                          GetXPositionString(middle' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.DrawRectangle(bounds' Color.DimGray' 1.0f' null);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,GetBounds,The following statement contains a magic number: return new RectangleF(                  key.Start - keyWidth / 2'                  trackTop'                  keyWidth'                  keyHeight);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,GetBounds,The following statement contains a magic number: const float DefaultMarkerHandleSize = 10;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,GetBounds,The following statement contains a magic number: return new RectangleF(                  marker.Start - handleSize / 2'                  c.Bounds.Top'                  handleSize'                  c.Bounds.Height);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,GetXPositionString,The following statement contains a magic number: float frame = x * c.InverseTransform.Elements[0] + c.InverseTransform.Elements[4];
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,GetMoveGhostInfo,The following statement contains a magic number: List<float> movingPoints = new List<float>(2);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,GetMoveGhostInfo,The following statement contains a magic number: float yOffset = dragOffset.Y * worldToView.Elements[3];
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,GetMoveTargets,The following statement contains a magic number: float y = bounds.Top + bounds.Height * 0.5f + DragDelta.Y;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,GetMoveTargets,The following statement contains a magic number: float y = bounds.Top + bounds.Height * 0.5f + DragDelta.Y;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScaleManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScaleManipulator.cs,DrawManipulator,The following statement contains a magic number: const float penWidth = 3;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScaleManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScaleManipulator.cs,DrawManipulator,The following statement contains a magic number: leftHandle = new RectangleF(viewMin - penWidth * 0.5f' 0.0f' penWidth' HandleHeight);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScaleManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScaleManipulator.cs,DrawManipulator,The following statement contains a magic number: rightHandle = new RectangleF(viewMax - penWidth * 0.5f' 0.0f' penWidth' HandleHeight);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,Resizer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScaleManipulator.cs,ScalePoint,The following statement contains a magic number: initialWidth < 0.00001f
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: handleRect = new RectangleF(                  viewX - 5'                  clipRectangle.Top'                  10'                  7);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: handleRect = new RectangleF(                  viewX - 5'                  clipRectangle.Top'                  10'                  7);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: handleRect = new RectangleF(                  viewX - 5'                  clipRectangle.Top'                  10'                  7);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: float pos_y = clipRectangle.Top + 5;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[0] = new PointF(pos_x - 4' pos_y - 5);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[0] = new PointF(pos_x - 4' pos_y - 5);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[1] = new PointF(pos_x - 4' pos_y);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[2] = new PointF(pos_x - 5' pos_y + 1);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[2] = new PointF(pos_x - 5' pos_y + 1);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[3] = new PointF(pos_x - 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[3] = new PointF(pos_x - 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[3] = new PointF(pos_x - 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[4] = new PointF(pos_x' pos_y + 7);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[4] = new PointF(pos_x' pos_y + 7);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[5] = new PointF(pos_x + 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[5] = new PointF(pos_x + 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[5] = new PointF(pos_x + 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[6] = new PointF(pos_x + 5' pos_y + 1);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[6] = new PointF(pos_x + 5' pos_y + 1);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[7] = new PointF(pos_x + 4' pos_y);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[7] = new PointF(pos_x + 4' pos_y);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[8] = new PointF(pos_x + 4' pos_y - 5);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[8] = new PointF(pos_x + 4' pos_y - 5);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[8] = new PointF(pos_x + 4' pos_y - 5);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: g.DrawLines(s_arrow' handle_color' 2.0f);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: g.DrawText(label' Owner.Renderer.TextFormat' new PointF(pos_x + 6' clipRectangle.Top)' SystemColors.WindowText);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dSnapManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSnapManipulator.cs,owner_DrawingD2d,The following statement contains a magic number: g.DrawLine(viewXCoord' clipRectangle.Top' viewXCoord' clipRectangle.Bottom' s_color' 3.0f' null);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,SnapOffsetInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSnapManipulator.cs,RemoveInvalid,The following statement contains a magic number: info.m_dist < smallestDist + 0.0001f
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dSplitManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dSplitManipulator.cs,SplitSelectedIntervals,The following statement contains a magic number: m_owner.TransactionContext.DoTransaction(delegate                  {                      List<IInterval> newSelection = new List<IInterval>(m_owner.Selection.SelectionCount * 2);                      newSelection.AddRange(m_owner.Selection.GetSelection<IInterval>());                      foreach (IInterval interval in m_owner.Selection.GetSelection<IInterval>())                      {                          IInterval rightSide = DoSplit(interval' fraction);                          if (rightSide != null)                              newSelection.Add(rightSide);                      }                      m_owner.Selection.SetRange(newSelection);                  }'                  "Split Interval");
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,D2dTimelineControl,The following statement contains a magic number: base.SetZoomRange(0.1f' 50f' 10f' 100f);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,D2dTimelineControl,The following statement contains a magic number: base.SetZoomRange(0.1f' 50f' 10f' 100f);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,D2dTimelineControl,The following statement contains a magic number: base.SetZoomRange(0.1f' 50f' 10f' 100f);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,D2dTimelineControl,The following statement contains a magic number: base.SetZoomRange(0.1f' 50f' 10f' 100f);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,D2dTimelineControl,The following statement contains a magic number: base.XZoom = 40f;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,D2dTimelineControl,The following statement contains a magic number: base.YZoom = 40f;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,D2dTimelineControl,The following statement contains a magic number: m_toolTip.InitialDelay = 100;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,D2dTimelineControl,The following statement contains a magic number: m_toolTip.ReshowDelay = 100;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,GetCanvasSize,The following statement contains a magic number: int canvasWidth = (int)Math.Ceiling(bounds.Right) - offset.X + Width / 2;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,GetCanvasSize,The following statement contains a magic number: int canvasHeight = (int)Math.Ceiling(bounds.Bottom) - offset.Y + Height / 2;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,TurnOffToolTip,The following statement contains a magic number: new System.Threading.Timer(                  delegate                  {                      InvalidateControl();                  }'                  m_toolTip' 20' Timeout.Infinite);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,OnMouseHover,The following statement contains a magic number: m_toolTip.Show(GetToolTipText(hitObject)' this' m_lastMouseMove.X' m_lastMouseMove.Y + 20);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,GetPickingRectangle,The following statement contains a magic number: return new RectangleF(                  clientPoint.X - tolerance'                  clientPoint.Y - tolerance'                  2 * tolerance'                  2 * tolerance);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineControl.cs,GetPickingRectangle,The following statement contains a magic number: return new RectangleF(                  clientPoint.X - tolerance'                  clientPoint.Y - tolerance'                  2 * tolerance'                  2 * tolerance);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,Init,The following statement contains a magic number: m_gridPen = m_graphics.CreateSolidBrush(Color.FromArgb(128' 128' 128' 128));
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,Init,The following statement contains a magic number: m_gridPen = m_graphics.CreateSolidBrush(Color.FromArgb(128' 128' 128' 128));
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,Init,The following statement contains a magic number: m_gridPen = m_graphics.CreateSolidBrush(Color.FromArgb(128' 128' 128' 128));
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,Init,The following statement contains a magic number: m_gridPen = m_graphics.CreateSolidBrush(Color.FromArgb(128' 128' 128' 128));
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PickSubTimeline,The following statement contains a magic number: (result.Count == 0) && (pickRect.Height <= 2 * PickTolerance) && (pickRect.Width <= 2 * PickTolerance)
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PickSubTimeline,The following statement contains a magic number: (result.Count == 0) && (pickRect.Height <= 2 * PickTolerance) && (pickRect.Width <= 2 * PickTolerance)
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PrioritizeHits,The following statement contains a magic number: float pickCenterX = pickRect.X + pickRect.Width*0.5f;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PrioritizeHits,The following statement contains a magic number: float pickCenterY = pickRect.Y + pickRect.Height*0.5f;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PrioritizeHits,The following statement contains a magic number: hits.Sort((a' b) =>              {                  if (a.Type < b.Type)                      return -1;                  if (a.Type > b.Type)                      return 1;                                    // The HeaderResize type doesn't have a HitPath.                  if (a.HitPath == null || b.HitPath == null)                      return 0;                                    // They're the same type' so now sort by distance from center of picking rectangle.                  RectangleF aRect = layout.GetBounds(a.HitPath);                  RectangleF bRect = layout.GetBounds(b.HitPath);                  float aDist = Math.Min(                      Math.Abs(aRect.X + aRect.Width*0.5f - pickCenterX)'                      Math.Abs(aRect.Y + aRect.Height*0.5f - pickCenterY));                  float bDist = Math.Min(                      Math.Abs(bRect.X + bRect.Width * 0.5f - pickCenterX)'                      Math.Abs(bRect.Y + bRect.Height * 0.5f - pickCenterY));                  if (aDist < bDist)                      return -1;                  if (aDist > bDist)                      return 1;                  return 0;              });
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PrioritizeHits,The following statement contains a magic number: hits.Sort((a' b) =>              {                  if (a.Type < b.Type)                      return -1;                  if (a.Type > b.Type)                      return 1;                                    // The HeaderResize type doesn't have a HitPath.                  if (a.HitPath == null || b.HitPath == null)                      return 0;                                    // They're the same type' so now sort by distance from center of picking rectangle.                  RectangleF aRect = layout.GetBounds(a.HitPath);                  RectangleF bRect = layout.GetBounds(b.HitPath);                  float aDist = Math.Min(                      Math.Abs(aRect.X + aRect.Width*0.5f - pickCenterX)'                      Math.Abs(aRect.Y + aRect.Height*0.5f - pickCenterY));                  float bDist = Math.Min(                      Math.Abs(bRect.X + bRect.Width * 0.5f - pickCenterX)'                      Math.Abs(bRect.Y + bRect.Height * 0.5f - pickCenterY));                  if (aDist < bDist)                      return -1;                  if (aDist > bDist)                      return 1;                  return 0;              });
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PrioritizeHits,The following statement contains a magic number: hits.Sort((a' b) =>              {                  if (a.Type < b.Type)                      return -1;                  if (a.Type > b.Type)                      return 1;                                    // The HeaderResize type doesn't have a HitPath.                  if (a.HitPath == null || b.HitPath == null)                      return 0;                                    // They're the same type' so now sort by distance from center of picking rectangle.                  RectangleF aRect = layout.GetBounds(a.HitPath);                  RectangleF bRect = layout.GetBounds(b.HitPath);                  float aDist = Math.Min(                      Math.Abs(aRect.X + aRect.Width*0.5f - pickCenterX)'                      Math.Abs(aRect.Y + aRect.Height*0.5f - pickCenterY));                  float bDist = Math.Min(                      Math.Abs(bRect.X + bRect.Width * 0.5f - pickCenterX)'                      Math.Abs(bRect.Y + bRect.Height * 0.5f - pickCenterY));                  if (aDist < bDist)                      return -1;                  if (aDist > bDist)                      return 1;                  return 0;              });
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,PrioritizeHits,The following statement contains a magic number: hits.Sort((a' b) =>              {                  if (a.Type < b.Type)                      return -1;                  if (a.Type > b.Type)                      return 1;                                    // The HeaderResize type doesn't have a HitPath.                  if (a.HitPath == null || b.HitPath == null)                      return 0;                                    // They're the same type' so now sort by distance from center of picking rectangle.                  RectangleF aRect = layout.GetBounds(a.HitPath);                  RectangleF bRect = layout.GetBounds(b.HitPath);                  float aDist = Math.Min(                      Math.Abs(aRect.X + aRect.Width*0.5f - pickCenterX)'                      Math.Abs(aRect.Y + aRect.Height*0.5f - pickCenterY));                  float bDist = Math.Min(                      Math.Abs(bRect.X + bRect.Width * 0.5f - pickCenterX)'                      Math.Abs(bRect.Y + bRect.Height * 0.5f - pickCenterY));                  if (aDist < bDist)                      return -1;                  if (aDist > bDist)                      return 1;                  return 0;              });
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawTimelineReference,The following statement contains a magic number: originRect.X = screenStart - 4;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawTimelineReference,The following statement contains a magic number: originRect.Width = 8;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawTimelineReference,The following statement contains a magic number: originRect.Height = 16;
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawReferenceOrigin,The following statement contains a magic number: c.Graphics.DrawLines(new[] {                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y)'                      new PointF(originRect.X' originRect.Y + originRect.Height * 0.5f)'                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Bottom)'                      new PointF(originRect.Right' originRect.Y + originRect.Height * 0.5f)'                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y) }'                  originColor' 1.0f);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawReferenceOrigin,The following statement contains a magic number: c.Graphics.DrawLines(new[] {                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y)'                      new PointF(originRect.X' originRect.Y + originRect.Height * 0.5f)'                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Bottom)'                      new PointF(originRect.Right' originRect.Y + originRect.Height * 0.5f)'                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y) }'                  originColor' 1.0f);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawReferenceOrigin,The following statement contains a magic number: c.Graphics.DrawLines(new[] {                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y)'                      new PointF(originRect.X' originRect.Y + originRect.Height * 0.5f)'                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Bottom)'                      new PointF(originRect.Right' originRect.Y + originRect.Height * 0.5f)'                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y) }'                  originColor' 1.0f);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawReferenceOrigin,The following statement contains a magic number: c.Graphics.DrawLines(new[] {                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y)'                      new PointF(originRect.X' originRect.Y + originRect.Height * 0.5f)'                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Bottom)'                      new PointF(originRect.Right' originRect.Y + originRect.Height * 0.5f)'                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y) }'                  originColor' 1.0f);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,DrawReferenceOrigin,The following statement contains a magic number: c.Graphics.DrawLines(new[] {                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y)'                      new PointF(originRect.X' originRect.Y + originRect.Height * 0.5f)'                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Bottom)'                      new PointF(originRect.Right' originRect.Y + originRect.Height * 0.5f)'                      new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y) }'                  originColor' 1.0f);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,LayoutSubTimeline,The following statement contains a magic number: float docRowHeight = Math.Max(margin * 2' MinimumTrackSize);
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,D2dTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,LayoutSubTimeline,The following statement contains a magic number: groupBottom = Math.Max(groupBottom' groupTop + Math.Max(margin*2' MinimumTrackSize));
Magic Number,Sce.Atf.Controls.Timelines.Direct2D,Context,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dTimelineRenderer.cs,Context,The following statement contains a magic number: PixelSize = new SizeF(1 / transform.Elements[0]' 1 / transform.Elements[3]);
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,DefaultTimelineRenderer,The following statement contains a magic number: m_selectedPen = new Pen(Color.Tomato' 3);
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                  case DrawMode.Collapsed:                      using (Brush brush = new LinearGradientBrush(                          bounds' Color.LightGoldenrodYellow' Color.Khaki' LinearGradientMode.Vertical))                      {                          c.Graphics.FillRectangle(brush' bounds);                      }                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' Color.Gray)))                      {                          c.Graphics.FillRectangle(brush' bounds);                      }                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.DrawRectangle(Pens.LightGray' bounds.X' bounds.Y' bounds.Width' bounds.Height);                      break;                  case DrawMode.Collapsed:                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' Color.Gray)))                      {                          c.Graphics.FillRectangle(brush' bounds);                      }                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                                            float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                        using (LinearGradientBrush intervalBrush =                          new LinearGradientBrush(realPart' color' endColor' LinearGradientMode.Vertical))                      {                          c.Graphics.FillRectangle(intervalBrush' realPart);                          if (hasTail)                          {                              Color[] colors = intervalBrush.LinearColors;                              colors[0] = Color.FromArgb(64' colors[0]);                              colors[1] = Color.FromArgb(64' colors[1]);                              intervalBrush.LinearColors = colors;                              RectangleF tailPart = new RectangleF(                                  realPart.Right'                                  bounds.Y'                                  bounds.Width - realPart.Width'                                  bounds.Height);                              c.Graphics.FillRectangle(intervalBrush' tailPart);                          }                      }                        Brush textBrush = SystemBrushes.WindowText;                      if ((int)color.R + (int)color.G + (int)color.B < 3 * 160)                          textBrush = SystemBrushes.HighlightText;                      c.Graphics.DrawString(interval.Name' c.Font' textBrush' bounds.Location);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillRectangle(brush' bounds);                          bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                          float x = showRight ? bounds.Right : bounds.Left;                          c.Graphics.DrawString(GetXPositionString(x' c)' c.Font' SystemBrushes.WindowText' x' bounds.Bottom - c.FontHeight);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                                            float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                        using (LinearGradientBrush intervalBrush =                          new LinearGradientBrush(realPart' color' endColor' LinearGradientMode.Vertical))                      {                          c.Graphics.FillRectangle(intervalBrush' realPart);                          if (hasTail)                          {                              Color[] colors = intervalBrush.LinearColors;                              colors[0] = Color.FromArgb(64' colors[0]);                              colors[1] = Color.FromArgb(64' colors[1]);                              intervalBrush.LinearColors = colors;                              RectangleF tailPart = new RectangleF(                                  realPart.Right'                                  bounds.Y'                                  bounds.Width - realPart.Width'                                  bounds.Height);                              c.Graphics.FillRectangle(intervalBrush' tailPart);                          }                      }                        Brush textBrush = SystemBrushes.WindowText;                      if ((int)color.R + (int)color.G + (int)color.B < 3 * 160)                          textBrush = SystemBrushes.HighlightText;                      c.Graphics.DrawString(interval.Name' c.Font' textBrush' bounds.Location);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillRectangle(brush' bounds);                          bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                          float x = showRight ? bounds.Right : bounds.Left;                          c.Graphics.DrawString(GetXPositionString(x' c)' c.Font' SystemBrushes.WindowText' x' bounds.Bottom - c.FontHeight);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                                            float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                        using (LinearGradientBrush intervalBrush =                          new LinearGradientBrush(realPart' color' endColor' LinearGradientMode.Vertical))                      {                          c.Graphics.FillRectangle(intervalBrush' realPart);                          if (hasTail)                          {                              Color[] colors = intervalBrush.LinearColors;                              colors[0] = Color.FromArgb(64' colors[0]);                              colors[1] = Color.FromArgb(64' colors[1]);                              intervalBrush.LinearColors = colors;                              RectangleF tailPart = new RectangleF(                                  realPart.Right'                                  bounds.Y'                                  bounds.Width - realPart.Width'                                  bounds.Height);                              c.Graphics.FillRectangle(intervalBrush' tailPart);                          }                      }                        Brush textBrush = SystemBrushes.WindowText;                      if ((int)color.R + (int)color.G + (int)color.B < 3 * 160)                          textBrush = SystemBrushes.HighlightText;                      c.Graphics.DrawString(interval.Name' c.Font' textBrush' bounds.Location);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillRectangle(brush' bounds);                          bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                          float x = showRight ? bounds.Right : bounds.Left;                          c.Graphics.DrawString(GetXPositionString(x' c)' c.Font' SystemBrushes.WindowText' x' bounds.Bottom - c.FontHeight);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                                            float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                        using (LinearGradientBrush intervalBrush =                          new LinearGradientBrush(realPart' color' endColor' LinearGradientMode.Vertical))                      {                          c.Graphics.FillRectangle(intervalBrush' realPart);                          if (hasTail)                          {                              Color[] colors = intervalBrush.LinearColors;                              colors[0] = Color.FromArgb(64' colors[0]);                              colors[1] = Color.FromArgb(64' colors[1]);                              intervalBrush.LinearColors = colors;                              RectangleF tailPart = new RectangleF(                                  realPart.Right'                                  bounds.Y'                                  bounds.Width - realPart.Width'                                  bounds.Height);                              c.Graphics.FillRectangle(intervalBrush' tailPart);                          }                      }                        Brush textBrush = SystemBrushes.WindowText;                      if ((int)color.R + (int)color.G + (int)color.B < 3 * 160)                          textBrush = SystemBrushes.HighlightText;                      c.Graphics.DrawString(interval.Name' c.Font' textBrush' bounds.Location);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillRectangle(brush' bounds);                          bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                          float x = showRight ? bounds.Right : bounds.Left;                          c.Graphics.DrawString(GetXPositionString(x' c)' c.Font' SystemBrushes.WindowText' x' bounds.Bottom - c.FontHeight);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                                            float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                        using (LinearGradientBrush intervalBrush =                          new LinearGradientBrush(realPart' color' endColor' LinearGradientMode.Vertical))                      {                          c.Graphics.FillRectangle(intervalBrush' realPart);                          if (hasTail)                          {                              Color[] colors = intervalBrush.LinearColors;                              colors[0] = Color.FromArgb(64' colors[0]);                              colors[1] = Color.FromArgb(64' colors[1]);                              intervalBrush.LinearColors = colors;                              RectangleF tailPart = new RectangleF(                                  realPart.Right'                                  bounds.Y'                                  bounds.Width - realPart.Width'                                  bounds.Height);                              c.Graphics.FillRectangle(intervalBrush' tailPart);                          }                      }                        Brush textBrush = SystemBrushes.WindowText;                      if ((int)color.R + (int)color.G + (int)color.B < 3 * 160)                          textBrush = SystemBrushes.HighlightText;                      c.Graphics.DrawString(interval.Name' c.Font' textBrush' bounds.Location);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillRectangle(brush' bounds);                          bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                          float x = showRight ? bounds.Right : bounds.Left;                          c.Graphics.DrawString(GetXPositionString(x' c)' c.Font' SystemBrushes.WindowText' x' bounds.Bottom - c.FontHeight);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                                            float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                        using (LinearGradientBrush intervalBrush =                          new LinearGradientBrush(realPart' color' endColor' LinearGradientMode.Vertical))                      {                          c.Graphics.FillRectangle(intervalBrush' realPart);                          if (hasTail)                          {                              Color[] colors = intervalBrush.LinearColors;                              colors[0] = Color.FromArgb(64' colors[0]);                              colors[1] = Color.FromArgb(64' colors[1]);                              intervalBrush.LinearColors = colors;                              RectangleF tailPart = new RectangleF(                                  realPart.Right'                                  bounds.Y'                                  bounds.Width - realPart.Width'                                  bounds.Height);                              c.Graphics.FillRectangle(intervalBrush' tailPart);                          }                      }                        Brush textBrush = SystemBrushes.WindowText;                      if ((int)color.R + (int)color.G + (int)color.B < 3 * 160)                          textBrush = SystemBrushes.HighlightText;                      c.Graphics.DrawString(interval.Name' c.Font' textBrush' bounds.Location);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillRectangle(brush' bounds);                          bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                          float x = showRight ? bounds.Right : bounds.Left;                          c.Graphics.DrawString(GetXPositionString(x' c)' c.Font' SystemBrushes.WindowText' x' bounds.Bottom - c.FontHeight);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                                            float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                        using (LinearGradientBrush intervalBrush =                          new LinearGradientBrush(realPart' color' endColor' LinearGradientMode.Vertical))                      {                          c.Graphics.FillRectangle(intervalBrush' realPart);                          if (hasTail)                          {                              Color[] colors = intervalBrush.LinearColors;                              colors[0] = Color.FromArgb(64' colors[0]);                              colors[1] = Color.FromArgb(64' colors[1]);                              intervalBrush.LinearColors = colors;                              RectangleF tailPart = new RectangleF(                                  realPart.Right'                                  bounds.Y'                                  bounds.Width - realPart.Width'                                  bounds.Height);                              c.Graphics.FillRectangle(intervalBrush' tailPart);                          }                      }                        Brush textBrush = SystemBrushes.WindowText;                      if ((int)color.R + (int)color.G + (int)color.B < 3 * 160)                          textBrush = SystemBrushes.HighlightText;                      c.Graphics.DrawString(interval.Name' c.Font' textBrush' bounds.Location);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillRectangle(brush' bounds);                          bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                          float x = showRight ? bounds.Right : bounds.Left;                          c.Graphics.DrawString(GetXPositionString(x' c)' c.Font' SystemBrushes.WindowText' x' bounds.Bottom - c.FontHeight);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                                            float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                        using (LinearGradientBrush intervalBrush =                          new LinearGradientBrush(realPart' color' endColor' LinearGradientMode.Vertical))                      {                          c.Graphics.FillRectangle(intervalBrush' realPart);                          if (hasTail)                          {                              Color[] colors = intervalBrush.LinearColors;                              colors[0] = Color.FromArgb(64' colors[0]);                              colors[1] = Color.FromArgb(64' colors[1]);                              intervalBrush.LinearColors = colors;                              RectangleF tailPart = new RectangleF(                                  realPart.Right'                                  bounds.Y'                                  bounds.Width - realPart.Width'                                  bounds.Height);                              c.Graphics.FillRectangle(intervalBrush' tailPart);                          }                      }                        Brush textBrush = SystemBrushes.WindowText;                      if ((int)color.R + (int)color.G + (int)color.B < 3 * 160)                          textBrush = SystemBrushes.HighlightText;                      c.Graphics.DrawString(interval.Name' c.Font' textBrush' bounds.Location);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillRectangle(brush' bounds);                          bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                          float x = showRight ? bounds.Right : bounds.Left;                          c.Graphics.DrawString(GetXPositionString(x' c)' c.Font' SystemBrushes.WindowText' x' bounds.Bottom - c.FontHeight);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      using (SolidBrush brush = new SolidBrush(color))                      {                          c.Graphics.FillEllipse(brush' bounds);                      }                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawEllipse(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillEllipse(brush' bounds);                          c.Graphics.DrawString(GetXPositionString(bounds.Left + m_keySize / 2' c)' c.Font' SystemBrushes.WindowText' bounds.Right + 16' bounds.Y);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      using (SolidBrush brush = new SolidBrush(color))                      {                          c.Graphics.FillEllipse(brush' bounds);                      }                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawEllipse(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillEllipse(brush' bounds);                          c.Graphics.DrawString(GetXPositionString(bounds.Left + m_keySize / 2' c)' c.Font' SystemBrushes.WindowText' bounds.Right + 16' bounds.Y);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      using (SolidBrush brush = new SolidBrush(color))                      {                          c.Graphics.FillEllipse(brush' bounds);                      }                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawEllipse(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillEllipse(brush' bounds);                          c.Graphics.DrawString(GetXPositionString(bounds.Left + m_keySize / 2' c)' c.Font' SystemBrushes.WindowText' bounds.Right + 16' bounds.Y);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      using (SolidBrush brush = new SolidBrush(color))                      {                          c.Graphics.FillEllipse(brush' bounds);                      }                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawEllipse(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillEllipse(brush' bounds);                          c.Graphics.DrawString(GetXPositionString(bounds.Left + m_keySize / 2' c)' c.Font' SystemBrushes.WindowText' bounds.Right + 16' bounds.Y);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      using (SolidBrush brush = new SolidBrush(color))                      {                          c.Graphics.FillEllipse(brush' bounds);                      }                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawEllipse(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillEllipse(brush' bounds);                          c.Graphics.DrawString(GetXPositionString(bounds.Left + m_keySize / 2' c)' c.Font' SystemBrushes.WindowText' bounds.Right + 16' bounds.Y);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(m_invalidBrush' bounds);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: float middle = bounds.X + bounds.Width / 2;
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      using (Pen pen = new Pen(color))                      {                          c.Graphics.DrawLine(pen' middle' bounds.Top' middle' bounds.Bottom);                      }                        bool selected = (drawMode & DrawMode.Selected) != 0;                      Color handleColor = selected ? Color.Tomato : color;                      using (Brush brush = new SolidBrush(handleColor))                      {                          RectangleF handleRect =                              new RectangleF(bounds.X' bounds.Y' bounds.Width' bounds.Width);                          c.Graphics.FillRectangle(brush' handleRect);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' middle' bounds.Y' 1' bounds.Height);                      break;                  case DrawMode.Ghost:                      using (Pen pen = new Pen(Color.FromArgb(128' color)))                      {                          c.Graphics.DrawLine(pen' middle' bounds.Top' middle' bounds.Bottom);                          c.Graphics.DrawString(GetXPositionString(middle' c)' c.Font' SystemBrushes.WindowText' bounds.Right + 16' bounds.Y);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.DrawRectangle(Pens.DimGray' bounds.X' bounds.Y' bounds.Width' bounds.Height);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following statement contains a magic number: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      using (Pen pen = new Pen(color))                      {                          c.Graphics.DrawLine(pen' middle' bounds.Top' middle' bounds.Bottom);                      }                        bool selected = (drawMode & DrawMode.Selected) != 0;                      Color handleColor = selected ? Color.Tomato : color;                      using (Brush brush = new SolidBrush(handleColor))                      {                          RectangleF handleRect =                              new RectangleF(bounds.X' bounds.Y' bounds.Width' bounds.Width);                          c.Graphics.FillRectangle(brush' handleRect);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' middle' bounds.Y' 1' bounds.Height);                      break;                  case DrawMode.Ghost:                      using (Pen pen = new Pen(Color.FromArgb(128' color)))                      {                          c.Graphics.DrawLine(pen' middle' bounds.Top' middle' bounds.Bottom);                          c.Graphics.DrawString(GetXPositionString(middle' c)' c.Font' SystemBrushes.WindowText' bounds.Right + 16' bounds.Y);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.DrawRectangle(Pens.DimGray' bounds.X' bounds.Y' bounds.Width' bounds.Height);                      break;              }
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,GetBounds,The following statement contains a magic number: return new RectangleF(                  key.Start - keyWidth / 2'                  trackTop'                  keyWidth'                  keyHeight);
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,GetBounds,The following statement contains a magic number: const float DefaultMarkerHandleSize = 10;
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,GetBounds,The following statement contains a magic number: return new RectangleF(                  marker.Start - handleSize / 2'                  c.Bounds.Top'                  handleSize'                  c.Bounds.Height);
Magic Number,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,GetXPositionString,The following statement contains a magic number: float frame = x * c.InverseTransform.Elements[0] + c.InverseTransform.Elements[4];
Magic Number,Sce.Atf.Controls.Timelines,MoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\MoveManipulator.cs,GetMoveGhostInfo,The following statement contains a magic number: List<float> movingPoints = new List<float>(2);
Magic Number,Sce.Atf.Controls.Timelines,MoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\MoveManipulator.cs,GetMoveGhostInfo,The following statement contains a magic number: float yOffset = dragOffset.Y * worldToView.Elements[3];
Magic Number,Sce.Atf.Controls.Timelines,MoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\MoveManipulator.cs,GetMoveTargets,The following statement contains a magic number: float y = bounds.Top + bounds.Height * 0.5f + m_owner.DragDelta.Y;
Magic Number,Sce.Atf.Controls.Timelines,MoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\MoveManipulator.cs,GetMoveTargets,The following statement contains a magic number: float y = bounds.Top + bounds.Height * 0.5f + m_owner.DragDelta.Y;
Magic Number,Sce.Atf.Controls.Timelines,ScaleManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScaleManipulator.cs,DrawManipulator,The following statement contains a magic number: const int penWidth = 3;
Magic Number,Sce.Atf.Controls.Timelines,ScaleManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScaleManipulator.cs,DrawManipulator,The following statement contains a magic number: leftHandle = new RectangleF(viewMin - penWidth * 0.5f' 0.0f' penWidth' HandleHeight);
Magic Number,Sce.Atf.Controls.Timelines,ScaleManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScaleManipulator.cs,DrawManipulator,The following statement contains a magic number: rightHandle = new RectangleF(viewMax - penWidth * 0.5f' 0.0f' penWidth' HandleHeight);
Magic Number,Sce.Atf.Controls.Timelines,Resizer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScaleManipulator.cs,ScalePoint,The following statement contains a magic number: initialWidth < 0.00001f
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: handleRect = new RectangleF(                  viewX - 5'                  clipRectangle.Top'                  10'                  7);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: handleRect = new RectangleF(                  viewX - 5'                  clipRectangle.Top'                  10'                  7);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: handleRect = new RectangleF(                  viewX - 5'                  clipRectangle.Top'                  10'                  7);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: int pos_y = Convert.ToInt32(clipRectangle.Top + 5);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[0] = new Point(pos_x - 4' pos_y - 5);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[0] = new Point(pos_x - 4' pos_y - 5);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[1] = new Point(pos_x - 4' pos_y);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[2] = new Point(pos_x - 5' pos_y + 1);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[2] = new Point(pos_x - 5' pos_y + 1);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[3] = new Point(pos_x - 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[3] = new Point(pos_x - 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[3] = new Point(pos_x - 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[4] = new Point(pos_x' pos_y + 7);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[4] = new Point(pos_x' pos_y + 7);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[5] = new Point(pos_x + 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[5] = new Point(pos_x + 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[5] = new Point(pos_x + 5' pos_y + 2);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[6] = new Point(pos_x + 5' pos_y + 1);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[6] = new Point(pos_x + 5' pos_y + 1);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[7] = new Point(pos_x + 4' pos_y);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[7] = new Point(pos_x + 4' pos_y);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[8] = new Point(pos_x + 4' pos_y - 5);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[8] = new Point(pos_x + 4' pos_y - 5);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: s_arrow[8] = new Point(pos_x + 4' pos_y - 5);
Magic Number,Sce.Atf.Controls.Timelines,ScrubberManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\ScrubberManipulator.cs,DrawManipulator,The following statement contains a magic number: g.DrawString(label' Owner.Font' SystemBrushes.WindowText' pos_x + 6' clipRectangle.Top);
Magic Number,Sce.Atf.Controls.Timelines,SnapOffsetInfo,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\SnapManipulator.cs,RemoveInvalid,The following statement contains a magic number: info.m_dist < smallestDist + 0.0001f
Magic Number,Sce.Atf.Controls.Timelines,SplitManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\SplitManipulator.cs,SplitSelectedIntervals,The following statement contains a magic number: m_owner.TransactionContext.DoTransaction(delegate                  {                      List<IInterval> newSelection = new List<IInterval>(m_owner.Selection.SelectionCount * 2);                      newSelection.AddRange(m_owner.Selection.GetSelection<IInterval>());                      foreach (IInterval interval in m_owner.Selection.GetSelection<IInterval>())                      {                          IInterval rightSide = DoSplit(interval' fraction);                          if (rightSide != null)                              newSelection.Add(rightSide);                      }                      m_owner.Selection.SetRange(newSelection);                  }'                  "Split Interval");
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,TimelineControl,The following statement contains a magic number: base.SetZoomRange(0.1f' 50f' 10f' 100f);
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,TimelineControl,The following statement contains a magic number: base.SetZoomRange(0.1f' 50f' 10f' 100f);
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,TimelineControl,The following statement contains a magic number: base.SetZoomRange(0.1f' 50f' 10f' 100f);
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,TimelineControl,The following statement contains a magic number: base.SetZoomRange(0.1f' 50f' 10f' 100f);
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,TimelineControl,The following statement contains a magic number: base.XZoom = 40f;
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,TimelineControl,The following statement contains a magic number: base.YZoom = 40f;
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,TimelineControl,The following statement contains a magic number: m_toolTip.InitialDelay = 100;
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,TimelineControl,The following statement contains a magic number: m_toolTip.ReshowDelay = 100;
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,GetCanvasSize,The following statement contains a magic number: int canvasWidth = (int)Math.Ceiling(bounds.Right) - offset.X + Width / 2;
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,GetCanvasSize,The following statement contains a magic number: int canvasHeight = (int)Math.Ceiling(bounds.Bottom) - offset.Y + Height / 2;
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,TurnOffToolTip,The following statement contains a magic number: new System.Threading.Timer(                  delegate {                      InvalidateControl();                  }'                  m_toolTip' 20' Timeout.Infinite);
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,OnMouseHover,The following statement contains a magic number: m_toolTip.Show(GetToolTipText(hitObject)' this' m_lastMouseMove.X' m_lastMouseMove.Y + 20);
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,GetPickingRectangle,The following statement contains a magic number: return new RectangleF(                  clientPoint.X - tolerance'                  clientPoint.Y - tolerance'                  2 * tolerance'                  2 * tolerance);
Magic Number,Sce.Atf.Controls.Timelines,TimelineControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineControl.cs,GetPickingRectangle,The following statement contains a magic number: return new RectangleF(                  clientPoint.X - tolerance'                  clientPoint.Y - tolerance'                  2 * tolerance'                  2 * tolerance);
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,TimelineRenderer,The following statement contains a magic number: m_gridPen = new Pen(Color.FromArgb(128' 128' 128' 128));
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,TimelineRenderer,The following statement contains a magic number: m_gridPen = new Pen(Color.FromArgb(128' 128' 128' 128));
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,TimelineRenderer,The following statement contains a magic number: m_gridPen = new Pen(Color.FromArgb(128' 128' 128' 128));
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,TimelineRenderer,The following statement contains a magic number: m_gridPen = new Pen(Color.FromArgb(128' 128' 128' 128));
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,PickSubTimeline,The following statement contains a magic number: (result.Count == 0) && (pickRect.Height <= 2 * PickTolerance) && (pickRect.Width <= 2 * PickTolerance)
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,PickSubTimeline,The following statement contains a magic number: (result.Count == 0) && (pickRect.Height <= 2 * PickTolerance) && (pickRect.Width <= 2 * PickTolerance)
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawTimelineReference,The following statement contains a magic number: originRect.X = screenStart - 4;
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawTimelineReference,The following statement contains a magic number: originRect.Width = 8;
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawTimelineReference,The following statement contains a magic number: originRect.Height = 16;
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawTimelineReference,The following statement contains a magic number: g.DrawLines(pen' new[] {                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y)'                          new PointF(originRect.X' originRect.Y + originRect.Height * 0.5f)'                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Bottom)'                          new PointF(originRect.Right' originRect.Y + originRect.Height * 0.5f)'                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y) });
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawTimelineReference,The following statement contains a magic number: g.DrawLines(pen' new[] {                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y)'                          new PointF(originRect.X' originRect.Y + originRect.Height * 0.5f)'                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Bottom)'                          new PointF(originRect.Right' originRect.Y + originRect.Height * 0.5f)'                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y) });
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawTimelineReference,The following statement contains a magic number: g.DrawLines(pen' new[] {                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y)'                          new PointF(originRect.X' originRect.Y + originRect.Height * 0.5f)'                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Bottom)'                          new PointF(originRect.Right' originRect.Y + originRect.Height * 0.5f)'                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y) });
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawTimelineReference,The following statement contains a magic number: g.DrawLines(pen' new[] {                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y)'                          new PointF(originRect.X' originRect.Y + originRect.Height * 0.5f)'                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Bottom)'                          new PointF(originRect.Right' originRect.Y + originRect.Height * 0.5f)'                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y) });
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,DrawTimelineReference,The following statement contains a magic number: g.DrawLines(pen' new[] {                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y)'                          new PointF(originRect.X' originRect.Y + originRect.Height * 0.5f)'                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Bottom)'                          new PointF(originRect.Right' originRect.Y + originRect.Height * 0.5f)'                          new PointF(originRect.X + originRect.Width * 0.5f' originRect.Y) });
Magic Number,Sce.Atf.Controls.Timelines,TimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,LayoutSubTimeline,The following statement contains a magic number: float docRowHeight = Math.Max(margin * 2' MinimumTrackSize);
Magic Number,Sce.Atf.Controls.Timelines,Context,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\TimelineRenderer.cs,Context,The following statement contains a magic number: PixelSize = new SizeF(1 / transform.Elements[0]' 1 / transform.Elements[3]);
Missing Default,Sce.Atf.Applications,ControlHostService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ControlHostService.cs,CanDoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                  {                      case StandardCommand.WindowTileHorizontal:                          canDo = true;                          break;                        case StandardCommand.WindowTileVertical:                          canDo = true;                          break;                        case StandardCommand.WindowTileTabbed:                          canDo = true;                          break;                      case StandardCommand.UILock:                          canDo = true;                          break;                  }
Missing Default,Sce.Atf.Applications,ControlHostService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\ControlHostService.cs,DoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                  {                      case StandardCommand.WindowTileHorizontal:                          TileDocumentContent(DockStyle.Right);                          break;                        case StandardCommand.WindowTileVertical:                          TileDocumentContent(DockStyle.Bottom);                          break;                        case StandardCommand.WindowTileTabbed:                          TileDocumentContent(DockStyle.Fill);                          break;                      case StandardCommand.UILock:                          UILocked = m_dockPanel.AllowEndUserDocking;                          break;                  }
Missing Default,Sce.Atf.Applications,DefaultTabCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\DefaultTabCommands.cs,CanDoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                      case Command.CloseCurrentTab:                          return ControlRegistry.ActiveControl.Group != StandardControlGroup.CenterPermanent;                        case Command.CloseOtherTabs:                          return docInfos.Length > 1;                        case Command.CopyFullPath:                      case Command.OpenContainingFolder:                          return m_documentExists; // Use a cached value to avoid file I/O spam.                  }
Missing Default,Sce.Atf.Applications,DefaultTabCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\DefaultTabCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)              {                  case Command.CloseCurrentTab:                      Close(ControlRegistry.ActiveControl);                      break;                    case Command.CloseOtherTabs:                      CloseOthers(ControlRegistry.ActiveControl);                      break;                    case Command.CopyFullPath:                      Clipboard.SetDataObject(GetDocumentPath(ControlRegistry.ActiveControl)' true);                      break;                    case Command.OpenContainingFolder:                      // Open in Explorer and select the file. http://support.microsoft.com/kb/314853                      System.Diagnostics.Process.Start("explorer.exe"' "/e'/select'" + GetDocumentPath(ControlRegistry.ActiveControl));                      break;              }
Missing Default,Sce.Atf.Applications,ResourceLister,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\Listers\ResourceLister.cs,DoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                      case Command.DetailsView:                          {                              m_thumbnailControl.Hide();                              m_listView.Show();                              RefreshThumbnails();                          }                          break;                        case Command.ThumbnailView:                          {                              m_listView.Hide();                              m_thumbnailControl.Show();                              RefreshThumbnails();                          }                          break;                  }
Missing Default,Sce.Atf.Applications,OutputService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\OutputService.cs,CanDoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                  {                      case StandardCommand.EditCopy:                          canDo = m_textBox.Focused && (m_textBox.SelectionLength > 0);                          break;                        case StandardCommand.EditSelectAll:                          canDo = m_textBox.Focused && (m_textBox.TextLength > 0);                          break;                  }
Missing Default,Sce.Atf.Applications,OutputService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\OutputService.cs,DoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                  {                      case StandardCommand.EditCopy:                          m_textBox.Copy();                          break;                        case StandardCommand.EditSelectAll:                          m_textBox.SelectAll();                          break;                  }
Missing Default,Sce.Atf.Applications,PropertyEditingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditingCommands.cs,CanDoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                      case Command.CopyProperty:                          return m_descriptor != null                               && !(m_descriptor is ChildPropertyDescriptor)                              && !(m_descriptor is ChildAttributeCollectionPropertyDescriptor);                        case Command.PasteProperty:                          {                              var lastObject = editingContext.Items.LastOrDefault();                                return m_descriptor != null && CanPaste(m_copyValue' m_copyDescriptor' m_descriptor'                                  m_descriptor.GetValue(lastObject));                          }                        case Command.ResetProperty:                          return CanResetValue(editingContext.Items' m_descriptor);                                                case Command.CopyAll:                          {                              foreach (var descriptor in editingContext.PropertyDescriptors)                              {                                  if ( (descriptor is ChildPropertyDescriptor)                                      || (descriptor is ChildAttributeCollectionPropertyDescriptor))                                      continue;                                  AttributePropertyDescriptor attr = descriptor as AttributePropertyDescriptor;                                  if (attr != null && attr.AttributeInfo.IsIdAttribute)                                      continue;                                  return true;                              }                              break;                          }                                           case Command.PasteAll:                          return m_descriptorToValue.Count > 0;                        case Command.ResetAll:                          foreach (PropertyDescriptor descriptor in editingContext.PropertyDescriptors)                          {                              if (CanResetValue(editingContext.Items' descriptor))                                  return true;                          }                          break;                                               case Command.ViewInTextEditor:                          if (m_descriptor != null && m_descriptor.GetEditor(typeof(UITypeEditor)) is FileUriEditor)                              return true;                          break;                      case Command.CreateNewPropertyEditor:                          return editingContext == m_propertyEditor.PropertyGrid.PropertyGridView.EditingContext;                  }
Missing Default,Sce.Atf.Applications,PropertyEditingCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\PropertyEditingCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)              {                  case Command.CopyProperty:                      {                          if (!(m_descriptor is ChildPropertyDescriptor))                          {                              var lastObject = editingContext.Items.LastOrDefault();                              m_copyDescriptor = m_descriptor;                              m_copyValue = m_descriptor.GetValue(lastObject);                          }                      }                      break;                    case Command.PasteProperty:                      {                          transactionContext.DoTransaction(delegate                          {                              foreach (object item in editingContext.Items)                              {                                  PropertyUtils.SetProperty(item' m_descriptor' m_copyValue);                              }                          }'                          string.Format("Paste: {0}".Localize("'Paste' is a verb and this is the name of a command")'                              m_descriptor.DisplayName));                      }                      break;                    case Command.ResetProperty:                      transactionContext.DoTransaction(delegate                          {                              PropertyUtils.ResetProperty(editingContext.Items' m_descriptor);                          }'                          string.Format("Reset: {0}".Localize("'Reset' is a verb and this is the name of a command")'                              m_descriptor.DisplayName));                      break;                                 case Command.CopyAll:                      {                          m_descriptorToValue.Clear();                          var lastObject = editingContext.Items.LastOrDefault();                                                foreach (var descriptor in editingContext.PropertyDescriptors)                          {                              if( (descriptor is ChildPropertyDescriptor))                                  continue;                                AttributePropertyDescriptor attr = descriptor as AttributePropertyDescriptor;                              if(attr != null && attr.AttributeInfo.IsIdAttribute)                                  continue;                                m_descriptorToValue.Add(descriptor.GetPropertyDescriptorKey()'                                  descriptor.GetValue(lastObject));                          }                                              }                      break;                    case Command.PasteAll:                      {                          transactionContext.DoTransaction(delegate                          {                                                          foreach (var descriptor in editingContext.PropertyDescriptors)                              {                                  if (descriptor.IsReadOnly) continue; ;                                  object value;                                  if (m_descriptorToValue.TryGetValue(descriptor.GetPropertyDescriptorKey()' out value))                                  {                                                                          foreach (object item in editingContext.Items)                                      {                                          PropertyUtils.SetProperty(item'                                              descriptor'                                              value);                                      }                                  }                              }                            }' "Paste All".Localize("'Paste' is a verb and this is the name of a command"));                                              }                      break;                    case Command.ResetAll:                      transactionContext.DoTransaction(delegate                      {                          foreach (PropertyDescriptor descriptor in editingContext.PropertyDescriptors)                          {                              foreach (object item in editingContext.Items)                              {                                  if (descriptor.CanResetValue(item))                                      descriptor.ResetValue(item);                              }                          }                      }'                          "Reset All Properties".Localize("'Reset' is a verb and this is the name of a command"));                      break;                                   case Command.ViewInTextEditor:                      {                          var fileUriEditor = m_descriptor.GetEditor(typeof(UITypeEditor)) as FileUriEditor;                          var fileUri = m_descriptor.GetValue(editingContext.Items.LastOrDefault()) as Uri;                          if (fileUri != null && File.Exists(fileUri.LocalPath))                              Process.Start(fileUriEditor.AssociatedTextEditor' fileUri.LocalPath);                      }                      break;                  case Command.CreateNewPropertyEditor:                      {                          m_propertyEditor.Duplicate();                      }                      break;              }
Missing Default,Sce.Atf.Applications,SettingsService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsService.cs,CanDoCommand,The following switch statement is missing a default case: switch ((CommandId)tag)                  {                      case CommandId.EditPreferences:                      case CommandId.EditImportExportSettings:                          enabled = true;                          break;                  }
Missing Default,Sce.Atf.Applications,SettingsService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SettingsService.cs,DoCommand,The following switch statement is missing a default case: switch ((CommandId)tag)                  {                      case CommandId.EditPreferences:                          PresentUserSettings(null);                          break;                        case CommandId.EditImportExportSettings:                          var settingsLoadSaveDialog = new SettingsLoadSaveDialog(this);                          settingsLoadSaveDialog.ShowDialog(MainWindow.DialogOwner);                          break;                  }
Missing Default,Sce.Atf.Applications,FormNcRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\FormNcRenderer.cs,WndProc,The following switch statement is missing a default case: switch ((uint)m.Msg)              {                  case WinMessages.WM_NCPAINT:                      handled = PaintTitleBar(m_active);                      if (handled) m.Result = IntPtr.Zero;                      break;                    case WinMessages.WM_ACTIVATEAPP:                      m_active = m.WParam != IntPtr.Zero;                      handled = PaintTitleBar(m_active);                      if (handled) m.Result = IntPtr.Zero;                      break;                    case WinMessages.WM_ACTIVATE:                      int lwp = LowWord(m.WParam.ToInt32());                      m_active = lwp != 0;                      handled = PaintTitleBar(m_active);                      if (handled) m.Result = IntPtr.Zero;                        // let the window process this message                       // so the form can raise activated and deactivate events.                      handled = false;                       break;                  case WinMessages.WM_NCACTIVATE:                      if (m.WParam != IntPtr.Zero)                          m.Result = IntPtr.Zero;                                              else                          m.Result = (IntPtr)1;                      handled = true;                                          PaintTitleBar(m.WParam != IntPtr.Zero);                      break;                  case WinMessages.WM_NCUAHDRAWCAPTION:                  case WinMessages.WM_NCUAHDRAWFRAME:                      handled = true; // ignore theme related messages.                      break;                                   case WinMessages.WM_SIZE:                      {                                                 if (m_paintOnResize)                          {                                                        m_paintOnResize = false;                              PaintTitleBar(m_active);                          }                      }                      break;                  case WinMessages.WM_SYSCOMMAND:                      uint flags = (uint)m.WParam & 0xFFF0;                      m_paintOnResize =                          (flags & SYSCOMMANDWPARAM.SC_RESTORE) != 0                              || (flags & SYSCOMMANDWPARAM.SC_MAXIMIZE) != 0;                      break;                  case WinMessages.WM_EXITSIZEMOVE:                      PaintTitleBar(m_active);                      break;                    case WinMessages.WM_STYLECHANGED:                      CreateCaptionButtons();                                         m.Result = IntPtr.Zero;                      handled = true;                      break;                    case WinMessages.WM_SETICON:                      CreateCaptionButtons();                                          break;                    case WinMessages.WM_SETTEXT:                      base.WndProc(ref m);                      PaintTitleBar(m_active);                      handled = true;                      break;                    case WinMessages.WM_NCHITTEST:                      handled = OnHitTest(ref m);                      break;                    case WinMessages.WM_NCMOUSELEAVE:                      SetHoverState(null);                      break;                  case WinMessages.WM_NCLBUTTONDOWN:                      handled = OnNcLButtonDown(ref m);                      break;                    case WinMessages.WM_NCLBUTTONUP:                      handled = OnNcLButtonUp(ref m);                      break;                    case WinMessages.WM_NCMOUSEMOVE:                      handled = OnNcMouseMove(ref m);                      break;                }
Missing Default,Sce.Atf.Applications,SkinService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,CanDoCommand,The following switch statement is missing a default case: switch((SkinCommands)commandTag)              {                  case SkinCommands.SkinEdit:                      enabled = true;                      break;                                    case SkinCommands.SkinLoad:                      enabled = FileDialogService != null;                      break;                    case SkinCommands.SkinReset:                      enabled = ActiveSkin != null;                      break;              }
Missing Default,Sce.Atf.Applications,SkinService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,DoCommand,The following switch statement is missing a default case: switch ((SkinCommands)commandTag)              {                  case SkinCommands.SkinEdit:                      if (m_skinEditor == null)                      {                          m_skinEditor = new SkinEditor();                          m_skinEditor.Show(MainForm);                          if (ActiveSkin != null)                          {                              m_skinEditor.OpenSkin(ActiveSkin.SkinFile);                          }                          m_skinEditor.FormClosed += SkinEditor_FormClosed;                          m_skinEditor.SkinChanged += SkinEditor_SkinChanged;                          m_mainForm.FormClosing += m_mainForm_FormClosing;                      }                      break;                    case SkinCommands.SkinLoad:                      string forcedDirectory =                          ActiveSkin == null ? SkinsDirectory :                          Directory.GetParent(ActiveSkin.SkinFile).FullName;                      string newSkinPath = null;                      var dlgResult = FileDialogService.OpenFileName(ref newSkinPath' Info.GetFilterString()' forcedDirectory);                      if (dlgResult == FileDialogResult.OK)                      {                          OpenAndApplySkin(newSkinPath);                          SkinsDirectory = Directory.GetParent(newSkinPath).FullName;                      }                      break;                                   case SkinCommands.SkinReset:                      ResetSkin();                      break;              }
Missing Default,Sce.Atf.Applications,SkinService,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\SkinService\SkinService.cs,GetTypeFromString,The following switch statement is missing a default case: switch(typeString)              {                  case "System.Drawing.Color": //very common                      return typeof(Color);                    case "string": //short for "System.String"                      return typeof(string);                    case "int": //short for "System.Int32"                      return typeof(int);                    case "float": //short for "System.Single"                      return typeof(float);                    case "char": //short for "System.Char"                      return typeof(char);                    case "byte": //short for "System.Byte"                      return typeof(byte);              }
Missing Default,Sce.Atf.Applications,StandardEditCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardEditCommands.cs,CanDoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)              {                  case StandardCommand.EditCut:                      canDo =                          instancingContext != null &&                          instancingContext.CanCopy() &&                          instancingContext.CanDelete();                      break;                    case StandardCommand.EditDelete:                      canDo =                          instancingContext != null &&                          instancingContext.CanDelete();                      break;                    case StandardCommand.EditCopy:                      canDo =                          instancingContext != null &&                          instancingContext.CanCopy();                      break;                    case StandardCommand.EditPaste:                      canDo =                          instancingContext != null &&                          CanPaste();                      break;              }
Missing Default,Sce.Atf.Applications,StandardEditCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardEditCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)              {                  case StandardCommand.EditCut:                      Cut();                      break;                    case StandardCommand.EditDelete:                      Delete();                      break;                    case StandardCommand.EditCopy:                      Copy();                      break;                    case StandardCommand.EditPaste:                      Paste();                      break;              }
Missing Default,Sce.Atf.Applications,StandardLayoutCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardLayoutCommands.cs,CanDoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                      {                          case StandardCommand.FormatAlignLefts:                          case StandardCommand.FormatAlignCenters: //horizontal middle                          case StandardCommand.FormatAlignRights:                              canDo = (itemFlags & BoundsSpecified.X) != 0;                              break;                            case StandardCommand.FormatAlignTops:                          case StandardCommand.FormatAlignMiddles: //vertical middle                          case StandardCommand.FormatAlignBottoms:                              canDo = (itemFlags & BoundsSpecified.Y) != 0;                              break;                            case StandardCommand.FormatMakeWidthEqual:                              canDo = (itemFlags & BoundsSpecified.Width) != 0;                              break;                            case StandardCommand.FormatMakeHeightEqual:                              canDo = (itemFlags & BoundsSpecified.Height) != 0;                              break;                            case StandardCommand.FormatMakeSizeEqual:                              canDo = (itemFlags & BoundsSpecified.Size) == BoundsSpecified.Size;                              break;                      }
Missing Default,Sce.Atf.Applications,StandardLayoutCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardLayoutCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                      {                          case StandardCommand.FormatAlignLefts:                              commandName = CommandInfo.FormatAlignLefts.MenuText;                              break;                            case StandardCommand.FormatAlignRights:                              commandName = CommandInfo.FormatAlignRights.MenuText;                              break;                            case StandardCommand.FormatAlignCenters: //horizontal middle                              commandName = CommandInfo.FormatAlignCenters.MenuText;                              break;                            case StandardCommand.FormatAlignTops: //horizontal middle                              commandName = CommandInfo.FormatAlignTops.MenuText;                              break;                            case StandardCommand.FormatAlignBottoms:                              commandName = CommandInfo.FormatAlignBottoms.MenuText;                              break;                            case StandardCommand.FormatAlignMiddles: //vertical middle                              commandName = CommandInfo.FormatAlignMiddles.MenuText;                              break;                            case StandardCommand.FormatMakeWidthEqual:                              commandName = CommandInfo.FormatMakeWidthEqual.MenuText;                              break;                            case StandardCommand.FormatMakeHeightEqual:                              commandName = CommandInfo.FormatMakeHeightEqual.MenuText;                              break;                            case StandardCommand.FormatMakeSizeEqual:                              commandName = CommandInfo.FormatMakeSizeEqual.MenuText;                              break;                      }
Missing Default,Sce.Atf.Applications,StandardLayoutCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardLayoutCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                              {                                  case StandardCommand.FormatAlignLefts:                                      AlignLefts(items' layoutContext);                                      break;                                    case StandardCommand.FormatAlignRights:                                      AlignRights(items' layoutContext);                                      break;                                    case StandardCommand.FormatAlignCenters: // horizontal center                                      AlignCenters(items' layoutContext);                                      break;                                    case StandardCommand.FormatAlignTops:                                      AlignTops(items' layoutContext);                                      break;                                    case StandardCommand.FormatAlignBottoms:                                      AlignBottoms(items' layoutContext);                                      break;                                    case StandardCommand.FormatAlignMiddles: // vertical center                                      AlignMiddles(items' layoutContext);                                      break;                                    case StandardCommand.FormatMakeWidthEqual:                                      MakeWidthEqual(items' layoutContext);                                      break;                                    case StandardCommand.FormatMakeHeightEqual:                                      MakeHeightEqual(items' layoutContext);                                      break;                                    case StandardCommand.FormatMakeSizeEqual:                                      MakeSizeEqual(items' layoutContext);                                      break;                              }
Missing Default,Sce.Atf.Applications,StandardPrintCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardPrintCommands.cs,CanDoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                  {                      case StandardCommand.PrintPreview:                      case StandardCommand.PageSetup:                      case StandardCommand.Print:                          IPrintableDocument printableDocument = m_contextRegistry.GetActiveContext<IPrintableDocument>();                          enabled = printableDocument != null;                          break;                  }
Missing Default,Sce.Atf.Applications,StandardPrintCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\StandardPrintCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                  {                      case StandardCommand.PageSetup:                          ShowPageSettingsDialog();                          break;                        case StandardCommand.PrintPreview:                          ShowPrintPreviewDialog();                          break;                        case StandardCommand.Print:                          ShowPrintDialog();                          break;                  }
Missing Default,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,CanDoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                      case Command.Refresh:                          canDo = WrapCommandFunction((Command)commandTag' DoRefresh' doing);                          break;                        case Command.Reconcile:                          canDo = WrapCommandFunction((Command)commandTag' DoReconcile' doing);                          break;                        case Command.CheckOut:                          canDo = WrapCommandFunction((Command)commandTag' DoCheckOut' doing);                          break;                        case Command.CheckIn:                          canDo = WrapCommandFunction((Command)commandTag' DoCheckIn' doing);                          break;                        case Command.Sync:                          canDo = WrapCommandFunction((Command)commandTag' DoSync' doing);                          break;                        case Command.Revert:                          canDo = WrapCommandFunction((Command)commandTag' DoRevert' doing);                          break;                  }
Missing Default,Sce.Atf.Applications,SourceControlCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Applications\VersionControl\SourceControlCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)              {                  case Command.Refresh:                      WrapCommandFunction((Command)commandTag' DoRefresh' doing);                      break;                    case Command.Reconcile:                      WrapCommandFunction((Command)commandTag' DoReconcile' doing);                      break;                    case Command.Add:                      WrapCommandFunction((Command)commandTag' DoAdd' doing);                      break;                    case Command.CheckOut:                      WrapCommandFunction((Command)commandTag' DoCheckOut' doing);                      break;                    case Command.CheckIn:                      WrapCommandFunction((Command)commandTag' DoCheckIn' doing);                      break;                    case Command.Sync:                      WrapCommandFunction((Command)commandTag' DoSync' doing);                      break;                    case Command.Revert:                      WrapCommandFunction((Command)commandTag' DoRevert' doing);                      break;              }
Missing Default,Sce.Atf.Applications,ReplaceTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\SearchAndReplace\ReplaceTextBox.cs,textBox_KeyDown,The following switch statement is missing a default case: switch (e.KeyCode)              {                  case Keys.Enter:                      DoReplace();                      break;              }
Missing Default,Sce.Atf,FindFileResolver,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\FindFileResolver.cs,QueryUser,The following switch statement is missing a default case: switch (userAction)                  {                      case FindFileAction.AcceptSuggestion:                          newUri = suggestedUri;                          return true;                        case FindFileAction.AcceptAllSuggestions:                          s_acceptAll = true;                          newUri = suggestedUri;                          return true;                        case FindFileAction.SearchDirectory:                          if (SearchForFile(uri' out newUri' true))                              return true;                          continue;                        case FindFileAction.SearchDirectoryForAll:                          s_searchAll = true;                          if (SearchForFile(uri' out newUri' false))                              return true;                          continue;                        case FindFileAction.UserSpecify:                          if (UserFindFile(uri' out newUri))                              return true;                          continue;                        case FindFileAction.Ignore:                          newUri = uri;                          return false;                        case FindFileAction.IgnoreAll:                          s_ignoreAll = true;                          newUri = uri;                          return false;                  }
Missing Default,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawSubItem,The following switch statement is missing a default case: switch (e.Header.TextAlign)                      {                          case HorizontalAlignment.Center:                              sf.Alignment = StringAlignment.Center;                              break;                          case HorizontalAlignment.Right:                              sf.Alignment = StringAlignment.Far;                              break;                      }
Missing Default,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawSubItem,The following switch statement is missing a default case: switch (e.Header.TextAlign)                  {                      case HorizontalAlignment.Center:                          sf.Alignment = StringAlignment.Center;                          break;                      case HorizontalAlignment.Right:                          sf.Alignment = StringAlignment.Far;                          break;                  }
Missing Default,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,OnDrawColumnHeader,The following switch statement is missing a default case: switch (e.Header.TextAlign)                  {                      case HorizontalAlignment.Center:                          sf.Alignment = StringAlignment.Center;                          break;                      case HorizontalAlignment.Right:                          sf.Alignment = StringAlignment.Far;                          break;                  }
Missing Default,Sce.Atf.Controls,DataBoundListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\DataBoundListView.cs,activeEditingControl_KeyPress,The following switch statement is missing a default case: switch (e.KeyChar)              {                  case (char)(int)Keys.Escape:                      {                          // Reset to the original  value' and then hide the editing control.                          DisableEditingControl(false);                          break;                      }                    case (char)(int)Keys.Enter:                      {                          // Hide the editing control.                          DisableEditingControl(true);                          break;                      }              }
Missing Default,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnMouseDown,The following switch statement is missing a default case: switch (hitRecord.Type)              {                  case HitType.Expander:                      ToggleExpand(node);                      break;                    case HitType.CheckBox:                      if (node.CheckBoxEnabled)                      {                          CheckState checkState = (node.CheckState == CheckState.Checked) ? CheckState.Unchecked : CheckState.Checked;                          if (node.CheckState != checkState)                          {                              node.CheckState = checkState;                              OnNodeCheckStateEdited(new NodeEventArgs(node));                          }                      }                      break;                    case HitType.Item:                  case HitType.Label:                      // Selection logic table' mostly based on Visual Studio tree control:                      // Mouse Button    Modifier Keys   Result                      // -------------   -------------   -----------------------------                      // left            none            Not selected? SetSelection(node). Else' m_leftClickedSelectedNode = node.                      // left            alt             No selection change or label editing. Different than VS.                      // left            ctrl            toggle node's selected state. Shift key is ignored if it's pressed.                      // left            shift           ExtendSelection(node)                      // right           none'ctrl'shift Node is already selected? Then don't change selection set.                      //                                 Node is not selected? Then SetSelection(node).                      // right           alt             No selection change or label editing. Different than VS.                      // middle' etc.    any             No change.                      m_selecting = false;                      Keys modifiers = FilterModifiers();                      if ((modifiers & Keys.Alt) == 0)                      {                          if (e.Button == MouseButtons.Left)                          {                              m_selecting = true;                              OnSelectionChanging(EventArgs.Empty);                                if ((modifiers & Keys.Control) != 0)                              {                                  if (IsNodeMultiSelectable(node))                                  {                                      node.Selected = !node.Selected;                                  }                              }                              else if ((modifiers & Keys.Shift) != 0)                              {                                  ExtendSelection(node);                              }                              else                              {                                  if (node.Selected)                                  {                                      // even though selection set isn't changing' MouseUp expects m_selecting to be true.                                      m_leftClickedSelectedNode = node;                                  }                                  else                                  {                                      SetSelection(node);                                  }                                    if (ExpandOnSingleClick)                                  {                                      if (!node.IsLeaf && !node.Expanded)                                          node.Expanded = true;                                  }                              }                          }                          else if (e.Button == MouseButtons.Right)                          {                              if (!node.Selected)                              {                                  m_selecting = true;                                  OnSelectionChanging(EventArgs.Empty);                                  SetSelection(node);                              }                          }                      }                      break;              }
Missing Default,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,OnMouseDoubleClick,The following switch statement is missing a default case: switch (hitRecord.Type)              {                  case HitType.Item:                  case HitType.Label:                      if (ToggleOnDoubleClick)                          ToggleExpand(node);                      break;              }
Missing Default,Sce.Atf.Controls,TreeControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeControl.cs,ProcessDialogKey,The following switch statement is missing a default case: switch (keyData & Keys.KeyCode)              {                  case Keys.Down:                      nextNode = GetNextNode(m_currentKeyedNode);                      if (m_style == Style.CategorizedPalette && NavigationKeyBehaviorContains(KeyboardShortcuts.UpDownNav))                      {                          while (nextNode != null && nextNode.Parent == Root)                              nextNode = GetNextNode(nextNode);                      }                      handled = true;                      break;                  case Keys.Up:                      nextNode = GetPreviousNode(m_currentKeyedNode);                      if (m_style == Style.CategorizedPalette && NavigationKeyBehaviorContains(KeyboardShortcuts.UpDownNav))                      {                          while (nextNode != null && nextNode.Parent == Root)                              nextNode = GetPreviousNode(nextNode);                      }                      handled = true;                      break;                  case Keys.Left:                      // if node is expanded' collapse it; otherwise go to its parent                      if (NavigationKeyBehaviorContains(KeyboardShortcuts.LeftRightExpand) && m_currentKeyedNode != null)                      {                          if (m_currentKeyedNode.Expanded)                              ToggleExpand(m_currentKeyedNode);                          else                              nextNode = m_currentKeyedNode.Parent;                          handled = true;                      }                      break;                  case Keys.Right:                      if (NavigationKeyBehaviorContains(KeyboardShortcuts.LeftRightExpand) && m_currentKeyedNode != null)                      {                          // if node is expanded' go to 1st child; otherwise expand it                          if (m_currentKeyedNode.Expanded)                          {                              foreach (Node child in m_currentKeyedNode.Children)                              {                                  nextNode = child;                                  break;                              }                          }                          else if (!m_currentKeyedNode.IsLeaf)                              m_currentKeyedNode.Expanded = true;                          handled = true;                      }                      break;                  case Keys.Home:                      if (NavigationKeyBehaviorContains(KeyboardShortcuts.HomeEnd))                      {                          if (ShowRoot)                              nextNode = Root;                          else                          {                              foreach (Node child in Root.Children)                              {                                  nextNode = child;                                  break;                              }                          }                          handled = true;                      }                      break;                  case Keys.End:                      if (NavigationKeyBehaviorContains(KeyboardShortcuts.HomeEnd))                      {                          foreach (Node node in VisibleNodes)                              nextNode = node;                          handled = true;                      }                      break;                  case Keys.PageDown:                      if (NavigationKeyBehaviorContains(KeyboardShortcuts.PageUpDown))                      {                          int visibleHeight = Height - Margin.Top - Margin.Bottom;                          SetVerticalScroll(m_vScroll + visibleHeight - FontHeight);                          handled = true;                      }                      break;                  case Keys.PageUp:                      if (NavigationKeyBehaviorContains(KeyboardShortcuts.PageUpDown))                      {                          int visibleHeight = Height - Margin.Top - Margin.Bottom;                          SetVerticalScroll(m_vScroll - visibleHeight - FontHeight);                          handled = true;                      }                      break;              }
Missing Default,Sce.Atf.Controls,TheTreeListView,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\TreeListView.ListView.cs,WndProc,The following switch statement is missing a default case: switch (m.WParam.ToInt32())                              {                                  case (int)Keys.Down:                                      Scroll(this' new ScrollEventArgs(ScrollEventType.SmallIncrement' User32.GetScrollPos(Handle' SB_VERT)));                                      break;                                    case (int)Keys.Up:                                      Scroll(this' new ScrollEventArgs(ScrollEventType.SmallDecrement' User32.GetScrollPos(Handle' SB_VERT)));                                      break;                                    case (int)Keys.PageDown:                                      Scroll(this' new ScrollEventArgs(ScrollEventType.LargeIncrement' User32.GetScrollPos(Handle' SB_VERT)));                                      break;                                    case (int)Keys.PageUp:                                      Scroll(this' new ScrollEventArgs(ScrollEventType.LargeDecrement' User32.GetScrollPos(Handle' SB_VERT)));                                      break;                                    case (int)Keys.Home:                                      Scroll(this' new ScrollEventArgs(ScrollEventType.First' User32.GetScrollPos(Handle' SB_VERT)));                                      break;                                    case (int)Keys.End:                                      Scroll(this' new ScrollEventArgs(ScrollEventType.Last' User32.GetScrollPos(Handle' SB_VERT)));                                      break;                              }
Missing Default,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,ResizeAnnotation,The following switch statement is missing a default case: switch (diagramBorder.Border)              {                    case DiagramBorder.BorderType.LowerRightCorner:                      newBounds = new Rectangle(m_startBounds.X' m_startBounds.Y' m_startBounds.Width + delta.X' m_startBounds.Height + delta.Y);                      m_layoutContext.SetBounds(diagramBorder.Item' ConstrainBounds(newBounds)' BoundsSpecified.All);                      break;                  case DiagramBorder.BorderType.UpperLeftCorner:                      newBounds = new Rectangle(currentPoint.X' currentPoint.Y' m_startBounds.Width - delta.X' m_startBounds.Height - delta.Y);                      m_layoutContext.SetBounds(diagramBorder.Item' ConstrainBounds(newBounds)' BoundsSpecified.All);                      break;                  case DiagramBorder.BorderType.UpperRightCorner:                      newBounds = new Rectangle(m_startBounds.X' currentPoint.Y' m_startBounds.Width + delta.X' m_startBounds.Height - delta.Y);                      m_layoutContext.SetBounds(diagramBorder.Item' ConstrainBounds(newBounds)' BoundsSpecified.All);                      break;                  case DiagramBorder.BorderType.LowerLeftCorner:                      newBounds = new Rectangle(currentPoint.X' m_startBounds.Y' m_startBounds.Width - delta.X' m_startBounds.Height + delta.Y);                      m_layoutContext.SetBounds(diagramBorder.Item' ConstrainBounds(newBounds)' BoundsSpecified.All);                      break;                    case DiagramBorder.BorderType.Left:                      newBounds = new Rectangle(currentPoint.X' m_startBounds.Y' m_startBounds.Width - delta.X' m_startBounds.Height);                      m_layoutContext.SetBounds(diagramBorder.Item' ConstrainBounds(newBounds)' BoundsSpecified.All);                      break;                  case DiagramBorder.BorderType.Right:                      newBounds = new Rectangle(m_startBounds.X' m_startBounds.Y' m_startBounds.Width + delta.X' m_startBounds.Height);                      m_layoutContext.SetBounds(diagramBorder.Item' ConstrainBounds(newBounds)' BoundsSpecified.Size);                      break;                  case DiagramBorder.BorderType.Top:                      newBounds = new Rectangle(m_startBounds.X' currentPoint.Y' m_startBounds.Width' m_startBounds.Height - delta.Y);                      m_layoutContext.SetBounds(diagramBorder.Item' ConstrainBounds(newBounds)' BoundsSpecified.All);                      break;                  case DiagramBorder.BorderType.Bottom:                      newBounds = new Rectangle(m_startBounds.X' m_startBounds.Y' m_startBounds.Width' m_startBounds.Height + delta.Y);                      m_layoutContext.SetBounds(diagramBorder.Item' ConstrainBounds(newBounds)' BoundsSpecified.Size);                      break;                }
Missing Default,Sce.Atf.Controls.Adaptable,D2dAnnotationAdapter,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\D2dAnnotationAdapter.cs,control_PreviewKeyDown,The following switch statement is missing a default case: switch (key)              {                  case Keys.Delete:                      if (ctrlPressed)                      {                          annotationEditor.SetSelection(TextEditor.SelectionMode.RightWord' 1' true' false);                            transactionContext.DoTransaction(() =>                                {                                    DeleteTextSelection(annotation);                                }' EditAnnotation);                        }                      else                      {                          transactionContext.DoTransaction(() =>                              {                                  if (annotationEditor.CaretAbsolutePosition != annotationEditor.CaretAnchorPosition)                                      DeleteTextSelection(annotation); // delete all the selected text.                                  else                                  {                                      // get the size of the following cluster.                                      var hitTestMetrics =                                          annotationEditor.TextLayout.HitTestTextPosition(                                              annotationEditor.CaretAbsolutePosition' false);                                      string newText = annotationEditor.RemoveTextAt(annotation.Text'                                                                                     hitTestMetrics.TextPosition'                                                                                     hitTestMetrics.Length);                                      textProperty.SetValue(annotation' newText' null);                                      annotationEditor.SetSelection(TextEditor.SelectionMode.AbsoluteLeading'                                                                    hitTestMetrics.TextPosition' false' false);                                  }                              }' EditAnnotation);                      }                      AdaptedControl.Invalidate();                      break;                  case Keys.Tab:                      InsertChar(annotation' annotationEditor' '\t');                      AdaptedControl.Invalidate();                      break;                  // handle arrow keys                  case Keys.Left:                      annotationEditor.SetSelection(ctrlPressed ? TextEditor.SelectionMode.LeftWord : TextEditor.SelectionMode.Left' 1' shiftPressed' false);                      AdaptedControl.Invalidate();                      break;                  case Keys.Right:                      annotationEditor.SetSelection(ctrlPressed ? TextEditor.SelectionMode.RightWord : TextEditor.SelectionMode.Right' 1' shiftPressed' false);                      AdaptedControl.Invalidate();                      break;                  case Keys.Up: // up a line                      annotationEditor.SetSelection(TextEditor.SelectionMode.Up' 1' shiftPressed' false);                      AdaptedControl.Invalidate();                      break;                  case Keys.Down: // down a line                      annotationEditor.SetSelection(TextEditor.SelectionMode.Down' 1' shiftPressed' false);                      AdaptedControl.Invalidate();                      break;                  case Keys.Home: // beginning of line                      annotationEditor.SetSelection(ctrlPressed ? TextEditor.SelectionMode.First : TextEditor.SelectionMode.Home' 0' shiftPressed' false);                      AdaptedControl.Invalidate();                      break;                  case Keys.End: // end of line                      annotationEditor.SetSelection(ctrlPressed ? TextEditor.SelectionMode.Last : TextEditor.SelectionMode.End' 0' shiftPressed' false);                      AdaptedControl.Invalidate();                      break;                  case Keys.Insert:                      if (ctrlPressed)                          CopyToClipboard(annotation);                      else                          PasteFromClipboard(annotation);                      break;              }
Missing Default,Sce.Atf.Controls.Adaptable,TextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\LabelEditAdapter.cs,ProcessCmdKey,The following switch statement is missing a default case: switch (keyData)                  {                      case Keys.Control | Keys.A:                          SelectAll();                          return true;                        case Keys.Control | Keys.Z:                          Undo();                          return true;                  }
Missing Default,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,SetCursor,The following switch statement is missing a default case: switch (direction)              {                  case Direction.Left:                  case Direction.Right:                      AdaptedControl.Cursor = Cursors.SizeWE;                      break;                  case Direction.Top:                  case Direction.Bottom:                      AdaptedControl.Cursor = Cursors.SizeNS;                      break;                  case Direction.TopLeft:                  case Direction.BottomRight:                      AdaptedControl.Cursor = Cursors.SizeNWSE;                      break;                  case Direction.TopRight:                  case Direction.BottomLeft:                      AdaptedControl.Cursor = Cursors.SizeNESW;                      break;              }
Missing Default,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following switch statement is missing a default case: switch (m_direction)                  {                      case Direction.Left:                          dragDir = new PointF(1' 0);                          break;                      case Direction.Right:                          dragDir = new PointF(-1' 0);                          break;                      case Direction.Top:                          dragDir = new PointF(0' 1);                          break;                      case Direction.Bottom:                          dragDir = new PointF(0' -1);                          break;                      case Direction.TopLeft:                          dragDir = new PointF(.707f' .707f);                          break;                      case Direction.BottomRight:                          dragDir = new PointF(-.707f' -.707f);                          break;                      case Direction.TopRight:                          dragDir = new PointF(-.707f' .707f);                          break;                      case Direction.BottomLeft:                          dragDir = new PointF(.707f' -.707f);                          break;                  }
Missing Default,Sce.Atf.Controls.Adaptable,MouseLayoutManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\MouseLayoutManipulator.cs,GetTransform,The following switch statement is missing a default case: switch (m_direction)              {                  case Direction.Left:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.Y += delta.X * 0.5f;                          currentBounds.Height -= delta.X;                      }                      break;                  case Direction.Right:                      currentBounds.Width += delta.X;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.Y -= delta.X * 0.5f;                          currentBounds.Height += delta.X;                      }                      break;                  case Direction.Top:                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.X += delta.Y * 0.5f;                          currentBounds.Width -= delta.Y;                      }                      break;                  case Direction.Bottom:                      currentBounds.Height += delta.Y;                      if (m_transformAdapter.UniformScale)                      {                          currentBounds.X -= delta.Y * 0.5f;                          currentBounds.Width += delta.Y;                      }                      break;                  case Direction.TopLeft:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      break;                  case Direction.BottomRight:                      currentBounds.Width += delta.X;                      currentBounds.Height += delta.Y;                      break;                  case Direction.TopRight:                      currentBounds.Width += delta.X;                      currentBounds.Y += delta.Y;                      currentBounds.Height -= delta.Y;                      break;                  case Direction.BottomLeft:                      currentBounds.X += delta.X;                      currentBounds.Width -= delta.X;                      currentBounds.Height += delta.Y;                      break;              }
Missing Default,Sce.Atf.Controls.Adaptable.Graphs,LayeringContext,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\Circuit\LayeringContext.cs,GetCheckState,The following switch statement is missing a default case: switch (subCheckState)                  {                      case CheckState.Checked:                          hasCheckedChild = true;                          break;                      case CheckState.Unchecked:                          hasUncheckedChild = true;                          break;                      case CheckState.Indeterminate:                          hasCheckedChild = true;                          hasUncheckedChild = true;                          break;                  }
Missing Default,Sce.Atf.Controls.Adaptable.Graphs,D2dStatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\D2dStatechartRenderer.cs,DrawPseudostate,The following switch statement is missing a default case: switch (state.Type)              {                  case StateType.Start:                                          g.FillEllipse(innerEllipse' m_theme.TextBrush);                      break;                  case StateType.Final:                      g.DrawEllipse(ellipse' m_theme.OutlineBrush' 3.0f);                      g.FillEllipse(innerEllipse' m_theme.TextBrush);                                          break;                  case StateType.ShallowHistory:                      g.DrawText("H"' m_centerText' bounds' m_theme.TextBrush);                      break;                  case StateType.DeepHistory:                                      g.DrawText("H*"' m_centerText' bounds' m_theme.TextBrush);                      break;                  case StateType.Conditional:                                          g.DrawText("C"' m_centerText' bounds' m_theme.TextBrush);                                          break;              }
Missing Default,Sce.Atf.Controls.Adaptable.Graphs,GraphViewCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\GraphViewCommands.cs,CanDoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                  {                      case StandardCommand.ViewZoomIn:                      case StandardCommand.ViewZoomOut:                      case StandardCommand.ViewZoomReset:                          canDo = transformAdapter != null;                          break;                  }
Missing Default,Sce.Atf.Controls.Adaptable.Graphs,GraphViewCommands,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\GraphViewCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                  {                      case StandardCommand.ViewZoomIn:                          ZoomIn();                          break;                        case StandardCommand.ViewZoomOut:                          ZoomOut();                          break;                      case StandardCommand.ViewZoomReset:                          ZoomReset();                          break;                  }
Missing Default,Sce.Atf.Controls.Adaptable.Graphs,StatechartRenderer<TNode;TEdge>,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Adaptable\Graphs\StatechartRenderer.cs,DrawPseudostate,The following switch statement is missing a default case: switch (type)              {                  case StateType.Start:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.Final:                      using (Pen borderPen = new Pen(pen.Color' 3))                      {                          g.DrawEllipse(borderPen' p.X' p.Y' size' size);                      }                      g.FillEllipse(m_theme.TextBrush' c.X - 4' c.Y - 4' 8' 8);                      break;                    case StateType.ShallowHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;                    case StateType.DeepHistory:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("H*"' m_theme.Font' m_theme.TextBrush' c.X - 8' c.Y - 8);                      break;                    case StateType.Conditional:                      g.DrawEllipse(m_theme.OutlinePen' p.X' p.Y' size' size);                      g.DrawString("C"' m_theme.Font' m_theme.TextBrush' c.X - 7' c.Y - 8);                      break;              }
Missing Default,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ClearMarker,The following switch statement is missing a default case: switch (m_eDrawStyle)              {                      //          S=0'S=1'S=2'S=3.....S=100                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97           Hue                      //    ...                      //    L=0                  case eDrawStyle.Hue :                            hsl_start.H = m_hsl.H;    hsl_end.H = m_hsl.H;    //    Hue is constant                      hsl_start.S = (double)start_x/(Width - 4);        //    Because we're drawing horizontal lines' s will not change                      hsl_end.S = (double)end_x/(Width - 4);            //    from line to line                        for ( int i = start_y; i <= end_y; i++ )          //    For each horizontal line:                      {                          hsl_start.L = 1.0 - (double)i/(Height - 4);   //    Brightness (L) WILL change for each horizontal                          hsl_end.L = hsl_start.L;                      //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                                            break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    L=100                      //    L=99                      //    L=98        Drawstyle                      //    L=97        Saturation                      //    ...                      //    L=0                  case eDrawStyle.Saturation :                        hsl_start.S = m_hsl.S;    hsl_end.S = m_hsl.S;       //    Saturation is constant                      hsl_start.L = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' L will                       hsl_end.L = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                      break;                      //          H=0'H=1'H=2'H=3.....H=360                      //    S=100                      //    S=99                      //    S=98        Drawstyle                      //    S=97        Brightness                      //    ...                      //    S=0                  case eDrawStyle.Brightness :                                            hsl_start.L = m_hsl.L;    hsl_end.L = m_hsl.L;       //    Luminance is constant                      hsl_start.S = 1.0 - (double)start_y/(Height - 4);    //    Because we're drawing vertical lines' S will                       hsl_end.S = 1.0 - (double)end_y/(Height - 4);        //    not change from line to line                        for ( int i = start_x; i <= end_x; i++ )             //    For each vertical line:                      {                          hsl_start.H = (double)i/(Width - 4);             //    Hue (H) WILL change for each vertical                          hsl_end.H = hsl_start.H;                         //    line drawn                                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(i + 2'start_y + 1' 1' end_y - start_y + 2)' AdobeColors.HSL_to_RGB(hsl_start)' AdobeColors.HSL_to_RGB(hsl_end)' 90' false);                           g.FillRectangle(br'new Rectangle(i + 2' start_y + 2' 1' end_y - start_y + 1));                       }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Red                      //    ...                      //    G=0                  case eDrawStyle.Red :                                            red = m_rgb.R;                                             //    Red is constant                      int start_b = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b)' Color.FromArgb(red' green' end_b)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                        }                        break;                      //          B=0'B=1'B=2'B=3.....B=100                      //    R=100                      //    R=99                      //    R=98        Drawstyle                      //    R=97          Green                      //    ...                      //    R=0                  case eDrawStyle.Green :                                            green = m_rgb.G;;                                           //    Green is constant                      int start_b2 = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' B                      int end_b2 = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                    //    For each horizontal line:                      {                          red = Round(255 - (255 * (double)i/(Height - 4)));      //    red WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(red' green' start_b2)' Color.FromArgb(red' green' end_b2)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;                      //          R=0'R=1'R=2'R=3.....R=100                      //    G=100                      //    G=99                      //    G=98        Drawstyle                      //    G=97           Blue                      //    ...                      //    G=0                  case eDrawStyle.Blue :                                            blue = m_rgb.B;;                                           //    Blue is constant                      int start_r = Round(255 * (double)start_x/(Width - 4));    //    Because we're drawing horizontal lines' R                      int end_r = Round(255 * (double)end_x/(Width - 4));        //    will not change from line to line                        for ( int i = start_y; i <= end_y; i++ )                   //    For each horizontal line:                      {                          green = Round(255 - (255 * (double)i/(Height - 4)));   //    green WILL change for each horizontal line drawn                            LinearGradientBrush br = new LinearGradientBrush(new Rectangle(start_x + 1'i + 2' end_x - start_x + 1' 1)' Color.FromArgb(start_r' green' blue)' Color.FromArgb(end_r' green' blue)' 0' false);                           g.FillRectangle(br'new Rectangle(start_x + 2'i + 2' end_x - start_x + 1 ' 1));                       }                        break;              }
Missing Default,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Redraw_Control,The following switch statement is missing a default case: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      Draw_Style_Hue();                      break;                  case eDrawStyle.Saturation :                      Draw_Style_Saturation();                      break;                  case eDrawStyle.Brightness :                      Draw_Style_Luminance();                      break;                  case eDrawStyle.Red :                      Draw_Style_Red();                      break;                  case eDrawStyle.Green :                      Draw_Style_Green();                      break;                  case eDrawStyle.Blue :                      Draw_Style_Blue();                      break;              }
Missing Default,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,Reset_Marker,The following switch statement is missing a default case: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_X = Round((Width - 4) * m_hsl.S);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Saturation :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.L));                      break;                  case eDrawStyle.Brightness :                      m_iMarker_X = Round((Width - 4) * m_hsl.H);                      m_iMarker_Y = Round((Height - 4) * (1.0 - m_hsl.S));                      break;                  case eDrawStyle.Red :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;                  case eDrawStyle.Green :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.B/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.R/255));                      break;                  case eDrawStyle.Blue :                      m_iMarker_X = Round((Width - 4) * (double)m_rgb.R/255);                      m_iMarker_Y = Round((Height - 4) * (1.0 - (double)m_rgb.G/255));                      break;              }
Missing Default,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,ResetHSLRGB,The following switch statement is missing a default case: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.S = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.L = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.H = (double)m_iMarker_X/(Width - 4);                      m_hsl.S = 1.0 - (double)m_iMarker_Y/(Height - 4);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' green' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      blue = Round(255 * (double)m_iMarker_X/(Width - 4));                      red = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' m_rgb.G' blue);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      red = Round(255 * (double)m_iMarker_X/(Width - 4));                      green = Round(255 * (1.0 - (double)m_iMarker_Y/(Height - 4)));                      m_rgb = Color.FromArgb(m_rgb.A' red' green' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Missing Default,Sce.Atf.Controls.ColorEditing,ColorBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\ColorBox.cs,GetColor,The following switch statement is missing a default case: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      _hsl.H = m_hsl.H;                      _hsl.S = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Saturation :                      _hsl.S = m_hsl.S;                      _hsl.H = (double)x/(Width - 4);                      _hsl.L = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Brightness :                      _hsl.L = m_hsl.L;                      _hsl.H = (double)x/(Width - 4);                      _hsl.S = 1.0 - (double)y/(Height - 4);                      break;                  case eDrawStyle.Red :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(m_rgb.R' Round(255 * (1.0 - (double)y/(Height - 4)))' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Green :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.G' Round(255 * (double)x/(Width - 4))));                      break;                  case eDrawStyle.Blue :                      _hsl = AdobeColors.RGB_to_HSL(Color.FromArgb(Round(255 * (double)x/(Width - 4))' Round(255 * (1.0 - (double)y/(Height - 4)))' m_rgb.B));                      break;              }
Missing Default,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,DrawContent,The following switch statement is missing a default case: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      Draw_Style_Hue();                      break;                  case eDrawStyle.Saturation :                      Draw_Style_Saturation();                      break;                  case eDrawStyle.Brightness :                      Draw_Style_Luminance();                      break;                  case eDrawStyle.Red :                      Draw_Style_Red();                      break;                  case eDrawStyle.Green :                      Draw_Style_Green();                      break;                  case eDrawStyle.Blue :                      Draw_Style_Blue();                      break;              }
Missing Default,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Redraw_Control,The following switch statement is missing a default case: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      Draw_Style_Hue();                      break;                  case eDrawStyle.Saturation :                      Draw_Style_Saturation();                      break;                  case eDrawStyle.Brightness :                      Draw_Style_Luminance();                      break;                  case eDrawStyle.Red :                      Draw_Style_Red();                      break;                  case eDrawStyle.Green :                      Draw_Style_Green();                      break;                  case eDrawStyle.Blue :                      Draw_Style_Blue();                      break;              }
Missing Default,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,Reset_Slider,The following switch statement is missing a default case: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.H );                      break;                  case eDrawStyle.Saturation :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.S );                      break;                  case eDrawStyle.Brightness :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * m_hsl.L );                      break;                  case eDrawStyle.Red :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.R/255 );                      break;                  case eDrawStyle.Green :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.G/255 );                      break;                  case eDrawStyle.Blue :                      m_iMarker_Start_Y = (Height - 8) - Round( (Height - 8) * (double)m_rgb.B/255 );                      break;              }
Missing Default,Sce.Atf.Controls.ColorEditing,VerticalColorSlider,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ColorPicker\VerticalColorSlider.cs,ResetHSLRGB,The following switch statement is missing a default case: switch (m_eDrawStyle)              {                  case eDrawStyle.Hue :                      m_hsl.H = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Saturation :                      m_hsl.S = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Brightness :                      m_hsl.L = 1.0 - (double)m_iMarker_Start_Y/(Height - 9);                      m_rgb = AdobeColors.HSL_to_RGB(m_hsl);                      break;                  case eDrawStyle.Red :                      m_rgb = Color.FromArgb(m_rgb.A' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.G' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Green :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) )' m_rgb.B);                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;                  case eDrawStyle.Blue :                      m_rgb = Color.FromArgb(m_rgb.A' m_rgb.R' m_rgb.G' 255 - Round( 255 * (double)m_iMarker_Start_Y/(Height - 9) ));                      m_hsl = AdobeColors.RGB_to_HSL(m_rgb);                      break;              }
Missing Default,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,OnKeyPress,The following switch statement is missing a default case: switch (e.KeyChar)              {                  case (char)Keys.Back:                      e.Handled = true;                        if (SelectionLength > 0)                          RemoveSelection();                      else                          PrevChar(RemoveTextBeforeCaret);                      break;                    case (char)Keys.Return:                      e.Handled = true;                        string command = GetTextAtPrompt();                      AppendText(Environment.NewLine);                      SubmitCommand(command);                      break;              }
Missing Default,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,ProcessCmdKey,The following switch statement is missing a default case: switch (keyData)                  {                      case Keys.Control | Keys.Back:                      {                          m_suggestionListBox.Hide();                            PrevWord(RemoveTextBeforeCaret);                          return true;                      }                        case Keys.Delete:                      {                          m_suggestionListBox.Hide();                            if (SelectionLength > 0)                              RemoveSelection();                          else                              NextChar(RemoveTextAfterCaret);                          return true;                      }                        case Keys.Control | Keys.Delete:                      {                          m_suggestionListBox.Hide();                            NextWord(RemoveTextAfterCaret);                          return true;                      }                        case Keys.Control | Keys.End:                      case Keys.Control | Keys.Shift | Keys.End:                      {                          m_suggestionListBox.Hide();                            MoveRight(TextLength - CaretIndex);                          return true;                      }                        case Keys.Control | Keys.Enter:                      {                          m_suggestionListBox.Hide();                            string lastLine = GetCurrentLine();                            // Split line                          InsertTextAtCaret(Environment.NewLine);                          Indent(lastLine);                          break;                      }                        case Keys.Control | Keys.Home:                      case Keys.Control | Keys.Shift | Keys.Home:                      {                          m_suggestionListBox.Hide();                            MoveLeft(CaretOffsetFromPrompt);                          return true;                      }                        case Keys.Control | Keys.Left:                      case Keys.Control | Keys.Shift | Keys.Left:                      {                          m_suggestionListBox.Hide();                            PrevWord(MoveLeft);                          return true;                      }                        case Keys.Control | Keys.Right:                      case Keys.Control | Keys.Shift | Keys.Right:                      {                          m_suggestionListBox.Hide();                            NextWord(MoveRight);                          return true;                      }                        case Keys.Control | Keys.Space:                      {                          Suggest();                          return true;                      }                  }
Missing Default,Sce.Atf.Controls.ConsoleBox,ConsoleTextBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,WndProc,The following switch statement is missing a default case: switch (m.Msg)              {                  case User32.WM_CUT:                      Cut();                      return;                    case User32.WM_COPY:                      Copy();                      return;                    case User32.WM_PASTE:                      string text = Clipboard.GetText();                      InsertTextAtCaret(text);                      return;                    case User32.WM_SETTEXT:                      if (!IsCaretAtWritablePosition)                          MoveCaretToEnd();                      break;                    case User32.WM_CLEAR:                      return;              }
Missing Default,Sce.Atf.Controls.ConsoleBox,SuggestionListBox,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\ConsoleBox\ConsoleTextBox.cs,OnKeyDown,The following switch statement is missing a default case: switch (e.KeyData)                  {                      case Keys.Back:                          RemoveText(1);                          Suggest(); // TODO: Hide if there was nothing to remove                          break;                        case Keys.Down:                          // Wrap selection around to first                          if (SelectedIndex == Items.Count - 1)                          {                              SelectedIndex = 0;                              e.Handled = true;                          }                          break;                        case Keys.Up:                          // Wrap selection around to last                          if (SelectedIndex == 0)                          {                              SelectedIndex = Items.Count - 1;                              e.Handled = true;                          }                          break;                        case Keys.Enter:                      case Keys.Tab:                          Complete();                          break;                        case Keys.Escape:                      case Keys.Left:                      case Keys.Right:                          Hide();                          break;                  }
Missing Default,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,Frame,The following switch statement is missing a default case: switch(m_lockorg)              {                  case OriginLockMode.Free:                      {                          Zoom = new Vec2F(w / rect.Width' h / rect.Height);                          Vec2F center = new Vec2F(rect.X + rect.Width / 2' rect.Y + rect.Height / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          break;                      }                  case OriginLockMode.Center:                      {                          float absleft = Math.Abs(rect.Left);                          float absright = Math.Abs(rect.Right);                          float fx = Math.Max(absleft' absright);                          float abstop = Math.Abs(rect.Top);                          float absbottom = Math.Abs(rect.Bottom);                          float fy = Math.Max(abstop' absbottom);                          Zoom = new Vec2F(hw / fx' hh / fy);                          break;                      }                  case OriginLockMode.Left:                      {                                                  if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              Zoom = new Vec2F(w / fx' h / rect.Height);                              Vec2F center = new Vec2F(left + fx / 2' rect.Y + rect.Height / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftTop:                        if (rect.Right > 0 && rect.Bottom > 0)                      {                          float left = Math.Max(0' rect.Left);                          float fx = (left > 0) ? rect.Width : rect.Right;                            float top = Math.Max(0' rect.Top);                          float fy = (top > 0) ? rect.Height : rect.Bottom;                          Zoom = new Vec2F(w / fx' h / fy);                          Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                          Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                      }                                   break;                  case OriginLockMode.LeftBottom:                      {                          if (rect.Right > 0 && rect.Bottom > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                                float top = Math.Max(0' rect.Top);                              float fy = (top > 0) ? rect.Height : rect.Bottom;                              Zoom = new Vec2F(w / fx' h / fy);                              Vec2F center = new Vec2F(left + fx / 2' top + fy / 2);                              Pan = new Vec2F(hw - center.X * Zoom.X' hh + center.Y * Zoom.Y);                          }                                                  break;                      }                  case OriginLockMode.LeftMiddle:                      {                          if (rect.Right > 0)                          {                              float left = Math.Max(0' rect.Left);                              float fx = (left > 0) ? rect.Width : rect.Right;                              float abstop = Math.Abs(rect.Top);                              float absbottom = Math.Abs(rect.Bottom);                              float fy = Math.Max(abstop' absbottom);                              Zoom = new Vec2F(w / fx' hh / fy);                              Vec2F center = new Vec2F(left + fx / 2' 0);                              Pan = new Vec2F(hw - center.X * Zoom.X' Pan.Y);                          }                          break;                      }              }
Missing Default,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,PanToOrigin,The following switch statement is missing a default case: switch(m_lockorg)              {                  case OriginLockMode.Free:                      Pan_d = new PointD(ClientSize.Width / 2' ClientSize.Height / 2);                      break;                  case OriginLockMode.LeftTop:                      Pan_d = new PointD(1' 1);                      break;                  case OriginLockMode.Left:                                      case OriginLockMode.LeftMiddle:                      Pan_d = new PointD(1' ClientSize.Height / 2);                      break;                  case OriginLockMode.LeftBottom:                      Pan_d = new PointD(1' ClientSize.Height);                      break;                                  }
Missing Default,Sce.Atf.Controls.CurveEditing,Cartesian2dCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\Cartesian2dCanvas.cs,UpdatePan,The following switch statement is missing a default case: switch (m_lockorg)              {                  case OriginLockMode.Free:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = float.MaxValue;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.Center:                      m_minOffsetX = w / 2;                                          m_maxOffsetX = w / 2;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.Left:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = float.MinValue;                                          m_maxOffsetY = float.MaxValue;                      break;                  case OriginLockMode.LeftTop:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = -float.MaxValue;                      m_maxOffsetY = 1;                      break;                  case OriginLockMode.LeftMiddle:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h / 2;                      m_maxOffsetY = h / 2;                      break;                  case OriginLockMode.LeftBottom:                      m_minOffsetX = float.MinValue;                      m_maxOffsetX = 1;                      m_minOffsetY = h - 1;                      m_maxOffsetY = float.MaxValue;                      break;              }
Missing Default,Sce.Atf.Controls.CurveEditing,CurveCanvas,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveCanvas.cs,ValidateCurveLimits,The following switch statement is missing a default case: switch (side)              {                  case CurveLimitSides.Left:                      {                          IControlPoint firstPt = curve.ControlPoints.Count > 0 ? curve.ControlPoints[0] : null;                          float left = firstPt != null ? firstPt.X : curve.MaxX - CurveUtils.Epsilone;                          if (curve.MinX > left)                              curve.MinX = left;                      }                      break;                  case CurveLimitSides.Right:                      {                          IControlPoint lastPt = curve.ControlPoints.Count > 0 ? curve.ControlPoints[curve.ControlPoints.Count-1] : null;                          float right = lastPt != null ? lastPt.X : curve.MinX + CurveUtils.Epsilone;                          if (curve.MaxX < right)                              curve.MaxX = right;                      }                      break;                  case CurveLimitSides.Top:                      {                          float top = curve.MinY + CurveUtils.Epsilone;                          foreach (var cpt in curve.ControlPoints)                              if (cpt.Y > top) top = cpt.Y;                            if (curve.MaxY < top)                              curve.MaxY = top;                      }                      break;                  case CurveLimitSides.Bottom:                      {                          float bottom = curve.MaxY - CurveUtils.Epsilone;                          foreach (var cpt in curve.ControlPoints)                              if (cpt.Y < bottom) bottom = cpt.Y;                          if (curve.MinY > bottom)                              curve.MinY = bottom;                      }                      break;              }
Missing Default,Sce.Atf.Controls.CurveEditing,CurveEditingControl,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\CurveEditing\CurveEditingControl.cs,IsImplemented,The following switch statement is missing a default case: switch (tanType)              {                  case CurveTangentTypes.Linear:                  case CurveTangentTypes.Spline:                  case CurveTangentTypes.Flat:                  case CurveTangentTypes.Clamped:                  case CurveTangentTypes.Stepped:                      result = true;                      break;              }
Missing Default,Sce.Atf.Controls.PropertyEditing,ColumnHeaders,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\PropertyEditing\GridView.cs,OnMouseDown,The following switch statement is missing a default case: switch (hit.Type)                  {                      case HitType.ColumnHeader:                            // TODO: Why does hitting the column header select a property?                          m_gridView.SelectedProperty = hit.Property;                            s_columnHeaderMouseDown = true;                          s_columnHeaderMouseDownProperty = hit.Property;                          break;                        case HitType.ColumnHeaderRightEdge:                          m_gridView.SelectedProperty = hit.Property;                            m_gridView.Select();                            if (!hit.Property.DisableResize)                          {                              s_sizing = true;                              s_sizingProperty = hit.Property;                              s_sizingOriginalWidth = m_gridView.GetColumnInfo(s_sizingProperty).Width;                              Cursor = Cursors.VSplit;                          }                          break;                        case HitType.CategoryExpander:                          hit.Category.Expanded = !hit.Category.Expanded;                          m_gridView.Invalidate();                           break;                  }
Missing Default,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following switch statement is missing a default case: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                  case DrawMode.Collapsed:                      GroupBrush.StartPoint = new PointF(0' bounds.Top);                      GroupBrush.EndPoint = new PointF(0' bounds.Bottom);                      c.Graphics.FillRectangle(bounds' GroupBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' GhostGroupBrush);                      break;              }
Missing Default,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following switch statement is missing a default case: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.DrawRectangle(bounds' TrackBrush);                      break;                  case DrawMode.Collapsed:                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' GhostTrackBrush);                      break;              }
Missing Default,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following switch statement is missing a default case: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                        float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                      c.Graphics.FillRectangle(                          realPart'                          new PointF(0' realPart.Top)'new PointF(0' realPart.Bottom)'                          color' endColor);                        if (hasTail)                      {                          endColor = ColorUtil.FromAhsb(64' h' s * 0.3f' b);                          RectangleF tailPart = new RectangleF(                              realPart.Right'                              bounds.Y'                              bounds.Width - realPart.Width'                              bounds.Height);                          c.Graphics.FillRectangle(tailPart' endColor);                      }                        if (color.R + color.G + color.B < 3 * 160)                          TextBrush.Color = SystemColors.HighlightText;                      else                          TextBrush.Color = SystemColors.WindowText;                        c.Graphics.DrawText(interval.Name' c.TextFormat' bounds.Location' TextBrush);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(                              new RectangleF(bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2)'                              SelectedBrush' 3.0f);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillRectangle(bounds' Color.FromArgb(128' color));                      bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                      float x = showRight ? bounds.Right : bounds.Left;                      c.Graphics.DrawText(                          GetXPositionString(x' c)'                          c.TextFormat'                          new PointF(x' bounds.Bottom - c.FontHeight)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(bounds' InvalidBrush);                      break;              }
Missing Default,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following switch statement is missing a default case: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.FillEllipse(bounds' color);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          D2dAntialiasMode originalAntiAliasMode = c.Graphics.AntialiasMode;                          c.Graphics.AntialiasMode = D2dAntialiasMode.PerPrimitive;                          c.Graphics.DrawEllipse(                              new D2dEllipse(                                  new PointF(bounds.X + bounds.Width * 0.5f' bounds.Y + bounds.Height * 0.5f)'                                  bounds.Width * 0.5f' bounds.Height * 0.5f)'                              SelectedBrush' 3.0f);                          c.Graphics.AntialiasMode = originalAntiAliasMode;                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(bounds' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.FillEllipse(bounds' Color.FromArgb(128' color));                      c.Graphics.DrawText(                          GetXPositionString(bounds.Left + KeySize * 0.5f' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(bounds' InvalidBrush);                      break;              }
Missing Default,Sce.Atf.Controls.Timelines.Direct2D,D2dDefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dDefaultTimelineRenderer.cs,Draw,The following switch statement is missing a default case: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.DrawLine(middle' bounds.Top' middle' bounds.Bottom' color' 1.0f' null);                        bool selected = (drawMode & DrawMode.Selected) != 0;                      Color handleColor = selected ? Color.Tomato : color;                      RectangleF handleRect =                          new RectangleF(bounds.X' bounds.Y' bounds.Width' bounds.Width);                      c.Graphics.FillRectangle(handleRect' handleColor);                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(                          new RectangleF(middle' bounds.Y' 1' bounds.Height)' CollapsedBrush);                      break;                  case DrawMode.Ghost:                      c.Graphics.DrawLine(middle' bounds.Top' middle' bounds.Bottom' Color.FromArgb(128' color)' 1.0f' null);                      c.Graphics.DrawText(                          GetXPositionString(middle' c)'                          c.TextFormat'                          new PointF(bounds.Right + 16' bounds.Y)'                          TextBrush);                      break;                  case DrawMode.Invalid:                      c.Graphics.DrawRectangle(bounds' Color.DimGray' 1.0f' null);                      break;              }
Missing Default,Sce.Atf.Controls.Timelines.Direct2D,D2dMoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Direct2D\D2dMoveManipulator.cs,owner_MouseDownPicked,The following switch statement is missing a default case: switch (e.HitRecord.Type)                      {                          case HitType.GroupMove:                          case HitType.TrackMove:                          case HitType.Interval:                          case HitType.Key:                          case HitType.Marker:                              m_mouseMoveHitRecord = hitRecord;                              break;                      }
Missing Default,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following switch statement is missing a default case: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                  case DrawMode.Collapsed:                      using (Brush brush = new LinearGradientBrush(                          bounds' Color.LightGoldenrodYellow' Color.Khaki' LinearGradientMode.Vertical))                      {                          c.Graphics.FillRectangle(brush' bounds);                      }                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' Color.Gray)))                      {                          c.Graphics.FillRectangle(brush' bounds);                      }                      break;              }
Missing Default,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following switch statement is missing a default case: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      c.Graphics.DrawRectangle(Pens.LightGray' bounds.X' bounds.Y' bounds.Width' bounds.Height);                      break;                  case DrawMode.Collapsed:                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' Color.Gray)))                      {                          c.Graphics.FillRectangle(brush' bounds);                      }                      break;              }
Missing Default,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following switch statement is missing a default case: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      RectangleF realPart = new RectangleF(                          bounds.X'                          bounds.Y'                          GdiUtil.TransformVector(c.Transform' interval.Length)'                          bounds.Height);                      bool hasTail = realPart.Width < MinimumDrawnIntervalLength;                                            float h = color.GetHue();                      float s = color.GetSaturation();                      float b = color.GetBrightness();                      Color endColor = ColorUtil.FromAhsb(color.A' h' s * 0.3f' b);                        using (LinearGradientBrush intervalBrush =                          new LinearGradientBrush(realPart' color' endColor' LinearGradientMode.Vertical))                      {                          c.Graphics.FillRectangle(intervalBrush' realPart);                          if (hasTail)                          {                              Color[] colors = intervalBrush.LinearColors;                              colors[0] = Color.FromArgb(64' colors[0]);                              colors[1] = Color.FromArgb(64' colors[1]);                              intervalBrush.LinearColors = colors;                              RectangleF tailPart = new RectangleF(                                  realPart.Right'                                  bounds.Y'                                  bounds.Width - realPart.Width'                                  bounds.Height);                              c.Graphics.FillRectangle(intervalBrush' tailPart);                          }                      }                        Brush textBrush = SystemBrushes.WindowText;                      if ((int)color.R + (int)color.G + (int)color.B < 3 * 160)                          textBrush = SystemBrushes.HighlightText;                      c.Graphics.DrawString(interval.Name' c.Font' textBrush' bounds.Location);                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawRectangle(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillRectangle(brush' bounds);                          bool showRight = (drawMode & DrawMode.ResizeRight) != 0;                          float x = showRight ? bounds.Right : bounds.Left;                          c.Graphics.DrawString(GetXPositionString(x' c)' c.Font' SystemBrushes.WindowText' x' bounds.Bottom - c.FontHeight);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillRectangle(m_invalidBrush' bounds);                      break;              }
Missing Default,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following switch statement is missing a default case: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      using (SolidBrush brush = new SolidBrush(color))                      {                          c.Graphics.FillEllipse(brush' bounds);                      }                        if ((drawMode & DrawMode.Selected) != 0)                      {                          c.Graphics.DrawEllipse(m_selectedPen' bounds.X + 1' bounds.Y + 1' bounds.Width - 2' bounds.Height - 2);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillEllipse(m_collapsedBrush' bounds);                      break;                  case DrawMode.Ghost:                      using (Brush brush = new SolidBrush(Color.FromArgb(128' color)))                      {                          c.Graphics.FillEllipse(brush' bounds);                          c.Graphics.DrawString(GetXPositionString(bounds.Left + m_keySize / 2' c)' c.Font' SystemBrushes.WindowText' bounds.Right + 16' bounds.Y);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.FillEllipse(m_invalidBrush' bounds);                      break;              }
Missing Default,Sce.Atf.Controls.Timelines,DefaultTimelineRenderer,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\DefaultTimelineRenderer.cs,Draw,The following switch statement is missing a default case: switch (drawMode & DrawMode.States)              {                  case DrawMode.Normal:                      using (Pen pen = new Pen(color))                      {                          c.Graphics.DrawLine(pen' middle' bounds.Top' middle' bounds.Bottom);                      }                        bool selected = (drawMode & DrawMode.Selected) != 0;                      Color handleColor = selected ? Color.Tomato : color;                      using (Brush brush = new SolidBrush(handleColor))                      {                          RectangleF handleRect =                              new RectangleF(bounds.X' bounds.Y' bounds.Width' bounds.Width);                          c.Graphics.FillRectangle(brush' handleRect);                      }                      break;                  case DrawMode.Collapsed:                      c.Graphics.FillRectangle(m_collapsedBrush' middle' bounds.Y' 1' bounds.Height);                      break;                  case DrawMode.Ghost:                      using (Pen pen = new Pen(Color.FromArgb(128' color)))                      {                          c.Graphics.DrawLine(pen' middle' bounds.Top' middle' bounds.Bottom);                          c.Graphics.DrawString(GetXPositionString(middle' c)' c.Font' SystemBrushes.WindowText' bounds.Right + 16' bounds.Y);                      }                      break;                  case DrawMode.Invalid:                      c.Graphics.DrawRectangle(Pens.DimGray' bounds.X' bounds.Y' bounds.Width' bounds.Height);                      break;              }
Missing Default,Sce.Atf.Controls.Timelines,MoveManipulator,D:\research\architectureSmells\repos1\SonyWWS_LevelEditor\ATF\Framework\Atf.Gui.WinForms\Controls\Timelines\Gdi\MoveManipulator.cs,owner_MouseDownPicked,The following switch statement is missing a default case: switch (e.HitRecord.Type)                      {                          case HitType.GroupMove:                          case HitType.TrackMove:                          case HitType.Interval:                          case HitType.Key:                          case HitType.Marker:                              m_mouseMoveHitRecord = hitRecord;                              break;                      }
