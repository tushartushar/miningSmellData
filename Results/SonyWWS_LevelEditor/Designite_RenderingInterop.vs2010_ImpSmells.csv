Implementation smell,Namespace,Class,File,Method,Description
Long Method,RenderingInterop,RenderCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Commands\RenderCommands.cs,Initialize,The method has 124 lines of code.
Long Method,RenderingInterop,ExtensionManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ExtensionManipulator.cs,Render,The method has 105 lines of code.
Long Method,RenderingInterop,TranslateManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslateManipulator.cs,OnDragging,The method has 123 lines of code.
Long Method,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Pick,The method has 102 lines of code.
Long Method,RenderingInterop,NativeGameEditor,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeGameEditor.cs,Initialize,The method has 122 lines of code.
Long Method,RenderingInterop,NativeObjectAdapter,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\DomNodeAdapters\NativeObjectAdapter.cs,UpdateNativeProperty,The method has 152 lines of code.
Long Method,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The method has 115 lines of code.
Long Method,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateSphere,The method has 100 lines of code.
Long Method,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateCylinder,The method has 128 lines of code.
Complex Method,RenderingInterop,ExtensionManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ExtensionManipulator.cs,Pick,Cyclomatic complexity of the method is 8
Complex Method,RenderingInterop,ExtensionManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ExtensionManipulator.cs,OnBeginDrag,Cyclomatic complexity of the method is 11
Complex Method,RenderingInterop,RotateManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\RotateManipulator.cs,OnBeginDrag,Cyclomatic complexity of the method is 9
Complex Method,RenderingInterop,ScaleManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ScaleManipulator.cs,OnBeginDrag,Cyclomatic complexity of the method is 9
Complex Method,RenderingInterop,TranslateManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslateManipulator.cs,OnBeginDrag,Cyclomatic complexity of the method is 10
Complex Method,RenderingInterop,TranslateManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslateManipulator.cs,OnDragging,Cyclomatic complexity of the method is 11
Complex Method,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Pick,Cyclomatic complexity of the method is 10
Complex Method,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,Pick,Cyclomatic complexity of the method is 9
Complex Method,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,OnDragOver,Cyclomatic complexity of the method is 8
Complex Method,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,RenderProperties,Cyclomatic complexity of the method is 9
Complex Method,RenderingInterop,NativeGameEditor,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeGameEditor.cs,Initialize,Cyclomatic complexity of the method is 14
Complex Method,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateSphere,Cyclomatic complexity of the method is 12
Complex Method,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateCylinder,Cyclomatic complexity of the method is 16
Long Parameter List,RenderingInterop,RotateManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\RotateManipulator.cs,CalcAngle,The method has 5 parameters. Parameters: origin' plane' ray0' ray1' snapAngle
Long Parameter List,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Pick,The method has 5 parameters. Parameters: vc' world' view' rayL' rayV
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,ObjectInsertChild,The method has 5 parameters. Parameters: typeId' listId' parentId' childId' index
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,SetObjectProperty,The method has 5 parameters. Parameters: typeid' instanceId' propId' data' size
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,GetObjectProperty,The method has 5 parameters. Parameters: typeId' propId' instanceId' data' size
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,RayPick,The method has 5 parameters. Parameters: viewxform' projxfrom' rayW' skipSelected' hit
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,DrawPrimitive,The method has 6 parameters. Parameters: pt' vb' StartVertex' vertexCount' color' xform
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,DrawIndexedPrimitive,The method has 8 parameters. Parameters: pt' vb' ib' startIndex' indexCount' startVertex' color' xform
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,DrawText2D,The method has 5 parameters. Parameters: text' fontId' x' y' color
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,NativeSetObjectProperty,The method has 5 parameters. Parameters: typeId' propId' instanceId' data' size
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,NativeGetObjectProperty,The method has 5 parameters. Parameters: typeId' propId' instanceId' data' size
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,NativeObjectAddChild,The method has 5 parameters. Parameters: typeid' listId' parentId' childId' index
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,NativeRayPick,The method has 6 parameters. Parameters: viewxform' projxfrom' rayW' skipSelected' instanceIds' count
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,NativeFrustumPick,The method has 6 parameters. Parameters: renderSurface' viewxform' projxfrom' rect' instanceIds' count
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,NativeDrawPrimitive,The method has 6 parameters. Parameters: pt' vb' StartVertex' vertexCount' color' xform
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,NativeDrawIndexedPrimitive,The method has 8 parameters. Parameters: pt' vb' ib' startIndex' indexCount' startVertex' color' xform
Long Parameter List,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,NativeDrawText2D,The method has 5 parameters. Parameters: fontId' text' x' y' color
Long Parameter List,RenderingInterop,VertexPN,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\Structs.cs,VertexPN,The method has 6 parameters. Parameters: x' y' z' nx' ny' nz
Long Parameter List,RenderingInterop,VertexPNT,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\Structs.cs,VertexPNT,The method has 8 parameters. Parameters: x' y' z' nx' ny' nz' u' v
Long Parameter List,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateSphere,The method has 7 parameters. Parameters: radius' slices' stacks' pos' normal' tex' indices
Long Parameter List,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateCone,The method has 7 parameters. Parameters: rad' height' slices' stacks' pos' normal' indices
Long Parameter List,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateCylinder,The method has 8 parameters. Parameters: rad1' rad2' height' slices' stacks' pos' normal' indices
Long Parameter List,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateTorus,The method has 8 parameters. Parameters: innerRadius' outerRadius' rings' sides' pos' nor' tex' indices
Long Statement,RenderingInterop,RenderCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Commands\RenderCommands.cs,Initialize,The length of the statement  "            ControlInfo controlInfo = new ControlInfo("Render settings"' "per view port render settings"' StandardControlGroup.Hidden); " is 123.
Long Statement,RenderingInterop,ExtensionManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ExtensionManipulator.cs,Render,The length of the statement  "            bool negativeAxis = m_hitRegion == HitRegion.NegXAxis || m_hitRegion == HitRegion.NegYAxis || m_hitRegion == HitRegion.NegZAxis; " is 128.
Long Statement,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Render,The length of the statement  "            Color xcolor = (m_hitRegion == HitRegion.XAxis || m_hitRegion == HitRegion.XYSquare || m_hitRegion == HitRegion.XZSquare) ? Color.Gold : Manipulator.XAxisColor; " is 160.
Long Statement,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Render,The length of the statement  "            Color ycolor = (m_hitRegion == HitRegion.YAxis || m_hitRegion == HitRegion.XYSquare || m_hitRegion == HitRegion.YZSquare) ? Color.Gold : Manipulator.YAxisColor; " is 160.
Long Statement,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Render,The length of the statement  "            Color Zcolor = (m_hitRegion == HitRegion.ZAxis || m_hitRegion == HitRegion.XZSquare || m_hitRegion == HitRegion.YZSquare) ? Color.Gold : Manipulator.ZAxisColor; " is 160.
Long Statement,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,Init,The length of the statement  "                                throw new ArgumentException(string.Format("Can't find native function: {0}(...) in {1}"' dllimport.EntryPoint' dllName));                             " is 121.
Long Statement,RenderingInterop,ThumbnailResolver,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ThumbnailResolver.cs,Init,The length of the statement  "                m_renderState.RenderFlag = GlobalRenderFlags.Solid | GlobalRenderFlags.Textured | GlobalRenderFlags.Lit | GlobalRenderFlags.Shadows; " is 132.
Complex Conditional,RenderingInterop,RotateManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\RotateManipulator.cs,Pick,The conditional expression  "xdelta < tolerance && xdelta < ydelta && xdelta < zdelta                  && xdelta < lookdelta"  is complex.
Complex Conditional,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Pick,The conditional expression  "p.X > p1.X && p.X < p2.X                      && p.Y > p1.Y && p.Y < p4.Y"  is complex.
Complex Conditional,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Pick,The conditional expression  "p.X > p1.X && p.X < p2.X                      && p.Z > p1.Z && p.Z < p4.Z"  is complex.
Complex Conditional,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Pick,The conditional expression  "p.Z > p1.Z && p.Z < p2.Z                      && p.Y > p1.Z && p.Y < p4.Y"  is complex.
Complex Conditional,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,OnSizeChanged,The conditional expression  "!GameEngine.IsInError && SurfaceId != 0 && sz.Width > 0 && sz.Height > 0"  is complex.
Complex Conditional,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,RenderProperties,The conditional expression  "trans == null || bnode == null || bnode.BoundingBox.IsEmpty || obj.Is<IGameObjectFolder>()"  is complex.
Complex Conditional,RenderingInterop,NativeViewControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ResourcePreview.cs,OnSizeChanged,The conditional expression  "!GameEngine.IsInError && SurfaceId != 0 && sz.Width > 0 && sz.Height > 0"  is complex.
Complex Conditional,RenderingInterop,NativeViewControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ResourcePreview.cs,Render,The conditional expression  "GameEngine.IsInError                      || SurfaceId == 0                      || Visible == false                      || Width == 0                      || Height == 0                      || Game == null"  is complex.
Magic Number,RenderingInterop,GridRenderer,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\DomNodeAdapters\GridRenderer.cs,CreateVertices,The following statement contains a magic number: int numLines = (m_subDiv + 1) * 2;
Magic Number,RenderingInterop,GridRenderer,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\DomNodeAdapters\GridRenderer.cs,CreateVertices,The following statement contains a magic number: int numVerts = numLines * 2;
Magic Number,RenderingInterop,GridRenderer,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\DomNodeAdapters\GridRenderer.cs,CreateVertices,The following statement contains a magic number: for (int i = 0; i <= m_subDiv; i++)              {                  m_vertices[index] = new Vec3F(s' 0' corner);                  m_vertices[index + 1] = new Vec3F(s' 0' -corner);                    index += 2;                  s += step;              }
Magic Number,RenderingInterop,GridRenderer,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\DomNodeAdapters\GridRenderer.cs,CreateVertices,The following statement contains a magic number: for (int i = 0; i <= m_subDiv; i++)              {                  m_vertices[index] = new Vec3F(corner' 0' s);                  m_vertices[index + 1] = new Vec3F(-corner' 0' s);                    index += 2;                  s += step;              }
Magic Number,RenderingInterop,ExtensionManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ExtensionManipulator.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(s / 2' 0' 0);
Magic Number,RenderingInterop,ExtensionManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ExtensionManipulator.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(-s / 2' 0' 0);
Magic Number,RenderingInterop,ExtensionManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ExtensionManipulator.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(0' s / 2' 0);
Magic Number,RenderingInterop,ExtensionManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ExtensionManipulator.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(0' -s / 2' 0);
Magic Number,RenderingInterop,ExtensionManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ExtensionManipulator.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(0' 0' s / 2);
Magic Number,RenderingInterop,ExtensionManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ExtensionManipulator.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(0' 0' -s / 2);
Magic Number,RenderingInterop,ExtensionManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ExtensionManipulator.cs,Render,The following statement contains a magic number: float handleWidth = handle.X/2;
Magic Number,RenderingInterop,RotateManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\RotateManipulator.cs,Pick,The following statement contains a magic number: float RingDiameter = 2 * AxisLength;
Magic Number,RenderingInterop,RotateManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\RotateManipulator.cs,Render,The following statement contains a magic number: float RingDiameter = 2 * AxisLength;
Magic Number,RenderingInterop,RotateManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\RotateManipulator.cs,CalcAngle,The following statement contains a magic number: const float twoPi = (float)(2.0 * Math.PI);
Magic Number,RenderingInterop,ScaleManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ScaleManipulator.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(s / 2' 0' 0);
Magic Number,RenderingInterop,ScaleManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ScaleManipulator.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(0' s / 2' 0);
Magic Number,RenderingInterop,ScaleManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ScaleManipulator.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(0' 0' s / 2);
Magic Number,RenderingInterop,ScaleManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\ScaleManipulator.cs,Render,The following statement contains a magic number: float handleWidth = handle.X / 2;
Magic Number,RenderingInterop,TranslateManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslateManipulator.cs,OnDragging,The following statement contains a magic number: if (snapToGeom)              {                  Matrix4F view = vc.Camera.ViewMatrix;                  Matrix4F vp = view * proj;                  // create ray in world space.                  Ray3F rayW = vc.GetRay(scrPt' vp);                    Vec3F manipPos = HitMatrix.Translation;                  Vec3F manipMove;                  if (hitAxis)                  {                      //Make rayw to point toward moving axis and starting                       // from manipulator’s world position.                      rayW.Direction = Vec3F.Normalize(translate);                      rayW.Origin = manipPos;                                          manipMove = Vec3F.ZeroVector;                      m_cancelDrag = true; //stop further snap-to's                     }                  else                  {                      manipMove = rayW.ProjectPoint(manipPos) - manipPos;                                                         }                    for (int i = 0; i < NodeList.Count; i++)                  {                      ITransformable node = NodeList[i];                      Vec3F snapOffset = TransformUtils.CalcSnapFromOffset(node' snapSettings.SnapFrom);                      Path<DomNode> path = new Path<DomNode>(Adapters.Cast<DomNode>(node).GetPath());                      Matrix4F parentLocalToWorld = TransformUtils.CalcPathTransform(path' path.Count - 2);                      Vec3F orgPosW;                      parentLocalToWorld.Transform(m_originalValues[i]' out orgPosW);                        Matrix4F parentWorldToLocal = new Matrix4F();                      parentWorldToLocal.Invert(parentLocalToWorld);                        rayW.MoveToIncludePoint(orgPosW + snapOffset + manipMove);                                            HitRecord[] hits = GameEngine.RayPick(view' proj' rayW' true);                      bool cansnap = false;                      HitRecord target = new HitRecord();                      if (hits.Length > 0)                      {                          // find hit record.                          foreach (var hit in hits)                          {                              if (m_snapFilter.CanSnapTo(node' GameEngine.GetAdapterFromId(hit.instanceId)))                              {                                  target = hit;                                  cansnap = true;                                  break;                              }                          }                      }                        if (cansnap)                      {                          Vec3F pos;                          if (target.hasNearestVert && snapSettings.SnapVertex)                          {                              pos = target.nearestVertex;                          }                          else                          {                              pos = target.hitPt;                          }                            pos -= snapOffset;                          parentWorldToLocal.Transform(ref pos);                          Vec3F diff = pos - node.Transform.Translation;                          node.Translation += diff;                          bool rotateOnSnap = snapSettings.RotateOnSnap                                             && target.hasNormal                                             && (node.TransformationType & TransformationTypes.Rotation) != 0;                          if (rotateOnSnap)                          {                              Vec3F localSurfaceNormal;                              parentWorldToLocal.TransformNormal(target.normal' out localSurfaceNormal);                              node.Rotation = TransformUtils.RotateToVector(                                   m_originalRotations[i]'                                   localSurfaceNormal'                                   AxisSystemType.YIsUp);                          }                      }                  }                              }                         else              {                  IGrid grid = DesignView.Context.Cast<IGame>().Grid;                  bool snapToGrid = Control.ModifierKeys == m_snapGridKey                                   && grid.Visible                                   && vc.Camera.ViewType == ViewTypes.Perspective;                  float gridHeight = grid.Height;                  // translate.                  for (int i = 0; i < NodeList.Count; i++)                  {                      ITransformable node = NodeList[i];                      Path<DomNode> path = new Path<DomNode>(Adapters.Cast<DomNode>(node).GetPath());                      Matrix4F parentLocalToWorld = TransformUtils.CalcPathTransform(path' path.Count - 2);                      Matrix4F parentWorldToLocal = new Matrix4F();                      parentWorldToLocal.Invert(parentLocalToWorld);                      Vec3F localTranslation;                      parentWorldToLocal.TransformVector(translate' out localTranslation);                      Vec3F trans = m_originalValues[i] + localTranslation;                                           if(snapToGrid)                      {                                              if(grid.Snap)                              trans = grid.SnapPoint(trans);                          else                              trans.Y = gridHeight;                                          }                        node.Translation = trans;                  }                              }
Magic Number,RenderingInterop,TranslateManipulator,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslateManipulator.cs,OnDragging,The following statement contains a magic number: if (snapToGeom)              {                  Matrix4F view = vc.Camera.ViewMatrix;                  Matrix4F vp = view * proj;                  // create ray in world space.                  Ray3F rayW = vc.GetRay(scrPt' vp);                    Vec3F manipPos = HitMatrix.Translation;                  Vec3F manipMove;                  if (hitAxis)                  {                      //Make rayw to point toward moving axis and starting                       // from manipulator’s world position.                      rayW.Direction = Vec3F.Normalize(translate);                      rayW.Origin = manipPos;                                          manipMove = Vec3F.ZeroVector;                      m_cancelDrag = true; //stop further snap-to's                     }                  else                  {                      manipMove = rayW.ProjectPoint(manipPos) - manipPos;                                                         }                    for (int i = 0; i < NodeList.Count; i++)                  {                      ITransformable node = NodeList[i];                      Vec3F snapOffset = TransformUtils.CalcSnapFromOffset(node' snapSettings.SnapFrom);                      Path<DomNode> path = new Path<DomNode>(Adapters.Cast<DomNode>(node).GetPath());                      Matrix4F parentLocalToWorld = TransformUtils.CalcPathTransform(path' path.Count - 2);                      Vec3F orgPosW;                      parentLocalToWorld.Transform(m_originalValues[i]' out orgPosW);                        Matrix4F parentWorldToLocal = new Matrix4F();                      parentWorldToLocal.Invert(parentLocalToWorld);                        rayW.MoveToIncludePoint(orgPosW + snapOffset + manipMove);                                            HitRecord[] hits = GameEngine.RayPick(view' proj' rayW' true);                      bool cansnap = false;                      HitRecord target = new HitRecord();                      if (hits.Length > 0)                      {                          // find hit record.                          foreach (var hit in hits)                          {                              if (m_snapFilter.CanSnapTo(node' GameEngine.GetAdapterFromId(hit.instanceId)))                              {                                  target = hit;                                  cansnap = true;                                  break;                              }                          }                      }                        if (cansnap)                      {                          Vec3F pos;                          if (target.hasNearestVert && snapSettings.SnapVertex)                          {                              pos = target.nearestVertex;                          }                          else                          {                              pos = target.hitPt;                          }                            pos -= snapOffset;                          parentWorldToLocal.Transform(ref pos);                          Vec3F diff = pos - node.Transform.Translation;                          node.Translation += diff;                          bool rotateOnSnap = snapSettings.RotateOnSnap                                             && target.hasNormal                                             && (node.TransformationType & TransformationTypes.Rotation) != 0;                          if (rotateOnSnap)                          {                              Vec3F localSurfaceNormal;                              parentWorldToLocal.TransformNormal(target.normal' out localSurfaceNormal);                              node.Rotation = TransformUtils.RotateToVector(                                   m_originalRotations[i]'                                   localSurfaceNormal'                                   AxisSystemType.YIsUp);                          }                      }                  }                              }                         else              {                  IGrid grid = DesignView.Context.Cast<IGame>().Grid;                  bool snapToGrid = Control.ModifierKeys == m_snapGridKey                                   && grid.Visible                                   && vc.Camera.ViewType == ViewTypes.Perspective;                  float gridHeight = grid.Height;                  // translate.                  for (int i = 0; i < NodeList.Count; i++)                  {                      ITransformable node = NodeList[i];                      Path<DomNode> path = new Path<DomNode>(Adapters.Cast<DomNode>(node).GetPath());                      Matrix4F parentLocalToWorld = TransformUtils.CalcPathTransform(path' path.Count - 2);                      Matrix4F parentWorldToLocal = new Matrix4F();                      parentWorldToLocal.Invert(parentLocalToWorld);                      Vec3F localTranslation;                      parentWorldToLocal.TransformVector(translate' out localTranslation);                      Vec3F trans = m_originalValues[i] + localTranslation;                                           if(snapToGrid)                      {                                              if(grid.Snap)                              trans = grid.SnapPoint(trans);                          else                              trans.Y = gridHeight;                                          }                        node.Translation = trans;                  }                              }
Magic Number,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(s / 2' 0' 0);
Magic Number,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(0' s / 2' 0);
Magic Number,RenderingInterop,TranslatorControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Manipulators\TranslatorControl.cs,Pick,The following statement contains a magic number: boxTrans.Translation = new Vec3F(0' 0' s / 2);
Magic Number,RenderingInterop,Crc32,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeAnnotations.cs,GetHash,The following statement contains a magic number: foreach (char c in s)              {                  System.Byte b = (System.Byte)c;                  hash = (hash << 8) ^ g_fgCrcTable32[((hash >> 24) ^ b) & 0xff];              }
Magic Number,RenderingInterop,Crc32,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeAnnotations.cs,GetHash,The following statement contains a magic number: foreach (char c in s)              {                  System.Byte b = (System.Byte)c;                  hash = (hash << 8) ^ g_fgCrcTable32[((hash >> 24) ^ b) & 0xff];              }
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,NativeDesignControl,The following statement contains a magic number: ClientSize = new Size(10' 10);
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,NativeDesignControl,The following statement contains a magic number: ClientSize = new Size(10' 10);
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,NativeDesignControl,The following statement contains a magic number: if (s_marqueePen == null)              {                  s_marqueePen = new Pen(Color.FromArgb(30' 30' 30)' 2);                  s_marqueePen.DashPattern = new float[] { 3' 3 };              }
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,NativeDesignControl,The following statement contains a magic number: if (s_marqueePen == null)              {                  s_marqueePen = new Pen(Color.FromArgb(30' 30' 30)' 2);                  s_marqueePen.DashPattern = new float[] { 3' 3 };              }
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,NativeDesignControl,The following statement contains a magic number: if (s_marqueePen == null)              {                  s_marqueePen = new Pen(Color.FromArgb(30' 30' 30)' 2);                  s_marqueePen.DashPattern = new float[] { 3' 3 };              }
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,NativeDesignControl,The following statement contains a magic number: if (s_marqueePen == null)              {                  s_marqueePen = new Pen(Color.FromArgb(30' 30' 30)' 2);                  s_marqueePen.DashPattern = new float[] { 3' 3 };              }
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,NativeDesignControl,The following statement contains a magic number: if (s_marqueePen == null)              {                  s_marqueePen = new Pen(Color.FromArgb(30' 30' 30)' 2);                  s_marqueePen.DashPattern = new float[] { 3' 3 };              }
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,NativeDesignControl,The following statement contains a magic number: if (s_marqueePen == null)              {                  s_marqueePen = new Pen(Color.FromArgb(30' 30' 30)' 2);                  s_marqueePen.DashPattern = new float[] { 3' 3 };              }
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,NativeDesignControl,The following statement contains a magic number: m_renderState.SelectionColor = Color.FromArgb(66' 255' 161);
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,NativeDesignControl,The following statement contains a magic number: m_renderState.SelectionColor = Color.FromArgb(66' 255' 161);
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,NativeDesignControl,The following statement contains a magic number: m_renderState.SelectionColor = Color.FromArgb(66' 255' 161);
Magic Number,RenderingInterop,NativeDesignControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeDesignControl.cs,RenderProperties,The following statement contains a magic number: if (renderPivot)              {                  Util3D.RenderFlag = BasicRendererFlags.WireFrame | BasicRendererFlags.DisableDepthTest;                    // create few temp matrics to                  Matrix4F toWorld = new Matrix4F();                  Matrix4F PV = new Matrix4F();                  Matrix4F sc = new Matrix4F();                  Matrix4F bl = new Matrix4F();                  Matrix4F recXform = new Matrix4F();                  foreach (object obj in objects)                  {                      ITransformable trans = obj.As<ITransformable>();                      IBoundable bnode = obj.As<IBoundable>();                      if (trans == null || bnode == null || bnode.BoundingBox.IsEmpty || obj.Is<IGameObjectFolder>()) continue;                        Path<DomNode> path = new Path<DomNode>(trans.Cast<DomNode>().GetPath());                      toWorld.Set(Vec3F.ZeroVector);                      TransformUtils.CalcPathTransform(toWorld' path' path.Count - 1);                        // Offset by pivot                      PV.Set(trans.Pivot);                      toWorld.Mul(PV' toWorld);                      Vec3F pos = toWorld.Translation;                        const float pivotDiameter = 16; // in pixels                      float s = Util.CalcAxisScale(Camera' pos' pivotDiameter' Height);                                          sc.Scale(s);                      Util.CreateBillboard(bl' pos' Camera.WorldEye' Camera.Up' Camera.LookAt);                      recXform = sc * bl;                      Util3D.DrawPivot(recXform' Color.Yellow);                  }              }
Magic Number,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,Init,The following statement contains a magic number: try              {                  Uri uri = new Uri(System.Windows.Forms.Application.StartupPath);                  string dllDir = uri.LocalPath + "\\NativePlugin";                    string dllName = "LvEdRenderingEngine.dll";                    if (IntPtr.Size == 4)                  {// 32 bit                      s_fullDllName = dllDir + "\\x86\\" + dllName;                  }                  else if (IntPtr.Size == 8)                  {// 64 bit.                      s_fullDllName = dllDir + "\\x64\\" + dllName;                  }                  else                  {                      throw new Exception("unsupported address space");                  }                    if (!File.Exists(s_fullDllName))                      throw new FileNotFoundException(s_fullDllName);                    s_libHandle = NativeMethods.LoadLibrary(s_fullDllName);                  if (s_libHandle == IntPtr.Zero)                  {                      int hr = Marshal.GetHRForLastWin32Error();                      Marshal.ThrowExceptionForHR(hr);                  }                    // verify entry points                  /*                  Type type = typeof(GameEngine);                    foreach (MethodInfo minfo in type.GetMethods(BindingFlags.Public | BindingFlags.Static | BindingFlags.NonPublic))                  {                                          foreach( object obj in minfo.GetCustomAttributes(false))                      {                                                  DllImportAttribute dllimport = obj as DllImportAttribute;                          if (dllimport != null)                          {                              string entryname = dllimport.EntryPoint;                                                                                      // verify entry point name.                              IntPtr fntPtr = NativeMethods.GetProcAddress(s_libHandle' entryname);                              if (fntPtr == IntPtr.Zero)                                  throw new ArgumentException(string.Format("Can't find native function: {0}(...) in {1}"' dllimport.EntryPoint' dllName));                                                          break;                          }                      }                                          }                   */                      CriticalError = string.Empty;                    IntPtr data;                  s_invalidateCallback = new InvalidateViewsDlg(InvalidateViews);                  s_logInstance = new LogCallbackType(LogCallback);                  NativeInitialize(s_logInstance' s_invalidateCallback' out data);                                  if (data != IntPtr.Zero)                  {                      string engineInfo = Marshal.PtrToStringUni(data);                      s_inist.PopulateEngineInfo(engineInfo);                  }                                    // get SynchronizationContext for current thread.                  // Note:                   s_syncContext = SynchronizationContext.Current;                  //Application.AddMessageFilter(new MessageFilter());                                    Util3D.Init();              }              catch (Exception e)              {                  Console.WriteLine("loading dll: " + s_fullDllName);                  Console.WriteLine("Engine init failed: " + e.Message);                  CriticalError = e.Message;              }
Magic Number,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,Init,The following statement contains a magic number: try              {                  Uri uri = new Uri(System.Windows.Forms.Application.StartupPath);                  string dllDir = uri.LocalPath + "\\NativePlugin";                    string dllName = "LvEdRenderingEngine.dll";                    if (IntPtr.Size == 4)                  {// 32 bit                      s_fullDllName = dllDir + "\\x86\\" + dllName;                  }                  else if (IntPtr.Size == 8)                  {// 64 bit.                      s_fullDllName = dllDir + "\\x64\\" + dllName;                  }                  else                  {                      throw new Exception("unsupported address space");                  }                    if (!File.Exists(s_fullDllName))                      throw new FileNotFoundException(s_fullDllName);                    s_libHandle = NativeMethods.LoadLibrary(s_fullDllName);                  if (s_libHandle == IntPtr.Zero)                  {                      int hr = Marshal.GetHRForLastWin32Error();                      Marshal.ThrowExceptionForHR(hr);                  }                    // verify entry points                  /*                  Type type = typeof(GameEngine);                    foreach (MethodInfo minfo in type.GetMethods(BindingFlags.Public | BindingFlags.Static | BindingFlags.NonPublic))                  {                                          foreach( object obj in minfo.GetCustomAttributes(false))                      {                                                  DllImportAttribute dllimport = obj as DllImportAttribute;                          if (dllimport != null)                          {                              string entryname = dllimport.EntryPoint;                                                                                      // verify entry point name.                              IntPtr fntPtr = NativeMethods.GetProcAddress(s_libHandle' entryname);                              if (fntPtr == IntPtr.Zero)                                  throw new ArgumentException(string.Format("Can't find native function: {0}(...) in {1}"' dllimport.EntryPoint' dllName));                                                          break;                          }                      }                                          }                   */                      CriticalError = string.Empty;                    IntPtr data;                  s_invalidateCallback = new InvalidateViewsDlg(InvalidateViews);                  s_logInstance = new LogCallbackType(LogCallback);                  NativeInitialize(s_logInstance' s_invalidateCallback' out data);                                  if (data != IntPtr.Zero)                  {                      string engineInfo = Marshal.PtrToStringUni(data);                      s_inist.PopulateEngineInfo(engineInfo);                  }                                    // get SynchronizationContext for current thread.                  // Note:                   s_syncContext = SynchronizationContext.Current;                  //Application.AddMessageFilter(new MessageFilter());                                    Util3D.Init();              }              catch (Exception e)              {                  Console.WriteLine("loading dll: " + s_fullDllName);                  Console.WriteLine("Engine init failed: " + e.Message);                  CriticalError = e.Message;              }
Magic Number,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,FrustumPick,The following statement contains a magic number: s_rect[2] = rect.Width;
Magic Number,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,FrustumPick,The following statement contains a magic number: s_rect[3] = rect.Height;
Magic Number,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,CreateVertexBuffer,The following statement contains a magic number: if (buffer == null || buffer.Length < 2)                  return 0;
Magic Number,RenderingInterop,GameEngine,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\GameEngine.cs,CreateVertexBuffer,The following statement contains a magic number: if (buffer == null || buffer.Length < 2)                  return 0;
Magic Number,RenderingInterop,NativeObjectAdapter,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\DomNodeAdapters\NativeObjectAdapter.cs,UpdateNativeProperty,The following statement contains a magic number: if (clrType.IsArray && elmentType.IsPrimitive)              {                  GCHandle pinHandle = new GCHandle();                  try                  {                      pinHandle = GCHandle.Alloc(data' GCHandleType.Pinned);                      IntPtr ptr = pinHandle.AddrOfPinnedObject();                      int sz = Marshal.SizeOf(elmentType);                      GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz * attribInfo.Type.Length);                    }                  finally                  {                      if (pinHandle.IsAllocated)                          pinHandle.Free();                  }                              }              else              {                  IntPtr ptr = IntPtr.Zero;                  int sz = 0;                  if (clrType == typeof(string))                  {                      string str = (string)data;                      if (!string.IsNullOrEmpty(str))                      {                          fixed (char* chptr = str)                          {                              ptr = new IntPtr((void*)chptr);                              sz = str.Length * 2;                              GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);                          }                          return;                      }                  }                  else if (clrType == typeof(DateTime))                  {                      DateTime dt = (DateTime)data;                      float seconds = (float)(dt.Hour * 60 * 60 + dt.Minute * 60 + dt.Second);                      float secondsInADay = 60.0f * 60.0f * 24.0f; // sec per minute * min per hour * hour per day                      float normalizedTime =  seconds / secondsInADay; // normalize 0.0 to 1.0                      ptr = new IntPtr(&normalizedTime);                      sz = sizeof(float);                  }                  else if (clrType == typeof(bool))                  {                                        bool val = (bool)data;                      ptr = new IntPtr(&val);                      sz = sizeof(bool);                  }                  else if (clrType == typeof(byte))                  {                      byte val = (byte)data;                      ptr = new IntPtr(&val);                      sz = sizeof(byte);                  }                  else if (clrType == typeof(sbyte))                  {                      sbyte val = (sbyte)data;                      ptr = new IntPtr(&val);                      sz = sizeof(sbyte);                  }                  else if (clrType == typeof(short))                  {                      short val = (short)data;                      ptr = new IntPtr(&val);                      sz = sizeof(short);                  }                  else if (clrType == typeof(ushort))                  {                      ushort val = (ushort)data;                      ptr = new IntPtr(&val);                      sz = sizeof(ushort);                  }                  else if (clrType == typeof(int))                  {                      int val = (int)data;                      ptr = new IntPtr(&val);                      sz = sizeof(int);                  }                  else if (clrType == typeof(uint))                  {                      uint val = (uint)data;                      ptr = new IntPtr(&val);                      sz = sizeof(uint);                  }                  else if (clrType == typeof(long))                  {                      long val = (long)data;                      ptr = new IntPtr(&val);                      sz = sizeof(long);                  }                  else if (clrType == typeof(ulong))                  {                      ulong val = (ulong)data;                      ptr = new IntPtr(&val);                      sz = sizeof(ulong);                  }                  else if (clrType == typeof(float))                  {                      float val = (float)data;                      ptr = new IntPtr(&val);                      sz = sizeof(float);                  }                  else if (clrType == typeof(double))                  {                      double val = (double)data;                      ptr = new IntPtr(&val);                      sz = sizeof(double);                  }                  else if (clrType == typeof(System.Uri))                  {                      if(data != null && !string.IsNullOrWhiteSpace(data.ToString()))                      {                          Uri uri = (Uri)data;                                                  string str = uri.LocalPath;                          fixed (char* chptr = str)                          {                              ptr = new IntPtr((void*)chptr);                              sz = str.Length * 2;                              GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);                          }                          return;                      }                  }                  else if (clrType == typeof(DomNode))                  {                      // this is a 'reference' to an object                      DomNode node = (DomNode)data;                      NativeObjectAdapter nativeGob = node.As<NativeObjectAdapter>();                      if(nativeGob != null)                      {                          ptr = new IntPtr((void*)nativeGob.InstanceId);                          sz = sizeof(ulong);                                              }                                      }                    GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);              }
Magic Number,RenderingInterop,NativeObjectAdapter,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\DomNodeAdapters\NativeObjectAdapter.cs,UpdateNativeProperty,The following statement contains a magic number: if (clrType.IsArray && elmentType.IsPrimitive)              {                  GCHandle pinHandle = new GCHandle();                  try                  {                      pinHandle = GCHandle.Alloc(data' GCHandleType.Pinned);                      IntPtr ptr = pinHandle.AddrOfPinnedObject();                      int sz = Marshal.SizeOf(elmentType);                      GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz * attribInfo.Type.Length);                    }                  finally                  {                      if (pinHandle.IsAllocated)                          pinHandle.Free();                  }                              }              else              {                  IntPtr ptr = IntPtr.Zero;                  int sz = 0;                  if (clrType == typeof(string))                  {                      string str = (string)data;                      if (!string.IsNullOrEmpty(str))                      {                          fixed (char* chptr = str)                          {                              ptr = new IntPtr((void*)chptr);                              sz = str.Length * 2;                              GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);                          }                          return;                      }                  }                  else if (clrType == typeof(DateTime))                  {                      DateTime dt = (DateTime)data;                      float seconds = (float)(dt.Hour * 60 * 60 + dt.Minute * 60 + dt.Second);                      float secondsInADay = 60.0f * 60.0f * 24.0f; // sec per minute * min per hour * hour per day                      float normalizedTime =  seconds / secondsInADay; // normalize 0.0 to 1.0                      ptr = new IntPtr(&normalizedTime);                      sz = sizeof(float);                  }                  else if (clrType == typeof(bool))                  {                                        bool val = (bool)data;                      ptr = new IntPtr(&val);                      sz = sizeof(bool);                  }                  else if (clrType == typeof(byte))                  {                      byte val = (byte)data;                      ptr = new IntPtr(&val);                      sz = sizeof(byte);                  }                  else if (clrType == typeof(sbyte))                  {                      sbyte val = (sbyte)data;                      ptr = new IntPtr(&val);                      sz = sizeof(sbyte);                  }                  else if (clrType == typeof(short))                  {                      short val = (short)data;                      ptr = new IntPtr(&val);                      sz = sizeof(short);                  }                  else if (clrType == typeof(ushort))                  {                      ushort val = (ushort)data;                      ptr = new IntPtr(&val);                      sz = sizeof(ushort);                  }                  else if (clrType == typeof(int))                  {                      int val = (int)data;                      ptr = new IntPtr(&val);                      sz = sizeof(int);                  }                  else if (clrType == typeof(uint))                  {                      uint val = (uint)data;                      ptr = new IntPtr(&val);                      sz = sizeof(uint);                  }                  else if (clrType == typeof(long))                  {                      long val = (long)data;                      ptr = new IntPtr(&val);                      sz = sizeof(long);                  }                  else if (clrType == typeof(ulong))                  {                      ulong val = (ulong)data;                      ptr = new IntPtr(&val);                      sz = sizeof(ulong);                  }                  else if (clrType == typeof(float))                  {                      float val = (float)data;                      ptr = new IntPtr(&val);                      sz = sizeof(float);                  }                  else if (clrType == typeof(double))                  {                      double val = (double)data;                      ptr = new IntPtr(&val);                      sz = sizeof(double);                  }                  else if (clrType == typeof(System.Uri))                  {                      if(data != null && !string.IsNullOrWhiteSpace(data.ToString()))                      {                          Uri uri = (Uri)data;                                                  string str = uri.LocalPath;                          fixed (char* chptr = str)                          {                              ptr = new IntPtr((void*)chptr);                              sz = str.Length * 2;                              GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);                          }                          return;                      }                  }                  else if (clrType == typeof(DomNode))                  {                      // this is a 'reference' to an object                      DomNode node = (DomNode)data;                      NativeObjectAdapter nativeGob = node.As<NativeObjectAdapter>();                      if(nativeGob != null)                      {                          ptr = new IntPtr((void*)nativeGob.InstanceId);                          sz = sizeof(ulong);                                              }                                      }                    GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);              }
Magic Number,RenderingInterop,NativeObjectAdapter,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\DomNodeAdapters\NativeObjectAdapter.cs,UpdateNativeProperty,The following statement contains a magic number: if (clrType.IsArray && elmentType.IsPrimitive)              {                  GCHandle pinHandle = new GCHandle();                  try                  {                      pinHandle = GCHandle.Alloc(data' GCHandleType.Pinned);                      IntPtr ptr = pinHandle.AddrOfPinnedObject();                      int sz = Marshal.SizeOf(elmentType);                      GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz * attribInfo.Type.Length);                    }                  finally                  {                      if (pinHandle.IsAllocated)                          pinHandle.Free();                  }                              }              else              {                  IntPtr ptr = IntPtr.Zero;                  int sz = 0;                  if (clrType == typeof(string))                  {                      string str = (string)data;                      if (!string.IsNullOrEmpty(str))                      {                          fixed (char* chptr = str)                          {                              ptr = new IntPtr((void*)chptr);                              sz = str.Length * 2;                              GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);                          }                          return;                      }                  }                  else if (clrType == typeof(DateTime))                  {                      DateTime dt = (DateTime)data;                      float seconds = (float)(dt.Hour * 60 * 60 + dt.Minute * 60 + dt.Second);                      float secondsInADay = 60.0f * 60.0f * 24.0f; // sec per minute * min per hour * hour per day                      float normalizedTime =  seconds / secondsInADay; // normalize 0.0 to 1.0                      ptr = new IntPtr(&normalizedTime);                      sz = sizeof(float);                  }                  else if (clrType == typeof(bool))                  {                                        bool val = (bool)data;                      ptr = new IntPtr(&val);                      sz = sizeof(bool);                  }                  else if (clrType == typeof(byte))                  {                      byte val = (byte)data;                      ptr = new IntPtr(&val);                      sz = sizeof(byte);                  }                  else if (clrType == typeof(sbyte))                  {                      sbyte val = (sbyte)data;                      ptr = new IntPtr(&val);                      sz = sizeof(sbyte);                  }                  else if (clrType == typeof(short))                  {                      short val = (short)data;                      ptr = new IntPtr(&val);                      sz = sizeof(short);                  }                  else if (clrType == typeof(ushort))                  {                      ushort val = (ushort)data;                      ptr = new IntPtr(&val);                      sz = sizeof(ushort);                  }                  else if (clrType == typeof(int))                  {                      int val = (int)data;                      ptr = new IntPtr(&val);                      sz = sizeof(int);                  }                  else if (clrType == typeof(uint))                  {                      uint val = (uint)data;                      ptr = new IntPtr(&val);                      sz = sizeof(uint);                  }                  else if (clrType == typeof(long))                  {                      long val = (long)data;                      ptr = new IntPtr(&val);                      sz = sizeof(long);                  }                  else if (clrType == typeof(ulong))                  {                      ulong val = (ulong)data;                      ptr = new IntPtr(&val);                      sz = sizeof(ulong);                  }                  else if (clrType == typeof(float))                  {                      float val = (float)data;                      ptr = new IntPtr(&val);                      sz = sizeof(float);                  }                  else if (clrType == typeof(double))                  {                      double val = (double)data;                      ptr = new IntPtr(&val);                      sz = sizeof(double);                  }                  else if (clrType == typeof(System.Uri))                  {                      if(data != null && !string.IsNullOrWhiteSpace(data.ToString()))                      {                          Uri uri = (Uri)data;                                                  string str = uri.LocalPath;                          fixed (char* chptr = str)                          {                              ptr = new IntPtr((void*)chptr);                              sz = str.Length * 2;                              GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);                          }                          return;                      }                  }                  else if (clrType == typeof(DomNode))                  {                      // this is a 'reference' to an object                      DomNode node = (DomNode)data;                      NativeObjectAdapter nativeGob = node.As<NativeObjectAdapter>();                      if(nativeGob != null)                      {                          ptr = new IntPtr((void*)nativeGob.InstanceId);                          sz = sizeof(ulong);                                              }                                      }                    GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);              }
Magic Number,RenderingInterop,NativeObjectAdapter,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\DomNodeAdapters\NativeObjectAdapter.cs,UpdateNativeProperty,The following statement contains a magic number: if (clrType.IsArray && elmentType.IsPrimitive)              {                  GCHandle pinHandle = new GCHandle();                  try                  {                      pinHandle = GCHandle.Alloc(data' GCHandleType.Pinned);                      IntPtr ptr = pinHandle.AddrOfPinnedObject();                      int sz = Marshal.SizeOf(elmentType);                      GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz * attribInfo.Type.Length);                    }                  finally                  {                      if (pinHandle.IsAllocated)                          pinHandle.Free();                  }                              }              else              {                  IntPtr ptr = IntPtr.Zero;                  int sz = 0;                  if (clrType == typeof(string))                  {                      string str = (string)data;                      if (!string.IsNullOrEmpty(str))                      {                          fixed (char* chptr = str)                          {                              ptr = new IntPtr((void*)chptr);                              sz = str.Length * 2;                              GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);                          }                          return;                      }                  }                  else if (clrType == typeof(DateTime))                  {                      DateTime dt = (DateTime)data;                      float seconds = (float)(dt.Hour * 60 * 60 + dt.Minute * 60 + dt.Second);                      float secondsInADay = 60.0f * 60.0f * 24.0f; // sec per minute * min per hour * hour per day                      float normalizedTime =  seconds / secondsInADay; // normalize 0.0 to 1.0                      ptr = new IntPtr(&normalizedTime);                      sz = sizeof(float);                  }                  else if (clrType == typeof(bool))                  {                                        bool val = (bool)data;                      ptr = new IntPtr(&val);                      sz = sizeof(bool);                  }                  else if (clrType == typeof(byte))                  {                      byte val = (byte)data;                      ptr = new IntPtr(&val);                      sz = sizeof(byte);                  }                  else if (clrType == typeof(sbyte))                  {                      sbyte val = (sbyte)data;                      ptr = new IntPtr(&val);                      sz = sizeof(sbyte);                  }                  else if (clrType == typeof(short))                  {                      short val = (short)data;                      ptr = new IntPtr(&val);                      sz = sizeof(short);                  }                  else if (clrType == typeof(ushort))                  {                      ushort val = (ushort)data;                      ptr = new IntPtr(&val);                      sz = sizeof(ushort);                  }                  else if (clrType == typeof(int))                  {                      int val = (int)data;                      ptr = new IntPtr(&val);                      sz = sizeof(int);                  }                  else if (clrType == typeof(uint))                  {                      uint val = (uint)data;                      ptr = new IntPtr(&val);                      sz = sizeof(uint);                  }                  else if (clrType == typeof(long))                  {                      long val = (long)data;                      ptr = new IntPtr(&val);                      sz = sizeof(long);                  }                  else if (clrType == typeof(ulong))                  {                      ulong val = (ulong)data;                      ptr = new IntPtr(&val);                      sz = sizeof(ulong);                  }                  else if (clrType == typeof(float))                  {                      float val = (float)data;                      ptr = new IntPtr(&val);                      sz = sizeof(float);                  }                  else if (clrType == typeof(double))                  {                      double val = (double)data;                      ptr = new IntPtr(&val);                      sz = sizeof(double);                  }                  else if (clrType == typeof(System.Uri))                  {                      if(data != null && !string.IsNullOrWhiteSpace(data.ToString()))                      {                          Uri uri = (Uri)data;                                                  string str = uri.LocalPath;                          fixed (char* chptr = str)                          {                              ptr = new IntPtr((void*)chptr);                              sz = str.Length * 2;                              GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);                          }                          return;                      }                  }                  else if (clrType == typeof(DomNode))                  {                      // this is a 'reference' to an object                      DomNode node = (DomNode)data;                      NativeObjectAdapter nativeGob = node.As<NativeObjectAdapter>();                      if(nativeGob != null)                      {                          ptr = new IntPtr((void*)nativeGob.InstanceId);                          sz = sizeof(ulong);                                              }                                      }                    GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);              }
Magic Number,RenderingInterop,NativeObjectAdapter,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\DomNodeAdapters\NativeObjectAdapter.cs,UpdateNativeProperty,The following statement contains a magic number: if (clrType.IsArray && elmentType.IsPrimitive)              {                  GCHandle pinHandle = new GCHandle();                  try                  {                      pinHandle = GCHandle.Alloc(data' GCHandleType.Pinned);                      IntPtr ptr = pinHandle.AddrOfPinnedObject();                      int sz = Marshal.SizeOf(elmentType);                      GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz * attribInfo.Type.Length);                    }                  finally                  {                      if (pinHandle.IsAllocated)                          pinHandle.Free();                  }                              }              else              {                  IntPtr ptr = IntPtr.Zero;                  int sz = 0;                  if (clrType == typeof(string))                  {                      string str = (string)data;                      if (!string.IsNullOrEmpty(str))                      {                          fixed (char* chptr = str)                          {                              ptr = new IntPtr((void*)chptr);                              sz = str.Length * 2;                              GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);                          }                          return;                      }                  }                  else if (clrType == typeof(DateTime))                  {                      DateTime dt = (DateTime)data;                      float seconds = (float)(dt.Hour * 60 * 60 + dt.Minute * 60 + dt.Second);                      float secondsInADay = 60.0f * 60.0f * 24.0f; // sec per minute * min per hour * hour per day                      float normalizedTime =  seconds / secondsInADay; // normalize 0.0 to 1.0                      ptr = new IntPtr(&normalizedTime);                      sz = sizeof(float);                  }                  else if (clrType == typeof(bool))                  {                                        bool val = (bool)data;                      ptr = new IntPtr(&val);                      sz = sizeof(bool);                  }                  else if (clrType == typeof(byte))                  {                      byte val = (byte)data;                      ptr = new IntPtr(&val);                      sz = sizeof(byte);                  }                  else if (clrType == typeof(sbyte))                  {                      sbyte val = (sbyte)data;                      ptr = new IntPtr(&val);                      sz = sizeof(sbyte);                  }                  else if (clrType == typeof(short))                  {                      short val = (short)data;                      ptr = new IntPtr(&val);                      sz = sizeof(short);                  }                  else if (clrType == typeof(ushort))                  {                      ushort val = (ushort)data;                      ptr = new IntPtr(&val);                      sz = sizeof(ushort);                  }                  else if (clrType == typeof(int))                  {                      int val = (int)data;                      ptr = new IntPtr(&val);                      sz = sizeof(int);                  }                  else if (clrType == typeof(uint))                  {                      uint val = (uint)data;                      ptr = new IntPtr(&val);                      sz = sizeof(uint);                  }                  else if (clrType == typeof(long))                  {                      long val = (long)data;                      ptr = new IntPtr(&val);                      sz = sizeof(long);                  }                  else if (clrType == typeof(ulong))                  {                      ulong val = (ulong)data;                      ptr = new IntPtr(&val);                      sz = sizeof(ulong);                  }                  else if (clrType == typeof(float))                  {                      float val = (float)data;                      ptr = new IntPtr(&val);                      sz = sizeof(float);                  }                  else if (clrType == typeof(double))                  {                      double val = (double)data;                      ptr = new IntPtr(&val);                      sz = sizeof(double);                  }                  else if (clrType == typeof(System.Uri))                  {                      if(data != null && !string.IsNullOrWhiteSpace(data.ToString()))                      {                          Uri uri = (Uri)data;                                                  string str = uri.LocalPath;                          fixed (char* chptr = str)                          {                              ptr = new IntPtr((void*)chptr);                              sz = str.Length * 2;                              GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);                          }                          return;                      }                  }                  else if (clrType == typeof(DomNode))                  {                      // this is a 'reference' to an object                      DomNode node = (DomNode)data;                      NativeObjectAdapter nativeGob = node.As<NativeObjectAdapter>();                      if(nativeGob != null)                      {                          ptr = new IntPtr((void*)nativeGob.InstanceId);                          sz = sizeof(ulong);                                              }                                      }                    GameEngine.SetObjectProperty(typeId' InstanceId' id' ptr' sz);              }
Magic Number,RenderingInterop,ImageData,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\NativeInterop\ImageData.cs,LoadFromFile,The following statement contains a magic number: fixed (char* chptr = localPath)              {                  IntPtr ptr = new IntPtr((void*)chptr);                  int sz = localPath.Length * 2;                  GameEngine.SetObjectProperty(TypeId' m_instanceId' LoadFromFileId' ptr' sz);              }
Magic Number,RenderingInterop,NativeViewControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ResourcePreview.cs,NativeViewControl,The following statement contains a magic number: ClientSize = new Size(16' 16);
Magic Number,RenderingInterop,NativeViewControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ResourcePreview.cs,NativeViewControl,The following statement contains a magic number: ClientSize = new Size(16' 16);
Magic Number,RenderingInterop,NativeViewControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ResourcePreview.cs,NativeViewControl,The following statement contains a magic number: m_renderState.SelectionColor = Color.FromArgb(66' 255' 161);
Magic Number,RenderingInterop,NativeViewControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ResourcePreview.cs,NativeViewControl,The following statement contains a magic number: m_renderState.SelectionColor = Color.FromArgb(66' 255' 161);
Magic Number,RenderingInterop,NativeViewControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ResourcePreview.cs,NativeViewControl,The following statement contains a magic number: m_renderState.SelectionColor = Color.FromArgb(66' 255' 161);
Magic Number,RenderingInterop,NativeViewControl,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ResourcePreview.cs,Render,The following statement contains a magic number: try                  {                                          NativeObjectAdapter game = Game.As<NativeObjectAdapter>();                      GameEngine.SetGameLevel(game);                      GameEngine.SetRenderState(m_renderState);                      if (Game.RootGameObjectFolder.GameObjects.Count > 0)                      {                          FrameTime fr = new FrameTime(0' 0);                          GameEngineProxy.WaitForPendingResources();                          GameEngineProxy.Update(fr' UpdateType.Paused);                      }                        if (ResetCamera)                      {                          // save view type                          ViewTypes viewtype = this.ViewType;                          ViewType = ViewTypes.Perspective;                          Size sz = ClientSize;                          float aspect = (float)sz.Width / (float)sz.Height;                          IBoundable boundable = Game.RootGameObjectFolder.Cast<IBoundable>();                          Sce.Atf.VectorMath.Sphere3F sphere = boundable.BoundingBox.ToSphere();                          float nearZ = sphere.Radius * 0.01f;                          nearZ = Math.Min(0.1f' nearZ);                          Camera.SetPerspective(                              (float)Math.PI / 4'                              aspect'                              nearZ'                              sphere.Radius * 10.0f);                            Vec3F camPos = sphere.Center + new Vec3F(sphere.Radius' sphere.Radius' sphere.Radius) * 1.2f;                          Camera.Set(camPos' sphere.Center' new Vec3F(0' 1' 0));                          ViewType = viewtype;                          ResetCamera = false;                      }                                                               GameEngine.Begin(SurfaceId' Camera.ViewMatrix' Camera.ProjectionMatrix);                      if(Game.RootGameObjectFolder.GameObjects.Count > 0)                          GameEngine.RenderGame();                                              string str = "View Type: " + ViewType.ToString();                      GameEngine.DrawText2D(str' Util3D.CaptionFont' 1' 1' Color.White);                      GameEngine.End();                  }                  finally                  {                      GameEngine.SetGameLevel(gameLevel);                  }
Magic Number,RenderingInterop,ThumbnailResolver,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ThumbnailResolver.cs,GenThumbnail,The following statement contains a magic number: try              {                  IResource resource = m_resourceService.Load(resourceUri);                  IGameObject gob = m_resourceConverterService.Convert(resource);                  if (gob == null) return;                                    m_game.RootGameObjectFolder.GameObjects.Add(gob);                    GameEngine.SetRenderState(m_renderState);                  GameEngine.SetGameLevel(m_game.Cast<NativeObjectAdapter>());                    m_gameEngine.WaitForPendingResources();                  FrameTime fr = new FrameTime(0' 0);                  m_gameEngine.Update(fr' UpdateType.Paused);                    IBoundable boundable = gob.Cast<IBoundable>();                  Sphere3F sphere = boundable.BoundingBox.ToSphere();                                    if (Math.Abs(sphere.Radius) <= float.Epsilon)                      sphere.Radius = 1.0f;                    m_cam.SetPerspective(                 (float)Math.PI / 4'                 1.0f'                 sphere.Radius * 0.01f'                 sphere.Radius * 4.0f);                      Vec3F camPos = sphere.Center + new Vec3F(sphere.Radius' sphere.Radius' sphere.Radius) * 1.5f;                  m_cam.Set(camPos' sphere.Center' new Vec3F(0' 1' 0));                    GameEngine.Begin(m_renderSurface.InstanceId' m_cam.ViewMatrix' m_cam.ProjectionMatrix);                  GameEngine.RenderGame();                  GameEngine.End();                  GameEngine.SaveRenderSurfaceToFile(m_renderSurface.InstanceId' thumbnailPath);                                  m_game.RootGameObjectFolder.GameObjects.Remove(gob);                    m_resourceService.Unload(resourceUri);              }              finally              {                  GameEngine.SetGameLevel(gameLevel);              }
Magic Number,RenderingInterop,ThumbnailResolver,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ThumbnailResolver.cs,Init,The following statement contains a magic number: try              {                  // create new document by creating a Dom node of the root type defined by the schema                                   DomNode rootNode = new DomNode(m_schemaLoader.GameType' m_schemaLoader.GameRootElement);                  INameable nameable = rootNode.Cast<INameable>();                  nameable.Name = "ThumbnailGenerator";                    NativeObjectAdapter gameLevel = rootNode.Cast<NativeObjectAdapter>();                  GameEngine.CreateObject(gameLevel);                  GameEngine.SetGameLevel(gameLevel);                  gameLevel.UpdateNativeOjbect();                  NativeGameWorldAdapter gworld = rootNode.Cast<NativeGameWorldAdapter>();                    m_game = rootNode.Cast<IGame>();                  IGameObjectFolder rootFolder = m_game.RootGameObjectFolder;                                  m_renderSurface = new TextureRenderSurface(96' 96);                  m_renderState = new RenderState();                  m_renderState.RenderFlag = GlobalRenderFlags.Solid | GlobalRenderFlags.Textured | GlobalRenderFlags.Lit | GlobalRenderFlags.Shadows;                  }              finally              {                  GameEngine.SetGameLevel(curLevel);              }
Magic Number,RenderingInterop,ThumbnailResolver,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Resolvers\ThumbnailResolver.cs,Init,The following statement contains a magic number: try              {                  // create new document by creating a Dom node of the root type defined by the schema                                   DomNode rootNode = new DomNode(m_schemaLoader.GameType' m_schemaLoader.GameRootElement);                  INameable nameable = rootNode.Cast<INameable>();                  nameable.Name = "ThumbnailGenerator";                    NativeObjectAdapter gameLevel = rootNode.Cast<NativeObjectAdapter>();                  GameEngine.CreateObject(gameLevel);                  GameEngine.SetGameLevel(gameLevel);                  gameLevel.UpdateNativeOjbect();                  NativeGameWorldAdapter gworld = rootNode.Cast<NativeGameWorldAdapter>();                    m_game = rootNode.Cast<IGame>();                  IGameObjectFolder rootFolder = m_game.RootGameObjectFolder;                                  m_renderSurface = new TextureRenderSurface(96' 96);                  m_renderState = new RenderState();                  m_renderState.RenderFlag = GlobalRenderFlags.Solid | GlobalRenderFlags.Textured | GlobalRenderFlags.Lit | GlobalRenderFlags.Shadows;                  }              finally              {                  GameEngine.SetGameLevel(curLevel);              }
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,DrawSphere,The following statement contains a magic number: float scale = 2*sphere.Radius;
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,DrawX,The following statement contains a magic number: GameEngine.DrawPrimitive(PrimitiveType.LineList'                                       s_linesVertId'                                       s_axisStartVertex'                                       2'                                       color'                                       xform);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,DrawY,The following statement contains a magic number: GameEngine.DrawPrimitive(PrimitiveType.LineList'                                       s_linesVertId'                                       s_axisStartVertex + 2'                                       2'                                       color'                                       xform);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,DrawY,The following statement contains a magic number: GameEngine.DrawPrimitive(PrimitiveType.LineList'                                       s_linesVertId'                                       s_axisStartVertex + 2'                                       2'                                       color'                                       xform);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,DrawZ,The following statement contains a magic number: GameEngine.DrawPrimitive(PrimitiveType.LineList'                                       s_linesVertId'                                       s_axisStartVertex + 4'                                       2'                                       color'                                       xform);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,DrawZ,The following statement contains a magic number: GameEngine.DrawPrimitive(PrimitiveType.LineList'                                       s_linesVertId'                                       s_axisStartVertex + 4'                                       2'                                       color'                                       xform);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: GeometryHelper.CreateCylinder(1.0f' 0.0f' 1.0f' 16' 1' conePos' coneNorms' coneIndices);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: GeometryHelper.CreateCylinder(0.5f' 0.5f' 1.0f' 16' 2' cyPos' cyNorms' cyIndices);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: GeometryHelper.CreateCylinder(0.5f' 0.5f' 1.0f' 16' 2' cyPos' cyNorms' cyIndices);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: GeometryHelper.CreateTorus(RingInnerRadias' RingOuterRadias' 40' 6' torPos' torNorms' null' torIndices);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: GeometryHelper.CreateTorus(RingInnerRadias' RingOuterRadias' 40' 6' torPos' torNorms' null' torIndices);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: s_rectVertexCount = 8;
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: s_unitSquareVertexCount = 8;
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: GeometryHelper.CreateCircle(1.0f'32'circlePos);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: GeometryHelper.CreateCircle(0.5f' 16' pivotVerts);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: GeometryHelper.CreateCircle(0.375f' 16' pivotVerts);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: GeometryHelper.CreateCircle(0.25f' 16' pivotVerts);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: GeometryHelper.CreateCircle(0.125f' 16' pivotVerts);
Magic Number,RenderingInterop,Util3D,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,Init,The following statement contains a magic number: s_captionFont = GameEngine.CreateFont("Arial"' 14' FontStyle.BOLD);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateSphere,The following statement contains a magic number: if (slices < 2 || stacks < 2)                  throw new ArgumentException("invalid number slices or stacks");
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateSphere,The following statement contains a magic number: if (slices < 2 || stacks < 2)                  throw new ArgumentException("invalid number slices or stacks");
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateSphere,The following statement contains a magic number: uint numVerts = 2 + (stacks - 1) * slices;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateSphere,The following statement contains a magic number: uint numTris = 2 * slices * (stacks - 1);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateSphere,The following statement contains a magic number: for (uint s = 0; s < (stacks - 2); s++)              {                  uint l = 1;                  for (; l < slices; l++)                  {                      indices.Add( (s + 1) * slices + l + 1); // bottom right.                      indices.Add( s * slices + l + 1); // top right.                      indices.Add(s * slices + l); // top left.                        indices.Add( (s + 1) * slices + l); // bottom left.                      indices.Add( (s + 1) * slices + l + 1); // bottom right.                      indices.Add( s * slices + l); // top left.                    }                    indices.Add( (s + 1) * slices + 1); // bottom right.                  indices.Add( s * slices + 1); // top right.                  indices.Add( s * slices + slices); // top left.                      indices.Add( (s + 1) * slices + slices); // bottom left.                  indices.Add( (s + 1) * slices + 1); // bottom right.                  indices.Add( s * slices + slices); // top left.                  }
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateSphere,The following statement contains a magic number: uint baseIndex = slices * (stacks - 2);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(2);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(2);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(3);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(3);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(4);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(5);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(5);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(6);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(6);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(7);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(7);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(4);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(3);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(2);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(2);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(6);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(6);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(7);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(7);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(3);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(5);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(5);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(4);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitBox,The following statement contains a magic number: indices.Add(4);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: VertexPNT[] v = new VertexPNT[24];
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[2] = new VertexPNT( 0.5f'  0.5f' -0.5f' 0.0f' 0.0f' -1.0f' 1.0f' 0.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[3] = new VertexPNT( 0.5f' -0.5f' -0.5f' 0.0f' 0.0f' -1.0f' 1.0f' 1.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[4] = new VertexPNT(-0.5f' -0.5f' 0.5f' 0.0f' 0.0f' 1.0f' 1.0f' 1.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[5] = new VertexPNT( 0.5f' -0.5f' 0.5f' 0.0f' 0.0f' 1.0f' 0.0f' 1.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[6] = new VertexPNT( 0.5f'  0.5f' 0.5f' 0.0f' 0.0f' 1.0f' 0.0f' 0.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[7] = new VertexPNT(-0.5f'  0.5f' 0.5f' 0.0f' 0.0f' 1.0f' 1.0f' 0.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[8]  = new VertexPNT(-0.5f' 0.5f' -0.5f' 0.0f' 1.0f' 0.0f' 0.0f' 1.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[9]  = new VertexPNT(-0.5f' 0.5f'  0.5f' 0.0f' 1.0f' 0.0f' 0.0f' 0.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[10] = new VertexPNT( 0.5f' 0.5f'  0.5f' 0.0f' 1.0f' 0.0f' 1.0f' 0.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[11] = new VertexPNT( 0.5f' 0.5f' -0.5f' 0.0f' 1.0f' 0.0f' 1.0f' 1.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[12] = new VertexPNT(-0.5f' -0.5f' -0.5f' 0.0f' -1.0f' 0.0f' 1.0f' 1.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[13] = new VertexPNT( 0.5f' -0.5f' -0.5f' 0.0f' -1.0f' 0.0f' 0.0f' 1.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[14] = new VertexPNT( 0.5f' -0.5f'  0.5f' 0.0f' -1.0f' 0.0f' 0.0f' 0.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[15] = new VertexPNT(-0.5f' -0.5f'  0.5f' 0.0f' -1.0f' 0.0f' 1.0f' 0.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[16] = new VertexPNT(-0.5f' -0.5f'  0.5f' -1.0f' 0.0f' 0.0f' 0.0f' 1.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[17] = new VertexPNT(-0.5f'  0.5f'  0.5f' -1.0f' 0.0f' 0.0f' 0.0f' 0.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[18] = new VertexPNT(-0.5f'  0.5f' -0.5f' -1.0f' 0.0f' 0.0f' 1.0f' 0.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[19] = new VertexPNT(-0.5f' -0.5f' -0.5f' -1.0f' 0.0f' 0.0f' 1.0f' 1.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[20] = new VertexPNT( 0.5f' -0.5f' -0.5f' 1.0f' 0.0f' 0.0f' 0.0f' 1.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[21] = new VertexPNT( 0.5f'  0.5f' -0.5f' 1.0f' 0.0f' 0.0f' 0.0f' 0.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[22] = new VertexPNT( 0.5f'  0.5f'  0.5f' 1.0f' 0.0f' 0.0f' 1.0f' 0.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: v[23] = new VertexPNT( 0.5f' -0.5f'  0.5f' 1.0f' 0.0f' 0.0f' 1.0f' 1.0f);
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: uint[] index = new uint[36];
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[2] = 2;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[2] = 2;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[3] = 0;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[4] = 2;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[4] = 2;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[5] = 3;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[5] = 3;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[6] = 4;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[6] = 4;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[7] = 5;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[7] = 5;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[8] = 6;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[8] = 6;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[9] = 4;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[9] = 4;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[10] = 6;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[10] = 6;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[11] = 7;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[11] = 7;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[12] = 8;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[12] = 8;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[13] = 9;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[13] = 9;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[14] = 10;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[14] = 10;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[15] = 8;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[15] = 8;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[16] = 10;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[16] = 10;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[17] = 11;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[17] = 11;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[18] = 12;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[18] = 12;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[19] = 13;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[19] = 13;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[20] = 14;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[20] = 14;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[21] = 12;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[21] = 12;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[22] = 14;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[22] = 14;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[23] = 15;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[23] = 15;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[24] = 16;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[24] = 16;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[25] = 17;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[25] = 17;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[26] = 18;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[26] = 18;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[27] = 16;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[27] = 16;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[28] = 18;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[28] = 18;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[29] = 19;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[29] = 19;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[30] = 20;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[30] = 20;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[31] = 21;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[31] = 21;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[32] = 22;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[32] = 22;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[33] = 20;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[33] = 20;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[34] = 22;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[34] = 22;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[35] = 23;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: index[35] = 23;
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: for (int i = 0; i < 34; i += 3)              {                  indices.Add(index[i + 2]);                  indices.Add(index[i + 1]);                  indices.Add(index[i]);              }
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: for (int i = 0; i < 34; i += 3)              {                  indices.Add(index[i + 2]);                  indices.Add(index[i + 1]);                  indices.Add(index[i]);              }
Magic Number,RenderingInterop,GeometryHelper,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Util3d.cs,CreateUnitCube,The following statement contains a magic number: for (int i = 0; i < 34; i += 3)              {                  indices.Add(index[i + 2]);                  indices.Add(index[i + 1]);                  indices.Add(index[i]);              }
Missing Default,RenderingInterop,RenderCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Commands\RenderCommands.cs,CanDoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)              {                  case Command.RenderSmooth:                  case Command.RenderWireFrame:                  case Command.RenderOutlined:                  case Command.RenderLight:                  case Command.RenderBackFace:                  case Command.RenderShadow:                  case Command.RenderNormals:                  case Command.RenderCycle:                //  case Command.RealTime:                      return true;                  case Command.RenderTextured:                      return (rs.RenderFlag & GlobalRenderFlags.Solid) != 0;                                }
Missing Default,RenderingInterop,RenderCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Commands\RenderCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                      case Command.RenderSmooth:                          rs.RenderFlag &= ~(GlobalRenderFlags.WireFrame | GlobalRenderFlags.RenderBackFace);                          rs.RenderFlag |= (GlobalRenderFlags.Solid | GlobalRenderFlags.Lit | GlobalRenderFlags.Textured);                                                    break;                        case Command.RenderWireFrame:                          rs.RenderFlag |= (GlobalRenderFlags.WireFrame ); //| RenderFlags.RenderBackFace                          rs.RenderFlag &= ~(GlobalRenderFlags.Solid | GlobalRenderFlags.Lit | GlobalRenderFlags.Textured);                                                    break;                        case Command.RenderOutlined:                          rs.RenderFlag |= (GlobalRenderFlags.WireFrame | GlobalRenderFlags.Solid |                              GlobalRenderFlags.Lit | GlobalRenderFlags.Textured);                          rs.RenderFlag &= ~GlobalRenderFlags.RenderBackFace;                                                    break;                        case Command.RenderTextured:                          rs.RenderFlag ^= GlobalRenderFlags.Textured;                                                    break;                        case Command.RenderLight:                          rs.RenderFlag ^= GlobalRenderFlags.Lit;                                                    break;                        case Command.RenderBackFace:                          rs.RenderFlag ^= GlobalRenderFlags.RenderBackFace;                          break;                        case Command.RenderShadow:                          rs.RenderFlag ^= GlobalRenderFlags.Shadows;                          break;                        case Command.RenderNormals:                          rs.RenderFlag ^= GlobalRenderFlags.RenderNormals;                          break;                        case Command.RenderCycle:                          GlobalRenderFlags flags = rs.RenderFlag;                            if ((flags & GlobalRenderFlags.Solid) != 0 &&                              (flags & GlobalRenderFlags.WireFrame) != 0)                          {                              // outlined -> smooth                              goto case Command.RenderSmooth;                          }                          if ((flags & GlobalRenderFlags.Solid) != 0)                          {                              // smooth -> wireframe                              goto case Command.RenderWireFrame;                          }                          // wireframe -> outlined                          goto case Command.RenderOutlined;                                              //  case Command.RealTime:                    //      m_designView.RealTime = !m_designView.RealTime;                    //      break;                  }
Missing Default,RenderingInterop,RenderCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorNativeRendering\Commands\RenderCommands.cs,UpdateCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                      case Command.RenderSmooth:                          state.Check = (flags & GlobalRenderFlags.Solid) != 0;                          break;                        case Command.RenderWireFrame:                          state.Check = (flags & GlobalRenderFlags.WireFrame) != 0;                          break;                        case Command.RenderOutlined:                          state.Check = (flags & GlobalRenderFlags.Solid) != 0 &&                                        (flags & GlobalRenderFlags.WireFrame) != 0;                          break;                        case Command.RenderTextured:                          state.Check = (flags & GlobalRenderFlags.Textured) != 0;                          break;                        case Command.RenderLight:                          state.Check = ((flags & GlobalRenderFlags.Lit) != 0);                          break;                        case Command.RenderBackFace:                          state.Check = (flags & GlobalRenderFlags.RenderBackFace) != 0;                          break;                      case Command.RenderShadow:                          state.Check = (flags & GlobalRenderFlags.Shadows) == GlobalRenderFlags.Shadows;                          break;                        case Command.RenderNormals:                          state.Check = (flags & GlobalRenderFlags.RenderNormals) == GlobalRenderFlags.RenderNormals;                          break;                     // case Command.RealTime:                    //      state.Check = m_designView.RealTime;                                      }
