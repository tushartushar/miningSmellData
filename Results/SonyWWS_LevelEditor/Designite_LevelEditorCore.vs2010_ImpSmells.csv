Implementation smell,Namespace,Class,File,Method,Description
Long Method,LevelEditorCore.Commands,DesignViewCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\DesignViewCommands.cs,RegisterCommands,The method has 118 lines of code.
Complex Method,LevelEditorCore,ResourceLister,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ResourceLister.cs,ThumbnailControl_MouseMove,Cyclomatic complexity of the method is 8
Long Parameter List,LevelEditorCore,Util,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Utils\Util.cs,CreateBillboard,The method has 5 parameters. Parameters: matrix' objectPos' camPos' camUp' camLook
Long Parameter List,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,Intersect,The method has 5 parameters. Parameters: r' out_tmin' out_tmax' out_pos' out_nor
Long Parameter List,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,CubicInterpolate,The method has 5 parameters. Parameters: v0' v1' v2' v3' t
Long Identifier,LevelEditorCore.Commands,ManipulatorCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\ManipulatorCommands.cs,,The length of the parameter m_referenceCoordinateSystemComboBox is 35.
Long Statement,LevelEditorCore,MayaStyleCameraController,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\MayaStyleCameraController.cs,MouseDown,The length of the statement  "            if (InputScheme.ActiveControlScheme.IsControllingCamera(KeysInterop.ToAtf(Control.ModifierKeys)' MouseEventArgsInterop.ToAtf(e))) " is 129.
Long Statement,LevelEditorCore,MayaStyleCameraController,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\MayaStyleCameraController.cs,MouseMove,The length of the statement  "                InputScheme.ActiveControlScheme.IsControllingCamera(KeysInterop.ToAtf(Control.ModifierKeys)' MouseEventArgsInterop.ToAtf(e))) " is 125.
Long Statement,LevelEditorCore,MayaStyleCameraController,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\MayaStyleCameraController.cs,MouseMove,The length of the statement  "                if (InputScheme.ActiveControlScheme.IsRotating(KeysInterop.ToAtf(Control.ModifierKeys)' MouseEventArgsInterop.ToAtf(e)) && " is 122.
Long Statement,LevelEditorCore,MayaStyleCameraController,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\MayaStyleCameraController.cs,MouseMove,The length of the statement  "                else if (InputScheme.ActiveControlScheme.IsZooming(KeysInterop.ToAtf(Control.ModifierKeys)' MouseEventArgsInterop.ToAtf(e))) " is 124.
Long Statement,LevelEditorCore,MayaStyleCameraController,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\MayaStyleCameraController.cs,MouseMove,The length of the statement  "                else if (InputScheme.ActiveControlScheme.IsPanning(KeysInterop.ToAtf(Control.ModifierKeys)'MouseEventArgsInterop.ToAtf(e))) " is 123.
Long Statement,LevelEditorCore,MayaStyleCameraController,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\MayaStyleCameraController.cs,MouseWheel,The length of the statement  "            if (!InputScheme.ActiveControlScheme.IsZooming(KeysInterop.ToAtf(Control.ModifierKeys)' MouseEventArgsInterop.ToAtf(e))) " is 120.
Long Statement,LevelEditorCore,LayerLister,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\LayerLister.cs,Configure,The length of the statement  "            TreeControl.Text = "Drag items from the Project Lister and drop them here to create layers whose visibility can be controlled by clicking on a check box.".Localize(); " is 166.
Long Statement,LevelEditorCore.Commands,PickFilterCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\PickFilterCommands.cs,Initialize,The length of the statement  "            m_settingsService.RegisterSettings(this'new BoundPropertyDescriptor(this' () => ActivePickFilter' "ActiveFilter"'null' null)); " is 126.
Complex Conditional,LevelEditorCore,Util,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Utils\Util.cs,FindAll,The conditional expression  "(exact && childNode.Type == type)                                  || (!exact && type.IsAssignableFrom(childNode.Type))"  is complex.
Complex Conditional,LevelEditorCore.VectorMath,Bound2di,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\Bound2di.cs,Intersect,The conditional expression  "r1.x2 <= r2.x1                  || r1.x1 >= r2.x2                  || r1.y1 >= r2.y2                  || r1.y2 <= r2.y1"  is complex.
Virtual Method Call from Constructor,LevelEditorCore,LayerLister,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\LayerLister.cs,LayerLister,The constructor "LayerLister" calls a virtual method "Configure".
Magic Number,LevelEditorCore,ArcBallCameraController,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\ArcBallCameraController.cs,ProjectToArcball,The following statement contains a magic number: float x = (float)point.X / (m_width / 2);
Magic Number,LevelEditorCore,ArcBallCameraController,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\ArcBallCameraController.cs,ProjectToArcball,The following statement contains a magic number: float y = (float)point.Y / (m_height / 2);
Magic Number,LevelEditorCore,DesignViewControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\DesignViewControl.cs,DesignViewControl,The following statement contains a magic number: this.Camera.SetPerspective((float)(Math.PI / 4)' 1.0f' 0.1f' designView.CameraFarZ);
Magic Number,LevelEditorCore,DesignViewSettings,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\DesignViewSettings.cs,Initialize,The following statement contains a magic number: snapAngleEditor.ScaleFactor = 180.0 / Math.PI;
Magic Number,LevelEditorCore,MayaStyleCameraController,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\MayaStyleCameraController.cs,MouseWheel,The following statement contains a magic number: int eDelta = e.Delta > 0 ? 120 : -120;
Magic Number,LevelEditorCore,MayaStyleCameraController,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\MayaStyleCameraController.cs,MouseWheel,The following statement contains a magic number: int eDelta = e.Delta > 0 ? 120 : -120;
Magic Number,LevelEditorCore,ViewControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\ViewControl.cs,ViewControl,The following statement contains a magic number: m_camera.SetPerspective((float)(Math.PI / 4)' 1.0f' 0.1f' 2048);
Magic Number,LevelEditorCore,ViewControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\DesignViews\ViewControl.cs,ViewControl,The following statement contains a magic number: m_camera.SetPerspective((float)(Math.PI / 4)' 1.0f' 0.1f' 2048);
Magic Number,LevelEditorCore,ResourceLister,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ResourceLister.cs,Initialize,The following statement contains a magic number: m_splitContainer.SplitterDistance = 10;
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,ThumbnailControl,The following statement contains a magic number: m_hoverTimer = new Timer { Interval = 500 };
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,OnPaint,The following statement contains a magic number: try                              {                  format.Alignment = StringAlignment.Center;                    HashSet<ThumbnailControlItem> selected = new HashSet<ThumbnailControlItem>(m_selection);                    foreach (ThumbnailControlItem item in m_items)                  {                      Image image = item.Image;                      Rectangle thumbRect = GetThumbnailRect(position' image);                        e.Graphics.DrawImage(image' thumbRect);                        RectangleF captionRect = new RectangleF(                          position.X'                          position.Y + m_thumbnailSize + ThumbnailMargin'                          m_thumbnailSize'                          m_fontHeight);                        e.Graphics.DrawString(                          item.Name'                          Font'                          txtBrush'                          captionRect'                          format);                        if (m_indicatorImages != null &&                          item.Indicator != null)                      {                          Image indicator = m_indicatorImages.Images[item.Indicator];                          if (indicator != null)                          {                              Rectangle indicatorRect = new Rectangle(                                  new Point(position.X - 2' position.Y - 2)'                                  m_indicatorImages.ImageSize);                                e.Graphics.DrawImage(indicator' indicatorRect);                          }                      }                        Rectangle boundRect = GetThumbnailBoundaryRect(position);                      e.Graphics.DrawRectangle(                          selected.Contains(item) ? selPen : Pens.Black' boundRect);                        position = NextThumbnailPosition(position);                  }              }              finally              {                  txtBrush.Dispose();                  selPen.Dispose();                  format.Dispose();              }
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,OnPaint,The following statement contains a magic number: try                              {                  format.Alignment = StringAlignment.Center;                    HashSet<ThumbnailControlItem> selected = new HashSet<ThumbnailControlItem>(m_selection);                    foreach (ThumbnailControlItem item in m_items)                  {                      Image image = item.Image;                      Rectangle thumbRect = GetThumbnailRect(position' image);                        e.Graphics.DrawImage(image' thumbRect);                        RectangleF captionRect = new RectangleF(                          position.X'                          position.Y + m_thumbnailSize + ThumbnailMargin'                          m_thumbnailSize'                          m_fontHeight);                        e.Graphics.DrawString(                          item.Name'                          Font'                          txtBrush'                          captionRect'                          format);                        if (m_indicatorImages != null &&                          item.Indicator != null)                      {                          Image indicator = m_indicatorImages.Images[item.Indicator];                          if (indicator != null)                          {                              Rectangle indicatorRect = new Rectangle(                                  new Point(position.X - 2' position.Y - 2)'                                  m_indicatorImages.ImageSize);                                e.Graphics.DrawImage(indicator' indicatorRect);                          }                      }                        Rectangle boundRect = GetThumbnailBoundaryRect(position);                      e.Graphics.DrawRectangle(                          selected.Contains(item) ? selPen : Pens.Black' boundRect);                        position = NextThumbnailPosition(position);                  }              }              finally              {                  txtBrush.Dispose();                  selPen.Dispose();                  format.Dispose();              }
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,HoverTimerTick,The following statement contains a magic number: if (m_hoverLabel == null && m_hoverThumbnail != null)              {                  m_hoverLabel =                      new HoverLabel(m_hoverThumbnail.Description)                      {                          Location = new Point(MousePosition.X - 8' MousePosition.Y + 8)                      };                  m_hoverLabel.ShowWithoutFocus();              }
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,HoverTimerTick,The following statement contains a magic number: if (m_hoverLabel == null && m_hoverThumbnail != null)              {                  m_hoverLabel =                      new HoverLabel(m_hoverThumbnail.Description)                      {                          Location = new Point(MousePosition.X - 8' MousePosition.Y + 8)                      };                  m_hoverLabel.ShowWithoutFocus();              }
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,RecalculateClientSize,The following statement contains a magic number: if (m_items.Count > 0)              {                  int thumbsPerCol;                  int thumbsPerRow;                    if (m_orientation == Orientation.Horizontal)                  {                      thumbsPerCol = (ClientSize.Height - ThumbnailMargin) / (m_thumbnailSize + (2 * ThumbnailMargin) + m_fontHeight);                      if (thumbsPerCol < 1) thumbsPerCol = 1;                        thumbsPerRow = (m_items.Count / thumbsPerCol) + 1;                      if ((m_items.Count % 2) == 0)                          thumbsPerRow -= 1;                        if (thumbsPerRow < 1) thumbsPerRow = 1;                  }                  else // m_orientation == Orientation.Vertical                  {                      thumbsPerRow = (ClientSize.Width - ThumbnailMargin) / (m_thumbnailSize + ThumbnailMargin);                      if (thumbsPerRow < 1) thumbsPerRow = 1;                        thumbsPerCol = (m_items.Count / thumbsPerRow) + 1;                      if (((thumbsPerRow * thumbsPerCol) - m_items.Count) >= thumbsPerRow)                          thumbsPerCol -= 1;                        if (thumbsPerCol < 1) thumbsPerCol = 1;                  }                    size.Width = ((thumbsPerRow) * (m_thumbnailSize + ThumbnailMargin)) + ThumbnailMargin;                  size.Height = ((thumbsPerCol) * (m_thumbnailSize + (2 * ThumbnailMargin) + m_fontHeight)) + ThumbnailMargin;                  m_clientSize = size;              }
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,RecalculateClientSize,The following statement contains a magic number: if (m_items.Count > 0)              {                  int thumbsPerCol;                  int thumbsPerRow;                    if (m_orientation == Orientation.Horizontal)                  {                      thumbsPerCol = (ClientSize.Height - ThumbnailMargin) / (m_thumbnailSize + (2 * ThumbnailMargin) + m_fontHeight);                      if (thumbsPerCol < 1) thumbsPerCol = 1;                        thumbsPerRow = (m_items.Count / thumbsPerCol) + 1;                      if ((m_items.Count % 2) == 0)                          thumbsPerRow -= 1;                        if (thumbsPerRow < 1) thumbsPerRow = 1;                  }                  else // m_orientation == Orientation.Vertical                  {                      thumbsPerRow = (ClientSize.Width - ThumbnailMargin) / (m_thumbnailSize + ThumbnailMargin);                      if (thumbsPerRow < 1) thumbsPerRow = 1;                        thumbsPerCol = (m_items.Count / thumbsPerRow) + 1;                      if (((thumbsPerRow * thumbsPerCol) - m_items.Count) >= thumbsPerRow)                          thumbsPerCol -= 1;                        if (thumbsPerCol < 1) thumbsPerCol = 1;                  }                    size.Width = ((thumbsPerRow) * (m_thumbnailSize + ThumbnailMargin)) + ThumbnailMargin;                  size.Height = ((thumbsPerCol) * (m_thumbnailSize + (2 * ThumbnailMargin) + m_fontHeight)) + ThumbnailMargin;                  m_clientSize = size;              }
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,RecalculateClientSize,The following statement contains a magic number: if (m_items.Count > 0)              {                  int thumbsPerCol;                  int thumbsPerRow;                    if (m_orientation == Orientation.Horizontal)                  {                      thumbsPerCol = (ClientSize.Height - ThumbnailMargin) / (m_thumbnailSize + (2 * ThumbnailMargin) + m_fontHeight);                      if (thumbsPerCol < 1) thumbsPerCol = 1;                        thumbsPerRow = (m_items.Count / thumbsPerCol) + 1;                      if ((m_items.Count % 2) == 0)                          thumbsPerRow -= 1;                        if (thumbsPerRow < 1) thumbsPerRow = 1;                  }                  else // m_orientation == Orientation.Vertical                  {                      thumbsPerRow = (ClientSize.Width - ThumbnailMargin) / (m_thumbnailSize + ThumbnailMargin);                      if (thumbsPerRow < 1) thumbsPerRow = 1;                        thumbsPerCol = (m_items.Count / thumbsPerRow) + 1;                      if (((thumbsPerRow * thumbsPerCol) - m_items.Count) >= thumbsPerRow)                          thumbsPerCol -= 1;                        if (thumbsPerCol < 1) thumbsPerCol = 1;                  }                    size.Width = ((thumbsPerRow) * (m_thumbnailSize + ThumbnailMargin)) + ThumbnailMargin;                  size.Height = ((thumbsPerCol) * (m_thumbnailSize + (2 * ThumbnailMargin) + m_fontHeight)) + ThumbnailMargin;                  m_clientSize = size;              }
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,GetThumbnailRect,The following statement contains a magic number: int xInset = Math.Max(0' m_thumbnailSize - thumbSize.Width) / 2;
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,GetThumbnailRect,The following statement contains a magic number: int yInset = Math.Max(0' m_thumbnailSize - thumbSize.Height) / 2;
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,GetThumbnailBoundaryRect,The following statement contains a magic number: return new Rectangle(position.X - 4' position.Y - 4'                  m_thumbnailSize + 8' m_thumbnailSize + 8);
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,GetThumbnailBoundaryRect,The following statement contains a magic number: return new Rectangle(position.X - 4' position.Y - 4'                  m_thumbnailSize + 8' m_thumbnailSize + 8);
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,GetThumbnailBoundaryRect,The following statement contains a magic number: return new Rectangle(position.X - 4' position.Y - 4'                  m_thumbnailSize + 8' m_thumbnailSize + 8);
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,GetThumbnailBoundaryRect,The following statement contains a magic number: return new Rectangle(position.X - 4' position.Y - 4'                  m_thumbnailSize + 8' m_thumbnailSize + 8);
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,NextThumbnailPosition,The following statement contains a magic number: if (m_orientation == Orientation.Horizontal)              {                  position.Y += m_thumbnailSize + m_fontHeight + (2 * ThumbnailMargin);                  if (position.Y >= (m_clientSize.Height + AutoScrollPosition.Y - ThumbnailMargin))                  {                      position.X += ThumbnailMargin + m_thumbnailSize;                      position.Y = ThumbnailMargin + AutoScrollPosition.Y;                  }              }              else // m_orientation == Orientation.Vertical              {                  position.X += m_thumbnailSize + ThumbnailMargin;                  if (position.X >= (m_clientSize.Width + AutoScrollPosition.X - ThumbnailMargin))                  {                      position.X = ThumbnailMargin + AutoScrollPosition.X;                      position.Y += (m_thumbnailSize + (2 * ThumbnailMargin) + m_fontHeight);                  }              }
Magic Number,LevelEditorCore,ThumbnailControl,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ThumbnailControl.cs,NextThumbnailPosition,The following statement contains a magic number: if (m_orientation == Orientation.Horizontal)              {                  position.Y += m_thumbnailSize + m_fontHeight + (2 * ThumbnailMargin);                  if (position.Y >= (m_clientSize.Height + AutoScrollPosition.Y - ThumbnailMargin))                  {                      position.X += ThumbnailMargin + m_thumbnailSize;                      position.Y = ThumbnailMargin + AutoScrollPosition.Y;                  }              }              else // m_orientation == Orientation.Vertical              {                  position.X += m_thumbnailSize + ThumbnailMargin;                  if (position.X >= (m_clientSize.Width + AutoScrollPosition.X - ThumbnailMargin))                  {                      position.X = ThumbnailMargin + AutoScrollPosition.X;                      position.Y += (m_thumbnailSize + (2 * ThumbnailMargin) + m_fontHeight);                  }              }
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,Extend,The following statement contains a magic number: if (v.Count >= 3)              {                  if (!m_initialized)                  {                      Max.X = Min.X = v[0];                      Max.Y = Min.Y = v[1];                      Max.Z = Min.Z = v[2];                        m_initialized = true;                  }                    for (int i = 0; i < v.Count; i += 3)                  {                      Min.X = Math.Min(Min.X' v[i]);                      Min.Y = Math.Min(Min.Y' v[i + 1]);                      Min.Z = Math.Min(Min.Z' v[i + 2]);                        Max.X = Math.Max(Max.X' v[i]);                      Max.Y = Math.Max(Max.Y' v[i + 1]);                      Max.Z = Math.Max(Max.Z' v[i + 2]);                  }              }
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,Extend,The following statement contains a magic number: if (v.Count >= 3)              {                  if (!m_initialized)                  {                      Max.X = Min.X = v[0];                      Max.Y = Min.Y = v[1];                      Max.Z = Min.Z = v[2];                        m_initialized = true;                  }                    for (int i = 0; i < v.Count; i += 3)                  {                      Min.X = Math.Min(Min.X' v[i]);                      Min.Y = Math.Min(Min.Y' v[i + 1]);                      Min.Z = Math.Min(Min.Z' v[i + 2]);                        Max.X = Math.Max(Max.X' v[i]);                      Max.Y = Math.Max(Max.Y' v[i + 1]);                      Max.Z = Math.Max(Max.Z' v[i + 2]);                  }              }
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,Extend,The following statement contains a magic number: if (v.Count >= 3)              {                  if (!m_initialized)                  {                      Max.X = Min.X = v[0];                      Max.Y = Min.Y = v[1];                      Max.Z = Min.Z = v[2];                        m_initialized = true;                  }                    for (int i = 0; i < v.Count; i += 3)                  {                      Min.X = Math.Min(Min.X' v[i]);                      Min.Y = Math.Min(Min.Y' v[i + 1]);                      Min.Z = Math.Min(Min.Z' v[i + 2]);                        Max.X = Math.Max(Max.X' v[i]);                      Max.Y = Math.Max(Max.Y' v[i + 1]);                      Max.Z = Math.Max(Max.Z' v[i + 2]);                  }              }
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,Extend,The following statement contains a magic number: if (v.Count >= 3)              {                  if (!m_initialized)                  {                      Max.X = Min.X = v[0];                      Max.Y = Min.Y = v[1];                      Max.Z = Min.Z = v[2];                        m_initialized = true;                  }                    for (int i = 0; i < v.Count; i += 3)                  {                      Min.X = Math.Min(Min.X' v[i]);                      Min.Y = Math.Min(Min.Y' v[i + 1]);                      Min.Z = Math.Min(Min.Z' v[i + 2]);                        Max.X = Math.Max(Max.X' v[i]);                      Max.Y = Math.Max(Max.Y' v[i + 1]);                      Max.Z = Math.Max(Max.Z' v[i + 2]);                  }              }
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,Extend,The following statement contains a magic number: if (v.Count >= 3)              {                  if (!m_initialized)                  {                      Max.X = Min.X = v[0];                      Max.Y = Min.Y = v[1];                      Max.Z = Min.Z = v[2];                        m_initialized = true;                  }                    for (int i = 0; i < v.Count; i += 3)                  {                      Min.X = Math.Min(Min.X' v[i]);                      Min.Y = Math.Min(Min.Y' v[i + 1]);                      Min.Z = Math.Min(Min.Z' v[i + 2]);                        Max.X = Math.Max(Max.X' v[i]);                      Max.Y = Math.Max(Max.Y' v[i + 1]);                      Max.Z = Math.Max(Max.Z' v[i + 2]);                  }              }
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,Transform,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  for (int j = 0; j < 3; j++)                  {                      float e = Min[j] * xform[j' i];                      float f = Max[j] * xform[j' i];                      if (e < f)                      {                          newMin[i] += e;                          newMax[i] += f;                        }                      else                      {                          newMin[i] += f;                          newMax[i] += e;                      }                  }              }
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,Transform,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  for (int j = 0; j < 3; j++)                  {                      float e = Min[j] * xform[j' i];                      float f = Max[j] * xform[j' i];                      if (e < f)                      {                          newMin[i] += e;                          newMax[i] += f;                        }                      else                      {                          newMin[i] += f;                          newMax[i] += e;                      }                  }              }
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,ToArray,The following statement contains a magic number: float[] temp = new float[6];
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,ToArray,The following statement contains a magic number: temp[2] = Min.Z;
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,ToArray,The following statement contains a magic number: temp[3] = Max.X;
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,ToArray,The following statement contains a magic number: temp[4] = Max.Y;
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,ToArray,The following statement contains a magic number: temp[5] = Max.Z;
Magic Number,LevelEditorCore.VectorMath,AABB,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\AABB.cs,Intersect,The following statement contains a magic number: for (int i = 0; i < 3; ++i)              {                  if (Math.Abs(d[i]) < float.Epsilon)                  {   // ray is parallel to slab' no hit if origin not within slab                      if (p[i] < Min[i] || p[i] > Max[i])                      {                          return false;                      }                  }                  else                  {                      // compute intersection t values of ray with near and far plane of slab                      float ood = 1.0f / d[i];                      float t1 = (Min[i] - p[i]) * ood;                      float t2 = (Max[i] - p[i]) * ood;                      tmin = Math.Max(tmin' Math.Min(t1' t2));                      tmax = Math.Min(tmax' Math.Max(t1' t2));                        // exit with no collision as soon as slab intersection becomes empty                      if (tmin > tmax)                      {                          return false;                      }                  }              }
Magic Number,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,NoiseGenerator,The following statement contains a magic number: NumberOfOctaves = 5;
Magic Number,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,NoiseGenerator,The following statement contains a magic number: NumFeatures = 10;
Magic Number,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,Noise,The following statement contains a magic number: x = (x << 13) ^ x;
Magic Number,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,Noise,The following statement contains a magic number: return (1.0f - ((x * (x * x * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);
Magic Number,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,Noise,The following statement contains a magic number: return (1.0f - ((x * (x * x * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);
Magic Number,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,Noise,The following statement contains a magic number: return (1.0f - ((x * (x * x * 15731 + 789221) + 1376312589) & 0x7fffffff) / 1073741824.0f);
Magic Number,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,SmoothCurve,The following statement contains a magic number: return x * x * (3 - 2 * x);
Magic Number,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,SmoothCurve,The following statement contains a magic number: return x * x * (3 - 2 * x);
Magic Number,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,SmoothStep,The following statement contains a magic number: float ft = t * t * (3 - 2 * t);
Magic Number,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,SmoothStep,The following statement contains a magic number: float ft = t * t * (3 - 2 * t);
Magic Number,LevelEditorCore.VectorMath,NoiseGenerator,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\VectorMath\NoiseGenerator.cs,ComputeNoise,The following statement contains a magic number: for (int i = 0; i < n; i++)              {                  int frequency = (int)Math.Pow(2' i);                  float amplitude = (float)Math.Pow(p' i);                    float nz = InterpolatedNoise(x * frequency * NumFeatures' y * frequency * NumFeatures);                  total = total + nz * amplitude;              }
Missing Default,LevelEditorCore,ResourceLister,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Listers\ResourceLister.cs,DoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                      case Command.DetailsView:                          {                              m_thumbnailControl.Hide();                              m_listView.Show();                              RefreshThumbnails();                          }                          break;                        case Command.ThumbnailView:                          {                              m_listView.Hide();                              m_thumbnailControl.Show();                              RefreshThumbnails();                          }                          break;                  }
Missing Default,LevelEditorCore.Commands,DesignViewCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\DesignViewCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                                           case Command.SingleView:                            m_designView.ViewMode = ViewModes.Single;                          break;                        case Command.QuadView:                          m_designView.ViewMode = ViewModes.Quad;                          break;                        case Command.DualHorizontalView:                          m_designView.ViewMode = ViewModes.DualHorizontal;                          break;                        case Command.DualVerticalView:                          m_designView.ViewMode = ViewModes.DualVertical;                          break;                  }
Missing Default,LevelEditorCore.Commands,DesignViewCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\DesignViewCommands.cs,UpdateCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                                           case Command.SingleView:                          state.Check = m_designView.ViewMode == ViewModes.Single;                          break;                        case Command.QuadView:                          state.Check = m_designView.ViewMode == ViewModes.Quad;                          break;                        case Command.DualHorizontalView:                          state.Check = m_designView.ViewMode == ViewModes.DualHorizontal;                          break;                        case Command.DualVerticalView:                          state.Check = m_designView.ViewMode == ViewModes.DualVertical;                          break;                  }
Missing Default,LevelEditorCore.Commands,GroupCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\GroupCommands.cs,CanDoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)              {                  case StandardCommand.EditGroup:                      return m_canGroup;                  case StandardCommand.EditUngroup:                      return m_canUngroup;              }
Missing Default,LevelEditorCore.Commands,GroupCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\GroupCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)              {                  case StandardCommand.EditGroup:                      transactionContext.DoTransaction(delegate                      {                          IGameObjectGroup group = Group(SelectedGobs);                          m_selectionContext.Set(Util.AdaptDomPath(group.As<DomNode>()));                      }' "Group".Localize());                                          break;                  case StandardCommand.EditUngroup:                      transactionContext.DoTransaction(delegate                      {                          IEnumerable<IGameObject> gobs = Ungroup(SelectedGobs);                          List<object> newselection = new List<object>();                          foreach(var gob in gobs)                          {                              newselection.Add(Util.AdaptDomPath(gob.As<DomNode>()));                          }                          m_selectionContext.SetRange(newselection);                        }' "Ungroup".Localize());                                          break;              }
Missing Default,LevelEditorCore.Commands,ManipulatorCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\ManipulatorCommands.cs,CanDoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                      case Command.Select:                                              case Command.SnapToVertex:                                              case Command.RotateOnSnap:                          cando = true;                          break;                  }
Missing Default,LevelEditorCore.Commands,ManipulatorCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\ManipulatorCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                                                             case Command.Select:                          m_designView.Manipulator = null;                           break;                                           case Command.SnapToVertex:                          snapSettings.SnapVertex = !snapSettings.SnapVertex;                          break;                        case Command.RotateOnSnap:                          snapSettings.RotateOnSnap = !snapSettings.RotateOnSnap;                          break;                    }
Missing Default,LevelEditorCore.Commands,ManipulatorCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\ManipulatorCommands.cs,UpdateCommand,The following switch statement is missing a default case: switch ((Command)commandTag)                  {                                          case Command.Select:                          state.Check = m_designView.Manipulator == null;                          break;                                           case Command.SnapToVertex:                          state.Check = snapSettings.SnapVertex;                          break;                        case Command.RotateOnSnap:                          state.Check = snapSettings.RotateOnSnap;                          break;                    }
Missing Default,LevelEditorCore.Commands,ShowCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\ShowCommands.cs,CanDoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                  {                      case StandardCommand.ViewHide:                          return (selectionContext != null && selectionContext.SelectionCount > 0);                      case StandardCommand.ViewShow:                          return (selectionContext != null && selectionContext.SelectionCount > 0);                      case StandardCommand.ViewShowLast:                          return (m_hideStack != null && m_hideStack.Count > 0);                      case StandardCommand.ViewShowAll:                          return (enumerableContext != null);                      case StandardCommand.ViewIsolate:                          return (selectionContext != null && selectionContext.SelectionCount > 0);                  }
Missing Default,LevelEditorCore.Commands,ShowCommands,C:\repos\SonyWWS_LevelEditor\LevelEditorCore\Commands\ShowCommands.cs,DoCommand,The following switch statement is missing a default case: switch ((StandardCommand)commandTag)                  {                      case StandardCommand.ViewHide:                          HideSelection(selection' visibilityContext);                          break;                      case StandardCommand.ViewShow:                          ShowSelection(selection' visibilityContext);                          break;                      case StandardCommand.ViewShowLast:                          ShowLastHidden(visibilityContext);                          break;                      case StandardCommand.ViewShowAll:                          ShowAll(visibilityContext' enumerableContext);                          break;                      case StandardCommand.ViewIsolate:                          IsolateSelection(selection' visibilityContext' enumerableContext);                          break;                  }
