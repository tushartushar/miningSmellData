Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The method has 145 lines of code.
Long Method,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetStoreType,The method has 183 lines of code.
Long Method,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,SqlTypesAssembly,The method has 873 lines of code.
Long Method,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,GenerateInsertSql,The method has 122 lines of code.
Long Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitConstant,The method has 121 lines of code.
Long Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,The method has 119 lines of code.
Long Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,ProcessJoinInputResult,The method has 100 lines of code.
Complex Method,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateSqlParameter,Cyclomatic complexity of the method is 10
Complex Method,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,GenerateInsertSql,Cyclomatic complexity of the method is 16
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,TryTranslateIntoIn,Cyclomatic complexity of the method is 11
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,Cyclomatic complexity of the method is 8
Complex Method,System.Data.Entity.SqlServer.SqlGen,SqlSelectStatement,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlSelectStatement.cs,WriteSql,Cyclomatic complexity of the method is 13
Long Parameter List,System.Data.Entity.SqlServer.Utilities,SqlDataReaderWrapper,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Utilities\SqlDataReaderWrapper.cs,GetBytes,The method has 5 parameters. Parameters: i' dataIndex' buffer' bufferIndex' length
Long Parameter List,System.Data.Entity.SqlServer.Utilities,SqlDataReaderWrapper,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Utilities\SqlDataReaderWrapper.cs,GetChars,The method has 5 parameters. Parameters: i' dataIndex' buffer' bufferIndex' length
Long Parameter List,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateSqlParameter,The method has 6 parameters. Parameters: name' type' mode' value' preventTruncation' version
Long Parameter List,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetSqlDbType,The method has 7 parameters. Parameters: type' isOutParam' version' size' precision' scale' udtName
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,GenerateReturningSql,The method has 6 parameters. Parameters: commandText' tree' tableType' translator' returning' useGeneratedValuesVariable
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,ExpressionTranslator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,ExpressionTranslator,The method has 5 parameters. Parameters: commandText' commandTree' preserveMemberValues' sqlGenerator' localVariableBindings
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,TransformIntersectOrExcept,The method has 5 parameters. Parameters: left' right' expressionKind' sortExpressionsOverLeft' sortExpressionsBindingVariableName
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,RemoveNonSortProperties,The method has 5 parameters. Parameters: list1' list2' sortList' list1BindingVariableName' sortExpressionsBindingVariableName
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialCanonicalFunction,The method has 5 parameters. Parameters: sqlgen' functionExpression' staticMethodsMap' instancePropertiesMap' renamedInstanceMethodsMap
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,WriteInstanceFunctionCall,The method has 5 parameters. Parameters: sqlgen' functionName' functionExpression' isPropertyAccess' castReturnTypeTo
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionDateTimeTypeCreation,The method has 5 parameters. Parameters: sqlgen' typeName' args' hasDatePart' hasTimeZonePart
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,TranslateConstantParameterForLike,The method has 6 parameters. Parameters: sqlgen' targetExpression' constSearchParamExpression' result' insertPercentStart' insertPercentEnd
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,GenerateSql,The method has 5 parameters. Parameters: tree' sqlVersion' parameters' commandType' paramsToForceNonUnicode
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,AddColumn,The method has 5 parameters. Parameters: selectStatement' symbol' columnList' columnDictionary' columnName
Long Parameter List,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,CreateNewSelectStatement,The method has 5 parameters. Parameters: oldStatement' inputVarName' inputVarType' finalizeOldStatement' fromSymbol
Long Identifier,System.Data.Entity.SqlServer,Expressions,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Expressions.cs,Lambda,The length of the parameter createLambdaBodyGivenParameter is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbDatabaseExists,The length of the parameter databaseDoesNotExistInSysTables is 31.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStGeomFromText is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStPointFromText is 31.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStLineFromText is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStPolyFromText is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStmPointFromText is 32.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStmLineFromText is 31.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStmPolyFromText is 31.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStGeomCollFromText is 34.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStPointFromWkb is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStmPointFromWkb is 31.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStmLineFromWkb is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStmPolyFromWkb is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeographyStGeomCollFromWkb is 33.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _imiSqlGeographyStGeometryType is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _imiSqlGeographyStIntersection is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _imiSqlGeographyStSymDifference is 31.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _imiSqlGeographyStNumGeometries is 31.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeometryStPointFromText is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeometryStmPointFromText is 31.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeometryStmLineFromText is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeometryStmPolyFromText is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeometryStGeomCollFromText is 33.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeometryStmPointFromWkb is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _smiSqlGeometryStGeomCollFromWkb is 32.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _imiSqlGeometryStSymDifference is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _imiSqlGeometryStNumGeometries is 30.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _imiSqlGeometryStPointOnSurface is 31.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _imiSqlGeometryStNumInteriorRing is 32.
Long Identifier,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,,The length of the parameter _imiSqlGeometryStInteriorRingN is 30.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_GeographyValueNotSqlCompatible is 42.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_GeometryValueNotSqlCompatible is 41.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter ProviderReturnedNullForGetDbInformation is 39.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter Mapping_Provider_WrongManifestType is 34.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_Sql2008RequiredForSpatial is 37.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_SqlTypesAssemblyNotFound is 36.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_IncompleteCreateDatabase is 36.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_IncompleteCreateDatabaseAggregate is 45.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_DdlGeneration_MissingInitialCatalog is 47.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_DdlGeneration_CannotDeleteDatabaseNoInitialCatalog is 62.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_DdlGeneration_CannotTellIfDatabaseExists is 52.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_CredentialsMissingForMasterConnection is 49.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_InvalidGeographyColumn is 34.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlProvider_InvalidGeometryColumn is 33.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter Mapping_Provider_WrongConnectionType is 36.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter Update_NotSupportedServerGenKey is 31.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter Update_NotSupportedIdentityType is 31.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter Update_SqlEntitySetWithoutDmlFunctions is 38.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter Cqt_General_UnsupportedExpression is 33.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlGen_ApplyNotSupportedOnSql8 is 30.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlGen_NiladicFunctionsCannotHaveParameters is 43.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlGen_InvalidDatePartArgumentExpression is 40.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlGen_InvalidDatePartArgumentValue is 35.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlGen_TypedPositiveInfinityNotSupported is 40.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlGen_TypedNegativeInfinityNotSupported is 40.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlGen_PrimitiveTypeNotSupportedPriorSql10 is 42.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlGen_CanonicalFunctionNotSupportedPriorSql10 is 46.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlGen_ParameterForLimitNotSupportedOnSql8 is 42.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlGen_ParameterForSkipNotSupportedOnSql8 is 41.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter Spatial_WellKnownGeographyValueNotValid is 39.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter Spatial_WellKnownGeometryValueNotValid is 38.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlSpatialServices_ProviderValueNotSqlType is 42.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoSrid is 62.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoWkbOrWkt is 66.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoSrid is 61.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoWkbOrWkt is 65.
Long Identifier,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,,The length of the parameter SqlServerMigrationSqlGenerator_UnknownOperation is 47.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,,The length of the parameter s_commandTextBuilderInitialCapacity is 35.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,TransformIntersectOrExcept,The length of the parameter sortExpressionsBindingVariableName is 34.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,RemoveNonSortProperties,The length of the parameter sortExpressionsBindingVariableName is 34.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,HasMatchInList,The length of the parameter listExpressionsBindingVariableName is 34.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeFunctionNameToOperatorDictionary,The length of the parameter functionNameToOperatorDictionary is 32.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeDateAddFunctionNameToDatepartDictionary,The length of the parameter dateAddFunctionNameToDatepartDictionary is 39.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeDateDiffFunctionNameToDatepartDictionary,The length of the parameter dateDiffFunctionNameToDatepartDictionary is 40.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyInstancePropertyFunctionsDictionary,The length of the parameter instancePropGeographyFunctions is 30.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeRenamedGeographyInstanceMethodFunctions,The length of the parameter renamedInstanceMethodFunctions is 30.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeRenamedGeometryInstanceMethodFunctions,The length of the parameter renamedInstanceMethodFunctions is 30.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,CastReturnTypeToGivenType,The length of the parameter functionsRequiringReturnTypeCast is 32.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _functionNameToOperatorDictionary is 33.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _dateAddFunctionNameToDatepartDictionary is 40.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _dateDiffFunctionNameToDatepartDictionary is 41.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _geographyFunctionNameToStaticMethodHandlerDictionary is 53.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _geographyFunctionNameToInstancePropertyNameDictionary is 54.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _geographyRenamedInstanceMethodFunctionDictionary is 49.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _geometryFunctionNameToStaticMethodHandlerDictionary is 52.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _geometryFunctionNameToInstancePropertyNameDictionary is 53.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _geometryRenamedInstanceMethodFunctionDictionary is 48.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _functionRequiresReturnTypeCastToInt64 is 38.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _functionRequiresReturnTypeCastToInt32 is 38.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _functionRequiresReturnTypeCastToInt16 is 38.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _functionRequiresReturnTypeCastToSingle is 39.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _defaultGeographySridExpression is 31.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,,The length of the parameter _defaultGeometrySridExpression is 30.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,TryTranslateIntoIn,The length of the parameter forceNonUnicodeOnQualifyingValues is 33.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,HandleInValue,The length of the parameter forceNonUnicodeOnQualifyingValues is 33.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,,The length of the parameter _candidateParametersToForceNonUnicode is 37.
Long Identifier,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,,The length of the parameter _canonicalAndStoreStringFunctionsOneArg is 39.
Long Statement,System.Data.Entity.SqlServer.Utilities,TypeUsageExtensions,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Utilities\TypeUsageExtensions.cs,IsSpatialType,The length of the statement  "            return (type.EdmType.BuiltInTypeKind == BuiltInTypeKind.PrimitiveType && ((PrimitiveType)type.EdmType).IsSpatialType()); " is 120.
Long Statement,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The length of the statement  "                            // The client was unable to establish a connection because of an error during connection initialization process before login.  " is 125.
Long Statement,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The length of the statement  "                            // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum " is 120.
Long Statement,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The length of the statement  "                            // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by " is 120.
Long Statement,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The length of the statement  "                            // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.  " is 151.
Long Statement,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,IsKatmaiOrNewer,The length of the statement  "            // Spatial types are only supported from Katmai onward; any functions using them must therefore also be Katmai or newer. " is 120.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,SetDbParameterValue,The length of the statement  "                var size = GetParameterSize(parameterType' ((parameter.Direction & ParameterDirection.Output) == ParameterDirection.Output)); " is 125.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDbSpatialDataReader,The length of the statement  "                GetSpatialServices(new DbProviderInfo(ProviderInvariantName' versionHint))' new SqlDataReaderWrapper(underlyingReader)); " is 120.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,EnsureSqlParameterValue,The length of the statement  "                // If the parameter is being created based on an actual value (typically for constants found in DML expressions) then a DbGeography/DbGeometry " is 142.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,EnsureSqlParameterValue,The length of the statement  "                // value must be replaced by an an appropriate Microsoft.SqlServer.Types.SqlGeography/SqlGeometry instance. Since the DbGeography/DbGeometry " is 140.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,EnsureSqlParameterValue,The length of the statement  "                // value may not have been originally created by this SqlClient provider services implementation' just using the ProviderValue is not sufficient. " is 145.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbCreateDatabase,The length of the statement  "                    // The creation of the database succeeded' the creation of the database objects failed' and the dropping of the database failed. " is 128.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,DbCreateDatabase,The length of the statement  "                // The creation of the database succeeded' the creation of the database objects failed' the database was dropped' no reason to wrap the exception " is 145.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetLdfFileName,The length of the statement  "            logFileName = Path.Combine(directory.FullName' String.Concat(Path.GetFileNameWithoutExtension(dataFileName)' "_log.ldf")); " is 122.
Long Statement,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlSpatialServices.cs,CreateWellKnownValue,The length of the statement  "                (Exception)new ArgumentException(Strings.SqlSpatialservices_CouldNotCreateWellKnownGeographyValueNoSrid' "geographyValue")' " is 123.
Long Statement,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlSpatialServices.cs,CreateWellKnownValue,The length of the statement  "                (Exception)new ArgumentException(Strings.SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoSrid' "geometryValue")' " is 121.
Long Statement,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlSpatialServices.cs,CreateWellKnownValue,The length of the statement  "                (Exception)new ArgumentException(Strings.SqlSpatialservices_CouldNotCreateWellKnownGeometryValueNoWkbOrWkt' "geometryValue")' " is 125.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,GetSqlTypesSpatialValue,The length of the statement  "            // If the specified value was created by this spatial services implementation' its underlying Microsoft.SqlServer.Types.SqlGeography value is available via the ProviderValue property. " is 183.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,GetSqlTypesSpatialValue,The length of the statement  "            // Otherwise' attempt to retrieve a Well Known Binary' Well Known Text or GML (in descending order of preference) representation of the value that can be used to create an appropriate Microsoft.SqlServer.Types.SqlGeography/SqlGeometry value " is 240.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,CreateStaticConstructorDelegate,The length of the statement  "            Debug.Assert(staticCtorMethod != null' "Could not find method '" + methodName + "' on type '" + spatialType.FullName + "'"); " is 124.
Long Statement,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,BuildConvertToSqlXml,The length of the statement  "            var readerCtor = sqlXmlType.GetConstructor(BindingFlags.Instance | BindingFlags.Public' null' new[] { toConvert.Type }' null); " is 126.
Long Statement,System.Data.Entity.SqlServer.SqlGen,ExpressionTranslator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,CreateParameter,The length of the statement  "                    name ?? GetParameterName(_parameters.Count)' type' ParameterMode.In' value' preventTruncation' _sqlGenerator.SqlVersion); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,Visit,The length of the statement  "            DbExpression rightInput = VisitExpressionBinding(e.Input).Sort(VisitSortOrder(e.SortOrder)).Limit(VisitExpression(e.Count)); " is 124.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,TransformIntersectOrExcept,The length of the statement  "            //For Skip' we need to ignore any columns that are not in the original sort list. We can recognize these by comparing the left flattened properties and " is 151.
Long Statement,System.Data.Entity.SqlServer.SqlGen,Sql8ExpressionRewriter,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\Sql8ExpressionRewriter.cs,TransformIntersectOrExcept,The length of the statement  "            // If any such columns exist' we need to add an additional project' to keep the rest of the columns from being projected' as if any among these " is 143.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "                (sqlgen' functionExpression) => WriteInstanceFunctionCall(sqlgen' "AsTextZM"' functionExpression' isPropertyAccess: false)); " is 124.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "                (sqlgen' functionExpression) => WriteInstanceFunctionCall(sqlgen' "InstanceOf"' functionExpression' isPropertyAccess: false)); " is 126.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "                (sqlgen' functionExpression) => WriteInstanceFunctionCall(sqlgen' "Filter"' functionExpression' isPropertyAccess: false)); " is 122.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "                (sqlgen' functionExpression) => WriteInstanceFunctionCall(sqlgen' "MakeValid"' functionExpression' isPropertyAccess: false)); " is 125.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "                (sqlgen' functionExpression) => WriteInstanceFunctionCall(sqlgen' "Reduce"' functionExpression' isPropertyAccess: false)); " is 122.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "                (sqlgen' functionExpression) => WriteInstanceFunctionCall(sqlgen' "NumRings"' functionExpression' isPropertyAccess: false)); " is 124.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The length of the statement  "                (sqlgen' functionExpression) => WriteInstanceFunctionCall(sqlgen' "RingN"' functionExpression' isPropertyAccess: false)); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STPointFromText")); " is 122.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STLineFromText")); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STPolyFromText")); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STMPointFromText")); " is 123.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STMLineFromText")); " is 122.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STMPolyFromText")); " is 122.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STGeomCollFromText")); " is 125.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STPointFromWKB")); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STLineFromWKB")); " is 120.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STPolyFromWKB")); " is 120.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STMPointFromWKB")); " is 122.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STMLineFromWKB")); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STMPolyFromWKB")); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeographyStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geography::STGeomCollFromWKB")); " is 124.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STPointFromText")); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STLineFromText")); " is 120.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STPolyFromText")); " is 120.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STMPointFromText")); " is 122.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STMLineFromText")); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STMPolyFromText")); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STGeomCollFromText")); " is 124.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STPointFromWKB")); " is 120.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STMPointFromWKB")); " is 121.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STMLineFromWKB")); " is 120.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STMPolyFromWKB")); " is 120.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeGeometryStaticMethodFunctionsDictionary,The length of the statement  "                (sqlgen' functionExpression) => HandleFunctionDefaultGivenName(sqlgen' functionExpression' "geometry::STGeomCollFromWKB")); " is 123.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialFromTextFunction,The length of the statement  "                Debug.Assert(functionExpression.Arguments.Count == 1' "FromText function should have text or text + srid arguments only"); " is 122.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialCanonicalFunction,The length of the statement  "                // Default translation pattern is instance method; the instance method name may differ from that of the spatial canonical function " is 130.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpecialFunctionToOperator,The length of the statement  "            Debug.Assert(_functionNameToOperatorDictionary.ContainsKey(e.Function.Name)' "The function can not be mapped to an operator"); " is 126.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionEndsWith,The length of the statement  "                //      CASE WHEN ('abcd ' LIKE '%cd') THEN cast(1 as bit) WHEN ( NOT ('abcd ' LIKE '%cd')) THEN cast(0 as bit) END AS [C1] " is 123.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitConstant,The length of the statement  "            //      Binary' Boolean' Byte' Date' DateTime' DateTimeOffset' Decimal' Double' Guid' Int16' Int32' Int64' Single' String' Time " is 127.
Long Statement,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,TryTranslateIntoIn,The length of the statement  "                    HandleInValue(sqlBuilder' value' key.ResultType.EdmType == value.ResultType.EdmType' forceNonUnicodeOnQualifyingValues); " is 120.
Complex Conditional,System.Data.Entity.SqlServer,SqlDdlBuilder,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlDdlBuilder.cs,AppendType,The conditional expression  "type.EdmType.Name == "binary"                  &&                  8 == type.GetMaxLength()                  &&                  column.TypeUsage.Facets.TryGetValue("StoreGeneratedPattern"' false' out storeGenFacet)                  &&                  storeGenFacet.Value != null                  &&                  StoreGeneratedPattern.Computed == (StoreGeneratedPattern)storeGenFacet.Value"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,EscapeLikeText,The conditional expression  "!(text.Contains("%") || text.Contains("_") || text.Contains("[")                    || text.Contains("^") || alwaysEscapeEscapeChar && text.Contains(LikeEscapeCharToString))"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,EscapeLikeText,The conditional expression  "c == '%'                      || c == '_'                      || c == '['                      || c == '^'                      || c == LikeEscapeChar"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateSqlParameter,The conditional expression  "precision.HasValue                  && (isOutParam || (result.Precision != precision.Value && _truncateDecimalsToScale))"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateSqlParameter,The conditional expression  "scale.HasValue                  && (isOutParam || (result.Scale != scale.Value && _truncateDecimalsToScale))"  is complex.
Complex Conditional,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetNonMaxLength,The conditional expression  "type == SqlDbType.Char                       || type == SqlDbType.VarChar                       ||                       type == SqlDbType.Binary                       || type == SqlDbType.VarBinary"  is complex.
Complex Conditional,System.Data.Entity.SqlServer.SqlGen,DmlSqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\DmlSqlGenerator.cs,IsValidScopeIdentityColumnType,The conditional expression  "typeName == "tinyint"                  || typeName == "smallint"                  ||                  typeName == "int"                  || typeName == "bigint""  is complex.
Complex Conditional,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,FlattenAssociativeExpression,The conditional expression  "kind != DbExpressionKind.Or                  &&                  kind != DbExpressionKind.And                  &&                  kind != DbExpressionKind.Plus                  &&                  kind != DbExpressionKind.Multiply"  is complex.
Complex Conditional,System.Data.Entity.SqlServer.SqlGen,SqlSelectStatement,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlSelectStatement.cs,WriteSql,The conditional expression  "(null != orderBy)                  && !OrderBy.IsEmpty                  && (IsTopMost || Select.Top != null)"  is complex.
Complex Conditional,System.Data.Entity.Migrations.Sql,SqlServerMigrationSqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The conditional expression  "(column.IsNullable != null)                      && !column.IsNullable.Value                      && (column.DefaultValue == null)                      && (string.IsNullOrWhiteSpace(column.DefaultValueSql))                      && !column.IsIdentity                      && !column.IsTimestamp                      && !column.StoreType.EqualsIgnoreCase("rowversion")                      && !column.StoreType.EqualsIgnoreCase("timestamp")"  is complex.
Virtual Method Call from Constructor,System.Data.Entity.SqlServer,SqlSpatialDataReader,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlSpatialDataReader.cs,SqlSpatialDataReader,The constructor "SqlSpatialDataReader" calls a virtual method "GetDataTypeName".
Empty Catch Block,System.Data.Entity.SqlServer,SqlTypesAssemblyLoader,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssemblyLoader.cs,BindToLatest,The method has an empty catch block.
Empty Catch Block,System.Data.Entity.SqlServer,SqlTypesAssemblyLoader,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssemblyLoader.cs,BindToLatest,The method has an empty catch block.
Magic Number,System.Data.Entity.SqlServer.Utilities,DatabaseName,C:\repos\mono_entityframework\src\Common\DatabaseName.cs,Parse,The following statement contains a magic number: if (parts.Length > 2)              {                  throw Error.InvalidDatabaseName(name);              }
Magic Number,System.Data.Entity.SqlServer.Utilities,DatabaseName,C:\repos\mono_entityframework\src\Common\DatabaseName.cs,Parse,The following statement contains a magic number: if (parts.Length == 2)              {                  schema = parts[0];                    if (string.IsNullOrWhiteSpace(schema))                  {                      throw Error.InvalidDatabaseName(name);                  }                    objectName = parts[1];              }              else              {                  objectName = parts[0];              }
Magic Number,System.Data.Entity.SqlServer.Utilities,DatabaseName,C:\repos\mono_entityframework\src\Common\DatabaseName.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return (_name.GetHashCode() * 397) ^ (_schema != null ? _schema.GetHashCode() : 0);              }
Magic Number,System.Data.Entity.SqlServer.Utilities,StringExtensions,C:\repos\mono_entityframework\src\Common\StringExtensions.cs,MigrationName,The following statement contains a magic number: return migrationId.Substring(16);
Magic Number,System.Data.Entity.SqlServer.Utilities,StringExtensions,C:\repos\mono_entityframework\src\Common\StringExtensions.cs,ToAutomaticMigrationId,The following statement contains a magic number: var timeStampInt = Convert.ToInt64(migrationId.Substring(0' 15)' CultureInfo.InvariantCulture) - 1;
Magic Number,System.Data.Entity.SqlServer.Utilities,StringExtensions,C:\repos\mono_entityframework\src\Common\StringExtensions.cs,ToAutomaticMigrationId,The following statement contains a magic number: return timeStampInt + migrationId.Substring(15) + "_" + Strings.AutomaticMigration;
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following statement contains a magic number: if (sqlException != null)              {                  // Enumerate through all errors found in the exception.                  foreach (SqlError err in sqlException.Errors)                  {                      switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }                  }                    return false;              }
Magic Number,System.Data.Entity.SqlServer,SqlDdlBuilder,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlDdlBuilder.cs,AppendType,The following statement contains a magic number: if (type.EdmType.Name == "binary"                  &&                  8 == type.GetMaxLength()                  &&                  column.TypeUsage.Facets.TryGetValue("StoreGeneratedPattern"' false' out storeGenFacet)                  &&                  storeGenFacet.Value != null                  &&                  StoreGeneratedPattern.Computed == (StoreGeneratedPattern)storeGenFacet.Value)              {                  isTimestamp = true;                  AppendIdentifier("rowversion");              }              else              {                  var typeName = type.EdmType.Name;                  // Special case: the EDM treats 'nvarchar(max)' as a type name' but SQL Server treats                  // it as a type 'nvarchar' and a type qualifier. As such' we can't escape the entire                  // type name as the EDM sees it.                  const string maxSuffix = "(max)";                  if (type.EdmType.BuiltInTypeKind == BuiltInTypeKind.PrimitiveType                      && typeName.EndsWith(maxSuffix' StringComparison.Ordinal))                  {                      Debug.Assert(                          new[] { "nvarchar(max)"' "varchar(max)"' "varbinary(max)" }.Contains(typeName)'                          "no other known SQL Server primitive types types accept (max)");                      AppendIdentifier(typeName.Substring(0' typeName.Length - maxSuffix.Length));                      AppendSql("(max)");                  }                  else                  {                      AppendIdentifier(typeName);                  }                  switch (type.EdmType.Name)                  {                      case "decimal":                      case "numeric":                          AppendSqlInvariantFormat("({0}' {1})"' type.GetPrecision()' type.GetScale());                          break;                      case "datetime2":                      case "datetimeoffset":                      case "time":                          AppendSqlInvariantFormat("({0})"' type.GetPrecision());                          break;                      case "binary":                      case "varbinary":                      case "nvarchar":                      case "varchar":                      case "char":                      case "nchar":                          AppendSqlInvariantFormat("({0})"' type.GetMaxLength());                          break;                      default:                          break;                  }              }
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The following statement contains a magic number: var majorVersion = Int32.Parse(connection.ServerVersion.Substring(0' 2)' CultureInfo.InvariantCulture);
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The following statement contains a magic number: if (majorVersion >= 11)              {                  return SqlVersion.Sql11;              }
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The following statement contains a magic number: if (majorVersion == 10)              {                  return SqlVersion.Sql10;              }
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The following statement contains a magic number: if (majorVersion == 9)              {                  return SqlVersion.Sql9;              }
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The following statement contains a magic number: Debug.Assert(majorVersion == 8' "not version 8");
Magic Number,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetServerType,The following statement contains a magic number: using (var command = connection.CreateCommand())              {                  command.CommandText = "select serverproperty('EngineEdition')";                    using (                      var reader = Interception.Dispatch.Command.Reader(                          command' CommandBehavior.Default' new DbInterceptionContext()))                  {                      reader.Read();                        const int sqlAzureEngineEdition = 5;                      return reader.GetInt32(0) == sqlAzureEngineEdition ? ServerType.Cloud : ServerType.OnPremises;                  }              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,IsKatmaiOrNewer,The following statement contains a magic number: switch (edmFunction.Name.ToUpperInvariant())              {                  case "COUNT":                  case "COUNT_BIG":                  case "MAX":                  case "MIN":                      {                          var name = ((CollectionType)funParams[0].TypeUsage.EdmType).TypeUsage.EdmType.Name;                          return ((name.Equals("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) ||                                  (name.Equals("Time"' StringComparison.OrdinalIgnoreCase)));                      }                  case "DAY":                  case "MONTH":                  case "YEAR":                  case "DATALENGTH":                  case "CHECKSUM":                      {                          var name = funParams[0].TypeUsage.EdmType.Name;                          return ((name.Equals("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) ||                                  (name.Equals("Time"' StringComparison.OrdinalIgnoreCase)));                      }                  case "DATEADD":                  case "DATEDIFF":                      {                          var param1Name = funParams[1].TypeUsage.EdmType.Name;                          var param2Name = funParams[2].TypeUsage.EdmType.Name;                          return ((param1Name.Equals("Time"' StringComparison.OrdinalIgnoreCase)) ||                                  (param2Name.Equals("Time"' StringComparison.OrdinalIgnoreCase)) ||                                  (param1Name.Equals("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) ||                                  (param2Name.Equals("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)));                      }                  case "DATENAME":                  case "DATEPART":                      {                          var name = funParams[1].TypeUsage.EdmType.Name;                          return ((name.Equals("DateTimeOffset"' StringComparison.OrdinalIgnoreCase)) ||                                  (name.Equals("Time"' StringComparison.OrdinalIgnoreCase)));                      }                  case "SYSUTCDATETIME":                  case "SYSDATETIME":                  case "SYSDATETIMEOFFSET":                      return true;                  default:                      break;              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName)              {                      // for some types we just go with simple type usage with no facets                  case "tinyint":                  case "smallint":                  case "bigint":                  case "bit":                  case "uniqueidentifier":                  case "int":                  case "geography":                  case "geometry":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "varchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = false;                      isFixedLen = false;                      break;                    case "char":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = false;                      isFixedLen = true;                      break;                    case "nvarchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = true;                      isFixedLen = false;                      break;                    case "nchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = true;                      isFixedLen = true;                      break;                    case "varchar(max)":                  case "text":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = false;                      isFixedLen = false;                      break;                    case "nvarchar(max)":                  case "ntext":                  case "xml":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = true;                      isFixedLen = false;                      break;                    case "binary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isFixedLen = true;                      break;                    case "varbinary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isFixedLen = false;                      break;                    case "varbinary(max)":                  case "image":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = true;                      isFixedLen = false;                      break;                    case "timestamp":                  case "rowversion":                      return TypeUsage.CreateBinaryTypeUsage(edmPrimitiveType' true' 8);                    case "float":                  case "real":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "decimal":                  case "numeric":                      {                          byte precision;                          byte scale;                          if (storeType.TryGetPrecision(out precision)                              && storeType.TryGetScale(out scale))                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' precision' scale);                          }                          else                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType);                          }                      }                    case "money":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 19' 4);                    case "smallmoney":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 10' 4);                    case "datetime":                  case "datetime2":                  case "smalldatetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                  case "date":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                  case "time":                      return TypeUsage.CreateTimeTypeUsage(edmPrimitiveType' null);                  case "datetimeoffset":                      return TypeUsage.CreateDateTimeOffsetTypeUsage(edmPrimitiveType' null);                    default:                      throw new NotSupportedException(Strings.ProviderDoesNotSupportType(storeTypeName));              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName)              {                      // for some types we just go with simple type usage with no facets                  case "tinyint":                  case "smallint":                  case "bigint":                  case "bit":                  case "uniqueidentifier":                  case "int":                  case "geography":                  case "geometry":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "varchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = false;                      isFixedLen = false;                      break;                    case "char":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = false;                      isFixedLen = true;                      break;                    case "nvarchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = true;                      isFixedLen = false;                      break;                    case "nchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = true;                      isFixedLen = true;                      break;                    case "varchar(max)":                  case "text":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = false;                      isFixedLen = false;                      break;                    case "nvarchar(max)":                  case "ntext":                  case "xml":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = true;                      isFixedLen = false;                      break;                    case "binary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isFixedLen = true;                      break;                    case "varbinary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isFixedLen = false;                      break;                    case "varbinary(max)":                  case "image":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = true;                      isFixedLen = false;                      break;                    case "timestamp":                  case "rowversion":                      return TypeUsage.CreateBinaryTypeUsage(edmPrimitiveType' true' 8);                    case "float":                  case "real":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "decimal":                  case "numeric":                      {                          byte precision;                          byte scale;                          if (storeType.TryGetPrecision(out precision)                              && storeType.TryGetScale(out scale))                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' precision' scale);                          }                          else                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType);                          }                      }                    case "money":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 19' 4);                    case "smallmoney":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 10' 4);                    case "datetime":                  case "datetime2":                  case "smalldatetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                  case "date":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                  case "time":                      return TypeUsage.CreateTimeTypeUsage(edmPrimitiveType' null);                  case "datetimeoffset":                      return TypeUsage.CreateDateTimeOffsetTypeUsage(edmPrimitiveType' null);                    default:                      throw new NotSupportedException(Strings.ProviderDoesNotSupportType(storeTypeName));              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName)              {                      // for some types we just go with simple type usage with no facets                  case "tinyint":                  case "smallint":                  case "bigint":                  case "bit":                  case "uniqueidentifier":                  case "int":                  case "geography":                  case "geometry":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "varchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = false;                      isFixedLen = false;                      break;                    case "char":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = false;                      isFixedLen = true;                      break;                    case "nvarchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = true;                      isFixedLen = false;                      break;                    case "nchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = true;                      isFixedLen = true;                      break;                    case "varchar(max)":                  case "text":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = false;                      isFixedLen = false;                      break;                    case "nvarchar(max)":                  case "ntext":                  case "xml":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = true;                      isFixedLen = false;                      break;                    case "binary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isFixedLen = true;                      break;                    case "varbinary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isFixedLen = false;                      break;                    case "varbinary(max)":                  case "image":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = true;                      isFixedLen = false;                      break;                    case "timestamp":                  case "rowversion":                      return TypeUsage.CreateBinaryTypeUsage(edmPrimitiveType' true' 8);                    case "float":                  case "real":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "decimal":                  case "numeric":                      {                          byte precision;                          byte scale;                          if (storeType.TryGetPrecision(out precision)                              && storeType.TryGetScale(out scale))                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' precision' scale);                          }                          else                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType);                          }                      }                    case "money":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 19' 4);                    case "smallmoney":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 10' 4);                    case "datetime":                  case "datetime2":                  case "smalldatetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                  case "date":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                  case "time":                      return TypeUsage.CreateTimeTypeUsage(edmPrimitiveType' null);                  case "datetimeoffset":                      return TypeUsage.CreateDateTimeOffsetTypeUsage(edmPrimitiveType' null);                    default:                      throw new NotSupportedException(Strings.ProviderDoesNotSupportType(storeTypeName));              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName)              {                      // for some types we just go with simple type usage with no facets                  case "tinyint":                  case "smallint":                  case "bigint":                  case "bit":                  case "uniqueidentifier":                  case "int":                  case "geography":                  case "geometry":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "varchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = false;                      isFixedLen = false;                      break;                    case "char":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = false;                      isFixedLen = true;                      break;                    case "nvarchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = true;                      isFixedLen = false;                      break;                    case "nchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = true;                      isFixedLen = true;                      break;                    case "varchar(max)":                  case "text":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = false;                      isFixedLen = false;                      break;                    case "nvarchar(max)":                  case "ntext":                  case "xml":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = true;                      isFixedLen = false;                      break;                    case "binary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isFixedLen = true;                      break;                    case "varbinary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isFixedLen = false;                      break;                    case "varbinary(max)":                  case "image":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = true;                      isFixedLen = false;                      break;                    case "timestamp":                  case "rowversion":                      return TypeUsage.CreateBinaryTypeUsage(edmPrimitiveType' true' 8);                    case "float":                  case "real":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "decimal":                  case "numeric":                      {                          byte precision;                          byte scale;                          if (storeType.TryGetPrecision(out precision)                              && storeType.TryGetScale(out scale))                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' precision' scale);                          }                          else                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType);                          }                      }                    case "money":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 19' 4);                    case "smallmoney":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 10' 4);                    case "datetime":                  case "datetime2":                  case "smalldatetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                  case "date":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                  case "time":                      return TypeUsage.CreateTimeTypeUsage(edmPrimitiveType' null);                  case "datetimeoffset":                      return TypeUsage.CreateDateTimeOffsetTypeUsage(edmPrimitiveType' null);                    default:                      throw new NotSupportedException(Strings.ProviderDoesNotSupportType(storeTypeName));              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName)              {                      // for some types we just go with simple type usage with no facets                  case "tinyint":                  case "smallint":                  case "bigint":                  case "bit":                  case "uniqueidentifier":                  case "int":                  case "geography":                  case "geometry":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "varchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = false;                      isFixedLen = false;                      break;                    case "char":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = false;                      isFixedLen = true;                      break;                    case "nvarchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = true;                      isFixedLen = false;                      break;                    case "nchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isUnicode = true;                      isFixedLen = true;                      break;                    case "varchar(max)":                  case "text":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = false;                      isFixedLen = false;                      break;                    case "nvarchar(max)":                  case "ntext":                  case "xml":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = true;                      isFixedLen = false;                      break;                    case "binary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isFixedLen = true;                      break;                    case "varbinary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !storeType.TryGetMaxLength(out maxLength);                      isFixedLen = false;                      break;                    case "varbinary(max)":                  case "image":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = true;                      isFixedLen = false;                      break;                    case "timestamp":                  case "rowversion":                      return TypeUsage.CreateBinaryTypeUsage(edmPrimitiveType' true' 8);                    case "float":                  case "real":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "decimal":                  case "numeric":                      {                          byte precision;                          byte scale;                          if (storeType.TryGetPrecision(out precision)                              && storeType.TryGetScale(out scale))                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' precision' scale);                          }                          else                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType);                          }                      }                    case "money":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 19' 4);                    case "smallmoney":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 10' 4);                    case "datetime":                  case "datetime2":                  case "smalldatetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                  case "date":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                  case "time":                      return TypeUsage.CreateTimeTypeUsage(edmPrimitiveType' null);                  case "datetimeoffset":                      return TypeUsage.CreateDateTimeOffsetTypeUsage(edmPrimitiveType' null);                    default:                      throw new NotSupportedException(Strings.ProviderDoesNotSupportType(storeTypeName));              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderManifest,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderManifest.cs,GetStoreType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind)              {                  case PrimitiveTypeKind.Boolean:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["bit"]);                    case PrimitiveTypeKind.Byte:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["tinyint"]);                    case PrimitiveTypeKind.Int16:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["smallint"]);                    case PrimitiveTypeKind.Int32:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["int"]);                    case PrimitiveTypeKind.Int64:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["bigint"]);                    case PrimitiveTypeKind.Geography:                  case PrimitiveTypeKind.GeographyPoint:                  case PrimitiveTypeKind.GeographyLineString:                  case PrimitiveTypeKind.GeographyPolygon:                  case PrimitiveTypeKind.GeographyMultiPoint:                  case PrimitiveTypeKind.GeographyMultiLineString:                  case PrimitiveTypeKind.GeographyMultiPolygon:                  case PrimitiveTypeKind.GeographyCollection:                      return GetStorePrimitiveTypeIfPostSql9("geography"' edmType.EdmType.Name' primitiveType.PrimitiveTypeKind);                    case PrimitiveTypeKind.Geometry:                  case PrimitiveTypeKind.GeometryPoint:                  case PrimitiveTypeKind.GeometryLineString:                  case PrimitiveTypeKind.GeometryPolygon:                  case PrimitiveTypeKind.GeometryMultiPoint:                  case PrimitiveTypeKind.GeometryMultiLineString:                  case PrimitiveTypeKind.GeometryMultiPolygon:                  case PrimitiveTypeKind.GeometryCollection:                      return GetStorePrimitiveTypeIfPostSql9("geometry"' edmType.EdmType.Name' primitiveType.PrimitiveTypeKind);                    case PrimitiveTypeKind.Guid:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["uniqueidentifier"]);                    case PrimitiveTypeKind.Double:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["float"]);                    case PrimitiveTypeKind.Single:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["real"]);                    case PrimitiveTypeKind.Decimal: // decimal' numeric' smallmoney' money                      {                          byte precision;                          if (!edmType.TryGetPrecision(out precision))                          {                              precision = 18;                          }                            byte scale;                          if (!edmType.TryGetScale(out scale))                          {                              scale = 0;                          }                          var tu = TypeUsage.CreateDecimalTypeUsage(StoreTypeNameToStorePrimitiveType["decimal"]' precision' scale);                          return tu;                      }                    case PrimitiveTypeKind.Binary: // binary' varbinary' varbinary(max)' image' timestamp' rowversion                      {                          var isFixedLength = null != facets[FixedLengthFacetName].Value && (bool)facets[FixedLengthFacetName].Value;                          var f = facets[MaxLengthFacetName];                          var isMaxLength = f.IsUnbounded || null == f.Value || (int)f.Value > binaryMaxSize;                          var maxLength = !isMaxLength ? (int)f.Value : Int32.MinValue;                            TypeUsage tu;                          if (isFixedLength)                          {                              tu = TypeUsage.CreateBinaryTypeUsage(                                  StoreTypeNameToStorePrimitiveType["binary"]' true' (isMaxLength ? binaryMaxSize : maxLength));                          }                          else                          {                              if (isMaxLength)                              {                                  if (_version != SqlVersion.Sql8)                                  {                                      tu = TypeUsage.CreateBinaryTypeUsage(StoreTypeNameToStorePrimitiveType["varbinary(max)"]' false);                                      Debug.Assert(tu.Facets[MaxLengthFacetName].Description.IsConstant' "varbinary(max) is not constant!");                                  }                                  else                                  {                                      tu = TypeUsage.CreateBinaryTypeUsage(                                          StoreTypeNameToStorePrimitiveType["varbinary"]' false' binaryMaxSize);                                  }                              }                              else                              {                                  tu = TypeUsage.CreateBinaryTypeUsage(StoreTypeNameToStorePrimitiveType["varbinary"]' false' maxLength);                              }                          }                          return tu;                      }                    case PrimitiveTypeKind.String:                      // char' nchar' varchar' nvarchar' varchar(max)' nvarchar(max)' ntext' text' xml                      {                          var isUnicode = null == facets[UnicodeFacetName].Value || (bool)facets[UnicodeFacetName].Value;                          var isFixedLength = null != facets[FixedLengthFacetName].Value && (bool)facets[FixedLengthFacetName].Value;                          var f = facets[MaxLengthFacetName];                          // maxlen is true if facet value is unbounded' the value is bigger than the limited string sizes *or* the facet                          // value is null. this is needed since functions still have maxlength facet value as null                          var isMaxLength = f.IsUnbounded || null == f.Value                                            || (int)f.Value > (isUnicode ? nvarcharMaxSize : varcharMaxSize);                          var maxLength = !isMaxLength ? (int)f.Value : Int32.MinValue;                            TypeUsage tu;                            if (isUnicode)                          {                              if (isFixedLength)                              {                                  tu = TypeUsage.CreateStringTypeUsage(                                      StoreTypeNameToStorePrimitiveType["nchar"]' true' true' (isMaxLength ? nvarcharMaxSize : maxLength));                              }                              else                              {                                  if (isMaxLength)                                  {                                      // nvarchar(max) (SQL 9) or ntext (SQL 8)                                      if (_version != SqlVersion.Sql8)                                      {                                          tu = TypeUsage.CreateStringTypeUsage(                                              StoreTypeNameToStorePrimitiveType["nvarchar(max)"]' true' false);                                          Debug.Assert(tu.Facets[MaxLengthFacetName].Description.IsConstant' "NVarchar(max) is not constant!");                                      }                                      else                                      {                                          // if it is unknown' fallback to nvarchar[4000] instead of ntext since it has limited store semantics                                          tu = TypeUsage.CreateStringTypeUsage(                                              StoreTypeNameToStorePrimitiveType["nvarchar"]' true' false' nvarcharMaxSize);                                      }                                  }                                  else                                  {                                      tu = TypeUsage.CreateStringTypeUsage(                                          StoreTypeNameToStorePrimitiveType["nvarchar"]' true' false' maxLength);                                  }                              }                          }                          else // !isUnicode                          {                              if (isFixedLength)                              {                                  tu = TypeUsage.CreateStringTypeUsage(                                      StoreTypeNameToStorePrimitiveType["char"]' false' true'                                      (isMaxLength ? varcharMaxSize : maxLength));                              }                              else                              {                                  if (isMaxLength)                                  {                                      // nvarchar(max) (SQL 9) or ntext (SQL 8)                                      if (_version != SqlVersion.Sql8)                                      {                                          tu = TypeUsage.CreateStringTypeUsage(                                              StoreTypeNameToStorePrimitiveType["varchar(max)"]' false' false);                                          Debug.Assert(tu.Facets[MaxLengthFacetName].Description.IsConstant' "varchar(max) is not constant!");                                      }                                      else                                      {                                          // if it is unknown' fallback to varchar[8000] instead of text since it has limited store semantics                                          tu = TypeUsage.CreateStringTypeUsage(                                              StoreTypeNameToStorePrimitiveType["varchar"]' false' false' varcharMaxSize);                                      }                                  }                                  else                                  {                                      tu = TypeUsage.CreateStringTypeUsage(                                          StoreTypeNameToStorePrimitiveType["varchar"]' false' false' maxLength);                                  }                              }                          }                          return tu;                      }                    case PrimitiveTypeKind.DateTime:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["datetime"]);                  case PrimitiveTypeKind.DateTimeOffset:                      return GetStorePrimitiveTypeIfPostSql9("datetimeoffset"' edmType.EdmType.Name' primitiveType.PrimitiveTypeKind);                  case PrimitiveTypeKind.Time:                      return GetStorePrimitiveTypeIfPostSql9("time"' edmType.EdmType.Name' primitiveType.PrimitiveTypeKind);                    default:                      throw new NotSupportedException(Strings.NoStoreTypeForEdmType(edmType.EdmType.Name' primitiveType.PrimitiveTypeKind));              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,CreateCommand,The following statement contains a magic number: if (null != parameters                  && 0 < parameters.Count)              {                  if (commandTree.CommandTreeKind != DbCommandTreeKind.Delete                      && commandTree.CommandTreeKind != DbCommandTreeKind.Insert                      && commandTree.CommandTreeKind != DbCommandTreeKind.Update)                  {                      throw new InvalidOperationException(                          Strings.ADP_InternalProviderError(1017 /*InternalErrorCode.SqlGenParametersNotPermitted*/));                  }                  foreach (var parameter in parameters)                  {                      command.Parameters.Add(parameter);                  }              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetNonMaxLength,The following statement contains a magic number: if (type == SqlDbType.NChar                  || type == SqlDbType.NVarChar)              {                  result = 4000;              }              else if (type == SqlDbType.Char                       || type == SqlDbType.VarChar                       ||                       type == SqlDbType.Binary                       || type == SqlDbType.VarBinary)              {                  result = 8000;              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetNonMaxLength,The following statement contains a magic number: if (type == SqlDbType.NChar                  || type == SqlDbType.NVarChar)              {                  result = 4000;              }              else if (type == SqlDbType.Char                       || type == SqlDbType.VarChar                       ||                       type == SqlDbType.Binary                       || type == SqlDbType.VarBinary)              {                  result = 8000;              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDefaultStringMaxLength,The following statement contains a magic number: if (version < SqlVersion.Sql9)              {                  if (type == SqlDbType.NChar                      || type == SqlDbType.NVarChar)                  {                      result = 4000;                  }                  else                  {                      result = 8000;                  }              }              else              {                  result = -1;              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDefaultStringMaxLength,The following statement contains a magic number: if (version < SqlVersion.Sql9)              {                  if (type == SqlDbType.NChar                      || type == SqlDbType.NVarChar)                  {                      result = 4000;                  }                  else                  {                      result = 8000;                  }              }              else              {                  result = -1;              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetDefaultBinaryMaxLength,The following statement contains a magic number: if (version < SqlVersion.Sql9)              {                  result = 8000;              }              else              {                  result = -1;              }
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GetKatmaiDateTimePrecision,The following statement contains a magic number: var defaultIfUndefined = isOutParam ? 7 : (byte?)null;
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GenerateDatabaseName,The following statement contains a magic number: strippedFileName = strippedFileName.Length > 30 ? strippedFileName.Substring(0' 30) : strippedFileName;
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,GenerateDatabaseName,The following statement contains a magic number: strippedFileName = strippedFileName.Length > 30 ? strippedFileName.Substring(0' 30) : strippedFileName;
Magic Number,System.Data.Entity.SqlServer,SqlProviderServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlProviderServices.cs,DropDatabase,The following statement contains a magic number: try              {                  UsingMasterConnection(                      sqlConnection' conn =>                      {                          using (var command = CreateCommand(conn' dropDatabaseScript' commandTimeout))                          {                              Interception.Dispatch.Command.NonQuery(command' new DbInterceptionContext());                          }                      });              }              catch (SqlException sqlException)              {                  foreach (SqlError err in sqlException.Errors)                  {                      // Unable to open the physical file %0.                      // Operating system error 2: "2(The system cannot find the file specified.)".                      if (err.Number == 5120)                      {                          return;                      }                  }                  throw;              }
Magic Number,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeographyFromBinary,The following statement contains a magic number: var result = SqlTypes.SmiSqlGeographyStGeomFromWkb.Value.Invoke(null' new[] { sqlGeographyBytes' 4326 });
Magic Number,System.Data.Entity.SqlServer,SqlSpatialServices,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlSpatialServices.cs,GeographyFromGml,The following statement contains a magic number: var result = SqlTypes.SmiSqlGeographyGeomFromGml.Value.Invoke(null' new[] { sqlGeographyGml' 4326 });
Magic Number,System.Data.Entity.SqlServer,SqlTypesAssembly,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlTypesAssembly.cs,CreateStaticConstructorDelegate,The following statement contains a magic number: Debug.Assert(                  staticCtorMethod.GetParameters().Length == 2 && staticCtorMethod.GetParameters()[1].ParameterType == typeof(int)'                  "Static constructor method on '" + spatialType.FullName + "' does not match static constructor pattern?");
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: if (args != null                  && args.Length > 0)              {                  for (var i = 0; i < args.Length; i ++)                  {                      var value = args[i] as String;                      if (value != null                          && value.Length > 1024)                      {                          args[i] = value.Substring(0' 1024 - 3) + "...";                      }                  }                  return String.Format(CultureInfo.CurrentCulture' res' args);              }              else              {                  return res;              }
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: if (args != null                  && args.Length > 0)              {                  for (var i = 0; i < args.Length; i ++)                  {                      var value = args[i] as String;                      if (value != null                          && value.Length > 1024)                      {                          args[i] = value.Substring(0' 1024 - 3) + "...";                      }                  }                  return String.Format(CultureInfo.CurrentCulture' res' args);              }              else              {                  return res;              }
Magic Number,System.Data.Entity.SqlServer.Resources,EntityRes,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\Properties\Resources.SqlServer.cs,GetString,The following statement contains a magic number: if (args != null                  && args.Length > 0)              {                  for (var i = 0; i < args.Length; i ++)                  {                      var value = args[i] as String;                      if (value != null                          && value.Length > 1024)                      {                          args[i] = value.Substring(0' 1024 - 3) + "...";                      }                  }                  return String.Format(CultureInfo.CurrentCulture' res' args);              }              else              {                  return res;              }
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeStoreFunctionHandlers,The following statement contains a magic number: var functionHandlers = new Dictionary<string' FunctionHandler>(15' StringComparer.Ordinal);
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeCanonicalFunctionHandlers,The following statement contains a magic number: var functionHandlers = new Dictionary<string' FunctionHandler>(16' StringComparer.Ordinal);
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeFunctionNameToOperatorDictionary,The following statement contains a magic number: var functionNameToOperatorDictionary = new Dictionary<string' string>(5' StringComparer.Ordinal);
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeDateAddFunctionNameToDatepartDictionary,The following statement contains a magic number: var dateAddFunctionNameToDatepartDictionary = new Dictionary<string' string>(5' StringComparer.Ordinal);
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,InitializeDateDiffFunctionNameToDatepartDictionary,The following statement contains a magic number: var dateDiffFunctionNameToDatepartDictionary = new Dictionary<string' string>(5' StringComparer.Ordinal);
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialFromTextFunction,The following statement contains a magic number: if (functionExpression.Arguments.Count == 2)              {                  return HandleFunctionDefaultGivenName(sqlgen' functionExpression' functionNameWithSrid);              }              else              {                  Debug.Assert(functionExpression.Arguments.Count == 1' "FromText function should have text or text + srid arguments only");                  return HandleFunctionDefaultGivenName(sqlgen' functionExpression' functionNameWithoutSrid);              }
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpatialStaticMethodFunctionAppendSrid,The following statement contains a magic number: if (functionExpression.Arguments.Count == 2)              {                  return HandleFunctionDefaultGivenName(sqlgen' functionExpression' functionName);              }              else              {                  var sridExpression = functionExpression.ResultType.IsPrimitiveType(PrimitiveTypeKind.Geometry)                                           ? _defaultGeometrySridExpression                                           : _defaultGeographySridExpression;                  var result = new SqlBuilder();                  result.Append(functionName);                  WriteFunctionArguments(sqlgen' functionExpression.Arguments.Concat(new[] { sridExpression })' result);                  return result;              }
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleSpecialFunctionToOperator,The following statement contains a magic number: Debug.Assert(e.Arguments.Count > 0 && e.Arguments.Count <= 2' "There should be 1 or 2 arguments for operator");
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionDateTimeTypeCreation,The following statement contains a magic number: Debug.Assert(                  args.Count == (hasDatePart ? 3 : 0) + 3 + (hasTimeZonePart ? 1 : 0)'                  "Invalid number of parameters for a date time creating function");
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionDateTimeTypeCreation,The following statement contains a magic number: Debug.Assert(                  args.Count == (hasDatePart ? 3 : 0) + 3 + (hasTimeZonePart ? 1 : 0)'                  "Invalid number of parameters for a date time creating function");
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionRoundOrTruncate,The following statement contains a magic number: Debug.Assert(e.Arguments.Count <= 2' "Round or truncate should have at most 2 arguments");
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionContains,The following statement contains a magic number: Debug.Assert(args.Count == 2' "Contains should have two arguments");
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionStartsWith,The following statement contains a magic number: Debug.Assert(args.Count == 2' "StartsWith should have two arguments");
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlFunctionCallHandler,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlFunctionCallHandler.cs,HandleCanonicalFunctionEndsWith,The following statement contains a magic number: Debug.Assert(args.Count == 2' "EndsWith should have two arguments");
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,WriteSql,The following statement contains a magic number: var builder = new StringBuilder(1024);
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,MatchTargetPatternForForcingNonUnicode,The following statement contains a magic number: if (expr.ExpressionKind                  == DbExpressionKind.Function)              {                  var functionExpr = (DbFunctionExpression)expr;                  var function = functionExpr.Function;                    if (!function.IsCanonicalFunction()                      && !SqlFunctionCallHandler.IsStoreFunction(function))                  {                      return false;                  }                    // All string arguments to the function must be candidates to match target pattern.                  var functionFullName = function.FullName;                    if (_canonicalAndStoreStringFunctionsOneArg.Contains(functionFullName))                  {                      return MatchTargetPatternForForcingNonUnicode(functionExpr.Arguments[0]);                  }                    if ("Edm.Concat".Equals(functionFullName' StringComparison.Ordinal))                  {                      return (MatchTargetPatternForForcingNonUnicode(functionExpr.Arguments[0]) &&                              MatchTargetPatternForForcingNonUnicode(functionExpr.Arguments[1]));                  }                    if ("Edm.Replace".Equals(functionFullName' StringComparison.Ordinal)                      || "SqlServer.REPLACE".Equals(functionFullName' StringComparison.Ordinal))                  {                      return (MatchTargetPatternForForcingNonUnicode(functionExpr.Arguments[0]) &&                              MatchTargetPatternForForcingNonUnicode(functionExpr.Arguments[1]) &&                              MatchTargetPatternForForcingNonUnicode(functionExpr.Arguments[2]));                  }              }
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitConstant,The following statement contains a magic number: if (resultType.IsPrimitiveType())              {                  var typeKind = resultType.GetPrimitiveTypeKind();                  switch (typeKind)                  {                      case PrimitiveTypeKind.Int32:                          // default sql server type for integral values.                          result.Append(e.Value.ToString());                          break;                        case PrimitiveTypeKind.Binary:                          result.Append(" 0x");                          result.Append(ByteArrayToBinaryString((Byte[])e.Value));                          result.Append(" ");                          break;                        case PrimitiveTypeKind.Boolean:                          // Bugs 450277' 430294: Need to preserve the boolean type-ness of                          // this value for round-trippability                          WrapWithCastIfNeeded(!isCastOptional' (bool)e.Value ? "1" : "0"' "bit"' result);                          break;                        case PrimitiveTypeKind.Byte:                          WrapWithCastIfNeeded(!isCastOptional' e.Value.ToString()' "tinyint"' result);                          break;                        case PrimitiveTypeKind.DateTime:                          result.Append("convert(");                          result.Append(IsPreKatmai ? "datetime" : "datetime2");                          result.Append("' ");                          result.Append(                              EscapeSingleQuote(                                  ((DateTime)e.Value).ToString(                                      IsPreKatmai ? "yyyy-MM-dd HH:mm:ss.fff" : "yyyy-MM-dd HH:mm:ss.fffffff"' CultureInfo.InvariantCulture)'                                  false /* IsUnicode */));                          result.Append("' 121)");                          break;                        case PrimitiveTypeKind.Time:                          AssertKatmaiOrNewer(typeKind);                          result.Append("convert(");                          result.Append(e.ResultType.EdmType.Name);                          result.Append("' ");                          result.Append(EscapeSingleQuote(e.Value.ToString()' false /* IsUnicode */));                          result.Append("' 121)");                          break;                        case PrimitiveTypeKind.DateTimeOffset:                          AssertKatmaiOrNewer(typeKind);                          result.Append("convert(");                          result.Append(e.ResultType.EdmType.Name);                          result.Append("' ");                          result.Append(                              EscapeSingleQuote(                                  ((DateTimeOffset)e.Value).ToString("yyyy-MM-dd HH:mm:ss.fffffff zzz"' CultureInfo.InvariantCulture)' false                                  /* IsUnicode */));                          result.Append("' 121)");                          break;                        case PrimitiveTypeKind.Decimal:                          var strDecimal = ((Decimal)e.Value).ToString(CultureInfo.InvariantCulture);                          // if the decimal value has no decimal part' cast as decimal to preserve type                          // if the number has precision > int64 max precision' it will be handled as decimal by sql server                          // and does not need cast. if precision is lest then 20' then cast using Max(literal precision' sql default precision)                          var needsCast = -1 == strDecimal.IndexOf('.') && (strDecimal.TrimStart(new[] { '-' }).Length < 20);                            var precision = Math.Max((Byte)strDecimal.Length' DefaultDecimalPrecision);                          Debug.Assert(precision > 0' "Precision must be greater than zero");                            var decimalType = "decimal(" + precision.ToString(CultureInfo.InvariantCulture) + ")";                            WrapWithCastIfNeeded(needsCast' strDecimal' decimalType' result);                          break;                        case PrimitiveTypeKind.Double:                          {                              var doubleValue = (Double)e.Value;                              AssertValidDouble(doubleValue);                              WrapWithCastIfNeeded(true' doubleValue.ToString("R"' CultureInfo.InvariantCulture)' "float(53)"' result);                          }                          break;                        case PrimitiveTypeKind.Geography:                          AppendSpatialConstant(result' ((DbGeography)e.Value).AsSpatialValue());                          break;                        case PrimitiveTypeKind.Geometry:                          AppendSpatialConstant(result' ((DbGeometry)e.Value).AsSpatialValue());                          break;                        case PrimitiveTypeKind.Guid:                          WrapWithCastIfNeeded(true' EscapeSingleQuote(e.Value.ToString()' false /* IsUnicode */)' "uniqueidentifier"' result);                          break;                        case PrimitiveTypeKind.Int16:                          WrapWithCastIfNeeded(!isCastOptional' e.Value.ToString()' "smallint"' result);                          break;                        case PrimitiveTypeKind.Int64:                          WrapWithCastIfNeeded(!isCastOptional' e.Value.ToString()' "bigint"' result);                          break;                        case PrimitiveTypeKind.Single:                          {                              var singleValue = (float)e.Value;                              AssertValidSingle(singleValue);                              WrapWithCastIfNeeded(true' singleValue.ToString("R"' CultureInfo.InvariantCulture)' "real"' result);                          }                          break;                        case PrimitiveTypeKind.String:                          bool isUnicode;                            if (!e.ResultType.TryGetIsUnicode(out isUnicode))                          {                              // If the unicode facet is not specified' if needed force non-unicode' otherwise default to unicode.                              isUnicode = !_forceNonUnicode;                          }                          result.Append(EscapeSingleQuote(e.Value as string' isUnicode));                          break;                        default:                          // all known scalar types should been handled already.                          throw new NotSupportedException(                              Strings.NoStoreTypeForEdmType(resultType.EdmType.Name' ((PrimitiveType)(resultType.EdmType)).PrimitiveTypeKind));                  }              }              else              {                  throw new NotSupportedException();                  //if/when Enum types are supported' then handle appropriately' for now is not a valid type for constants.                  //result.Append(e.Value.ToString());              }
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,GetTargetTSql,The following statement contains a magic number: var builder = new StringBuilder(50);
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Visit,The following statement contains a magic number: var inputs = new List<DbExpressionBinding>(2);
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,ByteArrayToBinaryString,The following statement contains a magic number: var sb = new StringBuilder(binaryArray.Length * 2);
Magic Number,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,ByteArrayToBinaryString,The following statement contains a magic number: for (var i = 0; i < binaryArray.Length; i++)              {                  sb.Append(_hexDigits[(binaryArray[i] & 0xF0) >> 4]).Append(_hexDigits[binaryArray[i] & 0x0F]);              }
Magic Number,System.Data.Entity.Migrations.Sql,SqlServerMigrationSqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,Generate,The following statement contains a magic number: using (var writer = Writer())              {                  writer.WriteLine("CREATE PROCEDURE " + Name(createProcedureOperation.Name));                  writer.Indent++;                    createProcedureOperation.Parameters.Each(                      (p' i) =>                          {                              Generate(p' writer);                                if (i < createProcedureOperation.Parameters.Count - 1)                              {                                  writer.WriteLine("'");                              }                          });                    writer.WriteLine();                  writer.Indent--;                  writer.WriteLine("AS");                  writer.WriteLine("BEGIN");                  writer.Indent++;                    if (!string.IsNullOrWhiteSpace(createProcedureOperation.BodySql))                  {                      var indentString                          = writer.NewLine                            + new string(' '' (writer.Indent * 4));                        var indentReplacer = new Regex(@"\r?\n *");                        writer.WriteLine(indentReplacer.Replace(createProcedureOperation.BodySql' indentString));                  }                  else                  {                      writer.WriteLine("RETURN");                  }                    writer.Indent--;                  writer.Write("END");                    Statement(writer' batchTerminator: "GO");              }
Missing Default,System.Data.Entity.SqlServer,SqlAzureRetriableExceptionDetector,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlAzureRetriableExceptionDetector.cs,ShouldRetryOn,The following switch statement is missing a default case: switch (err.Number)                      {                              // SQL Error Code: 40627                              // Operation on server YYYY and database XXXX is in progress.  Please wait a few minutes before trying again.                          case 40627:                              // SQL Error Code: 40613                              // Database XXXX on server YYYY is not currently available. Please retry the connection later.                              // If the problem persists' contact customer support' and provide them the session tracing ID of ZZZZZ.                          case 40613:                              // SQL Error Code: 40545                              // The service is experiencing a problem that is currently under investigation. Incident ID: %ls. Code: %d.                          case 40545:                              // SQL Error Code: 40540                              // The service has encountered an error processing your request. Please try again.                          case 40540:                              // SQL Error Code: 40501                              // The service is currently busy. Retry the request after 10 seconds. Code: (reason code to be decoded).                          case 40501:                              // SQL Error Code: 40197                              // The service has encountered an error processing your request. Please try again.                          case 40197:                              // SQL Error Code: 10929                              // Resource ID: %d. The %s minimum guarantee is %d' maximum limit is %d and the current usage for the database is %d.                              // However' the server is currently too busy to support requests greater than %d for this database.                              // For more information' see http://go.microsoft.com/fwlink/?LinkId=267637. Otherwise' please try again.                          case 10929:                              // SQL Error Code: 10928                              // Resource ID: %d. The %s limit for the database is %d and has been reached. For more information'                              // see http://go.microsoft.com/fwlink/?LinkId=267637.                          case 10928:                              // SQL Error Code: 10060                              // A network-related or instance-specific error occurred while establishing a connection to SQL Server.                               // The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server                               // is configured to allow remote connections. (provider: TCP Provider' error: 0 - A connection attempt failed                               // because the connected party did not properly respond after a period of time' or established connection failed                               // because connected host has failed to respond.)"}                          case 10060:                              // SQL Error Code: 10054                              // A transport-level error has occurred when sending the request to the server.                               // (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by the remote host.)                          case 10054:                              // SQL Error Code: 10053                              // A transport-level error has occurred when receiving results from the server.                              // An established connection was aborted by the software in your host machine.                          case 10053:                              // SQL Error Code: 233                              // The client was unable to establish a connection because of an error during connection initialization process before login.                               // Possible causes include the following: the client tried to connect to an unsupported version of SQL Server;                              // the server was too busy to accept new connections; or there was a resource limitation (insufficient memory or maximum                              // allowed connections) on the server. (provider: TCP Provider' error: 0 - An existing connection was forcibly closed by                              // the remote host.)                          case 233:                              // SQL Error Code: 64                              // A connection was successfully established with the server' but then an error occurred during the login process.                               // (provider: TCP Provider' error: 0 - The specified network name is no longer available.)                           case 64:                              // DBNETLIB Error Code: 20                              // The instance of SQL Server you attempted to connect to does not support encryption.                          case 20:                              return true;                              // This exception can be thrown even if the operation completed succesfully' so it's safer to let the application fail.                              // DBNETLIB Error Code: -2                              // Timeout expired. The timeout period elapsed prior to completion of the operation or the server is not responding. The statement has been terminated.                               //case -2:                      }
Missing Default,System.Data.Entity.SqlServer,SqlVersionUtils,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlVersionUtils.cs,GetSqlVersion,The following switch statement is missing a default case: switch (versionHint)                  {                      case SqlProviderManifest.TokenSql8:                          return SqlVersion.Sql8;                        case SqlProviderManifest.TokenSql9:                          return SqlVersion.Sql9;                        case SqlProviderManifest.TokenSql10:                          return SqlVersion.Sql10;                        case SqlProviderManifest.TokenSql11:                          return SqlVersion.Sql11;                        case SqlProviderManifest.TokenAzure11:                          return SqlVersion.Sql11;                  }
Missing Default,System.Data.Entity.SqlServer.SqlGen,SqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,VisitJoinExpression,The following switch statement is missing a default case: switch (joinKind)              {                  case DbExpressionKind.FullOuterJoin:                  case DbExpressionKind.InnerJoin:                  case DbExpressionKind.LeftOuterJoin:                      result.From.Append(" ON ");                      isParentAJoinStack.Push(false);                      result.From.Append(joinCondition.Accept(this));                      isParentAJoinStack.Pop();                      break;              }
Missing Default,System.Data.Entity.SqlServer.SqlGen,KeyFieldExpressionComparer,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlGen\SqlGenerator.cs,Equals,The following switch statement is missing a default case: switch (x.ExpressionKind)                  {                      case DbExpressionKind.Property:                          {                              var first = (DbPropertyExpression)x;                              var second = (DbPropertyExpression)y;                              return first.Property == second.Property && Equals(first.Instance' second.Instance);                          }                      case DbExpressionKind.ParameterReference:                          return ((DbParameterReferenceExpression)x).ParameterName == ((DbParameterReferenceExpression)y).ParameterName;                        case DbExpressionKind.VariableReference:                          return ReferenceEquals(x' y);                        case DbExpressionKind.Cast:                          {                              var first = (DbCastExpression)x;                              var second = (DbCastExpression)y;                              return first.ResultType == second.ResultType && Equals(first.Argument' second.Argument);                          }                  }
Missing Default,System.Data.Entity.Migrations.Sql,SqlServerMigrationSqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,GenerateFunctionSql,The following switch statement is missing a default case: switch (commandTrees.First().CommandTreeKind)              {                  case DbCommandTreeKind.Insert:                      return functionSqlGenerator.GenerateInsert(commandTrees.Cast<DbInsertCommandTree>().ToList());                  case DbCommandTreeKind.Update:                      return functionSqlGenerator.GenerateUpdate(commandTrees.Cast<DbUpdateCommandTree>().ToList()' rowsAffectedParameter);                  case DbCommandTreeKind.Delete:                      return functionSqlGenerator.GenerateDelete(commandTrees.Cast<DbDeleteCommandTree>().ToList()' rowsAffectedParameter);              }
Missing Default,System.Data.Entity.Migrations.Sql,SqlServerMigrationSqlGenerator,C:\repos\mono_entityframework\src\EntityFramework.SqlServer\SqlServerMigrationSqlGenerator.cs,BuildPropertyType,The following switch statement is missing a default case: switch (originalStoreTypeName)              {                  case "decimal":                  case "numeric":                      storeTypeName += "(" + (propertyModel.Precision ?? DefaultNumericPrecision)                                       + "' " + (propertyModel.Scale ?? DefaultScale) + ")";                      break;                  case "datetime2":                  case "datetimeoffset":                  case "time":                      storeTypeName += "(" + (propertyModel.Precision ?? DefaultTimePrecision) + ")";                      break;                  case "binary":                  case "varbinary":                  case "nvarchar":                  case "varchar":                  case "char":                  case "nchar":                      storeTypeName += "(" + (propertyModel.MaxLength ?? DefaultMaxLength) + ")";                      break;              }
