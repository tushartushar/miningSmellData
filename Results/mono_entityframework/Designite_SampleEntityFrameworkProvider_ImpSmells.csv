Implementation smell,Namespace,Class,File,Method,Description
Long Method,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetEdmType,The method has 139 lines of code.
Long Method,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetStoreType,The method has 152 lines of code.
Long Method,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,VisitConstantExpression,The method has 119 lines of code.
Long Method,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,Visit,The method has 115 lines of code.
Long Method,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,AddColumns,The method has 102 lines of code.
Long Method,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,GetSqlPrimitiveType,The method has 100 lines of code.
Complex Method,SampleEntityFrameworkProvider,DdlBuilder,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\DdlBuilder.cs,AppendType,Cyclomatic complexity of the method is 9
Complex Method,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetEdmType,Cyclomatic complexity of the method is 25
Complex Method,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetStoreType,Cyclomatic complexity of the method is 27
Complex Method,SampleEntityFrameworkProvider,SampleProviderServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderServices.cs,CreateCommand,Cyclomatic complexity of the method is 11
Complex Method,SampleEntityFrameworkProvider,SampleProviderServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderServices.cs,GetSqlDbType,Cyclomatic complexity of the method is 18
Complex Method,SampleEntityFrameworkProvider,MetadataHelpers,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\MetadataHelpers.cs,GetDbType,Cyclomatic complexity of the method is 15
Complex Method,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,VisitConstantExpression,Cyclomatic complexity of the method is 19
Complex Method,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,ProcessJoinInputResult,Cyclomatic complexity of the method is 9
Complex Method,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,AddColumns,Cyclomatic complexity of the method is 10
Complex Method,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,GetSqlPrimitiveType,Cyclomatic complexity of the method is 20
Complex Method,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,IsCompatible,Cyclomatic complexity of the method is 8
Complex Method,SampleEntityFrameworkProvider,SqlSelectStatement,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlSelectStatement.cs,WriteSql,Cyclomatic complexity of the method is 17
Long Parameter List,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,TranslateConstantParameterForLike,The method has 5 parameters. Parameters: targetExpression' constSearchParamExpression' result' insertPercentStart' insertPercentEnd
Long Parameter List,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,AddColumns,The method has 5 parameters. Parameters: selectStatement' symbol' columnList' columnDictionary' separator
Long Parameter List,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,CreateNewSelectStatement,The method has 5 parameters. Parameters: oldStatement' inputVarName' inputVarType' finalizeOldStatement' fromSymbol
Long Identifier,SampleEntityFrameworkProvider,SpatialServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SpatialServices.cs,GeographyCollectionFromBinary,The length of the parameter geographyCollectionWellKnownBinary is 34.
Long Identifier,SampleEntityFrameworkProvider,SpatialServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SpatialServices.cs,GeographyCollectionFromText,The length of the parameter geographyCollectionWellKnownText is 32.
Long Identifier,SampleEntityFrameworkProvider,SpatialServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SpatialServices.cs,GeometryCollectionFromBinary,The length of the parameter geometryCollectionWellKnownBinary is 33.
Long Identifier,SampleEntityFrameworkProvider,SpatialServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SpatialServices.cs,GeometryCollectionFromText,The length of the parameter geometryCollectionWellKnownText is 31.
Long Identifier,SampleEntityFrameworkProvider,DmlSqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\DmlSqlGenerator.cs,,The length of the parameter s_commandTextBuilderInitialCapacity is 35.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeFunctionNameToOperatorDictionary,The length of the parameter functionNameToOperatorDictionary is 32.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeDateAddFunctionNameToDatepartDictionary,The length of the parameter dateAddFunctionNameToDatepartDictionary is 39.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeDateDiffFunctionNameToDatepartDictionary,The length of the parameter dateDiffFunctionNameToDatepartDictionary is 40.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeGeographyInstancePropertyFunctionsDictionary,The length of the parameter instancePropGeographyFunctions is 30.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeRenamedGeographyInstanceMethodFunctions,The length of the parameter renamedInstanceMethodFunctions is 30.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeRenamedGeometryInstanceMethodFunctions,The length of the parameter renamedInstanceMethodFunctions is 30.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,,The length of the parameter _functionNameToOperatorDictionary is 33.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,,The length of the parameter _dateAddFunctionNameToDatepartDictionary is 40.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,,The length of the parameter _dateDiffFunctionNameToDatepartDictionary is 41.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,,The length of the parameter _geographyFunctionNameToStaticMethodHandlerDictionary is 53.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,,The length of the parameter _geographyFunctionNameToInstancePropertyNameDictionary is 54.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,,The length of the parameter _geographyRenamedInstanceMethodFunctionDictionary is 49.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,,The length of the parameter _geometryFunctionNameToStaticMethodHandlerDictionary is 52.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,,The length of the parameter _geometryFunctionNameToInstancePropertyNameDictionary is 53.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,,The length of the parameter _geometryRenamedInstanceMethodFunctionDictionary is 48.
Long Identifier,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,,The length of the parameter defaultGeographySridExpression is 30.
Long Statement,SampleEntityFrameworkProvider,DdlBuilder,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\DdlBuilder.cs,AppendType,The length of the statement  "                if (type.EdmType.BuiltInTypeKind == BuiltInTypeKind.PrimitiveType && typeName.EndsWith(maxSuffix' StringComparison.Ordinal)) " is 124.
Long Statement,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetDbInformation,The length of the statement  "            throw new ProviderIncompatibleException(String.Format("The provider returned null for the informationType '{0}'."' informationType)); " is 133.
Long Statement,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetEdmType,The length of the statement  "                    throw new NotSupportedException(String.Format("The underlying provider does not support the type '{0}'."' storeTypeName)); " is 122.
Long Statement,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetEdmType,The length of the statement  "            Debug.Assert(newPrimitiveTypeKind == PrimitiveTypeKind.String || newPrimitiveTypeKind == PrimitiveTypeKind.Binary' "at this point only string and binary types should be present"); " is 179.
Long Statement,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetEdmType,The length of the statement  "                    throw new NotSupportedException(String.Format("The underlying provider does not support the type '{0}'."' storeTypeName)); " is 122.
Long Statement,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetStoreType,The length of the statement  "                    if (edmType.Facets.TryGetValue("PreserveSeconds"' true' out preserveSecondsFacet) && null != preserveSecondsFacet.Value) " is 120.
Long Statement,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetStoreType,The length of the statement  "                    return TypeUsage.CreateDefaultTypeUsage(preserveSeconds ? StoreTypeNameToStorePrimitiveType["datetime"] : StoreTypeNameToStorePrimitiveType["smalldatetime"]); " is 158.
Long Statement,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetStoreType,The length of the statement  "                    throw new NotSupportedException(String.Format("There is no store type corresponding to the EDM type '{0}' of primitive type '{1}'."' edmType' primitiveType.PrimitiveTypeKind)); " is 176.
Long Statement,SampleEntityFrameworkProvider,SampleProviderServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderServices.cs,CreateCommand,The length of the statement  "                    parameter = CreateSqlParameter(functionParameter.Name' functionParameter.TypeUsage' functionParameter.Mode' DBNull.Value); " is 122.
Long Statement,SampleEntityFrameworkProvider,SampleProviderServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderServices.cs,GetDbProviderManifestToken,The length of the statement  "                throw new ArgumentException("Could not determine storage version; a valid storage connection or a version hint is required."); " is 126.
Long Statement,SampleEntityFrameworkProvider,SampleProviderServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderServices.cs,GetDbProviderManifest,The length of the statement  "                throw new ArgumentException("Could not determine store version; a valid store connection or a version hint is required."); " is 122.
Long Statement,SampleEntityFrameworkProvider,SampleProviderServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderServices.cs,EnsureSqlParameterValue,The length of the statement  "                // If the parameter is being created based on an actual value (typically for constants found in DML expressions) then a DbGeography/DbGeometry " is 142.
Long Statement,SampleEntityFrameworkProvider,SampleProviderServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderServices.cs,EnsureSqlParameterValue,The length of the statement  "                // value must be replaced by an an appropriate Microsoft.SqlServer.Types.SqlGeography/SqlGeometry instance. Since the DbGeography/DbGeometry " is 140.
Long Statement,SampleEntityFrameworkProvider,SampleProviderServices,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderServices.cs,EnsureSqlParameterValue,The length of the statement  "                // value may not have been originally created by this SqlClient provider services implementation' just using the ProviderValue is not sufficient. " is 145.
Long Statement,SampleEntityFrameworkProvider,SampleSqlFunctions,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SampleProviderFunctions.cs,ChecksumAggregate,The length of the statement  "                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int32?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod()'Expression.Constant(arg))); " is 156.
Long Statement,SampleEntityFrameworkProvider,SampleSqlFunctions,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SampleProviderFunctions.cs,ChecksumAggregate,The length of the statement  "                return ((IQueryable)objectQuerySource).Provider.Execute<System.Int32?>(Expression.Call((MethodInfo)MethodInfo.GetCurrentMethod()'Expression.Constant(arg))); " is 156.
Long Statement,SampleEntityFrameworkProvider,SqlSpatialDataReader,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SpatialDataReader.cs,EnsureGeographyColumn,The length of the statement  "            if (!fieldTypeName.EndsWith("sys.geography"' StringComparison.Ordinal)) // Use EndsWith so that we just see the schema and type name' not the database name. " is 156.
Long Statement,SampleEntityFrameworkProvider,SqlSpatialDataReader,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SpatialDataReader.cs,EnsureGeometryColumn,The length of the statement  "            if (!fieldTypeName.EndsWith("sys.geometry"' StringComparison.Ordinal)) // Use EndsWith so that we just see the schema and type name' not the database name. " is 155.
Long Statement,SampleEntityFrameworkProvider,DmlSqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\DmlSqlGenerator.cs,GenerateReturningSql,The length of the statement  "                        throw new NotSupportedException(string.Format("Server generated keys are only supported for identity columns. More than one key column is marked as server generated in table '{0}'."' table.Name)); " is 196.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            Dictionary<string' FunctionHandler> functionHandlers = new Dictionary<string' FunctionHandler>(5' StringComparer.Ordinal); " is 122.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("POINTGEOGRAPHY"' (sqlgen' functionExpression) => sqlgen.HandleFunctionDefaultGivenName(functionExpression' "geography::Point")); " is 150.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("POINTGEOMETRY"' (sqlgen' functionExpression) => sqlgen.HandleFunctionDefaultGivenName(functionExpression' "geometry::Point")); " is 148.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("ASTEXTZM"' (sqlgen' functionExpression) => sqlgen.WriteInstanceFunctionCall("AsTextZM"' functionExpression' isPropertyAccess: false' castReturnTypeTo: null)); " is 180.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("BUFFERWITHTOLERANCE"' (sqlgen' functionExpression) => sqlgen.WriteInstanceFunctionCall("BufferWithTolerance"' functionExpression' isPropertyAccess: false' castReturnTypeTo: null)); " is 202.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("ENVELOPEANGLE"' (sqlgen' functionExpression) => sqlgen.WriteInstanceFunctionCall("EnvelopeAngle"' functionExpression' isPropertyAccess: false' castReturnTypeTo: null)); " is 190.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("ENVELOPECENTER"' (sqlgen' functionExpression) => sqlgen.WriteInstanceFunctionCall("EnvelopeCenter"' functionExpression' isPropertyAccess: false' castReturnTypeTo: null)); " is 192.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("INSTANCEOF"' (sqlgen' functionExpression) => sqlgen.WriteInstanceFunctionCall("InstanceOf"' functionExpression' isPropertyAccess: false' castReturnTypeTo: null)); " is 184.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("FILTER"' (sqlgen' functionExpression) => sqlgen.WriteInstanceFunctionCall("Filter"' functionExpression' isPropertyAccess: false' castReturnTypeTo: null)); " is 176.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("MAKEVALID"' (sqlgen' functionExpression) => sqlgen.WriteInstanceFunctionCall("MakeValid"' functionExpression' isPropertyAccess: false' castReturnTypeTo: null)); " is 182.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("REDUCE"' (sqlgen' functionExpression) => sqlgen.WriteInstanceFunctionCall("Reduce"' functionExpression' isPropertyAccess: false' castReturnTypeTo: null)); " is 176.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("NUMRINGS"' (sqlgen' functionExpression) => sqlgen.WriteInstanceFunctionCall("NumRings"' functionExpression' isPropertyAccess: false' castReturnTypeTo: null)); " is 180.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The length of the statement  "            functionHandlers.Add("RINGN"' (sqlgen' functionExpression) => sqlgen.WriteInstanceFunctionCall("RingN"' functionExpression' isPropertyAccess: false' castReturnTypeTo: null)); " is 174.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeCanonicalFunctionHandlers,The length of the statement  "            Dictionary<string' FunctionHandler> functionHandlers = new Dictionary<string' FunctionHandler>(51' StringComparer.Ordinal); " is 123.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeFunctionNameToOperatorDictionary,The length of the statement  "            Dictionary<string' string> functionNameToOperatorDictionary = new Dictionary<string' string>(5' StringComparer.Ordinal); " is 120.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeDateAddFunctionNameToDatepartDictionary,The length of the statement  "            Dictionary<string' string> dateAddFunctionNameToDatepartDictionary = new Dictionary<string' string>(5' StringComparer.Ordinal); " is 127.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeDateDiffFunctionNameToDatepartDictionary,The length of the statement  "            Dictionary<string' string> dateDiffFunctionNameToDatepartDictionary = new Dictionary<string' string>(5' StringComparer.Ordinal); " is 128.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialFromTextFunction,The length of the statement  "            var functionNameWithoutSrid = (MetadataHelpers.IsPrimitiveType(functionExpression.ResultType' PrimitiveTypeKind.Geometry) " is 121.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialFromTextFunction,The length of the statement  "                Debug.Assert(functionExpression.Arguments.Count == 1' "FromText function should have text or text + srid arguments only"); " is 122.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,VisitConstantExpression,The length of the statement  "                        result.Append(EscapeSingleQuote(((System.DateTime)expressionValue).ToString(IsPreKatmai ? "yyyy-MM-dd HH:mm:ss.fff" : "yyyy-MM-dd HH:mm:ss.fffffff"' CultureInfo.InvariantCulture)' false /* IsUnicode */)); " is 204.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,VisitConstantExpression,The length of the statement  "                        result.Append(EscapeSingleQuote(((System.DateTimeOffset)expressionValue).ToString("yyyy-MM-dd HH:mm:ss.fffffff zzz"' CultureInfo.InvariantCulture)' false /* IsUnicode */)); " is 172.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,VisitConstantExpression,The length of the statement  "                            Debug.Assert(MetadataHelpers.TryGetTypeFacetDescriptionByName(expressionType.EdmType' "precision"' out precisionFacetDescription)' "Decimal primitive type must have Precision facet"); " is 183.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,VisitConstantExpression,The length of the statement  "                            if (MetadataHelpers.TryGetTypeFacetDescriptionByName(expressionType.EdmType' "precision"' out precisionFacetDescription)) " is 121.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,Visit,The length of the statement  "            RowType groupByType = MetadataHelpers.GetEdmType<RowType>(MetadataHelpers.GetEdmType<CollectionType>(e.ResultType).TypeUsage); " is 126.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,Visit,The length of the statement  "            Debug.Assert(e.Limit is DbConstantExpression || e.Limit is DbParameterReferenceExpression' "DbLimitExpression.Limit is of invalid expression type"); " is 148.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,Visit,The length of the statement  "            SqlSelectStatement result = VisitInputExpression(e.Input.Expression' e.Input.VariableName' e.Input.VariableType' out fromSymbol); " is 129.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,Visit,The length of the statement  "            Debug.Assert(e.Count is DbConstantExpression || e.Count is DbParameterReferenceExpression' "DbSkipExpression.Count is of invalid expression type"); " is 147.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,Visit,The length of the statement  "            SqlSelectStatement input = VisitInputExpression(e.Input.Expression' e.Input.VariableName' e.Input.VariableType' out fromSymbol); " is 128.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,Visit,The length of the statement  "            SqlSelectStatement result = VisitInputExpression(e.Input.Expression' e.Input.VariableName' e.Input.VariableType' out fromSymbol); " is 129.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpecialFunction,The length of the statement  "                throw new InvalidOperationException("Special handling should be called only for functions in the list of special functions"); " is 125.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialCanonicalFunction,The length of the statement  "            Debug.Assert(spatialTypeKind == PrimitiveTypeKind.Geography || spatialTypeKind == PrimitiveTypeKind.Geometry' "Spatial function does not refer to a valid spatial primitive type kind?"); " is 185.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialCanonicalFunction,The length of the statement  "                return HandleSpatialCanonicalFunction(functionExpression' _geographyFunctionNameToStaticMethodHandlerDictionary' _geographyFunctionNameToInstancePropertyNameDictionary' _geographyRenamedInstanceMethodFunctionDictionary); " is 220.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialCanonicalFunction,The length of the statement  "                return HandleSpatialCanonicalFunction(functionExpression' _geometryFunctionNameToStaticMethodHandlerDictionary' _geometryFunctionNameToInstancePropertyNameDictionary' _geometryRenamedInstanceMethodFunctionDictionary); " is 217.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialCanonicalFunction,The length of the statement  "                Debug.Assert(functionExpression.Function.Parameters.Count > 0 && MetadataHelpers.IsSpatialType(functionExpression.Function.Parameters[0].TypeUsage)' "Instance property function does not have instance parameter?"); " is 213.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialCanonicalFunction,The length of the statement  "                return WriteInstanceFunctionCall(instancePropertyName' functionExpression' isPropertyAccess: true' castReturnTypeTo: null); " is 123.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialCanonicalFunction,The length of the statement  "                // Default translation pattern is instance method; the instance method name may differ from that of the spatial canonical function " is 130.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialCanonicalFunction,The length of the statement  "                Debug.Assert(functionExpression.Function.Parameters.Count > 0 && MetadataHelpers.IsSpatialType(functionExpression.Function.Parameters[0].TypeUsage)' "Instance method function does not have instance parameter?"); " is 211.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialCanonicalFunction,The length of the statement  "                return WriteInstanceFunctionCall(effectiveFunctionName' functionExpression' isPropertyAccess: false' castReturnTypeTo: castResultType); " is 135.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,WriteInstanceFunctionCall,The length of the statement  "            Debug.Assert(!isPropertyAccess || functionExpression.Arguments.Count == 1' "Property accessor instance functions should have only the single instance argument"); " is 161.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpecialFunctionToOperator,The length of the statement  "            Debug.Assert(_functionNameToOperatorDictionary.ContainsKey(e.Function.Name)' "The function can not be mapped to an operator"); " is 126.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleDatepartDateFunction,The length of the statement  "                throw new InvalidOperationException(String.Format("DATEPART argument to function '{0}.{1}' must be a literal string"' e.Function.NamespaceName' e.Function.Name)); " is 162.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleDatepartDateFunction,The length of the statement  "                throw new InvalidOperationException(String.Format("DATEPART argument to function '{0}.{1}' must be a literal string"' e.Function.NamespaceName' e.Function.Name)); " is 162.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleDatepartDateFunction,The length of the statement  "                throw new InvalidOperationException(String.Format("{0}' is not a valid value for DATEPART argument in '{1}.{2}' function"' datepart' e.Function.NamespaceName' e.Function.Name)); " is 177.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleCanonicalFunctionDateTimeTypeCreation,The length of the statement  "            Debug.Assert(args.Count == (hasDatePart ? 3 : 0) + 3 + (hasTimeZonePart ? 1 : 0)' "Invalid number of parameters for a date time creating function"); " is 148.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,TranslateConstantParameterForLike,The length of the statement  "            searchParamBuilder.Append(SampleProviderManifest.EscapeLikeText(constSearchParamExpression.Value as string' false' out escapingOccurred)); " is 138.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleCanonicalFunctionContains,The length of the statement  "            if ((constSearchParamExpression != null) && (string.IsNullOrEmpty(constSearchParamExpression.Value as string) == false)) " is 120.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleCanonicalFunctionStartsWith,The length of the statement  "            if ((constSearchParamExpression != null) && (string.IsNullOrEmpty(constSearchParamExpression.Value as string) == false)) " is 120.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleCanonicalFunctionEndsWith,The length of the statement  "            if ((constSearchParamExpression != null) && (targetParamExpression != null) && (string.IsNullOrEmpty(constSearchParamExpression.Value as string) == false)) " is 155.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleCanonicalFunctionEndsWith,The length of the statement  "                //      CASE WHEN ('abcd ' LIKE '%cd') THEN cast(1 as bit) WHEN ( NOT ('abcd ' LIKE '%cd')) THEN cast(0 as bit) END AS [C1] " is 123.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,GetSqlPrimitiveType,The length of the statement  "                    maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' MetadataHelpers.BinaryMaxMaxLength); " is 134.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,WriteFunctionName,The length of the statement  "            string storeFunctionName = MetadataHelpers.TryGetValueForMetadataProperty<string>(function' "StoreFunctionNameAttribute"); " is 122.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,AssertKatmaiOrNewer,The length of the statement  "                throw new NotSupportedException(String.Format("There is no store type that maps to the EDM type '{0}' on versions of SQL Server earlier than SQL Server 2008."' primitiveTypeKind)); " is 180.
Long Statement,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,AssertKatmaiOrNewer,The length of the statement  "                throw new NotSupportedException(String.Format("The EDM function '{0}' is not supported on versions of SQL Server earlier than SQL Server 2008."' e.Function.Name)); " is 163.
Long Statement,SampleEntityFrameworkProvider,SqlTypes,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlTypes.cs,SqlCharsFromString,The length of the statement  "            return SqlTypes.SqlCharsType.GetConstructor(new Type[] { SqlStringType }).Invoke(new object[] { SqlStringFromString(value) }); " is 126.
Long Statement,SampleEntityFrameworkProvider,StoreVersionUtils,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\StoreVersion.cs,GetVersionHint,The length of the statement  "            throw new ArgumentException("Could not determine storage version; a valid storage connection or a version hint is required."); " is 126.
Complex Conditional,SampleEntityFrameworkProvider,DdlBuilder,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\DdlBuilder.cs,AppendType,The conditional expression  "type.EdmType.Name == "binary" &&                  8 == type.GetMaxLength() &&                  column.TypeUsage.Facets.TryGetValue("StoreGeneratedPattern"' false' out storeGenFacet) &&                  storeGenFacet.Value != null &&                  StoreGeneratedPattern.Computed == (StoreGeneratedPattern)storeGenFacet.Value"  is complex.
Complex Conditional,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,EscapeLikeText,The conditional expression  "!(text.Contains("%") || text.Contains("_") || text.Contains("[")                  || text.Contains("^") || alwaysEscapeEscapeChar && text.Contains(LikeEscapeCharToString))"  is complex.
Complex Conditional,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,EscapeLikeText,The conditional expression  "c == '%' || c == '_' || c == '[' || c == '^' || c == LikeEscapeChar"  is complex.
Complex Conditional,SampleEntityFrameworkProvider,SqlSelectStatement,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlSelectStatement.cs,WriteSql,The conditional expression  "(null != this.orderBy) && !this.OrderBy.IsEmpty && (this.IsTopMost || this.Top != null)"  is complex.
Empty Catch Block,SampleEntityFrameworkProvider,SqlTypes,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlTypes.cs,SqlTypes,The method has an empty catch block.
Empty Catch Block,SampleEntityFrameworkProvider,SqlTypes,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlTypes.cs,SqlTypes,The method has an empty catch block.
Magic Number,SampleEntityFrameworkProvider,DdlBuilder,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\DdlBuilder.cs,AppendType,The following statement contains a magic number: type.EdmType.Name == "binary" &&                  8 == type.GetMaxLength() &&                  column.TypeUsage.Facets.TryGetValue("StoreGeneratedPattern"' false' out storeGenFacet) &&                  storeGenFacet.Value != null &&                  StoreGeneratedPattern.Computed == (StoreGeneratedPattern)storeGenFacet.Value
Magic Number,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName)              {                  // for some types we just go with simple type usage with no facets                  case "tinyint":                  case "smallint":                  case "bigint":                  case "bit":                  case "uniqueidentifier":                  case "int":                  case "geography":                  case "geometry":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "varchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = false;                      isFixedLen = false;                      break;                    case "char":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = false;                      isFixedLen = true;                      break;                    case "nvarchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = true;                      isFixedLen = false;                      break;                    case "nchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = true;                      isFixedLen = true;                      break;                    case "varchar(max)":                  case "text":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = false;                      isFixedLen = false;                      break;                    case "nvarchar(max)":                  case "ntext":                  case "xml":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = true;                      isFixedLen = false;                      break;                    case "binary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isFixedLen = true;                      break;                    case "varbinary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isFixedLen = false;                      break;                    case "varbinary(max)":                  case "image":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = true;                      isFixedLen = false;                      break;                    case "timestamp":                  case "rowversion":                      return TypeUsage.CreateBinaryTypeUsage(edmPrimitiveType' true' 8);                    case "float":                  case "real":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "decimal":                  case "numeric":                      {                          byte precision;                          byte scale;                          if (TypeHelpers.TryGetPrecision(storeType' out precision) && TypeHelpers.TryGetScale(storeType' out scale))                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' precision' scale);                          }                          else                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType);                          }                      }                    case "money":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 19' 4);                    case "smallmoney":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 10' 4);                    case "datetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                    case "smalldatetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                    default:                      throw new NotSupportedException(String.Format("The underlying provider does not support the type '{0}'."' storeTypeName));              }
Magic Number,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName)              {                  // for some types we just go with simple type usage with no facets                  case "tinyint":                  case "smallint":                  case "bigint":                  case "bit":                  case "uniqueidentifier":                  case "int":                  case "geography":                  case "geometry":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "varchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = false;                      isFixedLen = false;                      break;                    case "char":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = false;                      isFixedLen = true;                      break;                    case "nvarchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = true;                      isFixedLen = false;                      break;                    case "nchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = true;                      isFixedLen = true;                      break;                    case "varchar(max)":                  case "text":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = false;                      isFixedLen = false;                      break;                    case "nvarchar(max)":                  case "ntext":                  case "xml":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = true;                      isFixedLen = false;                      break;                    case "binary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isFixedLen = true;                      break;                    case "varbinary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isFixedLen = false;                      break;                    case "varbinary(max)":                  case "image":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = true;                      isFixedLen = false;                      break;                    case "timestamp":                  case "rowversion":                      return TypeUsage.CreateBinaryTypeUsage(edmPrimitiveType' true' 8);                    case "float":                  case "real":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "decimal":                  case "numeric":                      {                          byte precision;                          byte scale;                          if (TypeHelpers.TryGetPrecision(storeType' out precision) && TypeHelpers.TryGetScale(storeType' out scale))                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' precision' scale);                          }                          else                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType);                          }                      }                    case "money":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 19' 4);                    case "smallmoney":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 10' 4);                    case "datetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                    case "smalldatetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                    default:                      throw new NotSupportedException(String.Format("The underlying provider does not support the type '{0}'."' storeTypeName));              }
Magic Number,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName)              {                  // for some types we just go with simple type usage with no facets                  case "tinyint":                  case "smallint":                  case "bigint":                  case "bit":                  case "uniqueidentifier":                  case "int":                  case "geography":                  case "geometry":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "varchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = false;                      isFixedLen = false;                      break;                    case "char":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = false;                      isFixedLen = true;                      break;                    case "nvarchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = true;                      isFixedLen = false;                      break;                    case "nchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = true;                      isFixedLen = true;                      break;                    case "varchar(max)":                  case "text":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = false;                      isFixedLen = false;                      break;                    case "nvarchar(max)":                  case "ntext":                  case "xml":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = true;                      isFixedLen = false;                      break;                    case "binary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isFixedLen = true;                      break;                    case "varbinary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isFixedLen = false;                      break;                    case "varbinary(max)":                  case "image":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = true;                      isFixedLen = false;                      break;                    case "timestamp":                  case "rowversion":                      return TypeUsage.CreateBinaryTypeUsage(edmPrimitiveType' true' 8);                    case "float":                  case "real":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "decimal":                  case "numeric":                      {                          byte precision;                          byte scale;                          if (TypeHelpers.TryGetPrecision(storeType' out precision) && TypeHelpers.TryGetScale(storeType' out scale))                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' precision' scale);                          }                          else                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType);                          }                      }                    case "money":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 19' 4);                    case "smallmoney":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 10' 4);                    case "datetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                    case "smalldatetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                    default:                      throw new NotSupportedException(String.Format("The underlying provider does not support the type '{0}'."' storeTypeName));              }
Magic Number,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName)              {                  // for some types we just go with simple type usage with no facets                  case "tinyint":                  case "smallint":                  case "bigint":                  case "bit":                  case "uniqueidentifier":                  case "int":                  case "geography":                  case "geometry":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "varchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = false;                      isFixedLen = false;                      break;                    case "char":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = false;                      isFixedLen = true;                      break;                    case "nvarchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = true;                      isFixedLen = false;                      break;                    case "nchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = true;                      isFixedLen = true;                      break;                    case "varchar(max)":                  case "text":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = false;                      isFixedLen = false;                      break;                    case "nvarchar(max)":                  case "ntext":                  case "xml":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = true;                      isFixedLen = false;                      break;                    case "binary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isFixedLen = true;                      break;                    case "varbinary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isFixedLen = false;                      break;                    case "varbinary(max)":                  case "image":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = true;                      isFixedLen = false;                      break;                    case "timestamp":                  case "rowversion":                      return TypeUsage.CreateBinaryTypeUsage(edmPrimitiveType' true' 8);                    case "float":                  case "real":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "decimal":                  case "numeric":                      {                          byte precision;                          byte scale;                          if (TypeHelpers.TryGetPrecision(storeType' out precision) && TypeHelpers.TryGetScale(storeType' out scale))                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' precision' scale);                          }                          else                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType);                          }                      }                    case "money":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 19' 4);                    case "smallmoney":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 10' 4);                    case "datetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                    case "smalldatetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                    default:                      throw new NotSupportedException(String.Format("The underlying provider does not support the type '{0}'."' storeTypeName));              }
Magic Number,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetEdmType,The following statement contains a magic number: switch (storeTypeName)              {                  // for some types we just go with simple type usage with no facets                  case "tinyint":                  case "smallint":                  case "bigint":                  case "bit":                  case "uniqueidentifier":                  case "int":                  case "geography":                  case "geometry":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "varchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = false;                      isFixedLen = false;                      break;                    case "char":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = false;                      isFixedLen = true;                      break;                    case "nvarchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = true;                      isFixedLen = false;                      break;                    case "nchar":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isUnicode = true;                      isFixedLen = true;                      break;                    case "varchar(max)":                  case "text":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = false;                      isFixedLen = false;                      break;                    case "nvarchar(max)":                  case "ntext":                  case "xml":                      newPrimitiveTypeKind = PrimitiveTypeKind.String;                      isUnbounded = true;                      isUnicode = true;                      isFixedLen = false;                      break;                    case "binary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isFixedLen = true;                      break;                    case "varbinary":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = !TypeHelpers.TryGetMaxLength(storeType' out maxLength);                      isFixedLen = false;                      break;                    case "varbinary(max)":                  case "image":                      newPrimitiveTypeKind = PrimitiveTypeKind.Binary;                      isUnbounded = true;                      isFixedLen = false;                      break;                    case "timestamp":                  case "rowversion":                      return TypeUsage.CreateBinaryTypeUsage(edmPrimitiveType' true' 8);                    case "float":                  case "real":                      return TypeUsage.CreateDefaultTypeUsage(edmPrimitiveType);                    case "decimal":                  case "numeric":                      {                          byte precision;                          byte scale;                          if (TypeHelpers.TryGetPrecision(storeType' out precision) && TypeHelpers.TryGetScale(storeType' out scale))                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' precision' scale);                          }                          else                          {                              return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType);                          }                      }                    case "money":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 19' 4);                    case "smallmoney":                      return TypeUsage.CreateDecimalTypeUsage(edmPrimitiveType' 10' 4);                    case "datetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                    case "smalldatetime":                      return TypeUsage.CreateDateTimeTypeUsage(edmPrimitiveType' null);                    default:                      throw new NotSupportedException(String.Format("The underlying provider does not support the type '{0}'."' storeTypeName));              }
Magic Number,SampleEntityFrameworkProvider,SampleProviderManifest,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\ProviderManifest.cs,GetStoreType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind)              {                  case PrimitiveTypeKind.Boolean:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["bit"]);                    case PrimitiveTypeKind.Byte:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["tinyint"]);                    case PrimitiveTypeKind.Int16:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["smallint"]);                    case PrimitiveTypeKind.Int32:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["int"]);                    case PrimitiveTypeKind.Int64:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["bigint"]);                    case PrimitiveTypeKind.Guid:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["uniqueidentifier"]);                    case PrimitiveTypeKind.Double:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["float"]);                    case PrimitiveTypeKind.Single:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["real"]);                    case PrimitiveTypeKind.Decimal: // decimal' numeric' smallmoney' money                      {                          byte precision;                          if (!TypeHelpers.TryGetPrecision(edmType' out precision))                          {                              precision = 18;                          }                            byte scale;                          if (!TypeHelpers.TryGetScale(edmType' out scale))                          {                              scale = 0;                          }                            return TypeUsage.CreateDecimalTypeUsage(StoreTypeNameToStorePrimitiveType["decimal"]' precision' scale);                      }                    case PrimitiveTypeKind.Binary: // binary' varbinary' varbinary(max)' image' timestamp' rowversion                      {                          bool isFixedLength = null != facets["FixedLength"].Value && (bool)facets["FixedLength"].Value;                          Facet f = facets["MaxLength"];                            bool isMaxLength = f.IsUnbounded || null == f.Value || (int)f.Value > binaryMaxSize;                          int maxLength = !isMaxLength ? (int)f.Value : Int32.MinValue;                            TypeUsage tu;                          if (isFixedLength)                          {                              tu = TypeUsage.CreateBinaryTypeUsage(StoreTypeNameToStorePrimitiveType["binary"]' true' maxLength);                          }                          else                          {                              if (isMaxLength)                              {                                  tu = TypeUsage.CreateBinaryTypeUsage(StoreTypeNameToStorePrimitiveType["varbinary(max)"]' false);                                  System.Diagnostics.Debug.Assert(tu.Facets["MaxLength"].Description.IsConstant' "varbinary(max) is not constant!");                              }                              else                              {                                  tu = TypeUsage.CreateBinaryTypeUsage(StoreTypeNameToStorePrimitiveType["varbinary"]' false' maxLength);                              }                          }                          return tu;                      }                    case PrimitiveTypeKind.String:                      // char' nchar' varchar' nvarchar' varchar(max)' nvarchar(max)' ntext' text' xml                      {                          bool isUnicode = null == facets["Unicode"].Value || (bool)facets["Unicode"].Value;                          bool isFixedLength = null != facets["FixedLength"].Value && (bool)facets["FixedLength"].Value;                          Facet f = facets["MaxLength"];                          // maxlen is true if facet value is unbounded' the value is bigger than the limited string sizes *or* the facet                          // value is null. this is needed since functions still have maxlength facet value as null                          bool isMaxLength = f.IsUnbounded || null == f.Value || (int)f.Value > (isUnicode ? nvarcharMaxSize : varcharMaxSize);                          int maxLength = !isMaxLength ? (int)f.Value : Int32.MinValue;                            TypeUsage tu;                            if (isUnicode)                          {                              if (isFixedLength)                              {                                  tu = TypeUsage.CreateStringTypeUsage(StoreTypeNameToStorePrimitiveType["nchar"]' true' true' maxLength);                              }                              else                              {                                  if (isMaxLength)                                  {                                      tu = TypeUsage.CreateStringTypeUsage(StoreTypeNameToStorePrimitiveType["nvarchar(max)"]' true' false);                                  }                                  else                                  {                                      tu = TypeUsage.CreateStringTypeUsage(StoreTypeNameToStorePrimitiveType["nvarchar"]' true' false' maxLength);                                  }                              }                          }                          else                          {                              if (isFixedLength)                              {                                  tu = TypeUsage.CreateStringTypeUsage(StoreTypeNameToStorePrimitiveType["char"]' false' true' maxLength);                              }                              else                              {                                  if (isMaxLength)                                  {                                      tu = TypeUsage.CreateStringTypeUsage(StoreTypeNameToStorePrimitiveType["varchar(max)"]' false' false);                                  }                                  else                                  {                                      tu = TypeUsage.CreateStringTypeUsage(StoreTypeNameToStorePrimitiveType["varchar"]' false' false' maxLength);                                  }                              }                          }                          return tu;                      }                    case PrimitiveTypeKind.DateTime: // datetime' smalldatetime                        Facet preserveSecondsFacet;                      bool preserveSeconds;                      if (edmType.Facets.TryGetValue("PreserveSeconds"' true' out preserveSecondsFacet) && null != preserveSecondsFacet.Value)                      {                          preserveSeconds = (bool)preserveSecondsFacet.Value;                      }                      else                      {                          preserveSeconds = true;                      }                        return TypeUsage.CreateDefaultTypeUsage(preserveSeconds ? StoreTypeNameToStorePrimitiveType["datetime"] : StoreTypeNameToStorePrimitiveType["smalldatetime"]);                    case PrimitiveTypeKind.Geography:                  case PrimitiveTypeKind.GeographyPoint:                  case PrimitiveTypeKind.GeographyLineString:                  case PrimitiveTypeKind.GeographyPolygon:                  case PrimitiveTypeKind.GeographyMultiPoint:                  case PrimitiveTypeKind.GeographyMultiLineString:                  case PrimitiveTypeKind.GeographyMultiPolygon:                  case PrimitiveTypeKind.GeographyCollection:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["geography"]);                    case PrimitiveTypeKind.Geometry:                  case PrimitiveTypeKind.GeometryPoint:                  case PrimitiveTypeKind.GeometryLineString:                  case PrimitiveTypeKind.GeometryPolygon:                  case PrimitiveTypeKind.GeometryMultiPoint:                  case PrimitiveTypeKind.GeometryMultiLineString:                  case PrimitiveTypeKind.GeometryMultiPolygon:                  case PrimitiveTypeKind.GeometryCollection:                      return TypeUsage.CreateDefaultTypeUsage(StoreTypeNameToStorePrimitiveType["geometry"]);                    default:                      throw new NotSupportedException(String.Format("There is no store type corresponding to the EDM type '{0}' of primitive type '{1}'."' edmType' primitiveType.PrimitiveTypeKind));              }
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeBuiltInFunctionHandlers,The following statement contains a magic number: Dictionary<string' FunctionHandler> functionHandlers = new Dictionary<string' FunctionHandler>(5' StringComparer.Ordinal);
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeCanonicalFunctionHandlers,The following statement contains a magic number: Dictionary<string' FunctionHandler> functionHandlers = new Dictionary<string' FunctionHandler>(51' StringComparer.Ordinal);
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeFunctionNameToOperatorDictionary,The following statement contains a magic number: Dictionary<string' string> functionNameToOperatorDictionary = new Dictionary<string' string>(5' StringComparer.Ordinal);
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeDateAddFunctionNameToDatepartDictionary,The following statement contains a magic number: Dictionary<string' string> dateAddFunctionNameToDatepartDictionary = new Dictionary<string' string>(5' StringComparer.Ordinal);
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,InitializeDateDiffFunctionNameToDatepartDictionary,The following statement contains a magic number: Dictionary<string' string> dateDiffFunctionNameToDatepartDictionary = new Dictionary<string' string>(5' StringComparer.Ordinal);
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialFromTextFunction,The following statement contains a magic number: functionExpression.Arguments.Count == 2
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpatialStaticMethodFunctionAppendSrid,The following statement contains a magic number: functionExpression.Arguments.Count == 2
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,WriteSql,The following statement contains a magic number: StringBuilder builder = new StringBuilder(1024);
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,VisitConstantExpression,The following statement contains a magic number: switch (typeKind)                  {                      case PrimitiveTypeKind.Int32:                          // default sql server type for integral values.                          result.Append(expressionValue.ToString());                          break;                        case PrimitiveTypeKind.Binary:                          result.Append(" 0x");                          result.Append(ByteArrayToBinaryString((Byte[])expressionValue));                          result.Append(" ");                          break;                        case PrimitiveTypeKind.Boolean:                          result.Append((bool)expressionValue ? "cast(1 as bit)" : "cast(0 as bit)");                          break;                        case PrimitiveTypeKind.Byte:                          result.Append("cast(");                          result.Append(expressionValue.ToString());                          result.Append(" as tinyint)");                          break;                        case PrimitiveTypeKind.DateTime:                          result.Append("convert(");                          result.Append(IsPreKatmai ? "datetime" : "datetime2");                          result.Append("' ");                          result.Append(EscapeSingleQuote(((System.DateTime)expressionValue).ToString(IsPreKatmai ? "yyyy-MM-dd HH:mm:ss.fff" : "yyyy-MM-dd HH:mm:ss.fffffff"' CultureInfo.InvariantCulture)' false /* IsUnicode */));                          result.Append("' 121)");                          break;                        case PrimitiveTypeKind.Time:                          AssertKatmaiOrNewer(typeKind);                          result.Append("convert(");                          result.Append(expressionType.EdmType.Name);                          result.Append("' ");                          result.Append(EscapeSingleQuote(expressionValue.ToString()' false /* IsUnicode */));                          result.Append("' 121)");                          break;                        case PrimitiveTypeKind.DateTimeOffset:                          AssertKatmaiOrNewer(typeKind);                          result.Append("convert(");                          result.Append(expressionType.EdmType.Name);                          result.Append("' ");                          result.Append(EscapeSingleQuote(((System.DateTimeOffset)expressionValue).ToString("yyyy-MM-dd HH:mm:ss.fffffff zzz"' CultureInfo.InvariantCulture)' false /* IsUnicode */));                          result.Append("' 121)");                          break;                          case PrimitiveTypeKind.Decimal:                          string strDecimal = ((Decimal)expressionValue).ToString(CultureInfo.InvariantCulture);                          // if the decimal value has no decimal part' cast as decimal to preserve type                          // if the number has precision > int64 max precision' it will be handled as decimal by sql server                          // and does not need cast. if precision is lest then 20' then cast using Max(literal precision' sql default precision)                          if (-1 == strDecimal.IndexOf('.') && (strDecimal.TrimStart(new char[] { '-' }).Length < 20))                          {                              byte precision = (Byte)strDecimal.Length;                              FacetDescription precisionFacetDescription;                              Debug.Assert(MetadataHelpers.TryGetTypeFacetDescriptionByName(expressionType.EdmType' "precision"' out precisionFacetDescription)' "Decimal primitive type must have Precision facet");                              if (MetadataHelpers.TryGetTypeFacetDescriptionByName(expressionType.EdmType' "precision"' out precisionFacetDescription))                              {                                  if (precisionFacetDescription.DefaultValue != null)                                  {                                      precision = Math.Max(precision' (byte)precisionFacetDescription.DefaultValue);                                  }                              }                              Debug.Assert(precision > 0' "Precision must be greater than zero");                              result.Append("cast(");                              result.Append(strDecimal);                              result.Append(" as decimal(");                              result.Append(precision.ToString(CultureInfo.InvariantCulture));                              result.Append("))");                          }                          else                          {                              result.Append(strDecimal);                          }                          break;                        case PrimitiveTypeKind.Double:                          result.Append("cast(");                          result.Append(((Double)expressionValue).ToString(CultureInfo.InvariantCulture));                          result.Append(" as float(53))");                          break;                        case PrimitiveTypeKind.Guid:                          result.Append("cast(");                          result.Append(EscapeSingleQuote(expressionValue.ToString()' false /* IsUnicode */));                          result.Append(" as uniqueidentifier)");                          break;                        case PrimitiveTypeKind.Int16:                          result.Append("cast(");                          result.Append(expressionValue.ToString());                          result.Append(" as smallint)");                          break;                        case PrimitiveTypeKind.Int64:                          result.Append("cast(");                          result.Append(expressionValue.ToString());                          result.Append(" as bigint)");                          break;                        case PrimitiveTypeKind.Single:                          result.Append("cast(");                          result.Append(((Single)expressionValue).ToString(CultureInfo.InvariantCulture));                          result.Append(" as real)");                          break;                        case PrimitiveTypeKind.String:                          bool isUnicode = MetadataHelpers.GetFacetValueOrDefault<bool>(expressionType' MetadataHelpers.UnicodeFacetName' true);                          result.Append(EscapeSingleQuote(expressionValue as string' isUnicode));                          break;                        default:                          // all known scalar types should been handled already.                          throw new NotSupportedException("Primitive type kind " + typeKind + " is not supported by the Sample Provider");                  }
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,GetTargetTSql,The following statement contains a magic number: StringBuilder builder = new StringBuilder(50);
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,Visit,The following statement contains a magic number: List<DbExpressionBinding> inputs = new List<DbExpressionBinding>(2);
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleSpecialFunctionToOperator,The following statement contains a magic number: Debug.Assert(e.Arguments.Count > 0 && e.Arguments.Count <= 2' "There should be 1 or 2 arguments for operator");
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleCanonicalFunctionDateTimeTypeCreation,The following statement contains a magic number: Debug.Assert(args.Count == (hasDatePart ? 3 : 0) + 3 + (hasTimeZonePart ? 1 : 0)' "Invalid number of parameters for a date time creating function");
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleCanonicalFunctionDateTimeTypeCreation,The following statement contains a magic number: Debug.Assert(args.Count == (hasDatePart ? 3 : 0) + 3 + (hasTimeZonePart ? 1 : 0)' "Invalid number of parameters for a date time creating function");
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleCanonicalFunctionRoundOrTruncate,The following statement contains a magic number: Debug.Assert(e.Arguments.Count <= 2' "Round or truncate should have at most 2 arguments");
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleCanonicalFunctionContains,The following statement contains a magic number: Debug.Assert(args.Count == 2' "Contains should have two arguments");
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleCanonicalFunctionStartsWith,The following statement contains a magic number: Debug.Assert(args.Count == 2' "StartsWith should have two arguments");
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,HandleCanonicalFunctionEndsWith,The following statement contains a magic number: Debug.Assert(args.Count == 2' "EndsWith should have two arguments");
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,GetSqlPrimitiveType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind)              {                  case PrimitiveTypeKind.Binary:                      maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' MetadataHelpers.BinaryMaxMaxLength);                      if (maxLength == MetadataHelpers.BinaryMaxMaxLength)                      {                          length = "max";                      }                      else                      {                          length = maxLength.ToString(CultureInfo.InvariantCulture);                      }                      isFixedLength = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.FixedLengthFacetName' false);                      typeName = (isFixedLength ? "binary(" : "varbinary(") + length + ")";                      break;                    case PrimitiveTypeKind.String:                      // Question: How do we handle ntext?                      isUnicode = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.UnicodeFacetName' true);                      isFixedLength = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.FixedLengthFacetName' false);                      maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' Int32.MinValue);                      if (maxLength == Int32.MinValue)                      {                          length = "max";                      }                      else                      {                          length = maxLength.ToString(CultureInfo.InvariantCulture);                      }                      if (isUnicode && !isFixedLength && maxLength > 4000)                          length = "max";                      if (!isUnicode && !isFixedLength && maxLength > 8000)                          length = "max";                      if (isFixedLength)                      {                          typeName = (isUnicode ? "nchar(" : "char(") + length + ")";                      }                      else                      {                          typeName = (isUnicode ? "nvarchar(" : "varchar(") + length + ")";                      }                      break;                    case PrimitiveTypeKind.DateTime:                      preserveSeconds = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.PreserveSecondsFacetName' false);                      typeName = preserveSeconds ? (IsPreKatmai ? "datetime2" : "datetime") : "smalldatetime";                      break;                    case PrimitiveTypeKind.Time:                      AssertKatmaiOrNewer(primitiveType.PrimitiveTypeKind);                      typeName = "time";                      break;                    case PrimitiveTypeKind.DateTimeOffset:                      AssertKatmaiOrNewer(primitiveType.PrimitiveTypeKind);                      typeName = "datetimeoffset";                      break;                    case PrimitiveTypeKind.Decimal:                      decimalPrecision = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.PrecisionFacetName' 18);                      Debug.Assert(decimalPrecision > 0' "decimal precision must be greater than zero");                      decimalScale = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.ScaleFacetName' 0);                      Debug.Assert(decimalPrecision >= decimalScale' "decimalPrecision must be greater or equal to decimalScale");                      Debug.Assert(decimalPrecision <= 38' "decimalPrecision must be less than or equal to 38");                      typeName = typeName + "(" + decimalPrecision + "'" + decimalScale + ")";                      break;                    case PrimitiveTypeKind.Int32:                      typeName = "int";                      break;                    case PrimitiveTypeKind.Int64:                      typeName = "bigint";                      break;                    case PrimitiveTypeKind.Int16:                      typeName = "smallint";                      break;                    case PrimitiveTypeKind.Byte:                      typeName = "tinyint";                      break;                    case PrimitiveTypeKind.Boolean:                      typeName = "bit";                      break;                    case PrimitiveTypeKind.Single:                      typeName = "real";                      break;                    case PrimitiveTypeKind.Double:                      typeName = "float";                      break;                    case PrimitiveTypeKind.Guid:                      typeName = "uniqueidentifier";                      break;                    default:                      throw new NotSupportedException("Unsupported EdmType: " + primitiveType.PrimitiveTypeKind);              }
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,GetSqlPrimitiveType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind)              {                  case PrimitiveTypeKind.Binary:                      maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' MetadataHelpers.BinaryMaxMaxLength);                      if (maxLength == MetadataHelpers.BinaryMaxMaxLength)                      {                          length = "max";                      }                      else                      {                          length = maxLength.ToString(CultureInfo.InvariantCulture);                      }                      isFixedLength = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.FixedLengthFacetName' false);                      typeName = (isFixedLength ? "binary(" : "varbinary(") + length + ")";                      break;                    case PrimitiveTypeKind.String:                      // Question: How do we handle ntext?                      isUnicode = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.UnicodeFacetName' true);                      isFixedLength = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.FixedLengthFacetName' false);                      maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' Int32.MinValue);                      if (maxLength == Int32.MinValue)                      {                          length = "max";                      }                      else                      {                          length = maxLength.ToString(CultureInfo.InvariantCulture);                      }                      if (isUnicode && !isFixedLength && maxLength > 4000)                          length = "max";                      if (!isUnicode && !isFixedLength && maxLength > 8000)                          length = "max";                      if (isFixedLength)                      {                          typeName = (isUnicode ? "nchar(" : "char(") + length + ")";                      }                      else                      {                          typeName = (isUnicode ? "nvarchar(" : "varchar(") + length + ")";                      }                      break;                    case PrimitiveTypeKind.DateTime:                      preserveSeconds = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.PreserveSecondsFacetName' false);                      typeName = preserveSeconds ? (IsPreKatmai ? "datetime2" : "datetime") : "smalldatetime";                      break;                    case PrimitiveTypeKind.Time:                      AssertKatmaiOrNewer(primitiveType.PrimitiveTypeKind);                      typeName = "time";                      break;                    case PrimitiveTypeKind.DateTimeOffset:                      AssertKatmaiOrNewer(primitiveType.PrimitiveTypeKind);                      typeName = "datetimeoffset";                      break;                    case PrimitiveTypeKind.Decimal:                      decimalPrecision = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.PrecisionFacetName' 18);                      Debug.Assert(decimalPrecision > 0' "decimal precision must be greater than zero");                      decimalScale = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.ScaleFacetName' 0);                      Debug.Assert(decimalPrecision >= decimalScale' "decimalPrecision must be greater or equal to decimalScale");                      Debug.Assert(decimalPrecision <= 38' "decimalPrecision must be less than or equal to 38");                      typeName = typeName + "(" + decimalPrecision + "'" + decimalScale + ")";                      break;                    case PrimitiveTypeKind.Int32:                      typeName = "int";                      break;                    case PrimitiveTypeKind.Int64:                      typeName = "bigint";                      break;                    case PrimitiveTypeKind.Int16:                      typeName = "smallint";                      break;                    case PrimitiveTypeKind.Byte:                      typeName = "tinyint";                      break;                    case PrimitiveTypeKind.Boolean:                      typeName = "bit";                      break;                    case PrimitiveTypeKind.Single:                      typeName = "real";                      break;                    case PrimitiveTypeKind.Double:                      typeName = "float";                      break;                    case PrimitiveTypeKind.Guid:                      typeName = "uniqueidentifier";                      break;                    default:                      throw new NotSupportedException("Unsupported EdmType: " + primitiveType.PrimitiveTypeKind);              }
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,GetSqlPrimitiveType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind)              {                  case PrimitiveTypeKind.Binary:                      maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' MetadataHelpers.BinaryMaxMaxLength);                      if (maxLength == MetadataHelpers.BinaryMaxMaxLength)                      {                          length = "max";                      }                      else                      {                          length = maxLength.ToString(CultureInfo.InvariantCulture);                      }                      isFixedLength = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.FixedLengthFacetName' false);                      typeName = (isFixedLength ? "binary(" : "varbinary(") + length + ")";                      break;                    case PrimitiveTypeKind.String:                      // Question: How do we handle ntext?                      isUnicode = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.UnicodeFacetName' true);                      isFixedLength = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.FixedLengthFacetName' false);                      maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' Int32.MinValue);                      if (maxLength == Int32.MinValue)                      {                          length = "max";                      }                      else                      {                          length = maxLength.ToString(CultureInfo.InvariantCulture);                      }                      if (isUnicode && !isFixedLength && maxLength > 4000)                          length = "max";                      if (!isUnicode && !isFixedLength && maxLength > 8000)                          length = "max";                      if (isFixedLength)                      {                          typeName = (isUnicode ? "nchar(" : "char(") + length + ")";                      }                      else                      {                          typeName = (isUnicode ? "nvarchar(" : "varchar(") + length + ")";                      }                      break;                    case PrimitiveTypeKind.DateTime:                      preserveSeconds = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.PreserveSecondsFacetName' false);                      typeName = preserveSeconds ? (IsPreKatmai ? "datetime2" : "datetime") : "smalldatetime";                      break;                    case PrimitiveTypeKind.Time:                      AssertKatmaiOrNewer(primitiveType.PrimitiveTypeKind);                      typeName = "time";                      break;                    case PrimitiveTypeKind.DateTimeOffset:                      AssertKatmaiOrNewer(primitiveType.PrimitiveTypeKind);                      typeName = "datetimeoffset";                      break;                    case PrimitiveTypeKind.Decimal:                      decimalPrecision = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.PrecisionFacetName' 18);                      Debug.Assert(decimalPrecision > 0' "decimal precision must be greater than zero");                      decimalScale = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.ScaleFacetName' 0);                      Debug.Assert(decimalPrecision >= decimalScale' "decimalPrecision must be greater or equal to decimalScale");                      Debug.Assert(decimalPrecision <= 38' "decimalPrecision must be less than or equal to 38");                      typeName = typeName + "(" + decimalPrecision + "'" + decimalScale + ")";                      break;                    case PrimitiveTypeKind.Int32:                      typeName = "int";                      break;                    case PrimitiveTypeKind.Int64:                      typeName = "bigint";                      break;                    case PrimitiveTypeKind.Int16:                      typeName = "smallint";                      break;                    case PrimitiveTypeKind.Byte:                      typeName = "tinyint";                      break;                    case PrimitiveTypeKind.Boolean:                      typeName = "bit";                      break;                    case PrimitiveTypeKind.Single:                      typeName = "real";                      break;                    case PrimitiveTypeKind.Double:                      typeName = "float";                      break;                    case PrimitiveTypeKind.Guid:                      typeName = "uniqueidentifier";                      break;                    default:                      throw new NotSupportedException("Unsupported EdmType: " + primitiveType.PrimitiveTypeKind);              }
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,GetSqlPrimitiveType,The following statement contains a magic number: switch (primitiveType.PrimitiveTypeKind)              {                  case PrimitiveTypeKind.Binary:                      maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' MetadataHelpers.BinaryMaxMaxLength);                      if (maxLength == MetadataHelpers.BinaryMaxMaxLength)                      {                          length = "max";                      }                      else                      {                          length = maxLength.ToString(CultureInfo.InvariantCulture);                      }                      isFixedLength = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.FixedLengthFacetName' false);                      typeName = (isFixedLength ? "binary(" : "varbinary(") + length + ")";                      break;                    case PrimitiveTypeKind.String:                      // Question: How do we handle ntext?                      isUnicode = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.UnicodeFacetName' true);                      isFixedLength = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.FixedLengthFacetName' false);                      maxLength = MetadataHelpers.GetFacetValueOrDefault<int>(type' MetadataHelpers.MaxLengthFacetName' Int32.MinValue);                      if (maxLength == Int32.MinValue)                      {                          length = "max";                      }                      else                      {                          length = maxLength.ToString(CultureInfo.InvariantCulture);                      }                      if (isUnicode && !isFixedLength && maxLength > 4000)                          length = "max";                      if (!isUnicode && !isFixedLength && maxLength > 8000)                          length = "max";                      if (isFixedLength)                      {                          typeName = (isUnicode ? "nchar(" : "char(") + length + ")";                      }                      else                      {                          typeName = (isUnicode ? "nvarchar(" : "varchar(") + length + ")";                      }                      break;                    case PrimitiveTypeKind.DateTime:                      preserveSeconds = MetadataHelpers.GetFacetValueOrDefault<bool>(type' MetadataHelpers.PreserveSecondsFacetName' false);                      typeName = preserveSeconds ? (IsPreKatmai ? "datetime2" : "datetime") : "smalldatetime";                      break;                    case PrimitiveTypeKind.Time:                      AssertKatmaiOrNewer(primitiveType.PrimitiveTypeKind);                      typeName = "time";                      break;                    case PrimitiveTypeKind.DateTimeOffset:                      AssertKatmaiOrNewer(primitiveType.PrimitiveTypeKind);                      typeName = "datetimeoffset";                      break;                    case PrimitiveTypeKind.Decimal:                      decimalPrecision = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.PrecisionFacetName' 18);                      Debug.Assert(decimalPrecision > 0' "decimal precision must be greater than zero");                      decimalScale = MetadataHelpers.GetFacetValueOrDefault<byte>(type' MetadataHelpers.ScaleFacetName' 0);                      Debug.Assert(decimalPrecision >= decimalScale' "decimalPrecision must be greater or equal to decimalScale");                      Debug.Assert(decimalPrecision <= 38' "decimalPrecision must be less than or equal to 38");                      typeName = typeName + "(" + decimalPrecision + "'" + decimalScale + ")";                      break;                    case PrimitiveTypeKind.Int32:                      typeName = "int";                      break;                    case PrimitiveTypeKind.Int64:                      typeName = "bigint";                      break;                    case PrimitiveTypeKind.Int16:                      typeName = "smallint";                      break;                    case PrimitiveTypeKind.Byte:                      typeName = "tinyint";                      break;                    case PrimitiveTypeKind.Boolean:                      typeName = "bit";                      break;                    case PrimitiveTypeKind.Single:                      typeName = "real";                      break;                    case PrimitiveTypeKind.Double:                      typeName = "float";                      break;                    case PrimitiveTypeKind.Guid:                      typeName = "uniqueidentifier";                      break;                    default:                      throw new NotSupportedException("Unsupported EdmType: " + primitiveType.PrimitiveTypeKind);              }
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,ByteArrayToBinaryString,The following statement contains a magic number: StringBuilder sb = new StringBuilder( binaryArray.Length * 2 );
Magic Number,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,ByteArrayToBinaryString,The following statement contains a magic number: sb.Append(hexDigits[(binaryArray[i]&0xF0) >>4]).Append(hexDigits[binaryArray[i]&0x0F]);
Missing Default,SampleEntityFrameworkProvider,SqlGenerator,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\SqlGeneration\SqlGenerator.cs,VisitJoinExpression,The following switch statement is missing a default case: switch (joinKind)              {                  case DbExpressionKind.FullOuterJoin:                  case DbExpressionKind.InnerJoin:                  case DbExpressionKind.LeftOuterJoin:                      result.From.Append(" ON ");                      isParentAJoinStack.Push(false);                      result.From.Append(joinCondition.Accept(this));                      isParentAJoinStack.Pop();                      break;              }
Missing Default,SampleEntityFrameworkProvider,StoreVersionUtils,C:\research\architectureSmells\repos\mono_entityframework\samples\Provider\SampleEntityFrameworkProvider\StoreVersion.cs,GetVersionHint,The following switch statement is missing a default case: switch (version)              {                  case StoreVersion.Sql9:                      return SampleProviderManifest.TokenSql9;                    case StoreVersion.Sql10:                      return SampleProviderManifest.TokenSql10;              }
