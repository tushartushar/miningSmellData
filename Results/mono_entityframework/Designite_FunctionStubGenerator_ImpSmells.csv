Implementation smell,Namespace,Class,File,Method,Description
Long Method,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateCode,The method has 113 lines of code.
Complex Method,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateCode,Cyclomatic complexity of the method is 9
Long Parameter List,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateToFile,The method has 5 parameters. Parameters: destinationFile' namespaceString' className' attributeNamespace' pascalCaseFunctionNames
Long Parameter List,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateAggregateFunctionStub,The method has 5 parameters. Parameters: newCode' parameterType' returnType' parameterNameToUse' isNullable
Long Statement,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateCode,The length of the statement  "                        System.Data.Metadata.Edm.CollectionType collectionType = (System.Data.Metadata.Edm.CollectionType)parameter.TypeUsage.EdmType; " is 126.
Long Statement,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateFxcopSuppressionAttribute,The length of the statement  "            newCode.WriteLine("[System.Diagnostics.CodeAnalysis.SuppressMessage(\"Microsoft.Naming\"' \"CA1720:IdentifiersShouldNotContainTypeNames\"' MessageId = \"string\")]"); " is 166.
Long Statement,LinqFunctionStubsGenerator,SampleProviderLinqFunctionStubsCodeGen,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\LinqFunctionStubsCodeGen.cs,Generate,The length of the statement  "            String ssdl = @"<Schema Namespace='LinqFunctionStubsGenerator' Alias='Self' Provider='SampleEntityFrameworkProvider' ProviderManifestToken='2008' xmlns='http://schemas.microsoft.com/ado/2006/04/edm/ssdl'></Schema>"; " is 215.
Long Statement,LinqFunctionStubsGenerator,SampleProviderLinqFunctionStubsCodeGen,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\LinqFunctionStubsCodeGen.cs,Generate,The length of the statement  "            FunctionStubFileWriter sqlStubsFileWriter = new FunctionStubFileWriter(sqlFunctions' GetFunctionNamingDictionary()' GetParameterNamingDictionary()); " is 148.
Long Statement,LinqFunctionStubsGenerator,SampleProviderLinqFunctionStubsCodeGen,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\LinqFunctionStubsCodeGen.cs,Generate,The length of the statement  "            sqlStubsFileWriter.GenerateToFile(outputFileName' "SampleEntityFrameworkProvider"' "SampleSqlFunctions"' "SqlServer"' true); " is 124.
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateCode,The following statement contains a magic number: foreach (System.Data.Metadata.Edm.EdmFunction function in _functions)              {                  isAggregateFunction = false;                  hasSByteParameterOrReturnType = false;                  hasStringInParameterName = false;                  separator = "";                                    String functionNameToUse = FindCorrectFunctionName(function.Name' pascalCaseFunctionNames);                  GenerateFunctionHeader(newCode'attributeNamespace'function.Name);                  Type returnType = ((PrimitiveType)(function.ReturnParameter.TypeUsage.EdmType)).ClrEquivalentType;                    //Suppress warning that 'SByte' is not CLS-compliant.                  if (returnType == typeof(SByte))                  {                      hasSByteParameterOrReturnType = true;                  }                  StringBuilder functionSignatureString = new StringBuilder();                  AppendSpaces(functionSignatureString' 8);                  functionSignatureString.Append("public static ");                  WriteType(functionSignatureString' returnType);                  functionSignatureString.Append(functionNameToUse + "(");                    ReadOnlyMetadataCollection<FunctionParameter> functionParameters = function.Parameters;                  Type parameterType;                                      foreach (System.Data.Metadata.Edm.FunctionParameter parameter in functionParameters)                  {                      String parameterNameToUse = parameter.Name;                      parameterNameToUse = FindCorrectParameterName(parameterNameToUse);                                            //Detect aggregate functions. They have just one parameter and so stub can be generated here.                      if (parameter.TypeUsage.EdmType.GetType() == typeof(System.Data.Metadata.Edm.CollectionType))                      {                          isAggregateFunction = true;                          if (parameterNameToUse.ToLowerInvariant().Contains("string"))                          {                              hasStringInParameterName = true;                          }                                                    System.Data.Metadata.Edm.CollectionType collectionType = (System.Data.Metadata.Edm.CollectionType)parameter.TypeUsage.EdmType;                          parameterType = ((PrimitiveType)(collectionType.TypeUsage.EdmType)).ClrEquivalentType;                          //Detect if there is an 'SByte' parameter to suppress non-CLS-compliance warning.                          //Generate the attribute only once for each function.                          if (parameterType == typeof(SByte))                          {                              hasSByteParameterOrReturnType = true;                          }                                                    //Generate stub for non-nullable input parameters                          functionSignatureString.Append("IEnumerable<" + parameterType.ToString());                          //Supress fxcop message and CLS non-compliant attributes                          GenerateFunctionAttributes(newCode' hasStringInParameterName' hasSByteParameterOrReturnType);                          //Use the constructed function signature                          newCode.Write(functionSignatureString.ToString());                          GenerateAggregateFunctionStub(newCode'parameterType' returnType' parameterNameToUse' false);                            //Generate stub for nullable input parameters                          //Special Case: Do not generate nullable stub for input parameter of types Byte[]                          //and String' since they are nullable.                          if (!IsNullableType(parameterType))                          {                              GenerateFunctionHeader(newCode' attributeNamespace' function.Name);                              //Supress fxcop message and CLS non-compliant attributes                              GenerateFunctionAttributes(newCode' hasStringInParameterName' hasSByteParameterOrReturnType);                              //Use the constructed function signature                              newCode.Write(functionSignatureString.ToString());                              GenerateAggregateFunctionStub(newCode' parameterType' returnType' parameterNameToUse' true);                          }                      } //End of processing parameters for aggregate functions.                      //Process each parameter in case of non-aggregate functions.                      else                      {                          parameterType = ((PrimitiveType)(parameter.TypeUsage.EdmType)).ClrEquivalentType;                          functionSignatureString.Append(separator);                          WriteType(functionSignatureString' parameterType);                          functionSignatureString.Append(parameterNameToUse);                          separator = "' ";                          //Detect if there is an 'SByte' parameter to suppress non-CLS-compliance warning.                          if (parameterType == typeof(SByte))                          {                              hasSByteParameterOrReturnType = true;                          }                          if (parameterNameToUse.ToLowerInvariant().Contains("string"))                          {                              hasStringInParameterName = true;                          }                      }                  } //End for each parameter                                    //Generate stub for Non-aggregate functions after all input parameters are found.                  if (!isAggregateFunction)                  {                         //Supress fxcop supression and CLS non-compliant attributes                      GenerateFunctionAttributes(newCode' hasStringInParameterName' hasSByteParameterOrReturnType);                      newCode.WriteLine(functionSignatureString.ToString() + ")");                      AppendSpaces(newCode' 8);                      newCode.WriteLine("{");                      WriteExceptionStatement(newCode);                  }              }
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateCode,The following statement contains a magic number: foreach (System.Data.Metadata.Edm.EdmFunction function in _functions)              {                  isAggregateFunction = false;                  hasSByteParameterOrReturnType = false;                  hasStringInParameterName = false;                  separator = "";                                    String functionNameToUse = FindCorrectFunctionName(function.Name' pascalCaseFunctionNames);                  GenerateFunctionHeader(newCode'attributeNamespace'function.Name);                  Type returnType = ((PrimitiveType)(function.ReturnParameter.TypeUsage.EdmType)).ClrEquivalentType;                    //Suppress warning that 'SByte' is not CLS-compliant.                  if (returnType == typeof(SByte))                  {                      hasSByteParameterOrReturnType = true;                  }                  StringBuilder functionSignatureString = new StringBuilder();                  AppendSpaces(functionSignatureString' 8);                  functionSignatureString.Append("public static ");                  WriteType(functionSignatureString' returnType);                  functionSignatureString.Append(functionNameToUse + "(");                    ReadOnlyMetadataCollection<FunctionParameter> functionParameters = function.Parameters;                  Type parameterType;                                      foreach (System.Data.Metadata.Edm.FunctionParameter parameter in functionParameters)                  {                      String parameterNameToUse = parameter.Name;                      parameterNameToUse = FindCorrectParameterName(parameterNameToUse);                                            //Detect aggregate functions. They have just one parameter and so stub can be generated here.                      if (parameter.TypeUsage.EdmType.GetType() == typeof(System.Data.Metadata.Edm.CollectionType))                      {                          isAggregateFunction = true;                          if (parameterNameToUse.ToLowerInvariant().Contains("string"))                          {                              hasStringInParameterName = true;                          }                                                    System.Data.Metadata.Edm.CollectionType collectionType = (System.Data.Metadata.Edm.CollectionType)parameter.TypeUsage.EdmType;                          parameterType = ((PrimitiveType)(collectionType.TypeUsage.EdmType)).ClrEquivalentType;                          //Detect if there is an 'SByte' parameter to suppress non-CLS-compliance warning.                          //Generate the attribute only once for each function.                          if (parameterType == typeof(SByte))                          {                              hasSByteParameterOrReturnType = true;                          }                                                    //Generate stub for non-nullable input parameters                          functionSignatureString.Append("IEnumerable<" + parameterType.ToString());                          //Supress fxcop message and CLS non-compliant attributes                          GenerateFunctionAttributes(newCode' hasStringInParameterName' hasSByteParameterOrReturnType);                          //Use the constructed function signature                          newCode.Write(functionSignatureString.ToString());                          GenerateAggregateFunctionStub(newCode'parameterType' returnType' parameterNameToUse' false);                            //Generate stub for nullable input parameters                          //Special Case: Do not generate nullable stub for input parameter of types Byte[]                          //and String' since they are nullable.                          if (!IsNullableType(parameterType))                          {                              GenerateFunctionHeader(newCode' attributeNamespace' function.Name);                              //Supress fxcop message and CLS non-compliant attributes                              GenerateFunctionAttributes(newCode' hasStringInParameterName' hasSByteParameterOrReturnType);                              //Use the constructed function signature                              newCode.Write(functionSignatureString.ToString());                              GenerateAggregateFunctionStub(newCode' parameterType' returnType' parameterNameToUse' true);                          }                      } //End of processing parameters for aggregate functions.                      //Process each parameter in case of non-aggregate functions.                      else                      {                          parameterType = ((PrimitiveType)(parameter.TypeUsage.EdmType)).ClrEquivalentType;                          functionSignatureString.Append(separator);                          WriteType(functionSignatureString' parameterType);                          functionSignatureString.Append(parameterNameToUse);                          separator = "' ";                          //Detect if there is an 'SByte' parameter to suppress non-CLS-compliance warning.                          if (parameterType == typeof(SByte))                          {                              hasSByteParameterOrReturnType = true;                          }                          if (parameterNameToUse.ToLowerInvariant().Contains("string"))                          {                              hasStringInParameterName = true;                          }                      }                  } //End for each parameter                                    //Generate stub for Non-aggregate functions after all input parameters are found.                  if (!isAggregateFunction)                  {                         //Supress fxcop supression and CLS non-compliant attributes                      GenerateFunctionAttributes(newCode' hasStringInParameterName' hasSByteParameterOrReturnType);                      newCode.WriteLine(functionSignatureString.ToString() + ")");                      AppendSpaces(newCode' 8);                      newCode.WriteLine("{");                      WriteExceptionStatement(newCode);                  }              }
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateCode,The following statement contains a magic number: AppendSpaces(newCode' 4);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateAggregateFunctionStub,The following statement contains a magic number: AppendSpaces(newCode' 8);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateAggregateFunctionStub,The following statement contains a magic number: AppendSpaces(newCode' 12);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateAggregateFunctionStub,The following statement contains a magic number: AppendSpaces(newCode' 12);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateAggregateFunctionStub,The following statement contains a magic number: AppendSpaces(newCode' 12);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateAggregateFunctionStub,The following statement contains a magic number: AppendSpaces(newCode' 16);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateAggregateFunctionStub,The following statement contains a magic number: AppendSpaces(newCode' 12);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateFunctionHeader,The following statement contains a magic number: AppendSpaces(newCode' 8);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateFunctionHeader,The following statement contains a magic number: AppendSpaces(newCode' 8);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateFunctionHeader,The following statement contains a magic number: AppendSpaces(newCode' 8);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateFunctionHeader,The following statement contains a magic number: AppendSpaces(newCode' 8);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateSByteCLSNonComplaintAttribute,The following statement contains a magic number: AppendSpaces(newCode' 8);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateFxcopSuppressionAttribute,The following statement contains a magic number: AppendSpaces(newCode' 8);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,WriteExceptionStatement,The following statement contains a magic number: AppendSpaces(code' 12);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,WriteExceptionStatement,The following statement contains a magic number: AppendSpaces(code' 8);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateClassHeader,The following statement contains a magic number: AppendSpaces(newCode' 4);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateClassHeader,The following statement contains a magic number: AppendSpaces(newCode' 4);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateClassHeader,The following statement contains a magic number: AppendSpaces(newCode' 4);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateClassHeader,The following statement contains a magic number: AppendSpaces(newCode' 4);
Magic Number,LinqFunctionStubsGenerator,FunctionStubFileWriter,C:\repos\mono_entityframework\samples\Provider\FunctionStubGenerator\FunctionStubFileWriter.cs,GenerateClassHeader,The following statement contains a magic number: AppendSpaces(newCode' 4);
