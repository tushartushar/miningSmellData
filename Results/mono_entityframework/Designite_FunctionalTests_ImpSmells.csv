Implementation smell,Namespace,Class,File,Method,Description
Long Method,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Add_moves_root_to_Added_when_FK_graph_root_is_Added_Unchanged_Modified_or_Deleted,The method has 109 lines of code.
Long Method,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Attach_moves_root_to_Unchanged_when_FK_graph_root_is_Unchanged_Modified_or_Deleted,The method has 121 lines of code.
Long Method,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Attach_moves_root_to_Unchanged_when_Independent_graph_root_is_Unchanged_or_Modified_or_Deleted,The method has 105 lines of code.
Long Method,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Remove_moves_root_to_Deleted_when_graph_root_is_Added_Unchanged_Modified_or_Deleted,The method has 137 lines of code.
Long Method,ProductivityApiTests,SpatialNorthwindInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\SpatialTvfsModel\SpatialNorthwindInitializer.cs,Seed,The method has 182 lines of code.
Long Method,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_with_nulls,The method has 117 lines of code.
Long Method,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Seed,The method has 175 lines of code.
Long Method,System.Data.Entity.TestModels.GearsOfWarModel,GearsOfWarInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\GearsOfWarModel\GearsOfWarInitializer.cs,Seed,The method has 178 lines of code.
Long Method,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The method has 234 lines of code.
Complex Method,ProductivityApiTests,DbContextTestsForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbContextTestsForSqlCe.cs,DbContext_construction_using_connection_string_and_model_Ctor,Cyclomatic complexity of the method is 14
Complex Method,ProductivityApiTests,DbContextTestsForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbContextTestsForSqlCe.cs,Verify_DbContext_construction_using_connection_and_model_Ctor,Cyclomatic complexity of the method is 11
Complex Method,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Add_moves_root_to_Added_when_FK_graph_root_is_Added_Unchanged_Modified_or_Deleted,Cyclomatic complexity of the method is 16
Complex Method,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Add_moves_root_to_Added_when_independent_association_graph_root_is_Added_Unchanged_Modified_or_Deleted,Cyclomatic complexity of the method is 15
Complex Method,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Attach_moves_root_to_Unchanged_when_FK_graph_root_is_Unchanged_Modified_or_Deleted,Cyclomatic complexity of the method is 18
Complex Method,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Attach_moves_root_to_Unchanged_when_Independent_graph_root_is_Unchanged_or_Modified_or_Deleted,Cyclomatic complexity of the method is 16
Complex Method,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Remove_moves_root_to_Deleted_when_graph_root_is_Added_Unchanged_Modified_or_Deleted,Cyclomatic complexity of the method is 20
Complex Method,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Detach_moves_root_to_Detached_when_independent_association_graph_root_is_Added_Unchanged_Modified_or_Deleted,Cyclomatic complexity of the method is 12
Complex Method,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Detach_detaches_root_when_FK_graph_root_is_Added_Unchanged_Modified_or_Deleted,Cyclomatic complexity of the method is 13
Complex Method,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,Seed,Cyclomatic complexity of the method is 11
Long Parameter List,System.Data.Entity.CodeFirst,EntityBase1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,EntityBase1,The method has 5 parameters. Parameters: id' name' anEnum' info' colRel
Long Parameter List,System.Data.Entity.CodeFirst,EntityBase2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,EntityBase2,The method has 5 parameters. Parameters: id' name' anEnum' refRelId' refRel
Long Parameter List,System.Data.Entity.CodeFirst,ActualEntity1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,ActualEntity1,The method has 5 parameters. Parameters: id' name' anEnum' info' colRel
Long Parameter List,System.Data.Entity.CodeFirst,ActualEntity2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,ActualEntity2,The method has 5 parameters. Parameters: id' name' anEnum' refRelId' refRel
Long Parameter List,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,AssertStateOfAddressProperties,The method has 5 parameters. Parameters: addressEntry' city' state' environment' isModified
Long Parameter List,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,TestScalarCurrentValue,The method has 5 parameters. Parameters: entityEntry' propertyEntry' currentValues' getter' initialValue
Long Parameter List,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,TestScalarOriginalValue,The method has 5 parameters. Parameters: entityEntry' propertyEntry' objectType' originalValues' initialValue
Long Parameter List,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,TestCurrentValueNotInModel,The method has 7 parameters. Parameters: entityEntry' propertyEntry' objectType' getter' initialValue' hasGetter' hasSetter
Long Identifier,System.Data.Entity.Migrations,AddColumnScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddColumnScenarios.cs,Can_add_non_nullable_columns_and_valid_defaults_generated_when_existing_data_in_table,The length of the parameter addNonNullableColumnsWithNoDefaults is 35.
Long Identifier,ProductivityApiTests,DatabaseInitializationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabaseInitializationTests.cs,Using_model_with_bad_mapping_but_no_EdmMetadata_table_and_initializer_that_throws_before_SaveChanges_should_result_in_DataException_containing_a_MappingException,The length of the parameter entityCommandCompilationException is 33.
Long Identifier,ProductivityApiTests,InvalidTypeTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\InvalidTypeTests.cs,Set_throws_only_when_used_if_type_derives_from_valid_type,The length of the parameter iQueryableOfDerivedCategoryFirstOrDefault is 41.
Long Identifier,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_project_filtered_group_aggregate_also_include_group_key_and_function_aggregate,The length of the parameter filteredGroupAggregateProjection is 32.
Long Identifier,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_project_filtered_group_aggregate_also_include_group_key_and_function_aggregate,The length of the parameter filteredGroupAggregateProjectionBinding is 39.
Long Identifier,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_project_unioned_group_aggregate_also_include_group_key_and_function_aggregate,The length of the parameter unionedGroupAggregateProjection is 31.
Long Identifier,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_project_unioned_group_aggregate_also_include_group_key_and_function_aggregate,The length of the parameter unionedGroupAggregateProjectionBinding is 38.
Long Identifier,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ShouldValidateEntityTestRunner,The length of the parameter shouldValidateEntityReturnValue is 31.
Long Identifier,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_does_not_return_errors_for_valid_entities,The length of the parameter entityWithEntityLevelCustomValidationAttributes is 47.
Long Identifier,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,,The length of the parameter MaxLengthAttribute_ValidationError is 34.
Long Identifier,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,,The length of the parameter RangeAttribute_ValidationError is 30.
Long Identifier,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,,The length of the parameter RegexAttribute_ValidationError is 30.
Long Identifier,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,,The length of the parameter RequiredAttribute_ValidationError is 33.
Long Identifier,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,,The length of the parameter StringLengthAttribute_ValidationError is 37.
Long Identifier,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,,The length of the parameter StringLengthAttribute_ValidationErrorIncludingMinimum is 53.
Long Statement,System.Data.Entity.Migrations,InitializerScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\InitializerScenarios.cs,Creating_database_using_initializer_does_nothing_if_Migrations_configuration_if_available,The length of the statement  "                context.Database.Initialize(force: true); // True not necessary here' but want to given initializer every chance to run! " is 120.
Long Statement,System.Data.Entity.Migrations,AddForeignKeyScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddForeignKeyScenarios.cs,Can_add_simple_foreign_key_constraint,The length of the statement  "            var foreignKey = Info.TableConstraints.OfType<ReferentialConstraintInfo>().SingleOrDefault(rc => rc.Name == "FK_Custom_Name"); " is 126.
Long Statement,System.Data.Entity.Migrations,AddForeignKeyScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddForeignKeyScenarios.cs,Can_add_composite_foreign_key_constraint,The length of the statement  "                foreignKey.KeyColumnUsages.Any(kcu => kcu.Position == 2 && kcu.ColumnTableName == "OrderLines" && kcu.ColumnName == "Sku")); " is 124.
Long Statement,System.Data.Entity.Migrations,AddForeignKeyScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddForeignKeyScenarios.cs,Can_add_composite_foreign_key_constraint_when_principal_columns_not_specified,The length of the statement  "                foreignKey.KeyColumnUsages.Any(kcu => kcu.Position == 2 && kcu.ColumnTableName == "OrderLines" && kcu.ColumnName == "Sku")); " is 124.
Long Statement,System.Data.Entity.Migrations,V2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The length of the statement  "                modelBuilder.Entity<MigrationsStore>().Property(s => s.Id).HasDatabaseGeneratedOption(DatabaseGeneratedOption.Identity); " is 120.
Long Statement,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AddTableWithGuidKey,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The length of the statement  "            var createTableOperation = migrationOperations.OfType<CreateTableOperation>().SingleOrDefault(o => o.Name == "dbo.WithGuidKeys"); " is 129.
Long Statement,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AddTableWithGuidKey,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyDownOperations,The length of the statement  "            var dropTableOperation = migrationOperations.OfType<DropTableOperation>().SingleOrDefault(o => o.Name == "dbo.WithGuidKeys"); " is 125.
Long Statement,System.Data.Entity.Migrations,AutoAndGenerateScenarios_RemoveTable,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The length of the statement  "            var dropTableOperation = migrationOperations.OfType<DropTableOperation>().SingleOrDefault(o => o.Name == "dbo.MigrationsStores"); " is 129.
Long Statement,System.Data.Entity.Migrations,AutoAndGenerateScenarios_ChangeTableSchema,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The length of the statement  "            var moveTableOperation = migrationOperations.OfType<MoveTableOperation>().SingleOrDefault(o => o.Name == "dbo.MigrationsStores"); " is 129.
Long Statement,System.Data.Entity.Migrations,SchemaScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\SchemaScenarios.cs,Can_auto_update_before_custom_default_schema_introduced,The length of the statement  "            migrator = CreateMigrator<CustomSchemaContext_v1>(scaffoldedMigrations: generatedMigration' automaticDataLossEnabled: true); " is 124.
Long Statement,System.Data.Entity.Migrations,CreateTableScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\CreateTableScenarios.cs,Can_create_oob_table_with_inline_fk,The length of the statement  "                foreignKey.UniqueConstraint.KeyColumnUsages.Any(kcu => kcu.ColumnTableName == "Oob_Principal" && kcu.ColumnName == "Id")); " is 122.
Long Statement,System.Data.Entity.Migrations,DefaultValueScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\DefaultValueScenarios.cs,Can_create_columns_with_default_value_expressions_for_all_types,The length of the statement  "            Assert.True(table.Columns.Any(c => c.Name == "DateTime" && c.Default.Contains("CONVERT([datetime]''1947/08/15 03:33:20'"))); " is 124.
Long Statement,System.Data.Entity.Migrations,ToolingFixture,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\ToolingScenarios.cs,AddAppConfig,The length of the statement  "                DatabaseProviderFixture.InitializeTestDatabase(DatabaseProvider.SqlClient' DatabaseProviderFixture.DefaultDatabaseName). " is 120.
Long Statement,System.Data.Entity.Migrations,ToolingFixture,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\ToolingScenarios.cs,CreateProject,The length of the statement  "                var results = compiler.CompileAssemblyFromSource(new CompilerParameters(additionalAssemblies.ToArray()' targetPath)' code); " is 123.
Long Statement,System.Data.Entity.Objects,TransactionsTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,SetFixture,The length of the statement  "                @"metadata=res://EntityFramework.FunctionalTests/System.Data.Entity.Objects.TransactionsModel.csdl|res://EntityFramework.FunctionalTests/System.Data.Entity.Objects.TransactionsModel.ssdl|res://EntityFramework.FunctionalTests/System.Data.Entity.Objects.TransactionsModel.msl;provider=System.Data.SqlClient;provider connection string=""{0}"""' " is 341.
Long Statement,System.Data.Entity.Objects,TransactionsTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,ExecuteSqlCommandAsync_with_TransactionalBehavior_EnsureTransaction_uses_transaction,The length of the statement  "                    ctx.Database.ExecuteSqlCommandAsync(TransactionalBehavior.EnsureTransaction' "[dbo].[TransactionLogEntry_Insert]").Wait(); " is 122.
Long Statement,System.Data.Entity.Objects,TransactionsTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,ExecuteSqlCommandAsync_with_TransactionalBehavior_DoNotEnsureTransaction_does_not_use_transaction,The length of the statement  "                    ctx.Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction' "[dbo].[TransactionLogEntry_Insert]").Wait(); " is 127.
Long Statement,System.Data.Entity.Objects,TransactionsTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,ExecuteSqlCommandAsync_with_TransactionalBehavior_DoNotEnsureTransaction_still_uses_transaction_if_called_inside_user_transaction,The length of the statement  "                    ctx.Database.ExecuteSqlCommandAsync(TransactionalBehavior.DoNotEnsureTransaction' "[dbo].[TransactionLogEntry_Insert]").Wait(); " is 127.
Long Statement,System.Data.Entity.Objects,TransactionsTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,GetCurrentEntityTransaction,The length of the statement  "            var propertyInfo = connection.GetType().GetProperty("CurrentTransaction"' BindingFlags.Instance | BindingFlags.NonPublic); " is 122.
Long Statement,System.Data.Entity.Objects,TransactionsTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,GetCurrentStoreTransaction,The length of the statement  "            var propertyInfo = entityTransaction.GetType().GetProperty("StoreTransaction"' BindingFlags.Instance | BindingFlags.NonPublic); " is 127.
Long Statement,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_change_tracking_proxy_can_be_binary_deserialized_when_running_under_full_trust,The length of the statement  "                var base64String = ""; " is 8662.
Long Statement,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_lazy_loading_proxy_can_be_binary_deserialized_when_running_under_full_trust,The length of the statement  "                var base64String = "AAEAAAD/////AQAAAAAAAAAMAgAAAHRFbnRpdHlGcmFtZXdvcmtEeW5hbWljUHJveGllcy1FbnRpdHlGcmFtZXdvcmsuRnVuY3Rpb25hbFRlc3RzLCBWZXJzaW9uPTEuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49bnVsbAwDAAAAYkVudGl0eUZyYW1ld29yay5GdW5jdGlvbmFsVGVzdHMsIFZlcnNpb249MC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iMDNmNWY3ZjExZDUwYTNhBQEAAABuU3lzdGVtLkRhdGEuRW50aXR5LkR5bmFtaWNQcm94aWVzLk1lTGF6eUxvYWRTX0UwNjM1MjMzMUNBMTk4MTg0NkEzNDkwQkUwODg2NTU3QjFFNjUzQzhDM0JEQjJFOEM0N0Y2MzA0OEM1OUQ3OUMDAAAAH01lTGF6eUxvYWRTKzxJZD5rX19CYWNraW5nRmllbGQrTWVMYXp5TG9hZFMrPE1lVHJhY2tDaGFuZ2VzPmtfX0JhY2tpbmdGaWVsZCtNZUxhenlMb2FkUys8TWVDb21wbGV4VHlwZVM+a19fQmFja2luZ0ZpZWxkAAQECEFTeXN0ZW0uRGF0YS5FbnRpdHkuT2JqZWN0cy5TZXJpYWxpemF0aW9uU2NlbmFyaW9zK01lVHJhY2tDaGFuZ2VzUwMAAABAU3lzdGVtLkRhdGEuRW50aXR5Lk9iamVjdHMuU2VyaWFsaXphdGlvblNjZW5hcmlvcytNZUNvbXBsZXhUeXBlUwMAAAACAAAATQAAAAoJBAAAAAUEAAAAQFN5c3RlbS5EYXRhLkVudGl0eS5PYmplY3RzLlNlcmlhbGl6YXRpb25TY2VuYXJpb3MrTWVDb21wbGV4VHlwZVMCAAAAFzxOdW1iZXI+a19fQmFja2luZ0ZpZWxkFTxXb3JkPmtfX0JhY2tpbmdGaWVsZAABCAMAAABYAAAACgs="; " is 1054.
Long Statement,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_change_tracking_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The length of the statement  "            var base64String = "PFNlcmlhbGl6YXRpb25TY2VuYXJpb3MuTWVUcmFja0NoYW5nZXNTIHo6SWQ9IjEiIGk6dHlwZT0iU2VyaWFsaXphdGlvblNjZW5hcmlvcy5NZVRyYWNrQ2hhbmdlc1MiIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5kYXRhY29udHJhY3Qub3JnLzIwMDQvMDcvU3lzdGVtLkRhdGEuRW50aXR5Lk9iamVjdHMiIHhtbG5zOmk9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczp6PSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tLzIwMDMvMTAvU2VyaWFsaXphdGlvbi8iPjxfeDAwM0NfQ2hpbGRyZW5feDAwM0Vfa19fQmFja2luZ0ZpZWxkIHo6SWQ9IjIiIHo6U2l6ZT0iMCIvPjxfeDAwM0NfSWRfeDAwM0Vfa19fQmFja2luZ0ZpZWxkPjc3PC9feDAwM0NfSWRfeDAwM0Vfa19fQmFja2luZ0ZpZWxkPjxfeDAwM0NfTWVDb21wbGV4VHlwZVNfeDAwM0Vfa19fQmFja2luZ0ZpZWxkIHo6SWQ9IjMiPjxfeDAwM0NfTnVtYmVyX3gwMDNFX2tfX0JhY2tpbmdGaWVsZD44ODwvX3gwMDNDX051bWJlcl94MDAzRV9rX19CYWNraW5nRmllbGQ+PF94MDAzQ19Xb3JkX3gwMDNFX2tfX0JhY2tpbmdGaWVsZCBpOm5pbD0idHJ1ZSIvPjwvX3gwMDNDX01lQ29tcGxleFR5cGVTX3gwMDNFX2tfX0JhY2tpbmdGaWVsZD48X3gwMDNDX01lTGF6eUxvYWRfeDAwM0Vfa19fQmFja2luZ0ZpZWxkIHo6SWQ9IjQiIHo6U2l6ZT0iMCIvPjxfeDAwM0NfUGFyZW50X3gwMDNFX2tfX0JhY2tpbmdGaWVsZCBpOm5pbD0idHJ1ZSIvPjxfcmVsYXRpb25zaGlwTWFuYWdlciB6OklkPSI1IiB4bWxucz0iaHR0cDovL3NjaGVtYXMuZGF0YWNvbnRyYWN0Lm9yZy8yMDA0LzA3L1N5c3RlbS5EYXRhLkVudGl0eS5EeW5hbWljUHJveGllcyIgeG1sbnM6YT0iaHR0cDovL3NjaGVtYXMuZGF0YWNvbnRyYWN0Lm9yZy8yMDA0LzA3L1N5c3RlbS5EYXRhLkVudGl0eS5Db3JlLk9iamVjdHMuRGF0YUNsYXNzZXMiPjxhOl9vd25lciB6OlJlZj0iMSIgaTpuaWw9InRydWUiLz48YTpfcmVsYXRpb25zaGlwcyB6OklkPSI2IiB6OlNpemU9IjIiPjxhOlJlbGF0ZWRFbmQgejpSZWY9IjQiIGk6bmlsPSJ0cnVlIi8+PGE6UmVsYXRlZEVuZCB6OlJlZj0iMiIgaTpuaWw9InRydWUiLz48L2E6X3JlbGF0aW9uc2hpcHM+PC9fcmVsYXRpb25zaGlwTWFuYWdlcj48L1NlcmlhbGl6YXRpb25TY2VuYXJpb3MuTWVUcmFja0NoYW5nZXNTPg=="; " is 1614.
Long Statement,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_lazy_loading_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The length of the statement  "            var base64String = "PFNlcmlhbGl6YXRpb25TY2VuYXJpb3MuTWVMYXp5TG9hZFMgejpJZD0iMSIgaTp0eXBlPSJTZXJpYWxpemF0aW9uU2NlbmFyaW9zLk1lTGF6eUxvYWRTIiB4bWxucz0iaHR0cDovL3NjaGVtYXMuZGF0YWNvbnRyYWN0Lm9yZy8yMDA0LzA3L1N5c3RlbS5EYXRhLkVudGl0eS5PYmplY3RzIiB4bWxuczppPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeG1sbnM6ej0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS8yMDAzLzEwL1NlcmlhbGl6YXRpb24vIj48X3gwMDNDX0lkX3gwMDNFX2tfX0JhY2tpbmdGaWVsZD43NzwvX3gwMDNDX0lkX3gwMDNFX2tfX0JhY2tpbmdGaWVsZD48X3gwMDNDX01lQ29tcGxleFR5cGVTX3gwMDNFX2tfX0JhY2tpbmdGaWVsZCB6OklkPSIyIj48X3gwMDNDX051bWJlcl94MDAzRV9rX19CYWNraW5nRmllbGQ+ODg8L194MDAzQ19OdW1iZXJfeDAwM0Vfa19fQmFja2luZ0ZpZWxkPjxfeDAwM0NfV29yZF94MDAzRV9rX19CYWNraW5nRmllbGQgaTpuaWw9InRydWUiLz48L194MDAzQ19NZUNvbXBsZXhUeXBlU194MDAzRV9rX19CYWNraW5nRmllbGQ+PF94MDAzQ19NZVRyYWNrQ2hhbmdlc194MDAzRV9rX19CYWNraW5nRmllbGQgaTpuaWw9InRydWUiLz48L1NlcmlhbGl6YXRpb25TY2VuYXJpb3MuTWVMYXp5TG9hZFM+"; " is 914.
Long Statement,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_lazy_loading_proxy_can_be_data_contract_deserialized_with_known_types_when_running_under_full_trust,The length of the statement  "                var serializer = new DataContractSerializer(proxy.GetType()' new[] { proxy.GetType()' otherProxy.GetType() }' int.MaxValue' false' true' null); " is 143.
Long Statement,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_lazy_loading_proxy_can_be_data_contract_deserialized_with_known_types_when_running_under_full_trust,The length of the statement  "                var base64String = "PE1lTGF6eUxvYWRTX0UwNjM1MjMzMUNBMTk4MTg0NkEzNDkwQkUwODg2NTU3QjFFNjUzQzhDM0JEQjJFOEM0N0Y2MzA0OEM1OUQ3OUMgejpJZD0iMSIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLmRhdGFjb250cmFjdC5vcmcvMjAwNC8wNy9TeXN0ZW0uRGF0YS5FbnRpdHkuRHluYW1pY1Byb3hpZXMiIHhtbG5zOmk9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4bWxuczp6PSJodHRwOi8vc2NoZW1hcy5taWNyb3NvZnQuY29tLzIwMDMvMTAvU2VyaWFsaXphdGlvbi8iPjxfeDAwM0NfSWRfeDAwM0Vfa19fQmFja2luZ0ZpZWxkIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5kYXRhY29udHJhY3Qub3JnLzIwMDQvMDcvU3lzdGVtLkRhdGEuRW50aXR5Lk9iamVjdHMiPjc3PC9feDAwM0NfSWRfeDAwM0Vfa19fQmFja2luZ0ZpZWxkPjxfeDAwM0NfTWVDb21wbGV4VHlwZVNfeDAwM0Vfa19fQmFja2luZ0ZpZWxkIHo6SWQ9IjIiIHhtbG5zPSJodHRwOi8vc2NoZW1hcy5kYXRhY29udHJhY3Qub3JnLzIwMDQvMDcvU3lzdGVtLkRhdGEuRW50aXR5Lk9iamVjdHMiPjxfeDAwM0NfTnVtYmVyX3gwMDNFX2tfX0JhY2tpbmdGaWVsZD44ODwvX3gwMDNDX051bWJlcl94MDAzRV9rX19CYWNraW5nRmllbGQ+PF94MDAzQ19Xb3JkX3gwMDNFX2tfX0JhY2tpbmdGaWVsZCBpOm5pbD0idHJ1ZSIvPjwvX3gwMDNDX01lQ29tcGxleFR5cGVTX3gwMDNFX2tfX0JhY2tpbmdGaWVsZD48X3gwMDNDX01lVHJhY2tDaGFuZ2VzX3gwMDNFX2tfX0JhY2tpbmdGaWVsZCBpOm5pbD0idHJ1ZSIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLmRhdGFjb250cmFjdC5vcmcvMjAwNC8wNy9TeXN0ZW0uRGF0YS5FbnRpdHkuT2JqZWN0cyIvPjwvTWVMYXp5TG9hZFNfRTA2MzUyMzMxQ0ExOTgxODQ2QTM0OTBCRTA4ODY1NTdCMUU2NTNDOEMzQkRCMkU4QzQ3RjYzMDQ4QzU5RDc5Qz4="; " is 1278.
Long Statement,FunctionalTests.ProductivityApi,DbFunctionScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Bootstrapping_from_DbQuery_with_DbQuery_as_parameter_only_hits_the_database_once,The length of the statement  "                        @"SELECT [GroupBy1].[A1] AS [C1] FROM ( SELECT  VAR([Extent1].[Id]) AS [A1] FROM [dbo].[EntityWithTypes] AS [Extent1])  AS [GroupBy1]" " is 134.
Long Statement,FunctionalTests.ProductivityApi,ScaffoldingScenarioTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ScaffoldingScenarioTests.cs,AddConnectionStrings,The length of the statement  "                    @"metadata=.\AdvancedPatterns.csdl|.\AdvancedPatterns.ssdl|.\AdvancedPatterns.msl;provider=System.Data.SqlClient;provider connection string='Server=.\SQLEXPRESS;Integrated Security=True;Database=AdvancedPatternsModelFirst;'"' " is 225.
Long Statement,ProductivityApiTests,ConcurrencyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ConcurrencyTests.cs,VerifyConcurrency,The length of the statement  "            MutableResolver.AddResolver<Func<IExecutionStrategy>>(k => (Func<IExecutionStrategy>)(() => new BlockingStrategy(taskCompletionSource.Task))); " is 142.
Long Statement,ProductivityApiTests,ConcurrencyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ConcurrencyTests.cs,VerifyConcurrency,The length of the statement  "                    @"Data Source=.\SQLEXPRESS;Initial Catalog=SimpleModel.SimpleModelContext;Integrated Security=True;MultipleActiveResultSets=True") " is 130.
Long Statement,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,Null_complex_original_values_result_in_exception_when_querying_for_store_values,The length of the statement  "            Null_complex_original_values_result_in_exception_when_querying_for_store_values_implementation(e => e.GetDatabaseValues()); " is 123.
Long Statement,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,NonGeneric_GetDatabaseValuesAsync_for_entity_not_in_the_store_returns_null,The length of the statement  "            NonGeneric_GetDatabaseValues_for_entity_not_in_the_store_returns_null_implementation(e => e.GetDatabaseValuesAsync().Result); " is 125.
Long Statement,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,GetDatabaseValuesAsync_for_derived_entity_not_in_the_store_returns_null,The length of the statement  "            GetDatabaseValues_for_derived_entity_not_in_the_store_returns_null_implementation(e => e.GetDatabaseValuesAsync().Result); " is 122.
Long Statement,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,NonGeneric_GetDatabaseValues_for_derived_entity_not_in_the_store_returns_null,The length of the statement  "            NonGeneric_GetDatabaseValues_for_derived_entity_not_in_the_store_returns_null_implementation(e => e.GetDatabaseValues()); " is 121.
Long Statement,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,NonGeneric_GetDatabaseValuesAsync_for_the_wrong_type_in_the_store_throws,The length of the statement  "            NonGeneric_GetDatabaseValues_for_the_wrong_type_in_the_store_throws_implementation(e => e.GetDatabaseValuesAsync().Result); " is 123.
Long Statement,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,Store_values_really_are_store_values_not_current_or_original_values_async,The length of the statement  "            Store_values_really_are_store_values_not_current_or_original_values_implementation(e => e.GetDatabaseValuesAsync().Result); " is 123.
Long Statement,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_commands_with_parameters_can_be_executed_against_the_database,The length of the statement  "            SQL_commands_with_parameters_can_be_executed_against_the_database_implementation((d' q' p) => d.ExecuteSqlCommand(q' p)); " is 121.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_with_string_key_returns_Added_entity_from_state_manager,The length of the statement  "            Find_with_string_key_returns_Added_entity_from_state_manager_implementation(s => s.FindAsync("NorthStar Center").Result); " is 121.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_returns_Deleted_entity_from_state_manager,The length of the statement  "            Find_returns_Deleted_entity_from_state_manager_implementation(c => c.Categories.FindAsync("Xiaohe Tomb complex").Result); " is 121.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_on_Derived_Set_a_derived_entity_that_lives_in_state_manager_Sanity_test,The length of the statement  "            Find_on_Derived_Set_a_derived_entity_that_lives_in_state_manager_Sanity_test_implementation(s => s.FindAsync(7).Result); " is 120.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_DateTime_key_from_store,The length of the statement  "            Find_entity_with_key_from_store_implementation<DateTimeKeyEntity>((s' v) => s.Find(v)' new DateTime(2008' 5' 1' 8' 30' 52)); " is 124.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_TimeSpan_key_from_store,The length of the statement  "            Find_entity_with_key_from_store_implementation<TimeSpanKeyEntity>((s' v) => s.FindAsync(v).Result' new TimeSpan(2' 14' 18)); " is 124.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged,The length of the statement  "            Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged_implementation( " is 124.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added,The length of the statement  "            Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation( " is 120.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged,The length of the statement  "            Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged_implementation( " is 124.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added,The length of the statement  "            Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation( " is 120.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_throws_when_type_is_complex_type_which_is_not_valid_for_current_context,The length of the statement  "            Find_throws_when_type_is_complex_type_which_is_not_valid_for_current_context_implementation(c => c.Set<Address>().Find(1)); " is 123.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_throws_when_type_is_complex_type_which_is_not_valid_for_current_context,The length of the statement  "            Find_throws_when_type_is_complex_type_which_is_not_valid_for_current_context_implementation(c => c.Set(typeof(Address)).Find(1)); " is 129.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_throws_if_requested_type_does_not_match_actual_type_in_store,The length of the statement  "            Find_throws_if_requested_type_does_not_match_actual_type_in_store_implementation(c => c.Set<FeaturedProduct>().Find(1)); " is 120.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_throws_if_requested_type_does_not_match_actual_type_in_store,The length of the statement  "            Find_throws_if_requested_type_does_not_match_actual_type_in_store_implementation(c => c.Set(typeof(FeaturedProduct)).Find(1)); " is 126.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_in_derived_set_when_matching_base_type_lives_in_state_manager_in_added_state_and_matching_derived_type_lives_in_store,The length of the statement  "            Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store " is 143.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_in_derived_set_when_matching_base_type_lives_in_state_manager_in_unchanged_state_and_matching_derived_type_lives_in_store,The length of the statement  "            Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store " is 143.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_in_derived_set_when_matching_base_type_lives_in_state_manager_in_deleted_state_and_matching_derived_type_lives_in_store,The length of the statement  "            Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store " is 143.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_in_derived_set_when_matching_base_type_entity_lives_in_unchanged_and_matching_derived_type_lives_in_added_state_in_state_manager,The length of the statement  "            Find_in_derived_set_when_matching_base_type_entity_lives_in_unchanged_and_matching_derived_type_lives_in_added_state_in_state_manager_implementation " is 148.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_in_derived_set_when_matching_base_type_lives_in_state_manager_in_added_state_and_matching_derived_type_lives_in_store,The length of the statement  "            Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store " is 143.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_in_derived_set_when_matching_base_type_lives_in_state_manager_in_added_state_and_matching_derived_type_lives_in_store,The length of the statement  "                (EntityState.Added' c => ExceptionHelpers.UnwrapAggregateExceptions(() => c.Set<FeaturedProduct>().FindAsync(7).Result)); " is 121.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_in_derived_set_when_matching_base_type_lives_in_state_manager_in_unchanged_state_and_matching_derived_type_lives_in_store,The length of the statement  "            Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store " is 143.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_in_derived_set_when_matching_base_type_lives_in_state_manager_in_unchanged_state_and_matching_derived_type_lives_in_store,The length of the statement  "                (EntityState.Unchanged' c => ExceptionHelpers.UnwrapAggregateExceptions(() => c.Set<FeaturedProduct>().FindAsync(7).Result)); " is 125.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_in_derived_set_when_matching_base_type_lives_in_state_manager_in_deleted_state_and_matching_derived_type_lives_in_store,The length of the statement  "            Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store " is 143.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_in_derived_set_when_matching_base_type_lives_in_state_manager_in_deleted_state_and_matching_derived_type_lives_in_store,The length of the statement  "                (EntityState.Deleted' c => ExceptionHelpers.UnwrapAggregateExceptions(() => c.Set<FeaturedProduct>().FindAsync(7).Result)); " is 123.
Long Statement,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_in_derived_set_when_matching_base_type_entity_lives_in_unchanged_and_matching_derived_type_lives_in_added_state_in_state_manager,The length of the statement  "            Find_in_derived_set_when_matching_base_type_entity_lives_in_unchanged_and_matching_derived_type_lives_in_added_state_in_state_manager_implementation " is 148.
Long Statement,ProductivityApiTests,InvalidMappingContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\InvalidMappingModel\InvalidMappingContext.cs,OnModelCreating,The length of the statement  "            builder.Entity<InvalidPrincipal>().HasMany(e => e.DerivedProductDependentNavigation).WithOptional(e => e.PrincipalNavigation); " is 126.
Long Statement,ProductivityApiTests,InvalidMappingContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\InvalidMappingModel\InvalidMappingContext.cs,OnModelCreating,The length of the statement  "            builder.Entity<InvalidDerivedProductDependent>().Property(p => p.SalePrice).IsRequired().HasColumnType("char").HasMaxLength(20). " is 128.
Long Statement,ProductivityApiTests,InvalidMappingContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\InvalidMappingModel\InvalidMappingContext.cs,OnModelCreating,The length of the statement  "            builder.Entity<InvalidPrincipal>().Property(p => p.Description).HasColumnType("binary").HasMaxLength(10).IsFixedLength(); " is 121.
Long Statement,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,ThenBy_Comparer_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The length of the statement  "                q => q.OrderBy(a => a.Name.Length).ThenBy(a => a' new CaseInsensitiveNumberComparer())' ToListExecutor' ToListAsyncExecutor); " is 125.
Long Statement,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,GroupBy_Comparer_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The length of the statement  "            runner(q => q.GroupBy(w => w.Name.Substring(0' 2)' new CaseInsensitiveStringComparer())' ToListExecutor' ToListAsyncExecutor); " is 126.
Long Statement,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Test_runner_detects_different_results_for_included_collections_implementation,The length of the statement  "                    "Left 'ID: 1' Region: WA' CompanyName: Microsoft\r\n' different from right 'ID: 1' Region: WA' CompanyName: Microsoft\r\n  ID: 1' Total: 111.00' OrderDate: 09/03/1997 00:00:00\r\n  ID: 3' Total: 333.00' OrderDate: 09/03/1999 00:00:00\r\n'"' " is 240.
Long Statement,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,IsPropertyChanged_returns_false_for_complex_property_that_is_changed_by_reference_only_and_marked_as_modified,The length of the statement  "            IsPropertyChanged_returns_false_for_complex_property_that_is_changed_by_reference_only_and_marked_as_modified_implementation " is 124.
Long Statement,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,IsPropertyChanged_returns_false_for_complex_property_that_is_changed_by_nested_property_reference_and_marked_as_modified,The length of the statement  "            IsPropertyChanged_returns_false_for_complex_property_that_is_changed_by_reference_only_and_marked_as_modified_implementation " is 124.
Long Statement,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,Can_query_for_strongly_typed_geographic_point_using_type_construction,The length of the statement  "                    @"select value ProductivityApiTests.SupplierWithLocation(-77' N'MyName'' Edm.GeographyFromText(""POINT(-122.335576 47.610676)""))  " is 129.
Long Statement,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,Can_query_for_strongly_typed_geometric_point_using_type_construction,The length of the statement  "                    @"select value ProductivityApiTests.WidgetWithGeometry(-77' N'MyName'' Edm.GeometryFromText(""POINT(-122.335576 47.610676)"")' ProductivityApiTests.ComplexWithGeometry(N'A'' Edm.GeometryFromText(""POINT(-122.335576 47.610676)"")))  " is 230.
Long Statement,System.Data.Entity.Query.LinqToEntities,ApplyOpRulesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ApplyOpRulesTests.cs,DevDiv573440_Rule_OuterApplyIntoScalarSubquery_must_run_before_Rule_OuterApplyOverProject,The length of the statement  "                            select new { Id = party.ID' contact = context.Contacts.Where(x => x.PartyID == party.ID).Select(x => x.Name).FirstOrDefault() }; " is 128.
Long Statement,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Is_on_enum_not_supported,The length of the statement  "                    "System.Nullable`1[[System.Data.Entity.TestModels.ArubaModel.ArubaEnum' EntityFramework.FunctionalTests' Version=0.0.0.0' Culture=neutral' PublicKeyToken=b03f5f7f11d50a3a]]"'" is 174.
Long Statement,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,As_on_enum_not_supported,The length of the statement  "                    "System.Nullable`1[[System.Data.Entity.TestModels.ArubaModel.ArubaEnum' EntityFramework.FunctionalTests' Version=0.0.0.0' Culture=neutral' PublicKeyToken=b03f5f7f11d50a3a]]");" is 175.
Long Statement,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Enum_in_Join_clause,The length of the statement  "                var allTypesWithFirstEnumIds = context.AllTypes.ToList().Where(a => a.c33_enum == firstEnum).Select(a => a.c1_int).ToList();" is 124.
Long Statement,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Enum_with_arithmetic_operations,The length of the statement  "WHERE ( CAST( [Extent1].[c34_byteenum] AS int) <>  CAST(  CAST(  CAST( [Extent1].[c34_byteenum] AS int) + 2 AS tinyint) AS int)) AND ( CAST(  CAST( [Extent1].[c33_enum] AS int) + 1 AS int) <>  CAST(  CAST( [Extent1].[c33_enum] AS int) - 2 AS int))";" is 249.
Long Statement,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Enum_with_bitwise_operations,The length of the statement  "WHERE ( CAST(  CAST( ( CAST( [Extent1].[c34_byteenum] AS int)) & (1) AS tinyint) AS int) > 0) AND (3 =  CAST( ( CAST( [Extent1].[c33_enum] AS int)) | (1) AS int))";" is 164.
Long Statement,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Enum_with_coalesce_operator,The length of the statement  "CASE WHEN (CASE WHEN (0 = ([Extent1].[c1_int] % 2)) THEN [Extent1].[c33_enum] END IS NULL) THEN 1 WHEN (0 = ([Extent1].[c1_int] % 2)) THEN [Extent1].[c33_enum] END AS [C1]" is 171.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_null_default,The length of the statement  "LEFT OUTER JOIN [dbo].[ArubaTasks] AS [Extent2] ON ([Extent1].[Id] = [Extent2].[ArubaRun_Id]) AND (1 = [Extent2].[Id])"; " is 120.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_non_null_default,The length of the statement  "CASE WHEN (CASE WHEN ([Join1].[Id1] IS NULL) THEN CAST(NULL AS tinyint) ELSE cast(1 as tinyint) END IS NULL) THEN 0 ELSE [Join1].[Id1] END AS [C1] " is 146.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_non_null_default,The length of the statement  "	INNER JOIN [dbo].[Bugs2] AS [Extent3] ON [Extent2].[Id] = [Extent3].[Id] ) AS [Join1] ON ([Extent1].[Id] = [Join1].[ArubaOwner_Id]) AND (1 = [Join1].[Id1])"; " is 157.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_non_null_default,The length of the statement  "                var query = context.Owners.SelectMany(c => c.Bugs.Where(b => b.Id == 1).Select(b => b.Id).DefaultIfEmpty()' (o' b) => new { o' b }); " is 132.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_explicit_default,The length of the statement  "CASE WHEN (CASE WHEN ([Extent2].[Id] IS NULL) THEN CAST(NULL AS tinyint) ELSE cast(1 as tinyint) END IS NULL) THEN N'Default' ELSE [Extent2].[Name] END AS [C1] " is 159.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_explicit_default,The length of the statement  "LEFT OUTER JOIN [dbo].[ArubaTasks] AS [Extent2] ON ([Extent1].[Id] = [Extent2].[ArubaRun_Id]) AND (1 = [Extent2].[Id])"; " is 120.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_explicit_default,The length of the statement  "                var query = context.Runs.SelectMany(r => r.Tasks.Where(t => t.Id == 1).Select(t => t.Name).DefaultIfEmpty("Default")' (r' tn) => new { r' tn }); " is 144.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_anonymous_type_default,The length of the statement  "CASE WHEN (CASE WHEN ([Extent2].[Id] IS NULL) THEN CAST(NULL AS tinyint) ELSE cast(1 as tinyint) END IS NULL) THEN -1 ELSE [Extent2].[Id] END AS [C1]'  " is 150.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_anonymous_type_default,The length of the statement  "CASE WHEN (CASE WHEN ([Extent2].[Id] IS NULL) THEN CAST(NULL AS tinyint) ELSE cast(1 as tinyint) END IS NULL) THEN N'Unknown' ELSE [Extent2].[Name] END AS [C2]'  " is 160.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_anonymous_type_default,The length of the statement  "CASE WHEN (CASE WHEN ([Extent2].[Id] IS NULL) THEN CAST(NULL AS tinyint) ELSE cast(1 as tinyint) END IS NULL) THEN cast(1 as bit) ELSE [Extent2].[Deleted] END AS [C3] " is 166.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_anonymous_type_default,The length of the statement  "LEFT OUTER JOIN [dbo].[ArubaTasks] AS [Extent2] ON ([Extent1].[Id] = [Extent2].[ArubaRun_Id]) AND (2 = [Extent2].[Id]) AND (N'Foo' = [Extent2].[Name])"; " is 152.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_anonymous_type_default,The length of the statement  "                var query = context.Runs.SelectMany(r => r.Tasks.Where(t => t.Id == 2 && t.Name == "Foo").Select(t => new { t.Id' t.Name' t.Deleted' }).DefaultIfEmpty(new { Id = -1' Name = "Unknown"' Deleted = true })' (r' t) => new { r' t }); " is 227.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,SelectMany_of_two_entity_sets_withDefaultIfEmpty_translated_to_left_outer_join,The length of the statement  "LEFT OUTER JOIN  (SELECT [Extent2].[Id] AS [Id1]' [Extent2].[Comment] AS [Comment]' [Extent2].[Failure_Id] AS [Failure_Id]' [Extent2].[ArubaOwner_Id] AS [ArubaOwner_Id]' [Extent3].[Number] AS [Number]' [Extent3].[Resolution] AS [Resolution] " is 240.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,SelectMany_of_two_entity_sets_withDefaultIfEmpty_translated_to_left_outer_join,The length of the statement  "	INNER JOIN [dbo].[Bugs2] AS [Extent3] ON [Extent2].[Id] = [Extent3].[Id] ) AS [Join1] ON [Extent1].[Id] = [Join1].[Failure_Id]"; " is 128.
Long Statement,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,SelectMany_of_two_entity_sets_withDefaultIfEmpty_translated_to_left_outer_join,The length of the statement  "                var query = context.Failures.GroupJoin(context.Bugs' f => f.Id' b => b.Failure.Id' (f' b) => new { f' b }).SelectMany(r => r.b.DefaultIfEmpty()); " is 145.
Long Statement,System.Data.Entity.Query.LinqToEntities,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FunctionsTests.cs,IsNullOrEmpty_translated_properly_to_expression,The length of the statement  "CASE WHEN (([Extent1].[LastName] IS NULL) OR (( CAST(LEN([Extent1].[LastName]) AS int)) = 0)) THEN cast(1 as bit) WHEN ( NOT (([Extent1].[LastName] IS NULL) OR (( CAST(LEN([Extent1].[LastName]) AS int)) = 0))) THEN cast(0 as bit) END AS [C1]" is 241.
Long Statement,System.Data.Entity.Query.LinqToEntities,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FunctionsTests.cs,String_Insert_properly_translated_to_function,The length of the statement  "SUBSTRING([Extent1].[LastName]' 1' 2) + N'Foo' + SUBSTRING([Extent1].[LastName]' 2 + 1' ( CAST(LEN([Extent1].[LastName]) AS int)) - 2) AS [C1]" is 142.
Long Statement,System.Data.Entity.Query.LinqToEntities,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FunctionsTests.cs,String_Remove_properly_translated_to_function,The length of the statement  "SUBSTRING([Extent1].[LastName]' 1' 2) + SUBSTRING([Extent1].[LastName]' 2 + 3 + 1' ( CAST(LEN([Extent1].[LastName]) AS int)) - (2 + 3)) AS [C1]" is 143.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_anonymous_type_containing_group_key_and_group_aggregate,The length of the statement  "                var expected = context.Owners.ToList().GroupBy(o => o.FirstName).Select(g => new { Key = g.Key' Aggregate = g.Max(p => p.Id) }).ToList(); " is 137.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_anonymous_type_containing_group_key_and_multiple_group_aggregates,The length of the statement  "                var query = context.Owners.GroupBy(o => o.FirstName).Select(g => new { key1 = g.Key' key2 = g.Key' max = g.Max(p => p.Id)' min = g.Min(s => s.Id + 2) }); " is 153.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_anonymous_type_containing_group_key_and_multiple_group_aggregates,The length of the statement  "                var expected = context.Owners.ToList().GroupBy(o => o.FirstName).Select(g => new { key1 = g.Key' key2 = g.Key' max = g.Max(p => p.Id)' min = g.Min(s => s.Id + 2) }).ToList(); " is 174.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_anonymous_type_containing_group_key_and_multiple_group_aggregates,The length of the statement  "                QueryTestHelpers.VerifyQueryResult(expected' results' (o' i) => o.key1 == i.key1 && o.key2 == i.key2 && o.max == i.max && o.min == i.min); " is 138.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_conditional_expression_containing_group_key,The length of the statement  "CASE WHEN (((@p__linq__0 = 1) AND (@p__linq__1 = 1)) OR ((@p__linq__2 = 1) AND (@p__linq__3 = 1))) THEN cast(1 as bit) WHEN ( NOT (((@p__linq__0 = 1) AND (@p__linq__1 = 1)) OR ((@p__linq__2 = 1) AND (@p__linq__3 = 1)))) THEN cast(0 as bit) END AS [C3] " is 251.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_conditional_expression_containing_group_key,The length of the statement  "                var query = context.Owners.GroupBy(o => o.FirstName).Select(g => new { keyIsNull = g.Key == null ? "is null" : "not null"' logicExpression = (a && b || b && c) }); " is 163.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_conditional_expression_containing_group_key,The length of the statement  "                var expected = context.Owners.ToList().GroupBy(o => o.FirstName).Select(g => new { keyIsNull = g.Key == null ? "is null" : "not null"' logicExpression = (a && b || b && c) }).ToList(); " is 184.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_conditional_expression_containing_group_key,The length of the statement  "                QueryTestHelpers.VerifyQueryResult(expected' results' (o' i) => o.keyIsNull == i.keyIsNull && o.logicExpression == i.logicExpression); " is 134.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_filerting_and_projecting_anonymous_type_with_group_key_and_function_aggregate,The length of the statement  "                var query = context.Owners.Where(o => o.Id > 5).GroupBy(o => o.FirstName).Select(g => new { FirstName = g.Key' AverageId = g.Average(p => p.Id) }); " is 147.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_filerting_and_projecting_anonymous_type_with_group_key_and_function_aggregate,The length of the statement  "                var expected = context.Owners.ToList().Where(o => o.Id > 5).GroupBy(o => o.FirstName).Select(g => new { FirstName = g.Key' AverageId = g.Average(p => p.Id) }).OrderBy(r => r.AverageId).ToList(); " is 194.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_filerting_and_projecting_anonymous_type_with_group_key_and_function_aggregate,The length of the statement  "                QueryTestHelpers.VerifyQueryResult(expected' results' (o' i) => o.FirstName == i.FirstName && o.AverageId == i.AverageId); " is 122.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_expression_with_multiple_function_aggregates,The length of the statement  "                var query = context.Owners.GroupBy(o => o.FirstName).Select(g => new { maxMinusMin = g.Max(p => p.Id) - g.Min(s => s.Id) }); " is 124.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_expression_with_multiple_function_aggregates,The length of the statement  "                var expected = context.Owners.ToList().GroupBy(o => o.FirstName).Select(g => new { maxMinusMin = g.Max(p => p.Id) - g.Min(s => s.Id) }).ToList(); " is 145.
Long Statement,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_grouping_by_row_and_projecting_column_of_the_key_row,The length of the statement  "                var expected = context.Owners.ToList().Where(o => o.Id < 4).GroupBy(g => new { g.FirstName }).Select(g => g.Key.FirstName).ToList(); " is 132.
Long Statement,System.Data.Entity.Query.LinqToEntities,IncludeTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\IncludeTests.cs,Include_from_except_takes_span_information_from_first_collection_ignores_from_second,The length of the statement  "                var query = context.Failures.Include(f => f.Bugs).Except(context.Failures.Where(f => f.Id == 1).Include(f => f.Configs)); " is 121.
Long Statement,System.Data.Entity.Query.LinqToEntities,MaterializationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\MaterializationTests.cs,Materializing_empty_list_throws,The length of the statement  "                           "System.Collections.Generic.List`1[[System.Int32' mscorlib' Version=4.0.0.0' Culture=neutral' PublicKeyToken=b77a5c561934e089]]"); " is 130.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_projection,The length of the statement  "                var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }); " is 136.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_projection,The length of the statement  "                var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id); " is 139.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_projection,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList(); " is 157.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_filter_with_clr_null_semantics,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Where(p => p.Id % 2 == 0).ToList(); " is 128.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_filter_without_clr_null_semantics,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Where(p => p.Id % 2 == 0).ToList(); " is 128.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_type_filter,The length of the statement  "                var expected = context.Configs.ToList().OrderByDescending(p => p.Arch).ThenBy(p => p.Id).OfType<ArubaMachineConfig>().ToList(); " is 127.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_projection,The length of the statement  "                var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }); " is 144.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_projection,The length of the statement  "                var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5); " is 147.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_projection,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList(); " is 165.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_with_clr_null_semantics,The length of the statement  "FROM ( SELECT [Extent1].[Id] AS [Id]' [Extent1].[FirstName] AS [FirstName]' [Extent1].[LastName] AS [LastName]' [Extent1].[Alias] AS [Alias] " is 140.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_with_clr_null_semantics,The length of the statement  "	FROM ( SELECT [Extent1].[Id] AS [Id]' [Extent1].[FirstName] AS [FirstName]' [Extent1].[LastName] AS [LastName]' [Extent1].[Alias] AS [Alias]' row_number() OVER (ORDER BY [Extent1].[FirstName] DESC' [Extent1].[Id] ASC) AS [row_number] " is 233.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_with_clr_null_semantics,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Where(p => p.Id % 2 == 0).ToList(); " is 136.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_without_clr_null_semantics,The length of the statement  "FROM ( SELECT [Extent1].[Id] AS [Id]' [Extent1].[FirstName] AS [FirstName]' [Extent1].[LastName] AS [LastName]' [Extent1].[Alias] AS [Alias] " is 140.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_without_clr_null_semantics,The length of the statement  "	FROM ( SELECT [Extent1].[Id] AS [Id]' [Extent1].[FirstName] AS [FirstName]' [Extent1].[LastName] AS [LastName]' [Extent1].[Alias] AS [Alias]' row_number() OVER (ORDER BY [Extent1].[FirstName] DESC' [Extent1].[Id] ASC) AS [row_number] " is 233.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_without_clr_null_semantics,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Where(p => p.Id % 2 == 0).ToList(); " is 136.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_type_filter,The length of the statement  "	FROM ( SELECT [Filter1].[Id] AS [Id]' [Filter1].[OS] AS [OS]' [Filter1].[Lang] AS [Lang]' [Filter1].[Arch] AS [Arch]' [Filter1].[Host] AS [Host]' [Filter1].[Address] AS [Address]' [Filter1].[Location] AS [Location]' [Filter1].[Discriminator] AS [Discriminator] " is 260.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_type_filter,The length of the statement  "		FROM ( SELECT [Extent1].[Id] AS [Id]' [Extent1].[OS] AS [OS]' [Extent1].[Lang] AS [Lang]' [Extent1].[Arch] AS [Arch]' [Extent1].[Host] AS [Host]' [Extent1].[Address] AS [Address]' [Extent1].[Location] AS [Location]' [Extent1].[Discriminator] AS [Discriminator]' row_number() OVER (ORDER BY [Extent1].[Arch] DESC' [Extent1].[Id] ASC) AS [row_number] " is 348.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_type_filter,The length of the statement  "                var expected = context.Configs.ToList().OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Skip(5).OfType<ArubaMachineConfig>().ToList(); " is 135.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_projection,The length of the statement  "                var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }); " is 145.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_projection,The length of the statement  "                var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10); " is 148.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_projection,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList(); " is 166.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_with_clr_null_semantics,The length of the statement  "                var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id); " is 173.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_with_clr_null_semantics,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).ToList(); " is 137.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_without_clr_null_semantics,The length of the statement  "                var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id); " is 173.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_without_clr_null_semantics,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).ToList(); " is 137.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_type_filter,The length of the statement  "	FROM ( SELECT TOP (10) [Extent1].[Id] AS [Id]' [Extent1].[OS] AS [OS]' [Extent1].[Lang] AS [Lang]' [Extent1].[Arch] AS [Arch]' [Extent1].[Host] AS [Host]' [Extent1].[Address] AS [Address]' [Extent1].[Location] AS [Location]' [Extent1].[Discriminator] AS [Discriminator] " is 269.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_type_filter,The length of the statement  "                var expected = context.Configs.ToList().OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Take(10).OfType<ArubaMachineConfig>().ToList(); " is 136.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The length of the statement  "                var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }); " is 153.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The length of the statement  "                var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10); " is 156.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList(); " is 174.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The length of the statement  "                var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0); " is 124.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The length of the statement  "                var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id); " is 181.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).ToList(); " is 145.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The length of the statement  "                var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0); " is 124.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The length of the statement  "                var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id); " is 181.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The length of the statement  "                var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).ToList(); " is 145.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_type_filter,The length of the statement  "	FROM ( SELECT TOP (10) [Filter1].[Id] AS [Id]' [Filter1].[OS] AS [OS]' [Filter1].[Lang] AS [Lang]' [Filter1].[Arch] AS [Arch]' [Filter1].[Host] AS [Host]' [Filter1].[Address] AS [Address]' [Filter1].[Location] AS [Location]' [Filter1].[Discriminator] AS [Discriminator] " is 269.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_type_filter,The length of the statement  "		FROM ( SELECT [Extent1].[Id] AS [Id]' [Extent1].[OS] AS [OS]' [Extent1].[Lang] AS [Lang]' [Extent1].[Arch] AS [Arch]' [Extent1].[Host] AS [Host]' [Extent1].[Address] AS [Address]' [Extent1].[Location] AS [Location]' [Extent1].[Discriminator] AS [Discriminator]' row_number() OVER (ORDER BY [Extent1].[Arch] DESC' [Extent1].[Id] ASC) AS [row_number] " is 348.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_type_filter,The length of the statement  "                var query = context.Configs.OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Skip(5).Take(10).OfType<ArubaMachineConfig>(); " is 123.
Long Statement,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_type_filter,The length of the statement  "                var expected = context.Configs.ToList().OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Skip(5).Take(10).OfType<ArubaMachineConfig>().ToList(); " is 144.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Exception_thrown_for_function_with_no_body,The length of the statement  "            QueryTestHelpers.VerifyThrows<InvalidOperationException>(query' workspace' "Cqt_UDF_FunctionHasNoDefinition"' "ProductModel.F_NoBody()");" is 137.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Exception_thrown_if_invalid_parameter_passed_to_function,The length of the statement  "            QueryTestHelpers.VerifyThrows<InvalidOperationException>(query' workspace' "Cqt_UDF_FunctionDefinitionResultTypeMismatch"' "Edm.Int32"' "ProductModel.F_I"' "Edm.Int16");" is 169.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Exception_thrown_for_function_with_direct_reference_to_itself_in_definition,The length of the statement  "            QueryTestHelpers.VerifyThrows<EntityCommandCompilationException>(query' workspace' "Cqt_UDF_FunctionDefinitionWithCircularReference"' "ProductModel.F_D");" is 154.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Exception_thrown_for_function_with_indirect_reference_to_itself_in_definition,The length of the statement  "            QueryTestHelpers.VerifyThrows<EntityCommandCompilationException>(query1' workspace' "Cqt_UDF_FunctionDefinitionWithCircularReference"' "ProductModel.F_E");" is 155.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Exception_thrown_for_function_with_indirect_reference_to_itself_in_definition,The length of the statement  "            QueryTestHelpers.VerifyThrows<EntityCommandCompilationException>(query2' workspace' "Cqt_UDF_FunctionDefinitionWithCircularReference"' "ProductModel.F_F");" is 155.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Function_returning_collection_of_complex_types,The length of the statement  "FROM ( SELECT TOP (5) [Project1].[HomeAddress] AS [HomeAddress]' [Project1].[City] AS [City]' [Project1].[Region] AS [Region]' [Project1].[PostalCode] AS [PostalCode]' [Project1].[Country] AS [Country]' [Project1].[C1] AS [C1]" is 226.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Function_taking_collection_of_scalars_as_argument_and_returns_collection_of_entities,The length of the statement  "                "SELECT top(5) et FROM ProductModel.F_In_ColST_Ret_ColET(SELECT VALUE c.CustomerID from ProductContainer.Customers as c) as et";" is 128.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Function_taking_collection_of_entities_as_argument_and_returns_collection_of_entities,The length of the statement  "            var query = "select top(5) et FROM ProductModel.F_In_ColET_Ret_ColET(select value c from ProductContainer.Customers as c) as et";" is 129.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Function_taking_collection_of_complex_types_as_argument_and_returns_collection_of_complex_types,The length of the statement  "                "SELECT TOP(5) ct FROM ProductModel.F_In_ColCT_Ret_ColCT(select value c.Address from ProductContainer.Customers as c) as ct";" is 125.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Function_taking_collection_of_scalars_as_argument_and_returns_collection_of_scalars,The length of the statement  "                "SELECT top(5) s FROM ProductModel.F_In_ColST_Ret_ColST(SELECT VALUE c.CustomerID from ProductContainer.Customers as c) as s";" is 126.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Function_taking_row_as_argument_and_returns_a_row,The length of the statement  "            var query = "SELECT TOP(5) ProductModel.F_In_RT_Ret_RT(c) as r FROM (SELECT cust FROM ProductContainer.Customers as cust) as c";" is 128.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Function_taking_collection_of_rows_as_argument_and_returns_collection_of_rows,The length of the statement  "            var query = "SELECT TOP(5) r FROM ProductModel.F_In_ColRT_Ret_ColRT(SELECT c FROM ProductContainer.Customers as c) as r";" is 121.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_entity_as_argument,The length of the statement  "                "ProductModel.F_In_Entity(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p))";" is 134.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_entity_as_argument,The length of the statement  "                "ProductModel.F_In_Entity2(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p))";" is 135.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_entity_and_integer_as_arguments,The length of the statement  "                "ProductModel.F_In_ProdNumber(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p)' CAST(1 as Int32))";" is 156.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_entity_and_integer_as_arguments,The length of the statement  "                "ProductModel.F_In_ProdNumber(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p)' CAST(1 as Int16))";" is 156.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_entity_and_integer_as_arguments,The length of the statement  "                "ProductModel.F_In_ProdNumber2(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p)' CAST(1 as Int64))";" is 157.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_entity_and_integer_as_arguments_negative,The length of the statement  "            var query1 = "ProductModel.F_In_ProdNumber2(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p)' CAST(1 as Int32))";" is 170.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_entity_reference_as_argument,The length of the statement  "                "ProductModel.F_In_Ref(REF(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p)))";" is 136.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_entity_reference_as_argument,The length of the statement  "                "ProductModel.F_In_Ref2(REF(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p)))";" is 137.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_row_as_argument,The length of the statement  "                "ProductModel.F_In_Row(Row(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p) as x' CAST(1 as Int64) as y))";" is 164.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_row_as_argument_negative,The length of the statement  "                "ProductModel.F_In_Row(Row(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p) as x' CAST(1 as Int32) as y))";" is 164.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_row_as_argument_negative,The length of the statement  "                    "F_In_Row(Transient.rowtype[(x'ProductModel.Product(Nullable=True'DefaultValue=))'(y'Edm.Decimal(Nullable=True'DefaultValue='Precision='Scale=))])");" is 149.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_collection_of_rows_as_argument,The length of the statement  "                "ProductModel.F_In_ColRow({Row(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p) as x' CAST(1 as Int64) as y)})";" is 169.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_collection_of_rows_as_argument_negative,The length of the statement  "                "ProductModel.F_In_ColRow({Row(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p) as x' CAST(1 as Int32) as y)})";" is 169.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_function_taking_collection_of_rows_as_argument_negative,The length of the statement  "                "F_In_ColRow(Transient.collection[Transient.rowtype[(x'ProductModel.Product(Nullable=True'DefaultValue=))'(y'Edm.Decimal(Nullable=True'DefaultValue='Precision='Scale=))](Nullable=True'DefaultValue=)])");" is 203.
Long Statement,System.Data.Entity.Query,ModelDefinedFunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\ModelDefinedFunctionTests.cs,Overload_resolution_for_functions_with_nulls_as_arguments,The length of the statement  "                "ProductModel.F_In_ProdNumber3(anyelement(select value treat(p as ProductModel.DiscontinuedProduct) from ProductContainer.Products as p)' null)";" is 145.
Long Statement,System.Data.Entity.Query,FunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\FunctionTests.cs,Inline_aggregate_funtion_MinProductId,The length of the statement  "		WHERE ([Extent2].[Discontinued] IN (0'1)) AND (([Distinct1].[ProductName] = [Extent2].[ProductName]) OR (([Distinct1].[ProductName] IS NULL) AND ([Extent2].[ProductName] IS NULL)))) AS [C1] " is 189.
Long Statement,System.Data.Entity.Query,FunctionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\FunctionTests.cs,Query_against_TVF_using_namespace_with_high_byte_characters_does_not_throw,The length of the statement  "            const string query = @"(select value e from [ĎefauľtNamėspacĕ].Store.F_TVF_With_High_Bytes() as [e] where e.[Čode] is null)"; " is 125.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,CreateBasicGroupBinding,The length of the statement  "            var entitySet = workspace.GetEntityContainer("ProductContainer"' DataSpace.CSpace).GetEntitySetByName("Products"' false); " is 121.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Basic_GroupBy_with_group_key_and_group_aggregate,The length of the statement  "	LEFT OUTER JOIN [dbo].[Products] AS [Extent2] ON ([Extent2].[Discontinued] IN (0'1)) AND (([Distinct1].[ReorderLevel] = [Extent2].[ReorderLevel]) OR (([Distinct1].[ReorderLevel] IS NULL) AND ([Extent2].[ReorderLevel] IS NULL))) " is 227.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GropuBy_with_group_key_function_aggregate_and_group_aggregate,The length of the statement  "	LEFT OUTER JOIN [dbo].[Products] AS [Extent2] ON ([Extent2].[Discontinued] IN (0'1)) AND (([GroupBy1].[K1] = [Extent2].[ReorderLevel]) OR (([GroupBy1].[K1] IS NULL) AND ([Extent2].[ReorderLevel] IS NULL))) " is 205.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Project_over_group_by_with_group_key_function_aggregate_and_group_aggregate,The length of the statement  "	LEFT OUTER JOIN [dbo].[Products] AS [Extent2] ON ([Extent2].[Discontinued] IN (0'1)) AND (([GroupBy1].[K1] = [Extent2].[ReorderLevel]) OR (([GroupBy1].[K1] IS NULL) AND ([Extent2].[ReorderLevel] IS NULL))) " is 205.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Project_over_group_by_only_project_group_aggregate,The length of the statement  "	LEFT OUTER JOIN [dbo].[Products] AS [Extent2] ON ([Extent2].[Discontinued] IN (0'1)) AND (([Distinct1].[ReorderLevel] = [Extent2].[ReorderLevel]) OR (([Distinct1].[ReorderLevel] IS NULL) AND ([Extent2].[ReorderLevel] IS NULL))) " is 227.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_over_GroupBy,The length of the statement  "	CASE WHEN ([Project1].[C2] IS NULL) THEN CAST(NULL AS int) WHEN ([Project1].[ProductID] IS NULL) THEN CAST(NULL AS int) ELSE 1 END AS [C5]'  " is 139.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_over_GroupBy,The length of the statement  "		LEFT OUTER JOIN [dbo].[Products] AS [Extent3] ON ([Extent3].[Discontinued] IN (0'1)) AND (([GroupBy3].[K1] = [Extent3].[ReorderLevel]) OR (([GroupBy3].[K1] IS NULL) AND ([Extent3].[ReorderLevel] IS NULL))) ) AS [Project1] ON ([GroupBy2].[K1] = [Project1].[C1]) OR (([GroupBy2].[K1] IS NULL) AND ([Project1].[C1] IS NULL)) " is 321.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_over_union,The length of the statement  "	LEFT OUTER JOIN [dbo].[Products] AS [Extent2] ON ([Extent2].[Discontinued] IN (0'1)) AND (([GroupBy1].[K1] = [Extent2].[ReorderLevel]) OR (([GroupBy1].[K1] IS NULL) AND ([Extent2].[ReorderLevel] IS NULL))) " is 205.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_with_nulls,The length of the statement  "	CASE WHEN ([UnionAll14].[C1] IS NULL) THEN CAST(NULL AS int) WHEN ([UnionAll14].[C1] = 0) THEN cast(1 as tinyint) WHEN ([UnionAll14].[C1] = 1) THEN cast(2 as tinyint) WHEN ([UnionAll14].[C1] = 2) THEN cast(3 as tinyint) WHEN ([UnionAll14].[C1] = 3) THEN CAST(NULL AS int) WHEN ([UnionAll14].[C1] = 4) THEN CAST(NULL AS int) WHEN ([UnionAll14].[C1] = 5) THEN cast(2 as tinyint) WHEN ([UnionAll14].[C1] = 6) THEN cast(1 as tinyint) END AS [C3]'  " is 442.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_with_nulls,The length of the statement  "		CASE WHEN ([UnionAll7].[C1] = 0) THEN cast(1 as tinyint) WHEN ([UnionAll7].[C1] = 1) THEN cast(2 as tinyint) WHEN ([UnionAll7].[C1] = 2) THEN cast(3 as tinyint) WHEN ([UnionAll7].[C1] = 3) THEN CAST(NULL AS int) WHEN ([UnionAll7].[C1] = 4) THEN CAST(NULL AS int) WHEN ([UnionAll7].[C1] = 5) THEN cast(2 as tinyint) WHEN ([UnionAll7].[C1] = 6) THEN cast(1 as tinyint) END AS [C1] " is 378.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_with_nulls,The length of the statement  "		FROM  ( SELECT 1 AS X ) AS [SingleRowTable16]) AS [UnionAll14] ON ([Distinct1].[C1] = (CASE WHEN ([UnionAll14].[C1] = 0) THEN cast(1 as tinyint) WHEN ([UnionAll14].[C1] = 1) THEN cast(2 as tinyint) WHEN ([UnionAll14].[C1] = 2) THEN cast(3 as tinyint) WHEN ([UnionAll14].[C1] = 3) THEN CAST(NULL AS int) WHEN ([UnionAll14].[C1] = 4) THEN CAST(NULL AS int) WHEN ([UnionAll14].[C1] = 5) THEN cast(2 as tinyint) WHEN ([UnionAll14].[C1] = 6) THEN cast(1 as tinyint) END)) OR (([Distinct1].[C1] IS NULL) AND (CASE WHEN ([UnionAll14].[C1] = 0) THEN cast(1 as tinyint) WHEN ([UnionAll14].[C1] = 1) THEN cast(2 as tinyint) WHEN ([UnionAll14].[C1] = 2) THEN cast(3 as tinyint) WHEN ([UnionAll14].[C1] = 3) THEN CAST(NULL AS int) WHEN ([UnionAll14].[C1] = 4) THEN CAST(NULL AS int) WHEN ([UnionAll14].[C1] = 5) THEN cast(2 as tinyint) WHEN ([UnionAll14].[C1] = 6) THEN cast(1 as tinyint) END IS NULL)) " is 890.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_on_entity,The length of the statement  "	LEFT OUTER JOIN [dbo].[Products] AS [Extent2] ON ([Extent2].[Discontinued] IN (0'1)) AND (([Extent1].[ProductID] = [Extent2].[ProductID]) OR (([Extent1].[Discontinued] IS NULL) AND ([Extent2].[Discontinued] IS NULL))) " is 217.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_on_entity,The length of the statement  "ORDER BY [Project1].[Discontinued] ASC' [Project1].[ProductID] ASC' [Project1].[ProductName] ASC' [Project1].[ReorderLevel] ASC' [Project1].[C1] ASC"; " is 150.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_row,The length of the statement  "	CASE WHEN ([UnionAll4].[C1] IS NULL) THEN CAST(NULL AS int) WHEN ([UnionAll4].[C1] = 0) THEN 1 WHEN ([UnionAll4].[C1] = 1) THEN 1 END AS [C5]'  " is 142.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_row,The length of the statement  "	CASE WHEN ([UnionAll4].[C1] IS NULL) THEN CAST(NULL AS int) WHEN ([UnionAll4].[C1] = 0) THEN 1 WHEN ([UnionAll4].[C1] = 1) THEN CAST(NULL AS int) END AS [C6]'  " is 158.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_row,The length of the statement  "		FROM  ( SELECT 1 AS X ) AS [SingleRowTable6]) AS [UnionAll4] ON (([Distinct1].[C2] = (CASE WHEN ([UnionAll4].[C1] = 0) THEN 1 WHEN ([UnionAll4].[C1] = 1) THEN 1 END)) OR (([Distinct1].[C2] IS NULL) AND (CASE WHEN ([UnionAll4].[C1] = 0) THEN 1 WHEN ([UnionAll4].[C1] = 1) THEN 1 END IS NULL))) AND (([Distinct1].[C3] = (CASE WHEN ([UnionAll4].[C1] = 0) THEN 1 WHEN ([UnionAll4].[C1] = 1) THEN CAST(NULL AS int) END)) OR (([Distinct1].[C3] IS NULL) AND (CASE WHEN ([UnionAll4].[C1] = 0) THEN 1 WHEN ([UnionAll4].[C1] = 1) THEN CAST(NULL AS int) END IS NULL))) " is 557.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_Group_aggregate_with_group_key_and_group_aggregate,The length of the statement  "	LEFT OUTER JOIN [dbo].[Products] AS [Extent2] ON ([Extent2].[Discontinued] IN (0'1)) AND (([GroupBy1].[K1] = [Extent2].[ReorderLevel]) OR (([GroupBy1].[K1] IS NULL) AND ([Extent2].[ReorderLevel] IS NULL))) " is 205.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_filter_over_group_aggregate,The length of the statement  "		WHERE ([Extent2].[Discontinued] IN (0'1)) AND (([Distinct1].[ReorderLevel] = [Extent2].[ReorderLevel]) OR (([Distinct1].[ReorderLevel] IS NULL) AND ([Extent2].[ReorderLevel] IS NULL))) AND ([Extent2].[ProductID] < cast(3 as tinyint))) AS [C1] " is 242.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_project_filtered_group_aggregate_also_include_group_key_and_function_aggregate,The length of the statement  "		WHERE ([Extent2].[Discontinued] IN (0'1)) AND (([GroupBy1].[K1] = [Extent2].[ReorderLevel]) OR (([GroupBy1].[K1] IS NULL) AND ([Extent2].[ReorderLevel] IS NULL))) AND ([Extent2].[ProductID] < cast(3 as tinyint))) AS [C2] " is 220.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_project_unioned_group_aggregate_also_include_group_key_and_function_aggregate,The length of the statement  "			WHERE ([Extent2].[Discontinued] IN (0'1)) AND (([GroupBy1].[K1] = [Extent2].[ReorderLevel]) OR (([GroupBy1].[K1] IS NULL) AND ([Extent2].[ReorderLevel] IS NULL))) " is 162.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_project_unioned_group_aggregate_also_include_group_key_and_function_aggregate,The length of the statement  "			WHERE ([Extent3].[Discontinued] IN (0'1)) AND (([GroupBy1].[K1] = [Extent3].[ReorderLevel]) OR (([GroupBy1].[K1] IS NULL) AND ([Extent3].[ReorderLevel] IS NULL)))) AS [UnionAll1]) AS [C2] " is 187.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_group_aggregate_propagated_through_Apply,The length of the statement  "	WHERE ([Extent3].[Discontinued] IN (0'1)) AND (([Distinct1].[ReorderLevel] = [Extent3].[ReorderLevel]) OR (([Distinct1].[ReorderLevel] IS NULL) AND ([Extent3].[ReorderLevel] IS NULL)))) AS [C1] " is 193.
Long Statement,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_group_aggregate_propagated_throgh_Element,The length of the statement  "	INNER JOIN [dbo].[Products] AS [Extent2] ON ([Extent2].[Discontinued] IN (0'1)) AND (([Element1].[ReorderLevel] = [Extent2].[ReorderLevel]) OR (([Element1].[ReorderLevel] IS NULL) AND ([Extent2].[ReorderLevel] IS NULL))) " is 220.
Long Statement,System.Data.Entity.Query,QueryEnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\QueryEnumTests.cs,Simple_scan_with_Enum,The length of the statement  "            var entitySet = workspace.GetEntityContainer("MessageContainer"' DataSpace.CSpace).GetEntitySetByName("MessageSet"' false); " is 123.
Long Statement,System.Data.Entity.Query,QueryEnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\QueryEnumTests.cs,Simple_scan_with_Enum,The length of the statement  "            var expectedSql = "SELECT [Extent1].[Id] AS [Id]' [Extent1].[MessageType] AS [MessageType]FROM [dbo].[Message] AS [Extent1]"; " is 125.
Long Statement,System.Data.Entity.Query,QueryEnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\QueryEnumTests.cs,Scan_with_casting_Enum_to_integer,The length of the statement  "            var entitySet = workspace.GetEntityContainer("MessageContainer"' DataSpace.CSpace).GetEntitySetByName("MessageSet"' false); " is 123.
Long Statement,System.Data.Entity.Query,QueryEnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\QueryEnumTests.cs,Scan_with_casting_Enum_to_integer,The length of the statement  "                "SELECT [Extent1].[Id] AS [Id]' [Extent1].[MessageType] AS [MessageType] FROM [dbo].[Message] AS [Extent1] WHERE [Extent1].[Id] =  CAST( [Extent1].[MessageType] AS int)"; " is 170.
Long Statement,System.Data.Entity.Query,QueryEnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\QueryEnumTests.cs,Constant_integer_based_Enum_in_where_clause,The length of the statement  "            var entitySet = workspace.GetEntityContainer("MessageContainer"' DataSpace.CSpace).GetEntitySetByName("MessageSet"' false); " is 123.
Long Statement,System.Data.Entity.Query,QueryEnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\QueryEnumTests.cs,Constant_integer_based_Enum_in_where_clause,The length of the statement  "                "SELECT [Extent1].[Id] AS [Id]' [Extent1].[MessageType] AS [MessageType] FROM [dbo].[Message] AS [Extent1] WHERE [Extent1].[MessageType] = -5"; " is 143.
Long Statement,System.Data.Entity.Query,QueryEnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\QueryEnumTests.cs,Constant_Enum_value_in_where_clause,The length of the statement  "            var entitySet = workspace.GetEntityContainer("MessageContainer"' DataSpace.CSpace).GetEntitySetByName("MessageSet"' false); " is 123.
Long Statement,System.Data.Entity.Query,QueryEnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\QueryEnumTests.cs,Constant_Enum_value_in_where_clause,The length of the statement  "                "SELECT [Extent1].[Id] AS [Id]' [Extent1].[MessageType] AS [MessageType] FROM [dbo].[Message] AS [Extent1] WHERE [Extent1].[MessageType] = 0"; " is 142.
Long Statement,System.Data.Entity.Query,QueryEnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\QueryEnumTests.cs,Null_Enum_value_in_where_clause,The length of the statement  "            var entitySet = workspace.GetEntityContainer("MessageContainer"' DataSpace.CSpace).GetEntitySetByName("MessageSet"' false); " is 123.
Long Statement,System.Data.Entity.Query,QueryEnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\QueryEnumTests.cs,Null_Enum_value_in_where_clause,The length of the statement  "                "SELECT [Extent1].[Id] AS [Id]' [Extent1].[MessageType] AS [MessageType] FROM [dbo].[Message] AS [Extent1] WHERE [Extent1].[MessageType] = (CAST(NULL AS int))"; " is 160.
Long Statement,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeographyDistanceFromMultiPolygon,The length of the statement  "    CAST(Edm.GeographyFromText(""MULTIPOLYGON (((-136.34518219919187 -45.444057174306' 100.08107983924452 0.029396673640468753' -12.771444237628261 0.029396673640468753' -136.34518219919187 -45.444057174306)' (-136.34518219919187 -59.574853846584816' -6.6232329320655019 -12.718185214660565' 93.93286853368177 -12.718185214660565' -136.34518219919187 -59.574853846584816)))""' 4326) AS Edm.Geography))" is 397.
Long Statement,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeographyDistanceFromMultiPolygon,The length of the statement  "    CAST(Edm.GeographyFromText(""MULTIPOLYGON (((-136.34518219919187 -45.444057174306' 100.08107983924452 0.029396673640468753' -12.771444237628261 0.029396673640468753' -136.34518219919187 -45.444057174306)' (-136.34518219919187 -59.574853846584816' -6.6232329320655019 -12.718185214660565' 93.93286853368177 -12.718185214660565' -136.34518219919187 -59.574853846584816)))""' 4326) AS Edm.Geography)) <= 600000)";" is 410.
Long Statement,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeometryPointsWithinPolygon,The length of the statement  "        GeometryFromText(""MULTILINESTRING ((10 20' 15 20' 15 25' 10 25' 10 20)' (12 22' 13 22' 13 23' 12 23' 12 22))""' 32768))";" is 122.
Long Statement,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeographyPointsIntersectsPolygon,The length of the statement  "        GeographyFromText(""MULTIPOLYGON (((-136.34518219919187 -45.444057174306' 100.08107983924452 0.029396673640468753' -12.771444237628261 0.029396673640468753' -136.34518219919187 -45.444057174306)' (-136.34518219919187 -59.574853846584816' -6.6232329320655019 -12.718185214660565' 93.93286853368177 -12.718185214660565' -136.34518219919187 -59.574853846584816)))""' 4326))";" is 372.
Long Statement,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeographyPointsIntersectsPolygon,The length of the statement  "                            "MULTIPOLYGON (((-136.34518219919187 -45.444057174306' 100.08107983924452 0.029396673640468753' -12.771444237628261 0.029396673640468753' -136.34518219919187 -45.444057174306)' (-136.34518219919187 -59.574853846584816' -6.6232329320655019 -12.718185214660565' 93.93286853368177 -12.718185214660565' -136.34518219919187 -59.574853846584816)))"'" is 343.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Basic_skip_limit,The length of the statement  "FROM ( SELECT [Extent1].[Id] AS [Id]' [Extent1].[Address] AS [Address]' row_number() OVER (ORDER BY [Extent1].[Id] DESC) AS [row_number]" is 136.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_group_by,The length of the statement  "FROM ( SELECT [Project2].[FirstName] AS [FirstName]' [Project2].[C1] AS [C1]' row_number() OVER (ORDER BY [Project2].[FirstName] DESC) AS [row_number]" is 150.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_no_limit_with_inheritance,The length of the statement  "FROM ( SELECT [Extent1].[Id] AS [Id]' [Extent1].[Address] AS [Address]' row_number() OVER (ORDER BY [Extent1].[Id] DESC) AS [row_number]" is 136.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_distinct,The length of the statement  "FROM ( SELECT [Distinct1].[FirstName] AS [FirstName]' [Distinct1].[C1] AS [C1]' row_number() OVER (ORDER BY [Distinct1].[FirstName] ASC) AS [row_number]" is 152.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Multiple_sort_keys,The length of the statement  "FROM ( SELECT [Extent1].[Id] AS [Id]' [Extent1].[FirstName] AS [FirstName]' [Extent1].[LastName] AS [LastName]' row_number() OVER (ORDER BY [Extent1].[FirstName] ASC' [Extent1].[LastName] DESC) AS [row_number]" is 209.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Intersect_with_split_limit,The length of the statement  "	FROM ( SELECT [Project1].[Id] AS [Id]' [Project1].[Alias] AS [Alias]' [Project1].[C1] AS [C1]' row_number() OVER (ORDER BY [Project1].[Id] DESC' [Project1].[Alias] DESC) AS [row_number]" is 185.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Intersect_with_split_limit,The length of the statement  "	FROM ( SELECT [Project3].[Id] AS [Id]' [Project3].[Alias] AS [Alias]' [Project3].[C1] AS [C1]' row_number() OVER (ORDER BY [Project3].[Id] ASC' [Project3].[Alias] ASC) AS [row_number]" is 183.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Complicated_order_by,The length of the statement  "FROM ( SELECT [Project1].[C1] AS [C1]' [Project1].[Id] AS [Id]' [Project1].[C2] AS [C2]' row_number() OVER (ORDER BY [Project1].[C1] ASC) AS [row_number]" is 153.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_over_skip_limit_intersect,The length of the statement  "FROM ( SELECT [Intersect1].[C1] AS [C1]' [Intersect1].[Id] AS [Id]' [Intersect1].[Alias] AS [Alias]' row_number() OVER (ORDER BY [Intersect1].[Id] ASC) AS [row_number]" is 167.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_over_skip_limit_intersect,The length of the statement  "		FROM ( SELECT [Project1].[Id] AS [Id]' [Project1].[Alias] AS [Alias]' [Project1].[C1] AS [C1]' row_number() OVER (ORDER BY [Project1].[Id] DESC' [Project1].[Alias] DESC) AS [row_number]" is 185.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_over_skip_limit_intersect,The length of the statement  "		FROM ( SELECT [Project3].[Id] AS [Id]' [Project3].[Alias] AS [Alias]' [Project3].[C1] AS [C1]' row_number() OVER (ORDER BY [Project3].[Id] ASC' [Project3].[Alias] ASC) AS [row_number]" is 183.
Long Statement,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_with_nulls,The length of the statement  "FROM ( SELECT [Project5].[C1] AS [C1]' [Project5].[C2] AS [C2]' row_number() OVER (ORDER BY [Project5].[C1] ASC) AS [row_number]" is 128.
Long Statement,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The length of the statement  "            modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c13_varchar_512_).HasMaxLength(512).IsVariableLength().IsUnicode(false);" is 125.
Long Statement,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The length of the statement  "            modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c19_nvarchar_512_).HasMaxLength(512).IsVariableLength().IsUnicode(true);" is 125.
Long Statement,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The length of the statement  "            modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c24_varchar_max_).IsMaxLength().IsVariableLength().IsUnicode(false);" is 121.
Long Statement,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The length of the statement  "            modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c25_nvarchar_max_).IsMaxLength().IsVariableLength().IsUnicode(true);" is 121.
Long Statement,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The length of the statement  "                        c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'" is 160.
Long Statement,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The length of the statement  "                        c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'" is 144.
Long Statement,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeContext.cs,OnModelCreating,The length of the statement  "            modelBuilder.Entity<ArubaAllCeTypes>().Property(p => p.c19_nvarchar_512_).HasMaxLength(512).IsVariableLength().IsUnicode(true);" is 127.
Long Statement,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeContext.cs,OnModelCreating,The length of the statement  "            modelBuilder.Entity<ArubaAllCeTypes>().Property(p => p.c20_nchar_512_).HasMaxLength(512).IsFixedLength().IsUnicode(true);" is 121.
Long Statement,System.Data.Entity.ViewGeneration,PregenContextViews,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ViewGeneration\PregenContextViews.cs,GetView0,The length of the statement  "            return new System.Collections.Generic.KeyValuePair<string' string>("CodeFirstDatabase.PregenBlog"' "\r\n    SELECT VALUE -- Constructing PregenBlog\r\n        [CodeFirstDatabaseSchema.P" + " is 188.
Long Statement,System.Data.Entity.WrappingProvider,WrappingAdoNetProvider<TBase>,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\WrappingProvider\WrappingAdoNetProvider.cs,WrapProviders,The length of the statement  "            MutableResolver.AddResolver<DbProviderServices>(k => WrappingEfProvider<SqlClientFactory' SqlProviderServices>.Instance); " is 121.
Long Statement,System.Data.Entity.WrappingProvider,WrappingEfProvider<TAdoNetBase;TEfBase>,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\WrappingProvider\WrappingEfProvider.cs,CreateDbCommandDefinition,The length of the statement  "            return new WrappingCommandDefinition<TAdoNetBase>(_baseServices.CreateCommandDefinition(providerManifest' commandTree)); " is 120.
Long Statement,System.Data.Entity.WrappingProvider,WrappingEfProvider<TAdoNetBase;TEfBase>,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\WrappingProvider\WrappingEfProvider.cs,DbCreateDatabase,The length of the statement  "            _baseServices.CreateDatabase(((WrappingConnection<TAdoNetBase>)connection).BaseConnection' commandTimeout' storeItemCollection); " is 128.
Long Statement,System.Data.Entity.WrappingProvider,WrappingEfProvider<TAdoNetBase;TEfBase>,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\WrappingProvider\WrappingEfProvider.cs,DbDeleteDatabase,The length of the statement  "            _baseServices.DeleteDatabase(((WrappingConnection<TAdoNetBase>)connection).BaseConnection' commandTimeout' storeItemCollection); " is 128.
Long Statement,System.Data.Entity.WrappingProvider,WrappingProviderTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\WrappingProvider\WrappingProviderTests.cs,Wrapping_provider_can_be_found_using_net40_style_table_lookup_even_after_first_asking_for_non_wrapped_provider,The length of the statement  "                        typeof(DbContext).Assembly.GetTypes().Single(t => t.Name == "Net40DefaultDbProviderFactoryService")' nonPublic: true))); " is 120.
Long Statement,System.Data.Entity.WrappingProvider,WrappingProviderTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\WrappingProvider\WrappingProviderTests.cs,Correct_services_are_returned_when_setup_by_replacing_ADO_NET_provider,The length of the statement  "            MutableResolver.AddResolver<DbProviderServices>(k => WrappingEfProvider<SqlClientFactory' SqlProviderServices>.Instance); " is 121.
Long Statement,System.Data.Entity.WrappingProvider,WrappingProviderTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\WrappingProvider\WrappingProviderTests.cs,Simple_query_and_update_works_with_wrapping_provider_setup_by_replacing_ADO_NET_provider,The length of the statement  "            MutableResolver.AddResolver<DbProviderServices>(k => WrappingEfProvider<SqlClientFactory' SqlProviderServices>.Instance); " is 121.
Long Statement,System.Data.Entity.SqlServer,SqlProviderServicesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\SqlClient\SqlProviderServicesTests.cs,DatabaseExists_uses_ExecutionStrategy,The length of the statement  "            MutableResolver.AddResolver<Func<IExecutionStrategy>>(key => (Func<IExecutionStrategy>)(() => executionStrategyMock.Object)); " is 125.
Long Statement,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,VerifyValidationResults,The length of the statement  "                    // is not provided type name is being used. Note that this is not true in case of results returned IValidatableObject.Validate(). " is 129.
Virtual Method Call from Constructor,System.Data.Entity.Objects,TransactionFixture,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,TransactionFixture,The constructor "TransactionFixture" calls a virtual method "Entity".
Virtual Method Call from Constructor,System.Data.Entity.Objects,TransactionFixture,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,TransactionFixture,The constructor "TransactionFixture" calls a virtual method "HasDefaultSchema".
Virtual Method Call from Constructor,System.Data.Entity.Objects,TransactionFixture,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,TransactionFixture,The constructor "TransactionFixture" calls a virtual method "HasDefaultSchema".
Virtual Method Call from Constructor,System.Data.Entity.Objects,TransactionFixture,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,TransactionFixture,The constructor "TransactionFixture" calls a virtual method "Entity".
Virtual Method Call from Constructor,System.Data.Entity.Objects,TransactionFixture,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,TransactionFixture,The constructor "TransactionFixture" calls a virtual method "Insert".
Virtual Method Call from Constructor,System.Data.Entity.Objects,TransactionFixture,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,TransactionFixture,The constructor "TransactionFixture" calls a virtual method "Build".
Virtual Method Call from Constructor,LazyUnicorns,LazyBlogContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ExtraLazyLoading\lazyblogcontext.cs,LazyBlogContext,The constructor "LazyBlogContext" calls a virtual method "InitializeCollections".
Empty Catch Block,System.Data.Entity.Migrations,TransactionScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\TransactionScenarios.cs,Update_when_error_should_be_transactional,The method has an empty catch block.
Empty Catch Block,System.Data.Entity.Migrations,TransactionScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\TransactionScenarios.cs,Update_when_error_should_be_transactional,The method has an empty catch block.
Empty Catch Block,CodeFirstTest,DbModelTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbModelTests.cs,Model_creation_failure_due_to_a_bad_connection_does_not_preclude_model_creation_with_retry,The method has an empty catch block.
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_queried,The following statement contains a magic number: Assert.Equal(16' one.Info.Image.Length);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_queried,The following statement contains a magic number: Assert.Equal(747' two.Id);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_updated_and_inserted,The following statement contains a magic number: one.Info.SetImage(new byte[32]);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_updated_and_inserted,The following statement contains a magic number: one.SetColRel(                      new List<ActualEntity2>                          {                              one.ColRel.Single()'                              new ActualEntity2(748' "Slash Dot Dash"' AnEnum.Beat' 0' null)                          });
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_updated_and_inserted,The following statement contains a magic number: Assert.Equal(new[] { 747' 748 }' twos.Select(t => t.Id).OrderBy(n => n));
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_updated_and_inserted,The following statement contains a magic number: Assert.Equal(new[] { 747' 748 }' twos.Select(t => t.Id).OrderBy(n => n));
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_updated_and_inserted,The following statement contains a magic number: Assert.Equal(32' one.Info.Image.Length);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_obtained_with_Find,The following statement contains a magic number: var two = context.Twos.Find(747);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_obtained_with_Find,The following statement contains a magic number: Assert.Equal(747' two.Id);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_obtained_with_Find,The following statement contains a magic number: Assert.Same(two' context.Twos.Find(747));
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_lazy_loaded_by_collection,The following statement contains a magic number: Assert.Equal(747' two.Id);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_explicitly_loaded_by_collection,The following statement contains a magic number: Assert.Equal(747' two.Id);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: imageProperty.CurrentValue = new byte[8];
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: imageProperty.OriginalValue = new byte[24];
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: Assert.Equal(8' one.Info.Image.Length);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: Assert.Equal(8' imageProperty.CurrentValue.Length);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: Assert.Equal(24' imageProperty.OriginalValue.Length);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: var newCol = new List<ActualEntity2>                      {                          new ActualEntity2(748' "Slash Dot Dash"' AnEnum.Beat' 0' null)                      };
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: var newRef = new ActualEntity1(0' "Slash Dot Dash"' AnEnum.Beat' new ActualComplex(new byte[10])' null);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: fkProperty.CurrentValue = 678;
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: fkProperty.OriginalValue = 789;
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: Assert.Equal(678' two.RefRelId);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: Assert.Equal(678' fkProperty.CurrentValue);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_manipulated,The following statement contains a magic number: Assert.Equal(789' fkProperty.OriginalValue);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_queried_to_non_entity_type,The following statement contains a magic number: Assert.Equal(747' non.Id);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_queried_with_no_set_raw_SQL,The following statement contains a magic number: Assert.Equal(747' two.Id);
Magic Number,System.Data.Entity.CodeFirst,NonPublicPropertyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Entities_with_unmapped_base_class_with_private_property_setters_can_be_queried_with_set_raw_SQL,The following statement contains a magic number: Assert.Equal(747' two.Id);
Magic Number,System.Data.Entity.CodeFirst,PrivacyInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Seed,The following statement contains a magic number: context.Ones.Add(                      new ActualEntity1(                          1' "Right Here' Right Now"' AnEnum.Beat' new ActualComplex(new byte[16])' new List<ActualEntity2>                              {                                  new ActualEntity2(747' "Sunset"' AnEnum.Beat' 1' null)                              }));
Magic Number,System.Data.Entity.CodeFirst,PrivacyInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\CodeFirst\NonPublicPropertyTests.cs,Seed,The following statement contains a magic number: context.Ones.Add(                      new ActualEntity1(                          1' "Right Here' Right Now"' AnEnum.Beat' new ActualComplex(new byte[16])' new List<ActualEntity2>                              {                                  new ActualEntity2(747' "Sunset"' AnEnum.Beat' 1' null)                              }));
Magic Number,System.Data.Entity.Migrations,NonEdmElementsProcedureMigration,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\CreateStoredProcedureScenarios.cs,Up,The following statement contains a magic number: CreateStoredProcedure(                      "TestA"'                      p => new                               {                                   id = p.Int(defaultValue: 23)'                                   name = p.Decimal(defaultValueSql: "123.4")'                                   out_param = p.String(outParameter: true' name: "_out_param")                               }'                      body: "RETURN");
Magic Number,System.Data.Entity.Migrations,InitializerScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\InitializerScenarios.cs,Creating_database_using_initializer_does_nothing_if_Migrations_configuration_if_available,The following statement contains a magic number: Assert.Equal(2' migrations.Count);
Magic Number,System.Data.Entity.Migrations,AddColumnScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddColumnScenarios.cs,Can_add_non_nullable_columns_and_valid_defaults_generated_when_existing_data_in_table,The following statement contains a magic number: WhenSqlCe(                  () =>                      {                          addNonNullableColumnsWithNoDefaults.GetOperations().RemoveAt(13);                          addNonNullableColumnsWithNoDefaults.GetOperations().RemoveAt(4);                      });
Magic Number,System.Data.Entity.Migrations,AddColumnScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddColumnScenarios.cs,Can_add_non_nullable_columns_and_valid_defaults_generated_when_existing_data_in_table,The following statement contains a magic number: WhenSqlCe(                  () =>                      {                          addNonNullableColumnsWithNoDefaults.GetOperations().RemoveAt(13);                          addNonNullableColumnsWithNoDefaults.GetOperations().RemoveAt(4);                      });
Magic Number,System.Data.Entity.Migrations,AddForeignKeyScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddForeignKeyScenarios.cs,Can_add_composite_foreign_key_constraint,The following statement contains a magic number: Assert.Equal(2' foreignKey.KeyColumnUsages.Count());
Magic Number,System.Data.Entity.Migrations,AddForeignKeyScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddForeignKeyScenarios.cs,Can_add_composite_foreign_key_constraint,The following statement contains a magic number: Assert.True(                  foreignKey.KeyColumnUsages.Any(kcu => kcu.Position == 2 && kcu.ColumnTableName == "OrderLines" && kcu.ColumnName == "Sku"));
Magic Number,System.Data.Entity.Migrations,AddForeignKeyScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddForeignKeyScenarios.cs,Can_add_composite_foreign_key_constraint,The following statement contains a magic number: Assert.Equal(2' foreignKey.UniqueConstraint.KeyColumnUsages.Count());
Magic Number,System.Data.Entity.Migrations,AddForeignKeyScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddForeignKeyScenarios.cs,Can_add_composite_foreign_key_constraint,The following statement contains a magic number: Assert.True(                  foreignKey.UniqueConstraint.KeyColumnUsages.Any(                      kcu => kcu.Position == 2 && kcu.ColumnTableName == "MigrationsProducts" && kcu.ColumnName == "Sku"));
Magic Number,System.Data.Entity.Migrations,AddForeignKeyScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddForeignKeyScenarios.cs,Can_add_composite_foreign_key_constraint_when_principal_columns_not_specified,The following statement contains a magic number: Assert.Equal(2' foreignKey.KeyColumnUsages.Count());
Magic Number,System.Data.Entity.Migrations,AddForeignKeyScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddForeignKeyScenarios.cs,Can_add_composite_foreign_key_constraint_when_principal_columns_not_specified,The following statement contains a magic number: Assert.True(                  foreignKey.KeyColumnUsages.Any(kcu => kcu.Position == 2 && kcu.ColumnTableName == "OrderLines" && kcu.ColumnName == "Sku"));
Magic Number,System.Data.Entity.Migrations,AddForeignKeyScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddForeignKeyScenarios.cs,Can_add_composite_foreign_key_constraint_when_principal_columns_not_specified,The following statement contains a magic number: Assert.Equal(2' foreignKey.UniqueConstraint.KeyColumnUsages.Count());
Magic Number,System.Data.Entity.Migrations,AddForeignKeyScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AddForeignKeyScenarios.cs,Can_add_composite_foreign_key_constraint_when_principal_columns_not_specified,The following statement contains a magic number: Assert.True(                  foreignKey.UniqueConstraint.KeyColumnUsages.Any(                      kcu => kcu.Position == 2 && kcu.ColumnTableName == "MigrationsProducts" && kcu.ColumnName == "Sku"));
Magic Number,System.Data.Entity.Migrations,V1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<MigrationsStore>().Property(s => s.Name).IsRequired().HasMaxLength(128);
Magic Number,System.Data.Entity.Migrations,V1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<MigrationsStore>().Property(s => s.Name).HasMaxLength(256);
Magic Number,System.Data.Entity.Migrations,V1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<MigrationsStore>().Property(s => s.Name).HasMaxLength(256);
Magic Number,System.Data.Entity.Migrations,V1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<OrderLine>().Property(ol => ol.Price).HasPrecision(9' 0);
Magic Number,System.Data.Entity.Migrations,V1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<OrderLine>().Property(ol => ol.Price).HasPrecision(18' 0);
Magic Number,System.Data.Entity.Migrations,V2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<MigrationsStore>().Property(s => s.Name).HasMaxLength(512);
Magic Number,System.Data.Entity.Migrations,V2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<OrderLine>().Property(ol => ol.Price).HasPrecision(18' 0);
Magic Number,System.Data.Entity.Migrations,V2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<OrderLine>().Property(ol => ol.Price).HasPrecision(18' 2);
Magic Number,System.Data.Entity.Migrations,V2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<OrderLine>().Property(ol => ol.Price).HasPrecision(18' 2);
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AddTable,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: Assert.Equal(7' createTableOperation.Columns.Count);
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AddTable,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: Assert.Equal(150' addressCityColumn.MaxLength);
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AddTableWithGuidKey,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: Assert.Equal(2' createTableOperation.Columns.Count);
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_RemoveTable,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyDownOperations,The following statement contains a magic number: Assert.Equal(7' createTableOperation.Columns.Count);
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_ChangeTablePrimaryKey,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: Assert.Equal(2' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_ChangeTablePrimaryKey,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyDownOperations,The following statement contains a magic number: Assert.Equal(2' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AddForeignKey,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: Assert.Equal(2' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AddForeignKey,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyDownOperations,The following statement contains a magic number: Assert.Equal(2' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AddPromotedForeignKey,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: Assert.Equal(3' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AddPromotedForeignKey,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyDownOperations,The following statement contains a magic number: Assert.Equal(3' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_RemoveForeignKey,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: Assert.Equal(2' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_RemoveForeignKey,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyDownOperations,The following statement contains a magic number: Assert.Equal(2' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_ChangeForeignKeyOnDeleteAction,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: Assert.Equal(4' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_ChangeForeignKeyOnDeleteAction,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyDownOperations,The following statement contains a magic number: Assert.Equal(4' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AlterSpatialColumnNames,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: Assert.Equal(2' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AlterSpatialColumnNames,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyDownOperations,The following statement contains a magic number: Assert.Equal(2' migrationOperations.Count());
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AlterColumnType<TContextV1;TContextV2>,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: var toTypeName = _columnName.Substring(_columnName.IndexOf("To") + 2);
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AlterColumnType<TContextV1;TContextV2>,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,IsDecimal,The following statement contains a magic number: Assert.True(Byte.TryParse(typeName.Substring(7)' out precision));
Magic Number,System.Data.Entity.Migrations,BaseV1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "Decimal15ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal15ToDouble).HasPrecision(15' 2);                          break;                        case "Decimal6ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToDouble).HasPrecision(6' 2);                          break;                        case "Decimal6ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToSingle).HasPrecision(6' 2);                          break;                        case "Decimal7ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal7ToSingle).HasPrecision(7' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "Decimal15ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal15ToDouble).HasPrecision(15' 2);                          break;                        case "Decimal6ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToDouble).HasPrecision(6' 2);                          break;                        case "Decimal6ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToSingle).HasPrecision(6' 2);                          break;                        case "Decimal7ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal7ToSingle).HasPrecision(7' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "Decimal15ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal15ToDouble).HasPrecision(15' 2);                          break;                        case "Decimal6ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToDouble).HasPrecision(6' 2);                          break;                        case "Decimal6ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToSingle).HasPrecision(6' 2);                          break;                        case "Decimal7ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal7ToSingle).HasPrecision(7' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "Decimal15ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal15ToDouble).HasPrecision(15' 2);                          break;                        case "Decimal6ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToDouble).HasPrecision(6' 2);                          break;                        case "Decimal6ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToSingle).HasPrecision(6' 2);                          break;                        case "Decimal7ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal7ToSingle).HasPrecision(7' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "Decimal15ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal15ToDouble).HasPrecision(15' 2);                          break;                        case "Decimal6ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToDouble).HasPrecision(6' 2);                          break;                        case "Decimal6ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToSingle).HasPrecision(6' 2);                          break;                        case "Decimal7ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal7ToSingle).HasPrecision(7' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "Decimal15ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal15ToDouble).HasPrecision(15' 2);                          break;                        case "Decimal6ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToDouble).HasPrecision(6' 2);                          break;                        case "Decimal6ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToSingle).HasPrecision(6' 2);                          break;                        case "Decimal7ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal7ToSingle).HasPrecision(7' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "Decimal15ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal15ToDouble).HasPrecision(15' 2);                          break;                        case "Decimal6ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToDouble).HasPrecision(6' 2);                          break;                        case "Decimal6ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToSingle).HasPrecision(6' 2);                          break;                        case "Decimal7ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal7ToSingle).HasPrecision(7' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "Decimal15ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal15ToDouble).HasPrecision(15' 2);                          break;                        case "Decimal6ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToDouble).HasPrecision(6' 2);                          break;                        case "Decimal6ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToSingle).HasPrecision(6' 2);                          break;                        case "Decimal7ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal7ToSingle).HasPrecision(7' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "DoubleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.DoubleToDecimal16_v2).HasPrecision(16' 2);                          break;                        case "SingleToDecimal11":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal11_v2).HasPrecision(11' 2);                          break;                        case "SingleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal16_v2).HasPrecision(16' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "DoubleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.DoubleToDecimal16_v2).HasPrecision(16' 2);                          break;                        case "SingleToDecimal11":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal11_v2).HasPrecision(11' 2);                          break;                        case "SingleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal16_v2).HasPrecision(16' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "DoubleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.DoubleToDecimal16_v2).HasPrecision(16' 2);                          break;                        case "SingleToDecimal11":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal11_v2).HasPrecision(11' 2);                          break;                        case "SingleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal16_v2).HasPrecision(16' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "DoubleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.DoubleToDecimal16_v2).HasPrecision(16' 2);                          break;                        case "SingleToDecimal11":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal11_v2).HasPrecision(11' 2);                          break;                        case "SingleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal16_v2).HasPrecision(16' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "DoubleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.DoubleToDecimal16_v2).HasPrecision(16' 2);                          break;                        case "SingleToDecimal11":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal11_v2).HasPrecision(11' 2);                          break;                        case "SingleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal16_v2).HasPrecision(16' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,BaseV2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following statement contains a magic number: switch (_columnName)                  {                      case "DoubleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.DoubleToDecimal16_v2).HasPrecision(16' 2);                          break;                        case "SingleToDecimal11":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal11_v2).HasPrecision(11' 2);                          break;                        case "SingleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal16_v2).HasPrecision(16' 2);                          break;                  }
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AlterColumnMaxLength<TContextV1;TContextV2>,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyDownOperations,The following statement contains a magic number: Assert.Equal(256' alterColumnOperation.Column.MaxLength);
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AlterColumnPrecision,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: Assert.Equal((byte?)18' alterColumnOperation.Column.Precision);
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AlterColumnPrecision,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyDownOperations,The following statement contains a magic number: Assert.Equal((byte?)9' alterColumnOperation.Column.Precision);
Magic Number,System.Data.Entity.Migrations,AutoAndGenerateScenarios_AlterColumnScale,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,VerifyUpOperations,The following statement contains a magic number: Assert.Equal((byte?)2' alterColumnOperation.Column.Scale);
Magic Number,System.Data.Entity.Migrations,CreateTableScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\CreateTableScenarios.cs,Can_create_oob_table_with_inline_fk,The following statement contains a magic number: Assert.Equal(2' dependentTable.Columns.Count());
Magic Number,System.Data.Entity.Migrations,DefaultValuesMigration,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\DefaultValueScenarios.cs,Up,The following statement contains a magic number: CreateTable(                      "DefaultValues"'                      c => new                               {                                   Binary = c.Binary(defaultValue: new byte[] { })'                                   Boolean = c.Boolean(defaultValue: true)'                                   Byte = c.Byte(defaultValue: 42)'                                   DateTime = c.DateTime(defaultValue: new DateTime())'                                   DateTimeOffset = c.DateTimeOffset(defaultValue: new DateTimeOffset())'                                   Decimal = c.Decimal(defaultValue: 42.23m)'                                   Double = c.Double(defaultValue: 123.45)'                                   Guid = c.Guid(defaultValue: new Guid())'                                   Int = c.Int(defaultValue: 0)'                                   Long = c.Long(defaultValue: 3456789)'                                   Short = c.Short(defaultValue: 256)'                                   Single = c.Single(defaultValue: 234.999f)'                                   String = c.String(defaultValue: string.Empty)'                                   Time = c.Time(defaultValue: TimeSpan.Zero)                               });
Magic Number,System.Data.Entity.Migrations,DefaultValuesMigration,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\DefaultValueScenarios.cs,Up,The following statement contains a magic number: CreateTable(                      "DefaultValues"'                      c => new                               {                                   Binary = c.Binary(defaultValue: new byte[] { })'                                   Boolean = c.Boolean(defaultValue: true)'                                   Byte = c.Byte(defaultValue: 42)'                                   DateTime = c.DateTime(defaultValue: new DateTime())'                                   DateTimeOffset = c.DateTimeOffset(defaultValue: new DateTimeOffset())'                                   Decimal = c.Decimal(defaultValue: 42.23m)'                                   Double = c.Double(defaultValue: 123.45)'                                   Guid = c.Guid(defaultValue: new Guid())'                                   Int = c.Int(defaultValue: 0)'                                   Long = c.Long(defaultValue: 3456789)'                                   Short = c.Short(defaultValue: 256)'                                   Single = c.Single(defaultValue: 234.999f)'                                   String = c.String(defaultValue: string.Empty)'                                   Time = c.Time(defaultValue: TimeSpan.Zero)                               });
Magic Number,System.Data.Entity.Migrations,DefaultValuesMigration,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\DefaultValueScenarios.cs,Up,The following statement contains a magic number: CreateTable(                      "DefaultValues"'                      c => new                               {                                   Binary = c.Binary(defaultValue: new byte[] { })'                                   Boolean = c.Boolean(defaultValue: true)'                                   Byte = c.Byte(defaultValue: 42)'                                   DateTime = c.DateTime(defaultValue: new DateTime())'                                   DateTimeOffset = c.DateTimeOffset(defaultValue: new DateTimeOffset())'                                   Decimal = c.Decimal(defaultValue: 42.23m)'                                   Double = c.Double(defaultValue: 123.45)'                                   Guid = c.Guid(defaultValue: new Guid())'                                   Int = c.Int(defaultValue: 0)'                                   Long = c.Long(defaultValue: 3456789)'                                   Short = c.Short(defaultValue: 256)'                                   Single = c.Single(defaultValue: 234.999f)'                                   String = c.String(defaultValue: string.Empty)'                                   Time = c.Time(defaultValue: TimeSpan.Zero)                               });
Magic Number,System.Data.Entity.Migrations,DefaultValuesMigration,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\DefaultValueScenarios.cs,Up,The following statement contains a magic number: CreateTable(                      "DefaultValues"'                      c => new                               {                                   Binary = c.Binary(defaultValue: new byte[] { })'                                   Boolean = c.Boolean(defaultValue: true)'                                   Byte = c.Byte(defaultValue: 42)'                                   DateTime = c.DateTime(defaultValue: new DateTime())'                                   DateTimeOffset = c.DateTimeOffset(defaultValue: new DateTimeOffset())'                                   Decimal = c.Decimal(defaultValue: 42.23m)'                                   Double = c.Double(defaultValue: 123.45)'                                   Guid = c.Guid(defaultValue: new Guid())'                                   Int = c.Int(defaultValue: 0)'                                   Long = c.Long(defaultValue: 3456789)'                                   Short = c.Short(defaultValue: 256)'                                   Single = c.Single(defaultValue: 234.999f)'                                   String = c.String(defaultValue: string.Empty)'                                   Time = c.Time(defaultValue: TimeSpan.Zero)                               });
Magic Number,System.Data.Entity.Migrations,DefaultValuesMigration,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\DefaultValueScenarios.cs,Up,The following statement contains a magic number: CreateTable(                      "DefaultValues"'                      c => new                               {                                   Binary = c.Binary(defaultValue: new byte[] { })'                                   Boolean = c.Boolean(defaultValue: true)'                                   Byte = c.Byte(defaultValue: 42)'                                   DateTime = c.DateTime(defaultValue: new DateTime())'                                   DateTimeOffset = c.DateTimeOffset(defaultValue: new DateTimeOffset())'                                   Decimal = c.Decimal(defaultValue: 42.23m)'                                   Double = c.Double(defaultValue: 123.45)'                                   Guid = c.Guid(defaultValue: new Guid())'                                   Int = c.Int(defaultValue: 0)'                                   Long = c.Long(defaultValue: 3456789)'                                   Short = c.Short(defaultValue: 256)'                                   Single = c.Single(defaultValue: 234.999f)'                                   String = c.String(defaultValue: string.Empty)'                                   Time = c.Time(defaultValue: TimeSpan.Zero)                               });
Magic Number,System.Data.Entity.Migrations,DefaultValuesMigration,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\DefaultValueScenarios.cs,Up,The following statement contains a magic number: CreateTable(                      "DefaultValues"'                      c => new                               {                                   Binary = c.Binary(defaultValue: new byte[] { })'                                   Boolean = c.Boolean(defaultValue: true)'                                   Byte = c.Byte(defaultValue: 42)'                                   DateTime = c.DateTime(defaultValue: new DateTime())'                                   DateTimeOffset = c.DateTimeOffset(defaultValue: new DateTimeOffset())'                                   Decimal = c.Decimal(defaultValue: 42.23m)'                                   Double = c.Double(defaultValue: 123.45)'                                   Guid = c.Guid(defaultValue: new Guid())'                                   Int = c.Int(defaultValue: 0)'                                   Long = c.Long(defaultValue: 3456789)'                                   Short = c.Short(defaultValue: 256)'                                   Single = c.Single(defaultValue: 234.999f)'                                   String = c.String(defaultValue: string.Empty)'                                   Time = c.Time(defaultValue: TimeSpan.Zero)                               });
Magic Number,System.Data.Entity.Migrations,SeedingMigrationsConfiguration,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\SeedingScenarios.cs,Seed,The following statement contains a magic number: context.Products.Add(                      new MigrationsProduct                          {                              Name = "Foomatic 1000"'                              ProductId = 123'                              Sku = "BAR123"                          });
Magic Number,System.Data.Entity.Migrations,ToolingScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\ToolingScenarios.cs,Can_scaffold_initial_create,The following statement contains a magic number: Assert.True(scaffoldedMigration.DesignerCode.Length > 500);
Magic Number,System.Data.Entity.Migrations,ToolingScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\ToolingScenarios.cs,Can_scaffold_initial_create,The following statement contains a magic number: Assert.True(scaffoldedMigration.UserCode.Length > 500);
Magic Number,System.Data.Entity.Migrations,ToolingScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\ToolingScenarios.cs,Can_scaffold_empty,The following statement contains a magic number: Assert.True(scaffoldedMigration.DesignerCode.Length > 500);
Magic Number,System.Data.Entity.Migrations,ToolingScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\ToolingScenarios.cs,Can_scaffold_empty,The following statement contains a magic number: Assert.True(scaffoldedMigration.UserCode.Length < 300);
Magic Number,System.Data.Entity.Migrations,ToolingScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\ToolingScenarios.cs,Can_scaffold,The following statement contains a magic number: Assert.True(scaffoldedMigration.DesignerCode.Length > 500);
Magic Number,System.Data.Entity.Migrations,ToolingScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\ToolingScenarios.cs,Can_scaffold,The following statement contains a magic number: Assert.True(scaffoldedMigration.UserCode.Length > 500);
Magic Number,System.Data.Entity.Migrations,ToolingScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\ToolingScenarios.cs,Can_scaffold_vb,The following statement contains a magic number: Assert.True(scaffoldedMigration.DesignerCode.Length > 500);
Magic Number,System.Data.Entity.Migrations,ToolingScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\ToolingScenarios.cs,Can_scaffold_vb,The following statement contains a magic number: Assert.True(scaffoldedMigration.UserCode.Length > 500);
Magic Number,System.Data.Entity.Interception,CommandInterceptionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Interception\CommandInterceptionTests.cs,Multiple_contexts_running_concurrently_can_use_interception,The following statement contains a magic number: const int executionCount = 5;
Magic Number,System.Data.Entity.Interception,CommandTreeInterceptionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Interception\CommandTreeInterceptionTests.cs,Multiple_contexts_running_concurrently_can_log_command_trees_except_trees_for_cached_queries,The following statement contains a magic number: Assert.Equal(5' logger.Log.Count);
Magic Number,System.Data.Entity.Interception,CommandTreeInterceptionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Interception\CommandTreeInterceptionTests.cs,Multiple_contexts_running_concurrently_can_log_command_trees_except_trees_for_cached_queries,The following statement contains a magic number: const int executionCount = 5;
Magic Number,System.Data.Entity.Interception,CommandTreeInterceptionTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Interception\CommandTreeInterceptionTests.cs,Multiple_contexts_running_concurrently_can_log_command_trees_except_trees_for_cached_queries,The following statement contains a magic number: Assert.Equal(2' logger.Log.Count);
Magic Number,System.Data.Entity.Objects,TransactionsTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,Verify_SaveChanges_commits_when_using_UseTransaction_with_open_external_connection,The following statement contains a magic number: Assert.Equal(2' CountLogEntriesUsingAdoNet(sqlConnection));
Magic Number,System.Data.Entity.Objects,TransactionsTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,Verify_can_commit_a_transaction_and_still_use_connection_without_transaction_afterwards,The following statement contains a magic number: Assert.Equal(2' LogEntriesCount());
Magic Number,System.Data.Entity.Objects,TransactionsTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,Verify_only_one_transaction_created_when_user_creates_transaction_using_TransactionScope_and_connection_created_outside_transaction_scope_and_is_closed_plus_AdoNet_calls_and_transaction_is_completed,The following statement contains a magic number: Assert.Equal(2' transactionCountEntries.Count());
Magic Number,System.Data.Entity.Objects,TransactionsTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,Verify_using_TransactionScope_with_DbTransaction_results_in_nested_transaction_and_implicit_transaction_not_created,The following statement contains a magic number: Assert.Equal(2' transactionLogEntry.TransactionCount);
Magic Number,System.Data.Entity.Objects,TransactionsTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\TransactionsTests.cs,Verify_using_CommittableTransaction_with_DbTransaction_results_in_nested_transaction_and_implicit_transaction_not_created,The following statement contains a magic number: Assert.Equal(2' transactionLogEntry.TransactionCount);
Magic Number,System.Data.Entity.Objects,LazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\LazyLoadingTests.cs,Lazy_loading_does_not_occur_in_the_middle_of_materialization,The following statement contains a magic number: var teams = context.Teams.OrderBy(t => t.Id).Take(10);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Change_tracking_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: proxy.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Change_tracking_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: proxy.MeComplexTypeS.Number = 88;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Change_tracking_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Change_tracking_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: proxy.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: proxy.MeComplexTypeS.Number = 88;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Change_tracking_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: proxy.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Change_tracking_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: proxy.MeComplexTypeS.Number = 88;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Change_tracking_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Change_tracking_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: proxy.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: proxy.MeComplexTypeS.Number = 88;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_known_types_when_running_under_full_trust,The following statement contains a magic number: proxy.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_known_types_when_running_under_full_trust,The following statement contains a magic number: proxy.MeComplexTypeS.Number = 88;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_known_types_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_known_types_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_binary_serialized_when_running_under_full_trust,The following statement contains a magic number: proxy.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_binary_serialized_when_running_under_full_trust,The following statement contains a magic number: proxy.MeComplexTypeS.Number = 88;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_binary_serialized_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_binary_serialized_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_binary_serialized_with_non_existent_enum_values,The following statement contains a magic number: proxy.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_binary_serialized_with_non_existent_enum_values,The following statement contains a magic number: proxy.Enum = (MeSimpleEntitiesS.EnumType) 7;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_binary_serialized_with_non_existent_enum_values,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_binary_serialized_with_non_existent_enum_values,The following statement contains a magic number: Assert.Equal((MeSimpleEntitiesS.EnumType)7' deserialized.Enum);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: proxy.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: proxy.MeComplexTypeS.Number = 88;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Simple_entities_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_change_tracking_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_change_tracking_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_lazy_loading_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_lazy_loading_proxy_can_be_binary_deserialized_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_change_tracking_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_change_tracking_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_lazy_loading_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_lazy_loading_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_lazy_loading_proxy_can_be_data_contract_deserialized_with_known_types_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Stored_lazy_loading_proxy_can_be_data_contract_deserialized_with_known_types_when_running_under_full_trust,The following statement contains a magic number: Assert.Equal(88' deserialized.MeComplexTypeS.Number);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_preserves_related_entities_deserialized_with_data_contract_deserializer,The following statement contains a magic number: proxy.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_preserves_related_entities_deserialized_with_data_contract_deserializer,The following statement contains a magic number: otherProxy.Id = 99;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_preserves_related_entities_deserialized_with_data_contract_deserializer,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_preserves_related_entities_deserialized_with_data_contract_deserializer,The following statement contains a magic number: Assert.Equal(99' deserialized.MeTrackChanges.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_preserves_related_entities_deserialized_with_binary_deserializer,The following statement contains a magic number: proxy.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_preserves_related_entities_deserialized_with_binary_deserializer,The following statement contains a magic number: otherProxy.Id = 99;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_preserves_related_entities_deserialized_with_binary_deserializer,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_preserves_related_entities_deserialized_with_binary_deserializer,The following statement contains a magic number: Assert.Equal(99' deserialized.MeTrackChanges.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_proxies_containing_ICollections_and_cycles,The following statement contains a magic number: proxy.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_proxies_containing_ICollections_and_cycles,The following statement contains a magic number: otherProxy.Id = 99;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_proxies_containing_ICollections_and_cycles,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_proxies_containing_ICollections_and_cycles,The following statement contains a magic number: Assert.Equal(99' meLazyLoadS.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle,The following statement contains a magic number: var children = new MeSimpleEntitiesS[2];
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle,The following statement contains a magic number: childProxy1.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle,The following statement contains a magic number: childProxy2.Id = 88;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle,The following statement contains a magic number: parentProxy.Id = 99;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle,The following statement contains a magic number: Assert.Equal(99' deserialized.Parent.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle,The following statement contains a magic number: Assert.Equal(2' deserialized.Parent.Children.Count);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle_with_lazy_loading_diabled,The following statement contains a magic number: var children = new MeSimpleEntitiesS[2];
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle_with_lazy_loading_diabled,The following statement contains a magic number: childProxy1.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle_with_lazy_loading_diabled,The following statement contains a magic number: childProxy2.Id = 88;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle_with_lazy_loading_diabled,The following statement contains a magic number: parentProxy.Id = 99;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle_with_lazy_loading_diabled,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle_with_lazy_loading_diabled,The following statement contains a magic number: Assert.Equal(99' deserialized.Parent.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_simple_entity_cycle_with_lazy_loading_diabled,The following statement contains a magic number: Assert.Equal(2' deserialized.Parent.Children.Count);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle,The following statement contains a magic number: var children = new MeTrackChangesS[2];
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle,The following statement contains a magic number: childProxy1.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle,The following statement contains a magic number: childProxy2.Id = 88;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle,The following statement contains a magic number: parentProxy.Id = 99;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle,The following statement contains a magic number: Assert.Equal(99' deserialized.Parent.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle,The following statement contains a magic number: Assert.Equal(2' deserialized.Parent.Children.Count);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle_and_lazy_loading_disabled,The following statement contains a magic number: var children = new MeTrackChangesS[2];
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle_and_lazy_loading_disabled,The following statement contains a magic number: childProxy1.Id = 77;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle_and_lazy_loading_disabled,The following statement contains a magic number: childProxy2.Id = 88;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle_and_lazy_loading_disabled,The following statement contains a magic number: parentProxy.Id = 99;
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle_and_lazy_loading_disabled,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle_and_lazy_loading_disabled,The following statement contains a magic number: Assert.Equal(99' deserialized.Parent.Id);
Magic Number,System.Data.Entity.Objects,SerializationScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Objects\SerializationScenarios.cs,Graph_serialization_works_with_change_tracking_cycle_and_lazy_loading_disabled,The following statement contains a magic number: Assert.Equal(2' deserialized.Parent.Children.Count);
Magic Number,FunctionalTests.ProductivityApi,DbFunctionScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Bootstrapping_from_DbQuery_with_DbQuery_as_parameter_only_hits_the_database_once,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.Id))' 2);
Magic Number,FunctionalTests.ProductivityApi,DbFunctionScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Bootstrapping_from_DbQuery_with_DbQuery_as_parameter_only_hits_the_database_once,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.Id))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71'                          (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71'                          (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71'                          (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71'                          (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))'                          2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))'                          2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)DbFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))'                          2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.71' (double)DbFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))'                          2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.71' (double)context.WithRelationships.Select(                              e => new                                  {                                      Result = DbFunctions.StandardDeviation(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.71' (double)context.WithRelationships.Select(                              e => new                                  {                                      Result = DbFunctions.StandardDeviation(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.71' (double)GetObjectSet<EntityWithRelationship>(context).Select(                              e => new                                  {                                      Result = DbFunctions.StandardDeviation(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.71' (double)GetObjectSet<EntityWithRelationship>(context).Select(                              e => new                                  {                                      Result = DbFunctions.StandardDeviation(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71' (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71' (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71'                              (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71'                              (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71' (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71' (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71'                              (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71'                              (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71' (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71' (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71'                              (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71'                              (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71' (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71' (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.71' (double)EntityFunctions.StandardDeviation(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71'                              (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.71'                              (double)EntityFunctions.StandardDeviation(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.71' (double)context.WithRelationships.Select(                                  e => new                                      {                                          Result = EntityFunctions.StandardDeviation(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.71' (double)context.WithRelationships.Select(                                  e => new                                      {                                          Result = EntityFunctions.StandardDeviation(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.71' (double)GetObjectSet<EntityWithRelationship>(context).Select(                                  e => new                                      {                                          Result = EntityFunctions.StandardDeviation(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviation,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviation_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.71' (double)GetObjectSet<EntityWithRelationship>(context).Select(                                  e => new                                      {                                          Result = EntityFunctions.StandardDeviation(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5'                          (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5'                          (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5'                          (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5'                          (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))'                          2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))'                          2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))'                          2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.5' (double)DbFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))'                          2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.5' (double)context.WithRelationships.Select(                              e => new                                  {                                      Result = DbFunctions.StandardDeviationP(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.5' (double)context.WithRelationships.Select(                              e => new                                  {                                      Result = DbFunctions.StandardDeviationP(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.5' (double)GetObjectSet<EntityWithRelationship>(context).Select(                              e => new                                  {                                      Result = DbFunctions.StandardDeviationP(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.5' (double)GetObjectSet<EntityWithRelationship>(context).Select(                              e => new                                  {                                      Result = DbFunctions.StandardDeviationP(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5'                              (double)                              EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5'                              (double)                              EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5'                              (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5'                              (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5'                              (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5'                              (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.StandardDeviationP(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5'                              (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5'                              (double)EntityFunctions.StandardDeviationP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))'                              2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.5' (double)context.WithRelationships.Select(                                  e => new                                      {                                          Result = EntityFunctions.StandardDeviationP(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.5' (double)context.WithRelationships.Select(                                  e => new                                      {                                          Result = EntityFunctions.StandardDeviationP(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.5' (double)GetObjectSet<EntityWithRelationship>(context).Select(                                  e => new                                      {                                          Result = EntityFunctions.StandardDeviationP(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StandardDeviationP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,StandardDeviationP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.5' (double)GetObjectSet<EntityWithRelationship>(context).Select(                                  e => new                                      {                                          Result = EntityFunctions.StandardDeviationP(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)DbFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.5' (double)context.WithRelationships.Select(                              e => new                                  {                                      Result = DbFunctions.Var(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.5' (double)context.WithRelationships.Select(                              e => new                                  {                                      Result = DbFunctions.Var(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.5' (double)GetObjectSet<EntityWithRelationship>(context).Select(                              e => new                                  {                                      Result = DbFunctions.Var(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.5' (double)GetObjectSet<EntityWithRelationship>(context).Select(                              e => new                                  {                                      Result = DbFunctions.Var(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.5' (double)EntityFunctions.Var(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.5' (double)EntityFunctions.Var(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.5' (double)context.WithRelationships.Select(                                  e => new                                      {                                          Result = EntityFunctions.Var(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.5' (double)context.WithRelationships.Select(                                  e => new                                      {                                          Result = EntityFunctions.Var(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.5' (double)GetObjectSet<EntityWithRelationship>(context).Select(                                  e => new                                      {                                          Result = EntityFunctions.Var(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,Var,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Var_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.5' (double)GetObjectSet<EntityWithRelationship>(context).Select(                                  e => new                                      {                                          Result = EntityFunctions.Var(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                          0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)DbFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.25' (double)context.WithRelationships.Select(                              e => new                                  {                                      Result = DbFunctions.VarP(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.25' (double)context.WithRelationships.Select(                              e => new                                  {                                      Result = DbFunctions.VarP(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.25' (double)GetObjectSet<EntityWithRelationship>(context).Select(                              e => new                                  {                                      Result = DbFunctions.VarP(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                          0.25' (double)GetObjectSet<EntityWithRelationship>(context).Select(                              e => new                                  {                                      Result = DbFunctions.VarP(e.Types.Select(t => t.Decimal))                                  }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Decimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_decimal_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDecimal))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Double))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_double_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableDouble))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Int))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_int_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableInt))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.Long))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(0.25' (double)EntityFunctions.VarP(context.WithTypes.Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_for_nullable_long_can_be_bootstrapped_from_DbContext_or_ObjectContext,The following statement contains a magic number: Assert.Equal(                              0.25' (double)EntityFunctions.VarP(GetObjectSet<EntityWithTypes>(context).Select(e => e.NullableLong))' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.25' (double)context.WithRelationships.Select(                                  e => new                                      {                                          Result = EntityFunctions.VarP(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.25' (double)context.WithRelationships.Select(                                  e => new                                      {                                          Result = EntityFunctions.VarP(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.25' (double)GetObjectSet<EntityWithRelationship>(context).Select(                                  e => new                                      {                                          Result = EntityFunctions.VarP(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,VarP,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,VarP_can_be_used_on_nested_collection_with_ObjectQuery_or_DbQuery,The following statement contains a magic number: Assert.Equal(                              0.25' (double)GetObjectSet<EntityWithRelationship>(context).Select(                                  e => new                                      {                                          Result = EntityFunctions.VarP(e.Types.Select(t => t.Decimal))                                      }).First().Result' 2);
Magic Number,FunctionalTests.ProductivityApi,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Left_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          "Magic Unic"'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.Left(e.String' 10)).First());
Magic Number,FunctionalTests.ProductivityApi,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Left_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          "Magic Unic"'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(e => DbFunctions.Left(e.String' 10)).First());
Magic Number,FunctionalTests.ProductivityApi,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Right_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          "corns Rock"'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.Right(e.String' 10)).First());
Magic Number,FunctionalTests.ProductivityApi,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Right_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          "corns Rock"'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(e => DbFunctions.Right(e.String' 10)).First());
Magic Number,FunctionalTests.ProductivityApi,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Left_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              "Magic Unic"'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.Left(e.String' 10)).First());
Magic Number,FunctionalTests.ProductivityApi,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Left_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              "Magic Unic"'                              GetObjectSet<EntityWithTypes>(context)                                  .OrderBy(e => e.Id)                                  .Select(e => EntityFunctions.Left(e.String' 10))                                  .First());
Magic Number,FunctionalTests.ProductivityApi,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Right_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              "corns Rock"'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.Right(e.String' 10)).First());
Magic Number,FunctionalTests.ProductivityApi,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Right_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              "corns Rock"'                              GetObjectSet<EntityWithTypes>(context)                                  .OrderBy(e => e.Id)                                  .Select(e => EntityFunctions.Right(e.String' 10))                                  .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,GetTotalOffsetMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          8 * 60'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.GetTotalOffsetMinutes(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,GetTotalOffsetMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          8 * 60'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.GetTotalOffsetMinutes(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,GetTotalOffsetMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          8 * 60'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.GetTotalOffsetMinutes(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,GetTotalOffsetMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          8 * 60'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.GetTotalOffsetMinutes(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(1' 2' 3)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(1' 2' 3)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(1' 2' 3)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(1' 2' 3)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(1' 2' 3)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(1' 2' 3)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(1' 2' 3)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(1' 2' 3)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(5' 1' 0)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddHours(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(5' 1' 0)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddHours(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 2' 0)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 2' 0)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMinutes(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 2' 0)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 2' 0)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMinutes(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 1' 1)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddSeconds(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 1' 1)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddSeconds(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(0' 4' 1' 0' 1)'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMilliseconds(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(0' 4' 1' 0' 1)'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMilliseconds(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          EF41Ticks + 10'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMicroseconds(e.DateTimeOffset' e.Int)).First().                                  Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          EF41Ticks + 10'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMicroseconds(e.DateTimeOffset' e.Int)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          EF41Ticks + 10'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMicroseconds(e.DateTime' e.Int)).First().Value.                                  Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          EF41Ticks + 10'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMicroseconds(e.DateTime' e.Int)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 1' 0).Ticks + 10'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMicroseconds(e.TimeSpan' e.Int)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 1' 0).Ticks + 10'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddMicroseconds(e.TimeSpan' e.Int)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 1' 0).Ticks + 10'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMicroseconds(e.TimeSpan' e.Int)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 1' 0).Ticks + 10'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddMicroseconds(e.TimeSpan' e.Int)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          EF41Ticks + 1'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddNanoseconds(e.DateTimeOffset' e.Int * 100)).                                  First().                                  Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          EF41Ticks + 1'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddNanoseconds(e.DateTimeOffset' e.Int * 100)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          EF41Ticks + 1'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddNanoseconds(e.DateTime' e.Int * 100)).First().                                  Value.                                  Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          EF41Ticks + 1'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddNanoseconds(e.DateTime' e.Int * 100)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 1' 0).Ticks + 1'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddNanoseconds(e.TimeSpan' e.Int * 100)).First().Value.                                  Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 1' 0).Ticks + 1'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.AddNanoseconds(e.TimeSpan' e.Int * 100)).First().Value.                                  Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 1' 0).Ticks + 1'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddNanoseconds(e.TimeSpan' e.Int * 100)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          new TimeSpan(4' 1' 0).Ticks + 1'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.AddNanoseconds(e.TimeSpan' e.Int * 100)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          10'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffMonths(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          10'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMonths(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          10' context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffMonths(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          10'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMonths(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          324'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffDays(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          324'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffDays(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          324' context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffDays(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          324'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffDays(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          7776'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffHours(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          7776'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffHours(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          7776' context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffHours(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          7776'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffHours(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffHours(e.TimeSpan' new TimeSpan(5' 1' 0))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffHours(e.TimeSpan' new TimeSpan(5' 1' 0))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          466562'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffMinutes(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          466562'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMinutes(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          466562'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffMinutes(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          466562'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMinutes(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMinutes(e.TimeSpan' new TimeSpan(4' 2' 0))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMinutes(e.TimeSpan' new TimeSpan(4' 2' 0))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMinutes(e.TimeSpan' new TimeSpan(4' 2' 0))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMinutes(e.TimeSpan' new TimeSpan(4' 2' 0))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          27993721'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffSeconds(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          27993721'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffSeconds(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          27993721'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffSeconds(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          27993721'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffSeconds(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1'                          context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.DiffSeconds(e.TimeSpan' new TimeSpan(4' 1' 1))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffSeconds(e.TimeSpan' new TimeSpan(4' 1' 1))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMilliseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMilliseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMilliseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMilliseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMilliseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMilliseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMilliseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMilliseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMilliseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMilliseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMilliseconds(e.TimeSpan' new TimeSpan(0' 4' 1' 0' 1))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMilliseconds(e.TimeSpan' new TimeSpan(0' 4' 1' 0' 1))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMicroseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMicroseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMicroseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMicroseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMicroseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffMicroseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMicroseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMicroseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMicroseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffMicroseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: var ticks = new TimeSpan(4' 1' 0).Ticks + 10;
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: var ticks = new TimeSpan(4' 1' 0).Ticks + 10;
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000000'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffNanoseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000000'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffNanoseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000000'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffNanoseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000000'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffNanoseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000000'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffNanoseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000000'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e =>                              DbFunctions.DiffNanoseconds(                                  e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000000'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffNanoseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000000'                          context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffNanoseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000000'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffNanoseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100000000'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffNanoseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: var ticks = new TimeSpan(4' 1' 0).Ticks + 1;
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100' context.WithTypes.OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffNanoseconds(e.TimeSpan' new TimeSpan(ticks))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          100' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.DiffNanoseconds(e.TimeSpan' new TimeSpan(ticks))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,GetTotalOffsetMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              8 * 60'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.GetTotalOffsetMinutes(e.DateTimeOffset))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,GetTotalOffsetMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              8 * 60'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.GetTotalOffsetMinutes(e.DateTimeOffset))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,GetTotalOffsetMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              8 * 60'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.GetTotalOffsetMinutes(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,GetTotalOffsetMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              8 * 60'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.GetTotalOffsetMinutes(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.TruncateTime(e.DateTimeOffset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,TruncateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.TruncateTime(e.DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 0' 0' 1' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTime(2011' 4' 11' 0' 0' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateDateTimeOffset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 0' 0' 1' 0' new TimeSpan(0' 1' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateDateTimeOffset(2011' 4' 11' 0' 0' e.Int' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(1' 2' 3)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(1' 2' 3)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(1' 2' 3)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(1' 2' 3)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(1' 2' 3)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(1' 2' 3)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(1' 2' 3)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,CreateTime_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(1' 2' 3)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.CreateTime(e.Int' 2' 3)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2012' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddYears(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddYears_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2012' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddYears(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 5' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMonths(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 5' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMonths(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 12' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddDays(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 12' 4' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddDays(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 5' 1' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddHours(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 5' 1' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddHours(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(5' 1' 0)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddHours(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddHours_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(5' 1' 0)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddHours(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 2' 0' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 2' 0' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 2' 0)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 2' 0)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMinutes(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 2' 0)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 2' 0)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMinutes(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 1' 0' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddSeconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 1' 0' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddSeconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 1' 1)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddSeconds(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddSeconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 1' 1)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddSeconds(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddMilliseconds(e.DateTimeOffset' e.Int))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddMilliseconds(e.DateTimeOffset' e.Int))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddMilliseconds(e.DateTimeOffset' e.Int))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddMilliseconds(e.DateTimeOffset' e.Int))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddMilliseconds(e.DateTimeOffset' e.Int))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTimeOffset(2011' 4' 11' 4' 1' 0' 1' new TimeSpan(8' 0' 0))'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMilliseconds(e.DateTimeOffset' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new DateTime(2011' 4' 11' 4' 1' 0' 1' DateTimeKind.Utc)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMilliseconds(e.DateTime' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(0' 4' 1' 0' 1)'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddMilliseconds(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMilliseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(0' 4' 1' 0' 1)'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMilliseconds(e.TimeSpan' e.Int)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              EF41Ticks + 10'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddMicroseconds(e.DateTimeOffset' e.Int))                                     .First()                                     .                                      Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              EF41Ticks + 10'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMicroseconds(e.DateTimeOffset' e.Int)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              EF41Ticks + 10'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddMicroseconds(e.DateTime' e.Int))                                     .First()                                     .Value.                                      Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              EF41Ticks + 10'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMicroseconds(e.DateTime' e.Int)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 1' 0).Ticks + 10'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddMicroseconds(e.TimeSpan' e.Int))                                     .First()                                     .Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 1' 0).Ticks + 10'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddMicroseconds(e.TimeSpan' e.Int))                                     .First()                                     .Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 1' 0).Ticks + 10'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMicroseconds(e.TimeSpan' e.Int)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 1' 0).Ticks + 10'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddMicroseconds(e.TimeSpan' e.Int)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              EF41Ticks + 1'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.AddNanoseconds(e.DateTimeOffset' e.Int * 100)).                                      First().                                      Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              EF41Ticks + 1'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddNanoseconds(e.DateTimeOffset' e.Int * 100)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              EF41Ticks + 1'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddNanoseconds(e.DateTime' e.Int * 100))                                     .First()                                     .                                      Value.                                      Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              EF41Ticks + 1'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddNanoseconds(e.DateTime' e.Int * 100)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 1' 0).Ticks + 1'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddNanoseconds(e.TimeSpan' e.Int * 100))                                     .First()                                     .Value.                                      Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 1' 0).Ticks + 1'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.AddNanoseconds(e.TimeSpan' e.Int * 100))                                     .First()                                     .Value.                                      Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 1' 0).Ticks + 1'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddNanoseconds(e.TimeSpan' e.Int * 100)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,AddNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              new TimeSpan(4' 1' 0).Ticks + 1'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.AddNanoseconds(e.TimeSpan' e.Int * 100)).First().Value.Ticks);
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              10'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.DiffMonths(e.DateTimeOffset' _ef43Offset))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMonths_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              10'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMonths(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              10'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.DiffMonths(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMonths_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              10'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMonths(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              324'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.DiffDays(e.DateTimeOffset' _ef43Offset))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffDays_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              324'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffDays(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              324'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.DiffDays(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffDays_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              324'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffDays(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              7776'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.DiffHours(e.DateTimeOffset' _ef43Offset))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              7776'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffHours(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              7776'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.DiffHours(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              7776'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffHours(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.DiffHours(e.TimeSpan' new TimeSpan(5' 1' 0)))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffHours_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffHours(e.TimeSpan' new TimeSpan(5' 1' 0))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              466562'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.DiffMinutes(e.DateTimeOffset' _ef43Offset))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              466562'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMinutes(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              466562'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.DiffMinutes(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              466562'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMinutes(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMinutes(e.TimeSpan' new TimeSpan(4' 2' 0))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMinutes(e.TimeSpan' new TimeSpan(4' 2' 0))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMinutes(e.TimeSpan' new TimeSpan(4' 2' 0))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMinutes_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMinutes(e.TimeSpan' new TimeSpan(4' 2' 0))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              27993721'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.DiffSeconds(e.DateTimeOffset' _ef43Offset))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              27993721'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffSeconds(e.DateTimeOffset' _ef43Offset)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              27993721'                              context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.DiffSeconds(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              27993721'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffSeconds(e.DateTime' _ef43DateTime)).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1'                              context.WithTypes.OrderBy(e => e.Id)                                     .Select(e => EntityFunctions.DiffSeconds(e.TimeSpan' new TimeSpan(4' 1' 1)))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffSeconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffSeconds(e.TimeSpan' new TimeSpan(4' 1' 1))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMilliseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMilliseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMilliseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMilliseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMilliseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMilliseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMilliseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMilliseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMilliseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                                                    .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMilliseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                                                    .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMilliseconds(e.TimeSpan' new TimeSpan(0' 4' 1' 0' 1))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMilliseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMilliseconds(e.TimeSpan' new TimeSpan(0' 4' 1' 0' 1))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMicroseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMicroseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMicroseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMicroseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMicroseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffMicroseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMicroseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMicroseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMicroseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                                                    .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffMicroseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                                                    .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: var ticks = new TimeSpan(4' 1' 0).Ticks + 10;
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffMicroseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: var ticks = new TimeSpan(4' 1' 0).Ticks + 10;
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000000'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffNanoseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000000'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffNanoseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000000'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffNanoseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000000'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffNanoseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000000'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffNanoseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_offset_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000000'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e =>                                  EntityFunctions.DiffNanoseconds(                                      e.DateTimeOffset' new DateTimeOffset(EF41Ticks + 1000000' new TimeSpan(8' 0' 0)))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000000'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffNanoseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000000'                              context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffNanoseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                     .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000000'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffNanoseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                                                    .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100000000'                              GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffNanoseconds(e.DateTime' new DateTime(EF41Ticks + 1000000' DateTimeKind.Utc)))                                                                    .First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: var ticks = new TimeSpan(4' 1' 0).Ticks + 1;
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100' context.WithTypes.OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffNanoseconds(e.TimeSpan' new TimeSpan(ticks))).First());
Magic Number,FunctionalTests.ProductivityApi,DateTimeFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,DiffNanoseconds_on_time_span_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              100' GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.DiffNanoseconds(e.TimeSpan' new TimeSpan(ticks))).First());
Magic Number,FunctionalTests.ProductivityApi,Truncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Truncate_on_double_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1.0' (double)context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.Truncate(e.Double' e.Int)).First()' 7);
Magic Number,FunctionalTests.ProductivityApi,Truncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Truncate_on_double_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1.0' (double)GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.Truncate(e.Double' e.Int)).First()' 7);
Magic Number,FunctionalTests.ProductivityApi,Truncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Truncate_on_decimal_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1' (decimal)context.WithTypes.OrderBy(e => e.Id).Select(e => DbFunctions.Truncate(e.Decimal' e.Int)).First()' 7);
Magic Number,FunctionalTests.ProductivityApi,Truncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Truncate_on_decimal_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1' (decimal)GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => DbFunctions.Truncate(e.Decimal' e.Int)).First()' 7);
Magic Number,FunctionalTests.ProductivityApi,Truncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Truncate_on_double_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1.0' (double)context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.Truncate(e.Double' e.Int)).First()'                              7);
Magic Number,FunctionalTests.ProductivityApi,Truncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Truncate_on_double_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1.0' (double)GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.Truncate(e.Double' e.Int)).First()' 7);
Magic Number,FunctionalTests.ProductivityApi,Truncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Truncate_on_decimal_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1' (decimal)context.WithTypes.OrderBy(e => e.Id).Select(e => EntityFunctions.Truncate(e.Decimal' e.Int)).First()'                              7);
Magic Number,FunctionalTests.ProductivityApi,Truncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Truncate_on_decimal_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                              1' (decimal)GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                                  e => EntityFunctions.Truncate(e.Decimal' e.Int)).First()' 7);
Magic Number,FunctionalTests.ProductivityApi,MathTruncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,MathTruncate_on_double_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1.0' (double)context.WithTypes.OrderBy(e => e.Id).Select(e => Math.Truncate(e.Double)).First()' 7);
Magic Number,FunctionalTests.ProductivityApi,MathTruncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,MathTruncate_on_double_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1.0' (double)GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => Math.Truncate(e.Double)).First()' 7);
Magic Number,FunctionalTests.ProductivityApi,MathTruncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,MathTruncate_on_decimal_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1' (decimal)context.WithTypes.OrderBy(e => e.Id).Select(e => Math.Truncate(e.Decimal)).First()' 7);
Magic Number,FunctionalTests.ProductivityApi,MathTruncate,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,MathTruncate_on_decimal_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          1' (decimal)GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(                              e => Math.Truncate(e.Decimal)).First()' 7);
Magic Number,FunctionalTests.ProductivityApi,EdmFunctionUsage,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Function_attributed_with_EdmFunctionAttribute_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          "Magic Unic"'                          context.WithTypes.OrderBy(e => e.Id).Select(e => Left(e.String' 10)).First());
Magic Number,FunctionalTests.ProductivityApi,EdmFunctionUsage,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Function_attributed_with_EdmFunctionAttribute_can_be_used_in_DbQuery_or_ObjectQuery,The following statement contains a magic number: Assert.Equal(                          "Magic Unic"'                          GetObjectSet<EntityWithTypes>(context).OrderBy(e => e.Id).Select(e => Left(e.String' 10)).First());
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,FunctionalTests.ProductivityApi,EntityFunctionInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbFunctionScenarios.cs,Seed,The following statement contains a magic number: new List<EntityWithTypes>                  {                      new EntityWithTypes                          {                              Decimal = 1.0001m'                              NullableDecimal = 1m'                              Double = 1.0001'                              NullableDouble = 1.0'                              Int = 1'                              NullableInt = 1'                              Long = 1'                              NullableLong = 1'                              String = "Magic Unicorns Rock"'                              DateTime = new DateTime(2011' 4' 11' 4' 1' 0' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2011' 4' 11' 4' 1' 0' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 1' 0)'                              Relationship = entityWithRelationship                          }'                      new EntityWithTypes                          {                              Decimal = 2m'                              NullableDecimal = 2m'                              Double = 2.0'                              NullableDouble = 2.0'                              Int = 2'                              NullableInt = 2'                              Long = 2'                              NullableLong = 2'                              String = "Magic Unicorns Roll"'                              DateTime = new DateTime(2012' 2' 29' 4' 3' 1' 0' DateTimeKind.Utc)'                              DateTimeOffset = new DateTimeOffset(2012' 2' 29' 4' 3' 1' 0' new TimeSpan(8' 0' 0))'                              TimeSpan = new TimeSpan(4' 3' 1)'                              Relationship = entityWithRelationship                          }                  }.ForEach(e => context.WithTypes.Add(e));
Magic Number,System.Data.Entity.ProductivityApi,GetHashCodeTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\GetHashCodeTests.cs,Local_on_an_entitySet_of_entities_that_override_Equals_shouldnt_throw,The following statement contains a magic number: Assert.Equal(2' context.Skus.Local.Count());
Magic Number,System.Data.Entity.ProductivityApi,GetHashCodeTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\GetHashCodeTests.cs,Removing_from_Local_entities_that_override_Equals_shouldnt_throw,The following statement contains a magic number: Assert.Equal(2' context.Skus.Local.Count());
Magic Number,System.Data.Entity.ProductivityApi,GetHashCodeTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\GetHashCodeTests.cs,Changing_the_value_of_a_property_on_an_entity_that_overrides_GetHashCode_shouldnt_throw,The following statement contains a magic number: product.SupplierId = 23;
Magic Number,System.Data.Entity.ProductivityApi,GetHashCodeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\GetHashCodeTests.cs,Seed,The following statement contains a magic number: var product = context.Products.Add(                      new GetHashCodeProduct                          {                              Id = "ALFKI"'                              SupplierId = 14'                              Details = new GetHashCodeProductDetails                                  {                                      Name = "Squiggle"'                                      Price = 124                                  }'                          });
Magic Number,System.Data.Entity.ProductivityApi,GetHashCodeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\GetHashCodeTests.cs,Seed,The following statement contains a magic number: var product = context.Products.Add(                      new GetHashCodeProduct                          {                              Id = "ALFKI"'                              SupplierId = 14'                              Details = new GetHashCodeProductDetails                                  {                                      Name = "Squiggle"'                                      Price = 124                                  }'                          });
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_queries,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_updates,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_lazy_loading,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_explicit_loading,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_Find,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_generic_DbSet_SqlQuery,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_non_generic_DbSet_SqlQuery,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_generic_Database_SqlQuery,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_non_generic_Database_SqlQuery,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_Database_ExecuteSqlCommand,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_Database_Exists,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_Database_CompatibleWithModel,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_Database_Create,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_Database_CreateIfNotExists,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_Database_Delete,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_database_initialization,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_async_queries,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_async_updates,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_async_explicit_loading,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_async_Find,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_async_generic_DbSet_SqlQuery,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_async_non_generic_DbSet_SqlQuery,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_async_generic_Database_SqlQuery,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_async_non_generic_Database_SqlQuery,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,DbContext_timeout_is_used_for_async_Database_ExecuteSqlCommand,The following statement contains a magic number: context.Database.CommandTimeout = 66;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,Command_timeout_can_be_inherited_from_ObjectContext_and_can_be_changed_from_either_context,The following statement contains a magic number: objectContext.CommandTimeout = 77;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,Command_timeout_can_be_inherited_from_ObjectContext_and_can_be_changed_from_either_context,The following statement contains a magic number: Assert.Equal(77' context.Database.CommandTimeout);
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,Command_timeout_can_be_inherited_from_ObjectContext_and_can_be_changed_from_either_context,The following statement contains a magic number: context.Database.CommandTimeout = 88;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,Command_timeout_can_be_inherited_from_ObjectContext_and_can_be_changed_from_either_context,The following statement contains a magic number: Assert.Equal(88' context.Database.CommandTimeout);
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,Command_timeout_can_be_inherited_from_ObjectContext_and_can_be_changed_from_either_context,The following statement contains a magic number: Assert.Equal(88' objectContext.CommandTimeout);
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,Command_timeout_can_be_inherited_from_ObjectContext_and_can_be_changed_from_either_context,The following statement contains a magic number: objectContext.CommandTimeout = 99;
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,Command_timeout_can_be_inherited_from_ObjectContext_and_can_be_changed_from_either_context,The following statement contains a magic number: Assert.Equal(99' context.Database.CommandTimeout);
Magic Number,System.Data.Entity.ProductivityApi,TimeoutTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\TimeoutTests.cs,Command_timeout_can_be_inherited_from_ObjectContext_and_can_be_changed_from_either_context,The following statement contains a magic number: Assert.Equal(99' objectContext.CommandTimeout);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_AsStreaming_can_be_used_on_IQueryable,The following statement contains a magic number: var winners = context.Drivers.Where(d => d.Wins > 20);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_AsStreaming_can_be_used_on_IQueryable,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_AsStreaming_can_be_used_on_IQueryable,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_AsStreaming_can_be_used_directly_on_DbSet,The following statement contains a magic number: Assert.Equal(42' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_AsStreaming_can_be_used_directly_on_DbSet,The following statement contains a magic number: Assert.Equal(42' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_AsStreaming_can_be_used_directly_on_DbQuery,The following statement contains a magic number: var winners = (DbQuery<Driver>)context.Drivers.Where(d => d.Wins > 20);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_AsStreaming_can_be_used_directly_on_DbQuery,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_AsStreaming_can_be_used_directly_on_DbQuery,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_on_IQueryable,The following statement contains a magic number: var expression = context.Drivers.Where(d => d.Wins > 20).Expression;
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_on_IQueryable,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_on_IQueryable,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_directly_on_DbSet,The following statement contains a magic number: Assert.Equal(42' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_directly_on_DbSet,The following statement contains a magic number: Assert.Equal(42' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_directly_on_DbQuery,The following statement contains a magic number: var expression = context.Drivers.Where(d => d.Wins > 20).Expression;
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_directly_on_DbQuery,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_directly_on_DbQuery,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_on_generic_IQueryable,The following statement contains a magic number: var winners = (IQueryable)context.Drivers.Where(d => d.Wins > 20);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_on_generic_IQueryable,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_on_generic_IQueryable,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_directly_on_generic_DbSet,The following statement contains a magic number: Assert.Equal(42' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_AsStreaming_can_be_used_directly_on_generic_DbSet,The following statement contains a magic number: Assert.Equal(42' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,AsStreaming_can_be_used_before_the_rest_of_the_query,The following statement contains a magic number: drivers.Where(d => d.Wins > 20)
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,AsStreaming_can_be_used_before_the_rest_of_the_query,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,AsStreaming_can_be_used_before_the_rest_of_the_query,The following statement contains a magic number: drivers.AsStreaming().Where(d => d.Wins > 20)
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,AsStreaming_can_be_used_before_the_rest_of_the_query,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_ObjectSet_AsStreaming_can_be_used_on_IQueryable,The following statement contains a magic number: var winners = CreateObjectSet<Driver>(context).Where(d => d.Wins > 20);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_ObjectSet_AsStreaming_can_be_used_on_IQueryable,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_ObjectSet_AsStreaming_can_be_used_on_IQueryable,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_ObjectSet_AsStreaming_can_be_used_directly_on_ObjectSet,The following statement contains a magic number: Assert.Equal(42' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Generic_ObjectSet_AsStreaming_can_be_used_directly_on_ObjectSet,The following statement contains a magic number: Assert.Equal(42' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_ObjectSet_AsStreaming_can_be_used_on_generic_IQueryable,The following statement contains a magic number: var winners = (IQueryable)CreateObjectSet<Driver>(context).Where(d => d.Wins > 20);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_ObjectSet_AsStreaming_can_be_used_on_generic_IQueryable,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_ObjectSet_AsStreaming_can_be_used_on_generic_IQueryable,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_ObjectSet_AsStreaming_can_be_used_directly_on_generic_ObjectSet,The following statement contains a magic number: Assert.Equal(42' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,Non_generic_ObjectSet_AsStreaming_can_be_used_directly_on_generic_ObjectSet,The following statement contains a magic number: Assert.Equal(42' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,ObjectSet_AsStreaming_can_be_used_before_the_rest_of_the_query,The following statement contains a magic number: drivers.Where(d => d.Wins > 20)
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,ObjectSet_AsStreaming_can_be_used_before_the_rest_of_the_query,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,ObjectSet_AsStreaming_can_be_used_before_the_rest_of_the_query,The following statement contains a magic number: drivers.Where(d => d.Wins > 20).AsStreaming()
Magic Number,ProductivityApiTests,StreamingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\StreamingTests.cs,ObjectSet_AsStreaming_can_be_used_before_the_rest_of_the_query,The following statement contains a magic number: Assert.Equal(2' count);
Magic Number,ProductivityApiTests,NamespaceAndNestingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NamespaceAndNestingTests.cs,Code_First_can_use_types_that_have_the_same_name_but_different_namespaces,The following statement contains a magic number: Assert.Equal(64' cheese.Info.Image.Length);
Magic Number,ProductivityApiTests,NamespaceAndNestingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NamespaceAndNestingTests.cs,Code_First_can_use_types_that_have_the_same_name_but_different_namespaces,The following statement contains a magic number: Assert.Equal(64' cheese.Info.Image.Length);
Magic Number,ProductivityApiTests,NamespaceAndNestingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NamespaceAndNestingTests.cs,Code_First_can_use_types_that_have_the_same_name_but_different_namespaces,The following statement contains a magic number: earth.Cheeses.Add(                          new TheEarth.Cheese                              {                                  Name = "Swiss"'                                  Info = new TheEarth.CheeseInfo(TheEarth.Maturity.Todler' new byte[32])'                                  Pickles = cheese.Pickles.ToList()                              });
Magic Number,ProductivityApiTests,NamespaceAndNestingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NamespaceAndNestingTests.cs,Code_First_can_use_types_that_have_the_same_name_but_different_namespaces,The following statement contains a magic number: Assert.Equal(32' cheese.Info.Image.Length);
Magic Number,ProductivityApiTests,NamespaceAndNestingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NamespaceAndNestingTests.cs,Code_First_can_use_nested_types,The following statement contains a magic number: Assert.Equal(16' cheese.Info.Image.Length);
Magic Number,ProductivityApiTests,NamespaceAndNestingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NamespaceAndNestingTests.cs,Find_can_be_used_with_nested_types,The following statement contains a magic number: Assert.Equal(16' cheese.Info.Image.Length);
Magic Number,ProductivityApiTests,MoonInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NamespaceAndNestingTests.cs,Seed,The following statement contains a magic number: context.Cheeses.Add(                      new TheMoon.Cheese                          {                              Name = "Wensleydale"'                              Info = new TheMoon.CheeseInfo(TheMoon.Maturity.Engineer' new byte[64])'                              Pickles = new List<TheMoon.Pickle>                                  {                                      new TheMoon.Pickle                                          {                                              Name = "Branston"                                          }'                                      new TheMoon.Pickle                                          {                                              Name = "Piccalilli"                                          }                                  }                          });
Magic Number,ProductivityApiTests,EarthInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NamespaceAndNestingTests.cs,Seed,The following statement contains a magic number: context.Cheeses.Add(                      new TheEarth.Cheese                          {                              Name = "Cheddar"'                              Info = new TheEarth.CheeseInfo(TheEarth.Maturity.Teenager' new byte[64])'                              Pickles = new List<TheEarth.Pickle>                                  {                                      new TheEarth.Pickle                                          {                                              Name = "Relish"                                          }'                                      new TheEarth.Pickle                                          {                                              Name = "Dill"                                          }                                  }                          });
Magic Number,ProductivityApiTests,NestedInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NamespaceAndNestingTests.cs,Seed,The following statement contains a magic number: context.Cheeses.Add(                      new Cheese                          {                              Name = "Swiss"'                              Info = new CheeseInfo(Maturity.Todler' new byte[16])'                              Pickles = new List<Pickle>                                  {                                      new Pickle                                          {                                              Name = "Ketchup"                                          }'                                      new Pickle                                          {                                              Name = "Mustard"                                          }                                  }                          });
Magic Number,ProductivityApiTests,SimpleScenariosForLocalDb,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForLocalDb.cs,Scenario_Query,The following statement contains a magic number: Assert.Equal(7' products.Count);
Magic Number,ProductivityApiTests,ChangeTrackingProxyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ChangeTrackingProxyTests.cs,Re_parenting_one_to_zero_or_one_Added_dependent_should_cause_existing_dependnent_to_be_Deleted_or_Detached,The following statement contains a magic number: chocolate.Id = 2;
Magic Number,ProductivityApiTests,ConcurrencyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ConcurrencyTests.cs,Simple_concurrency_exception_can_be_resolved_with_new_values,The following statement contains a magic number: ConcurrencyTest(                  10' (c' ex) =>                          {                              var driverEntry = ex.Entries.Single().Cast<Driver>();                              driverEntry.OriginalValues.SetValues(driverEntry.GetDatabaseValues());                              driverEntry.Entity.Podiums = 10;                          });
Magic Number,ProductivityApiTests,ConcurrencyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ConcurrencyTests.cs,Simple_concurrency_exception_can_be_resolved_with_new_values,The following statement contains a magic number: ConcurrencyTest(                  10' (c' ex) =>                          {                              var driverEntry = ex.Entries.Single().Cast<Driver>();                              driverEntry.OriginalValues.SetValues(driverEntry.GetDatabaseValues());                              driverEntry.Entity.Podiums = 10;                          });
Magic Number,ProductivityApiTests,ConcurrencyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ConcurrencyTests.cs,Simple_concurrency_exception_can_be_resolved_with_new_values_using_objects,The following statement contains a magic number: ConcurrencyTest(                  10' (c' ex) =>                          {                              var driverEntry = ex.Entries.Single().Cast<Driver>();                              driverEntry.OriginalValues.SetValues(driverEntry.GetDatabaseValues().ToObject());                              driverEntry.Entity.Podiums = 10;                          });
Magic Number,ProductivityApiTests,ConcurrencyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ConcurrencyTests.cs,Simple_concurrency_exception_can_be_resolved_with_new_values_using_objects,The following statement contains a magic number: ConcurrencyTest(                  10' (c' ex) =>                          {                              var driverEntry = ex.Entries.Single().Cast<Driver>();                              driverEntry.OriginalValues.SetValues(driverEntry.GetDatabaseValues().ToObject());                              driverEntry.Entity.Podiums = 10;                          });
Magic Number,ProductivityApiTests,ConcurrencyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ConcurrencyTests.cs,Simple_concurrency_exception_can_be_resolved_with_new_values_using_cloned_property_values,The following statement contains a magic number: ConcurrencyTest(                  10' (c' ex) =>                          {                              var driverEntry = ex.Entries.Single().Cast<Driver>();                              driverEntry.OriginalValues.SetValues(driverEntry.GetDatabaseValues().Clone());                              driverEntry.Entity.Podiums = 10;                          });
Magic Number,ProductivityApiTests,ConcurrencyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ConcurrencyTests.cs,Simple_concurrency_exception_can_be_resolved_with_new_values_using_cloned_property_values,The following statement contains a magic number: ConcurrencyTest(                  10' (c' ex) =>                          {                              var driverEntry = ex.Entries.Single().Cast<Driver>();                              driverEntry.OriginalValues.SetValues(driverEntry.GetDatabaseValues().Clone());                              driverEntry.Entity.Podiums = 10;                          });
Magic Number,ProductivityApiTests,ConcurrencyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ConcurrencyTests.cs,Two_concurrency_issues_in_one_to_many_related_entities_can_be_handled_by_dealing_with_dependent_first,The following statement contains a magic number: ConcurrencyTest(                  c =>                      {                          var team = c.Teams.Find(Team.McLaren);                          team.Drivers.Single(d => d.Name == "Jenson Button").Poles = 1;                          team.Principal = "Larry David";                      }'                  c =>                      {                          var team = c.Teams.Find(Team.McLaren);                          team.Drivers.Single(d => d.Name == "Jenson Button").Poles = 2;                          team.Principal = "Jerry Seinfeld";                      }' (c' ex) =>                             {                                 Assert.IsType<DbUpdateConcurrencyException>(ex);                                   var entry = ex.Entries.Single();                                 Assert.IsAssignableFrom<Driver>(entry.Entity);                                 entry.Reload();                                   try                                 {                                     c.SaveChanges();                                     Assert.True(false' "Expected second exception due to conflict in principals.");                                 }                                 catch (DbUpdateConcurrencyException ex2)                                 {                                     var entry2 = ex2.Entries.Single();                                     Assert.IsAssignableFrom<Team>(entry2.Entity);                                     entry2.Reload();                                 }                             }'                  c =>                      {                          var team = c.Teams.Find(Team.McLaren);                          Assert.Equal(1' team.Drivers.Single(d => d.Name == "Jenson Button").Poles);                          Assert.Equal("Larry David"' team.Principal);                      });
Magic Number,ProductivityApiTests,ConcurrencyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ConcurrencyTests.cs,Concurrency_issue_where_a_complex_type_nested_member_is_the_concurrency_token_can_be_handled,The following statement contains a magic number: ConcurrencyTest(                  c => c.Engines.Single(s => s.Name == "CA2010").StorageLocation.Latitude = 47.642576'                  (c' ex) =>                      {                          Assert.IsType<DbUpdateConcurrencyException>(ex);                            var entry = ex.Entries.Single();                          Assert.IsAssignableFrom<Engine>(entry.Entity);                          entry.Reload();                      }'                  c =>                  Assert.Equal(47.642576' c.Engines.Single(s => s.Name == "CA2010").StorageLocation.Latitude));
Magic Number,ProductivityApiTests,ConcurrencyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ConcurrencyTests.cs,Concurrency_issue_where_a_complex_type_nested_member_is_the_concurrency_token_can_be_handled,The following statement contains a magic number: ConcurrencyTest(                  c => c.Engines.Single(s => s.Name == "CA2010").StorageLocation.Latitude = 47.642576'                  (c' ex) =>                      {                          Assert.IsType<DbUpdateConcurrencyException>(ex);                            var entry = ex.Entries.Single();                          Assert.IsAssignableFrom<Engine>(entry.Entity);                          entry.Reload();                      }'                  c =>                  Assert.Equal(47.642576' c.Engines.Single(s => s.Name == "CA2010").StorageLocation.Latitude));
Magic Number,ProductivityApiTests,DatabaseInitializationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabaseInitializationTests.cs,Initializer_does_nothing_if_database_exists_and_model_matches,The following statement contains a magic number: Assert.Equal(2' categoriesInDatabase.Count());
Magic Number,ProductivityApiTests,DatabaseInitializationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabaseInitializationTests.cs,MigrateDatabaseToLatestVersion_migrates_to_latest_version,The following statement contains a magic number: Assert.Equal(2' blogs.Count());
Magic Number,ProductivityApiTests,DatabaseInitializationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabaseInitializationTests.cs,MigrateDatabaseToLatestVersion_migrates_to_latest_version,The following statement contains a magic number: Assert.Equal(2' appliedMigrations.Count());
Magic Number,ProductivityApiTests,DatabaseInitializationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabaseInitializationTests.cs,Database_initializer_with_ctor_args_can_be_set_in_app_config,The following statement contains a magic number: Assert.Equal(2' InitializerWithCtorArgs.CtorArg2);
Magic Number,ProductivityApiTests,BadInitializerForSimpleModel,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabaseInitializationTests.cs,Seed,The following statement contains a magic number: context.Entry(                      new Product                          {                              Id = 999'                              CategoryId = "FOO"                          }).State = EntityState.Modified;
Magic Number,ProductivityApiTests,InvalidSchemaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabaseInitializationTests.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entities().Configure(c => c.ToTable(c.ClrType.Name + new string('X'' 400)));
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,SetupContext,The following statement contains a magic number: drivers.Local.Where(d => d.TeamId == ModifedTeam).ToList().ForEach(d => d.Races = 5);
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,SetupContext,The following statement contains a magic number: drivers.Add(                  new Driver                      {                          Name = "Pedro de la Rosa"'                          TeamId = AddedTeam'                          CarNumber = 13                      });
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Adding_entity_to_context_is_reflected_in_local_view_implementation,The following statement contains a magic number: var larry = new Driver                                  {                                      Name = "Larry David"'                                      TeamId = Team.Ferrari'                                      CarNumber = 13                                  };
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Attaching_entity_to_context_is_reflected_in_local_view_implementation,The following statement contains a magic number: var larry = new Driver                                  {                                      Name = "Larry David"'                                      TeamId = Team.Ferrari'                                      CarNumber = 13                                  };
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Entities_added_to_local_view_are_added_to_state_manager_implementation,The following statement contains a magic number: var larry = new Driver                                  {                                      Id = -1'                                      Name = "Larry David"'                                      TeamId = Team.Ferrari'                                      CarNumber = 13                                  };
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,DbSet_Local_calls_DetectChanges_implementation,The following statement contains a magic number: alonso.CarNumber = 13;
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Adding_entity_to_context_is_reflected_in_local_binding_list,The following statement contains a magic number: var larry = new Driver                                  {                                      Name = "Larry David"'                                      TeamId = Team.Ferrari'                                      CarNumber = 13                                  };
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Entities_added_to_local_binding_list_are_added_to_state_manager,The following statement contains a magic number: var larry = new Driver                                  {                                      Id = -1'                                      Name = "Larry David"'                                      TeamId = Team.Ferrari'                                      CarNumber = 13                                  };
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Sets_of_subtypes_can_still_be_sorted,The following statement contains a magic number: featuredProducts.Attach(                      new FeaturedProduct                          {                              Id = 3                          });
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Sets_of_subtypes_can_still_be_sorted,The following statement contains a magic number: featuredProducts.Attach(                      new FeaturedProduct                          {                              Id = 4                          });
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Sets_of_subtypes_can_still_be_sorted,The following statement contains a magic number: Assert.Equal(3' bindingList[1].Id);
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Sets_of_subtypes_can_still_be_sorted,The following statement contains a magic number: Assert.Equal(4' bindingList[2].Id);
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Sets_of_subtypes_can_still_be_sorted,The following statement contains a magic number: Assert.Equal(4' bindingList[2].Id);
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Sets_containing_instances_of_subtypes_can_still_be_sorted,The following statement contains a magic number: context.Products.Attach(                      new FeaturedProduct                          {                              Id = 3                          });
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Sets_containing_instances_of_subtypes_can_still_be_sorted,The following statement contains a magic number: context.Products.Attach(                      new FeaturedProduct                          {                              Id = 4                          });
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Sets_containing_instances_of_subtypes_can_still_be_sorted,The following statement contains a magic number: Assert.Equal(3' bindingList[1].Id);
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Sets_containing_instances_of_subtypes_can_still_be_sorted,The following statement contains a magic number: Assert.Equal(4' bindingList[2].Id);
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Sets_containing_instances_of_subtypes_can_still_be_sorted,The following statement contains a magic number: Assert.Equal(4' bindingList[2].Id);
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Entity_added_to_context_is_added_to_navigation_property_binding_list,The following statement contains a magic number: var larry = new Driver                                  {                                      Name = "Larry David"'                                      TeamId = Team.Ferrari'                                      CarNumber = 13                                  };
Magic Number,ProductivityApiTests,DatabindingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DatabindingTests.cs,Entity_added_to_navigation_property_binding_list_is_added_to_context_after_DetectChanges,The following statement contains a magic number: var larry = new Driver                                  {                                      Id = -1'                                      Name = "Larry David"'                                      TeamId = Team.Ferrari'                                      CarNumber = 13                                  };
Magic Number,ProductivityApiTests,DbEntityEntryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbEntityEntryTests.cs,DbContext_Entries_returns_entries_for_all_types_of_tracked_entity_in_all_states,The following statement contains a magic number: var deleted = context.Products.Find(2);
Magic Number,ProductivityApiTests,DbEntityEntryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbEntityEntryTests.cs,DbContext_Entries_returns_entries_for_all_types_of_tracked_entity_in_all_states,The following statement contains a magic number: var modified = context.Products.Find(3);
Magic Number,ProductivityApiTests,DbEntityEntryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbEntityEntryTests.cs,Generic_DbContext_Entries_returns_entries_for_tracked_entities_of_the_given_type_in_all_states,The following statement contains a magic number: var deleted = context.Products.Find(2);
Magic Number,ProductivityApiTests,DbEntityEntryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbEntityEntryTests.cs,Generic_DbContext_Entries_returns_entries_for_tracked_entities_of_the_given_type_in_all_states,The following statement contains a magic number: var modified = context.Products.Find(3);
Magic Number,ProductivityApiTests,DbEntityEntryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbEntityEntryTests.cs,Attaching_previously_detached_entity_should_not_throw_exception,The following statement contains a magic number: var login = new DeLogin                                  {                                      Id = 14                                  };
Magic Number,ProductivityApiTests,DbEntityEntryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbEntityEntryTests.cs,Attaching_previously_detached_entity_should_not_throw_exception,The following statement contains a magic number: var order = new DeOrder                                  {                                      Id = 19                                  };
Magic Number,ProductivityApiTests,DetachmentInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbEntityEntryTests.cs,Seed,The following statement contains a magic number: var login = new DeLogin                  {                      Id = 14'                      CustomerId = 21                  };
Magic Number,ProductivityApiTests,DetachmentInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbEntityEntryTests.cs,Seed,The following statement contains a magic number: var login = new DeLogin                  {                      Id = 14'                      CustomerId = 21                  };
Magic Number,ProductivityApiTests,DetachmentInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbEntityEntryTests.cs,Seed,The following statement contains a magic number: var order = new DeOrder                  {                      Id = 19                  };
Magic Number,ProductivityApiTests,DetachmentInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbEntityEntryTests.cs,Seed,The following statement contains a magic number: var customer = new DeCustomer                  {                      DeCustomerId = 21                  };
Magic Number,ProductivityApiTests,RefreshInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbEntityEntryTests.cs,Seed,The following statement contains a magic number: context.Products.Add(                      new ReProduct                      {                          Id = "ALFKI"'                          Supplier = new ReSupplier                          {                              Id = 14'                              Name = "Initial"                          }                      });
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyValuesScalars,The following statement contains a magic number: Assert.Equal(1500000m' values["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyValuesDerivedScalars,The following statement contains a magic number: Assert.Equal(45m' values["LeaveBalance"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyValuesDerivedComplex,The following statement contains a magic number: Assert.Equal(10' complexValues["Days"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyValuesDerivedComplex,The following statement contains a magic number: Assert.Equal(50m' complexValues["Space"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericPropertyValuesScalars,The following statement contains a magic number: Assert.Equal(1500000m' values["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericPropertyValuesScalars,The following statement contains a magic number: Assert.Equal(1500000m' values.GetValue<decimal>("Value"));
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericPropertyValuesDerivedScalars,The following statement contains a magic number: Assert.Equal(45m' values["LeaveBalance"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericPropertyValuesDerivedComplex,The following statement contains a magic number: Assert.Equal(10' complexValues["Days"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericPropertyValuesDerivedComplex,The following statement contains a magic number: Assert.Equal(50m' complexValues["Space"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetPropertyValuesScalars,The following statement contains a magic number: values["Value"] = -1000m;
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetPropertyValuesScalars,The following statement contains a magic number: Assert.Equal(-1000m' values["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetPropertyValuesScalars,The following statement contains a magic number: Assert.Equal(-1000m' dataRecord["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetPropertyValuesComplex,The following statement contains a magic number: siteValues["Zone"] = 2;
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetPropertyValuesComplex,The following statement contains a magic number: Assert.Equal(2' siteValues["Zone"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetPropertyValuesComplex,The following statement contains a magic number: Assert.Equal(2' siteDataRecord["Zone"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetNonGenericPropertyValuesScalars,The following statement contains a magic number: values["Value"] = -1000m;
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetNonGenericPropertyValuesScalars,The following statement contains a magic number: Assert.Equal(-1000m' values["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetNonGenericPropertyValuesScalars,The following statement contains a magic number: Assert.Equal(-1000m' dataRecord["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetNonGenericPropertyValuesComplex,The following statement contains a magic number: siteValues["Zone"] = 2;
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetNonGenericPropertyValuesComplex,The following statement contains a magic number: Assert.Equal(2' siteValues["Zone"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestSetNonGenericPropertyValuesComplex,The following statement contains a magic number: Assert.Equal(2' siteDataRecord["Zone"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyValuesClone,The following statement contains a magic number: Assert.Equal(1500000m' buildingClone.Value);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyValuesDerivedClone,The following statement contains a magic number: Assert.Equal(45m' clone.LeaveBalance);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyValuesDerivedComplexClone,The following statement contains a magic number: Assert.Equal(50m' detailsClone.Space);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyValuesDerivedComplexClone,The following statement contains a magic number: Assert.Equal(10' detailsClone.Days);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericPropertyValuesClone,The following statement contains a magic number: Assert.Equal(1500000m' buildingClone.Value);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyValuesCloneToValues,The following statement contains a magic number: Assert.Equal(1500000m' clonedBuildingValues["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyValuesCloneToValues,The following statement contains a magic number: clonedInfoValues["Zone"] = 2;
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyValuesCloneToValues,The following statement contains a magic number: Assert.Equal(2' clonedInfoValues["Zone"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericPropertyValuesCloneToValues,The following statement contains a magic number: Assert.Equal(1500000m' clonedBuildingValues["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericPropertyValuesCloneToValues,The following statement contains a magic number: clonedInfoValues["Zone"] = 2;
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericPropertyValuesCloneToValues,The following statement contains a magic number: Assert.Equal(2' clonedInfoValues["Zone"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestGenericObjectSetValues,The following statement contains a magic number: var newBuilding = new Building                                        {                                            BuildingId = new Guid(building.BuildingId.ToString())'                                            Name = "Values End"'                                            Value = building.Value'                                            Address = new Address                                                          {                                                              Street = "The Hill"'                                                              City = "Hobbiton"'                                                              State = "WF"'                                                              ZipCode = "00001"'                                                              SiteInfo = new SiteInfo                                                                             {                                                                                 Zone = 3'                                                                                 Environment = "Comfortable"                                                                             }                                                          }'                                        };
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestGenericObjectSetValues,The following statement contains a magic number: Assert.Equal(1500000m' buildingValues["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestGenericObjectSetValues,The following statement contains a magic number: Assert.Equal(3' infoValues["Zone"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,ValidateBuildingPropereties,The following statement contains a magic number: Assert.Equal(1500000m' buildingRecord["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,ValidateBuildingPropereties,The following statement contains a magic number: Assert.Equal(3' siteRecord["Zone"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericObjectSetValues,The following statement contains a magic number: var newBuilding = new Building                                        {                                            BuildingId = new Guid(building.BuildingId.ToString())'                                            Name = "Values End"'                                            Value = building.Value'                                            Address = new Address                                                          {                                                              Street = "The Hill"'                                                              City = "Hobbiton"'                                                              State = "WF"'                                                              ZipCode = "00001"'                                                              SiteInfo = new SiteInfo                                                                             {                                                                                 Zone = 3'                                                                                 Environment = "Comfortable"                                                                             }                                                          }'                                        };
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericObjectSetValues,The following statement contains a magic number: Assert.Equal(1500000m' buildingValues["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericObjectSetValues,The following statement contains a magic number: Assert.Equal(3' infoValues["Zone"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestGenericValuesSetValues,The following statement contains a magic number: clonedInfoValues["Zone"] = 3;
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestGenericValuesSetValues,The following statement contains a magic number: Assert.Equal(1500000m' buildingValues["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestGenericValuesSetValues,The following statement contains a magic number: Assert.Equal(3' infoValues["Zone"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericValuesSetValues,The following statement contains a magic number: clonedInfoValues["Zone"] = 3;
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericValuesSetValues,The following statement contains a magic number: Assert.Equal(1500000m' buildingValues["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestNonGenericValuesSetValues,The following statement contains a magic number: Assert.Equal(3' infoValues["Zone"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,Non_nullable_property_in_current_values_cannot_be_set_to_null_in_property_dictionary,The following statement contains a magic number: Assert.Equal(1500000m' values["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,Non_nullable_property_in_current_values_cannot_be_set_to_null_in_property_dictionary,The following statement contains a magic number: Assert.Equal(1500000m' building.Value);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,Non_nullable_property_in_original_values_can_be_set_to_null_in_property_dictionary,The following statement contains a magic number: Assert.Equal(1500000m' values["Value"]);
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyNames,The following statement contains a magic number: Assert.Equal(5' buildingNames.Count());
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyNames,The following statement contains a magic number: Assert.Equal(5' addressNames.Count());
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,TestPropertyNames,The following statement contains a magic number: Assert.Equal(2' infoNames.Count());
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,GetDatabaseValues_for_derived_entity_not_in_the_store_returns_null_implementation,The following statement contains a magic number: employee.EmployeeId = -77;
Magic Number,ProductivityApiTests,DbPropertyValuesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbPropertyValuesTests.cs,NonGeneric_GetDatabaseValues_for_derived_entity_not_in_the_store_returns_null_implementation,The following statement contains a magic number: employee.EmployeeId = -77;
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,DbSet_acts_as_simple_query_implementation,The following statement contains a magic number: Assert.Equal(7' results.Count);
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,DbSet_acts_as_simple_query_implementation,The following statement contains a magic number: Assert.Equal(7' GetStateEntries(context).Count());
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Non_generic_DbSet_can_be_enumerated_without_using_Cast,The following statement contains a magic number: Assert.Equal(7' count);
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Load_can_be_used_to_load_DbSet_implementation,The following statement contains a magic number: Assert.Equal(7' context.Products.Local.Count);
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Load_can_be_used_to_load_DbSet_implementation,The following statement contains a magic number: Assert.Equal(7' GetStateEntries(context).Count());
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Add_Attach_or_Remove_does_not_throw_for_Binary_keys_Sanity_test,The following statement contains a magic number: var binaryKey = new byte[] { 20' 21' 22' 23' 24 };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Add_Attach_or_Remove_does_not_throw_for_Binary_keys_Sanity_test,The following statement contains a magic number: var binaryKey = new byte[] { 20' 21' 22' 23' 24 };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Add_Attach_or_Remove_does_not_throw_for_Binary_keys_Sanity_test,The following statement contains a magic number: var binaryKey = new byte[] { 20' 21' 22' 23' 24 };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Add_Attach_or_Remove_does_not_throw_for_Binary_keys_Sanity_test,The following statement contains a magic number: var binaryKey = new byte[] { 20' 21' 22' 23' 24 };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Add_Attach_or_Remove_does_not_throw_for_Binary_keys_Sanity_test,The following statement contains a magic number: var binaryKey = new byte[] { 20' 21' 22' 23' 24 };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Add_moves_root_to_Added_when_independent_association_graph_root_is_Added_Unchanged_Modified_or_Deleted,The following statement contains a magic number: var whiteBoard = new Whiteboard                      {                          iD = new byte[] { 1' 2' 3' 4 }'                          AssetTag = "ABCDX0009"                      };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Add_moves_root_to_Added_when_independent_association_graph_root_is_Added_Unchanged_Modified_or_Deleted,The following statement contains a magic number: var whiteBoard = new Whiteboard                      {                          iD = new byte[] { 1' 2' 3' 4 }'                          AssetTag = "ABCDX0009"                      };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Add_moves_root_to_Added_when_independent_association_graph_root_is_Added_Unchanged_Modified_or_Deleted,The following statement contains a magic number: var whiteBoard = new Whiteboard                      {                          iD = new byte[] { 1' 2' 3' 4 }'                          AssetTag = "ABCDX0009"                      };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Attach_moves_root_to_Unchanged_when_Independent_graph_root_is_Unchanged_or_Modified_or_Deleted,The following statement contains a magic number: var whiteBoard = new Whiteboard                      {                          iD = new byte[] { 1' 2' 3' 4 }'                          AssetTag = "ABCDX0009"                      };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Attach_moves_root_to_Unchanged_when_Independent_graph_root_is_Unchanged_or_Modified_or_Deleted,The following statement contains a magic number: var whiteBoard = new Whiteboard                      {                          iD = new byte[] { 1' 2' 3' 4 }'                          AssetTag = "ABCDX0009"                      };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Attach_moves_root_to_Unchanged_when_Independent_graph_root_is_Unchanged_or_Modified_or_Deleted,The following statement contains a magic number: var whiteBoard = new Whiteboard                      {                          iD = new byte[] { 1' 2' 3' 4 }'                          AssetTag = "ABCDX0009"                      };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Detach_moves_root_to_Detached_when_independent_association_graph_root_is_Added_Unchanged_Modified_or_Deleted,The following statement contains a magic number: var whiteBoard = new Whiteboard                      {                          iD = new byte[] { 1' 2' 3' 4 }'                          AssetTag = "ABCDX0009"                      };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Detach_moves_root_to_Detached_when_independent_association_graph_root_is_Added_Unchanged_Modified_or_Deleted,The following statement contains a magic number: var whiteBoard = new Whiteboard                      {                          iD = new byte[] { 1' 2' 3' 4 }'                          AssetTag = "ABCDX0009"                      };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Detach_moves_root_to_Detached_when_independent_association_graph_root_is_Added_Unchanged_Modified_or_Deleted,The following statement contains a magic number: var whiteBoard = new Whiteboard                      {                          iD = new byte[] { 1' 2' 3' 4 }'                          AssetTag = "ABCDX0009"                      };
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,DbSet_for_an_entity_set_with_special_characters_can_be_created,The following statement contains a magic number: Assert.Equal(2' countries.Count);
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,DbSet_Add_works_for_entity_set_with_special_characters,The following statement contains a magic number: var lander = context.Länder.Add(                      new Länder                          {                              Id = 3'                              Näme = "C"                          });
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,DbSet_Attach_works_for_entity_set_with_special_characters,The following statement contains a magic number: var lander = context.Länder.Attach(                      new Länder                          {                              Id = 3'                              Näme = "C"                          });
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,SqlQuery_works_for_entity_set_with_special_characters,The following statement contains a magic number: Assert.Equal(2' countries.Count);
Magic Number,ProductivityApiTests,DbSetTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,VerifyProducts,The following statement contains a magic number: Assert.Equal(2' GetStateEntries(context).Count());
Magic Number,ProductivityApiTests,SpecialCharactersInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSetTests.cs,Seed,The following statement contains a magic number: context.Länder.Add(                      new Länder                          {                              Id = 2'                              Näme = "B"                          });
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_can_be_used_to_materialize_entities_into_a_set,The following statement contains a magic number: Assert.Equal(7' products.Count);
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,Non_generic_SQL_query_can_be_used_to_materialize_entities_into_a_set,The following statement contains a magic number: Assert.Equal(7' products.Count);
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_uses_identity_resolution,The following statement contains a magic number: Assert.Equal(6' trackedProducts.Count);
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_uses_identity_resolution,The following statement contains a magic number: Assert.Equal(7' products.Count);
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_with_parameters_can_be_used_to_materialize_entities_into_a_set,The following statement contains a magic number: var products =                      context.Products.SqlQuery(                          "select * from Products where Id < {0} and CategoryId = {1}"' 4'                          "Beverages").ToList();
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,Non_generic_SQL_query_with_parameters_can_be_used_to_materialize_entities_into_a_set,The following statement contains a magic number: var products =                      context.Set(typeof(Product)).SqlQuery(                          "select * from Products where Id < {0} and CategoryId = {1}"'                          4' "Beverages").ToList<Product>();
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_with_SqlParameter_parameters_can_be_used_to_materialize_entities_into_a_set,The following statement contains a magic number: var products = context.Products.SqlQuery(                      "select * from Products where Id < @p0 and CategoryId = @p1"'                      new SqlParameter                          {                              ParameterName = "p0"'                              Value = 4                          }'                      new SqlParameter                          {                              ParameterName = "p1"'                              Value = "Beverages"                          })                      .ToList();
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,Non_generic_SQL_query_with_SqlParameter_parameters_can_be_used_to_materialize_entities_into_a_set,The following statement contains a magic number: var products =                      context.Set(typeof(Product)).SqlQuery(                          "select * from Products where Id < @p0 and CategoryId = @p1"'                          new SqlParameter                              {                                  ParameterName = "p0"'                                  Value = 4                              }'                          new SqlParameter                              {                                  ParameterName = "p1"'                                  Value = "Beverages"                              })                          .ToList<Product>();
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_can_be_used_to_materialize_entities_without_tracking,The following statement contains a magic number: Assert.Equal(7' products.Count);
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_with_parameters_can_be_used_to_materialize_entities_without_tracking,The following statement contains a magic number: var products = query(                      context' "select * from Products where Id < {0} and CategoryId = {1}"'                      new object[] { 4' "Beverages" });
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_can_be_used_to_materialize_derived_entities_into_a_set_even_when_base_entities_are_returned,The following statement contains a magic number: Assert.Equal(7' products.Count);
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,ValidateBovril,The following statement contains a magic number: Assert.Equal(2' bovril.Id);
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,ValidateCadillac,The following statement contains a magic number: Assert.Equal(7' asFeaturedProduct.Id);
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,CadillacIsNotFeaturedProduct,The following statement contains a magic number: Assert.Equal(7' cadillac.Id);
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_can_be_used_to_materialize_unmapped_types_implementation,The following statement contains a magic number: Assert.Equal(7' products.Count);
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_with_parameters_can_be_used_to_materialize_unmapped_types_implementation,The following statement contains a magic number: var products = query(                      context' "select * from Products where Id < {0} and CategoryId = {1}"'                      new object[] { 4' "Beverages" });
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_cannot_be_used_to_materialize_anonymous_types,The following statement contains a magic number: SQL_query_cannot_be_used_to_materialize_anonymous_types_implementation(                  new                      {                          Id = 2'                          Name = "Bovril"'                          CategoryId = "Foods"                      }' q => q.ToList());
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_cannot_be_used_to_materialize_anonymous_types_async,The following statement contains a magic number: SQL_query_cannot_be_used_to_materialize_anonymous_types_implementation(                  new                      {                          Id = 2'                          Name = "Bovril"'                          CategoryId = "Foods"                      }' q => ExceptionHelpers.UnwrapAggregateExceptions(() => q.ToListAsync().Result));
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_can_be_used_to_materialize_value_types_implementation,The following statement contains a magic number: Assert.Equal(7' products.Count);
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_can_be_used_to_materialize_value_types_implementation,The following statement contains a magic number: Assert.True(products.Contains(2));
Magic Number,ProductivityApiTests,DbSqlQueryTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DbSqlQueryTests.cs,SQL_query_can_be_used_to_materialize_complex_types_implementation,The following statement contains a magic number: Assert.Equal(2' siteInfos.Count);
Magic Number,ProductivityApiTests,DetectChangesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DetectChangesTests.cs,Change_tracking_of_mutated_complex_types_happens_correctly_for_proxies,The following statement contains a magic number: product.Properties = new ProductProperties                                           {                                               SpecialOfferCode = "YEAST"'                                               StockCount = 77'                                               UnitCost = 1.99m                                           };
Magic Number,ProductivityApiTests,DetectChangesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DetectChangesTests.cs,Change_tracking_of_mutated_complex_types_happens_correctly_for_proxies,The following statement contains a magic number: product.Properties = new ProductProperties                                           {                                               SpecialOfferCode = "YEAST"'                                               StockCount = 77'                                               UnitCost = 1.99m                                           };
Magic Number,ProductivityApiTests,DetectChangesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DetectChangesTests.cs,Change_tracking_of_mutated_complex_types_happens_correctly_for_proxies,The following statement contains a magic number: product.Properties.StockCount = 75;
Magic Number,ProductivityApiTests,DetectChangesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DetectChangesTests.cs,DetectChanges_does_not_consider_change_tracking_proxies_with_no_complex_types,The following statement contains a magic number: product.Properties = new ProductProperties                                               {                                                   SpecialOfferCode = "YEAST"'                                                   StockCount = 77'                                                   UnitCost = 1.99m                                               };
Magic Number,ProductivityApiTests,DetectChangesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DetectChangesTests.cs,DetectChanges_does_not_consider_change_tracking_proxies_with_no_complex_types,The following statement contains a magic number: product.Properties = new ProductProperties                                               {                                                   SpecialOfferCode = "YEAST"'                                                   StockCount = 77'                                                   UnitCost = 1.99m                                               };
Magic Number,ProductivityApiTests,DetectChangesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DetectChangesTests.cs,DetectChanges_does_not_consider_change_tracking_proxies_with_no_complex_types,The following statement contains a magic number: i < 2
Magic Number,ProductivityApiTests,DetectChangesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DetectChangesTests.cs,DetectChanges_does_not_consider_change_tracking_proxies_with_no_complex_types,The following statement contains a magic number: Assert.Equal(2' ProxyProduct.ReadCount);
Magic Number,ProductivityApiTests,DetectChangesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DetectChangesTests.cs,Calling_DetectChanges_with_nested_complex_property_null_after_Attach_with_change_to_another_property_should_not_throw,The following statement contains a magic number: var entry = context.Entry(                      new Model36323                          {                              Id = 14'                              Contact = new ContactInfo36323                                            {                                                First = "Name"'                                                HomePhone = new Phone36323                                                                {                                                                    Number = "12345"                                                                }                                            }                          });
Magic Number,ProductivityApiTests,DetectChangesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DetectChangesTests.cs,Calling_DetectChanges_twice_for_nested_complex_type_that_was_null_but_is_no_longer_null_should_work_and_original_value_should_be_null,The following statement contains a magic number: Assert.Equal(18' entry.ComplexProperty(b => b.Address).Property(a => a.SiteInfo).CurrentValue.Zone);
Magic Number,ProductivityApiTests,DetectChangesTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\DetectChangesTests.cs,CreateSiteInfo,The following statement contains a magic number: return new SiteInfo                         {                             Zone = 18'                             Environment = "Dungy"                         };
Magic Number,ProductivityApiTests,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\enumtests.cs,Translate_from_int_to_int_should_not_always_return_zero,The following statement contains a magic number: Assert.Equal(3' objectContext.Translate<int>(dtr).Single());
Magic Number,ProductivityApiTests,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\enumtests.cs,Translate_from_long_to_long_should_not_always_return_zero,The following statement contains a magic number: Assert.Equal(3L' objectContext.Translate<long>(dtr).Single());
Magic Number,ProductivityApiTests,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\enumtests.cs,CreateIntReader,The following statement contains a magic number: dt.LoadDataRow(new object[] { 3 }' true);
Magic Number,ProductivityApiTests,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\enumtests.cs,CreateLongReader,The following statement contains a magic number: dt.LoadDataRow(new object[] { 3 }' true);
Magic Number,ProductivityApiTests,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\enumtests.cs,CreateULongReader,The following statement contains a magic number: dt.LoadDataRow(new object[] { 3 }' true);
Magic Number,ProductivityApiTests,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\enumtests.cs,CreateIntIntULongReader,The following statement contains a magic number: dt.LoadDataRow(new object[] { 3' 3' 3UL }' true);
Magic Number,ProductivityApiTests,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\enumtests.cs,CreateIntIntULongReader,The following statement contains a magic number: dt.LoadDataRow(new object[] { 3' 3' 3UL }' true);
Magic Number,ProductivityApiTests,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\enumtests.cs,CreateIntIntULongReader,The following statement contains a magic number: dt.LoadDataRow(new object[] { 3' 3' 3UL }' true);
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_count_without_loading_collection,The following statement contains a magic number: Assert.Equal(3' post.Comments.Count);
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_count_even_when_collection_is_loaded,The following statement contains a magic number: Assert.Equal(3' post.Comments.Count);
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_count_even_when_collection_is_loaded,The following statement contains a magic number: Assert.Equal(3' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_database_count_not_collection_count,The following statement contains a magic number: Assert.Equal(3' post.Comments.Count);
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_database_count_not_collection_count,The following statement contains a magic number: Assert.Equal(4' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,Enumerating_the_LazyCountCollection_causes_it_to_be_lazy_loaded,The following statement contains a magic number: Assert.Equal(3' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_count_even_when_collection_is_eager_loaded,The following statement contains a magic number: Assert.Equal(3' post.Comments.Count);
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_count_even_when_collection_is_eager_loaded,The following statement contains a magic number: Assert.Equal(3' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,QueryableCollection_can_be_used_to_load_filtered_results,The following statement contains a magic number: Assert.Equal(2' unicornComments.Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,QueryableCollection_can_be_used_to_load_filtered_results,The following statement contains a magic number: Assert.Equal(2' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,IHasIsLoaded_can_be_used_to_set_IsLoaded_after_a_filtered_query,The following statement contains a magic number: Assert.Equal(2' post.Comments.Count);
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,IHasIsLoaded_can_be_used_to_set_IsLoaded_after_a_filtered_query,The following statement contains a magic number: Assert.Equal(2' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_count_without_loading_collection_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(3' post.Comments.Count);
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_count_without_loading_collection_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(3' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_count_even_when_collection_is_loaded_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(3' post.Comments.Count);
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_count_even_when_collection_is_loaded_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(3' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_database_count_not_collection_count_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(4' post.Comments.Count);
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_database_count_not_collection_count_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(4' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,Enumerating_the_LazyCountCollection_causes_it_to_be_lazy_loaded_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(3' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,Adding_to_the_LazyCountCollection_does_not_cause_it_to_be_lazy_loaded_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(4' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_count_even_when_collection_is_eager_loaded_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(3' post.Comments.Count);
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,LazyCountCollection_Count_returns_count_even_when_collection_is_eager_loaded_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(3' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,QueryableCollection_can_be_used_for_First_without_loading_entire_collection_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(3' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,QueryableCollection_can_be_used_to_load_filtered_results_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(2' unicornComments.Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,QueryableCollection_can_be_used_to_load_filtered_results_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(3' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,IHasIsLoaded_can_be_used_to_set_IsLoaded_after_a_filtered_query_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(3' post.Comments.Count);
Magic Number,ProductivityApiTests,ExtraLazyLoadingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\extralazyloadingtests.cs,IHasIsLoaded_can_be_used_to_set_IsLoaded_after_a_filtered_query_with_Load_from_Enumerator,The following statement contains a magic number: Assert.Equal(3' context.ChangeTracker.Entries<LazyComment>().Count());
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_returns_null_if_entity_is_not_found,The following statement contains a magic number: Find_returns_null_if_entity_is_not_found_implementation(c => c.Products.Find(-666));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_returns_null_if_entity_is_not_found,The following statement contains a magic number: Find_returns_null_if_entity_is_not_found_implementation(c => c.Set(typeof(Product)).Find(-666));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_int_key_on_Base_Set_returns_derived_entity_from_store,The following statement contains a magic number: Find_with_int_key_on_Base_Set_returns_derived_entity_from_store_implementation(c => c.Products.Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_with_int_key_on_Base_Set_returns_derived_entity_from_store,The following statement contains a magic number: Find_with_int_key_on_Base_Set_returns_derived_entity_from_store_implementation(                  c => c.Set(typeof(Product)).Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_int_key_on_Base_Set_returns_derived_entity_from_store_implementation,The following statement contains a magic number: Assert.Equal(7' product.Id);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_entity_from_store_implementation,The following statement contains a magic number: var byteKey = new byte[] { 1' 9' 7' 3 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_entity_from_store_implementation,The following statement contains a magic number: var byteKey = new byte[] { 1' 9' 7' 3 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_entity_from_store_implementation,The following statement contains a magic number: var byteKey = new byte[] { 1' 9' 7' 3 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_int_key_returns_entity_from_state_manager,The following statement contains a magic number: Find_with_int_key_returns_entity_from_state_manager_implementation(c => c.Products.Find(2));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_with_int_key_returns_entity_from_state_manager,The following statement contains a magic number: Find_with_int_key_returns_entity_from_state_manager_implementation(c => c.Set(typeof(Product)).Find(2));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_int_key_returns_entity_from_state_manager_implementation,The following statement contains a magic number: Assert.Equal(2' product1.Id);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_int_key_returns_derived_entity_state_manager,The following statement contains a magic number: Find_with_int_key_returns_derived_entity_state_manager_implementation(c => c.Products.Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_with_int_key_returns_derived_entity_state_manager,The following statement contains a magic number: Find_with_int_key_returns_derived_entity_state_manager_implementation(c => c.Set(typeof(Product)).Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_int_key_returns_derived_entity_state_manager_implementation,The following statement contains a magic number: Assert.Equal(7' product.Id);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_entity_from_state_manager_implementation,The following statement contains a magic number: var byteKey = new byte[] { 1' 9' 7' 3 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_entity_from_state_manager_implementation,The following statement contains a magic number: var byteKey = new byte[] { 1' 9' 7' 3 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_entity_from_state_manager_implementation,The following statement contains a magic number: var byteKey = new byte[] { 1' 9' 7' 3 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_int_key_returns_Added_entity_from_state_manager_implementation,The following statement contains a magic number: var notMatchedAddedProduct = new Product                                                   {                                                       Id = -2'                                                       Name = "Yam"                                                   };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_int_key_returns_Added_entity_from_state_manager_implementation,The following statement contains a magic number: Assert.Equal(2' GetStateEntries(context).Count());
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_int_key_returns_added_derived_entity_from_state_manager,The following statement contains a magic number: Find_with_int_key_returns_added_derived_entity_from_state_manager_implementation(c => c.Products.Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_with_int_key_returns_added_derived_entity_from_state_manager,The following statement contains a magic number: Find_with_int_key_returns_added_derived_entity_from_state_manager_implementation(                  c => c.Set(typeof(Product)).Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_int_key_returns_added_derived_entity_from_state_manager_implementation,The following statement contains a magic number: Assert.Equal(7' product.Id);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_string_key_returns_Added_entity_from_state_manager_implementation,The following statement contains a magic number: Assert.Equal(2' GetStateEntries(context).Count());
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_Added_entity_from_state_manager_implementation,The following statement contains a magic number: var notMatchedByteKey = new byte[] { 4' 3' 2' 1 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_Added_entity_from_state_manager_implementation,The following statement contains a magic number: var notMatchedByteKey = new byte[] { 4' 3' 2' 1 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_Added_entity_from_state_manager_implementation,The following statement contains a magic number: var notMatchedByteKey = new byte[] { 4' 3' 2' 1 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_Added_entity_from_state_manager_implementation,The following statement contains a magic number: var byteKey = new byte[] { 1' 2' 3' 4 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_Added_entity_from_state_manager_implementation,The following statement contains a magic number: var byteKey = new byte[] { 1' 2' 3' 4 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_Added_entity_from_state_manager_implementation,The following statement contains a magic number: var byteKey = new byte[] { 1' 2' 3' 4 };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_with_binary_key_returns_Added_entity_from_state_manager_implementation,The following statement contains a magic number: Assert.Equal(2' GetStateEntries(context).Count());
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_returns_Unchanged_entity_from_state_manager_even_if_key_matches_Added_entity_implementation,The following statement contains a magic number: Assert.Equal(2' GetStateEntries(context).Count());
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_returns_derived_entity_in_unchanged_state_in_preference_to_added_from_state_manager_Sanity_test_implementation,The following statement contains a magic number: var keyToFind = 7;
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_returns_derived_entity_in_unchanged_state_in_preference_to_added_from_state_manager_Sanity_test_implementation,The following statement contains a magic number: var product = context.Set<FeaturedProduct>().Find(7);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_returns_derived_entity_in_unchanged_state_in_preference_to_added_from_state_manager_Sanity_test_implementation,The following statement contains a magic number: var addedProduct = new FeaturedProduct                                         {                                             Id = 7'                                             Name = "Benz"'                                             CategoryId = "Cars"                                         };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_derived_type_from_state_manager_in_unchanged_state_in_preference_to_Added_base_type_entity,The following statement contains a magic number: var keyToFind = 7;
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_derived_type_from_state_manager_in_unchanged_state_in_preference_to_Added_base_type_entity,The following statement contains a magic number: var unchangedProduct = context.Set<FeaturedProduct>().Find(7);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_derived_type_from_state_manager_in_unchanged_state_in_preference_to_Added_base_type_entity,The following statement contains a magic number: var addedProduct = new Product                                         {                                             Id = 7'                                             Name = "Nutella"                                         };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_derived_type_from_state_manager_in_unchanged_state_in_preference_to_Added_base_type_entity,The following statement contains a magic number: Assert.Equal(7' foundProduct.Id);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_for_base_type_can_return_derived_type,The following statement contains a magic number: Find_for_base_type_can_return_derived_type_implementation(c => c.Products.Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_for_base_type_can_return_derived_type,The following statement contains a magic number: Find_for_base_type_can_return_derived_type_implementation(c => c.Set(typeof(Product)).Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_for_base_type_can_return_derived_type_implementation,The following statement contains a magic number: Assert.Equal(7' product.Id);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_on_Derived_Set_a_derived_entity_that_lives_in_store_Sanity_test,The following statement contains a magic number: Find_on_Derived_Set_a_derived_entity_that_lives_in_store_Sanity_test_implementation(s => s.Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_on_Derived_Set_a_derived_entity_that_lives_in_store_Sanity_test_implementation,The following statement contains a magic number: Assert.Equal(7' product.Id);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_on_Derived_Set_a_derived_entity_that_lives_in_state_manager_Sanity_test,The following statement contains a magic number: Find_on_Derived_Set_a_derived_entity_that_lives_in_state_manager_Sanity_test_implementation(s => s.Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_on_Derived_Set_a_derived_entity_that_lives_in_state_manager_Sanity_test_implementation,The following statement contains a magic number: Assert.Equal(7' product.Id);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_derived_entity_in_added_state_from_state_manager_Sanity_test,The following statement contains a magic number: Find_derived_entity_in_added_state_from_state_manager_Sanity_test_implementation(s => s.Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_derived_entity_in_added_state_from_state_manager_Sanity_test_implementation,The following statement contains a magic number: var newProduct = new FeaturedProduct                                       {                                           Id = 7'                                           Name = "Red Bull"'                                           CategoryId = "Beverages"                                       };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_derived_entity_in_added_state_from_state_manager_Sanity_test_implementation,The following statement contains a magic number: Assert.Equal(7' product.Id);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_which_was_just_detected_by_Detect_Changes_in_the_Find_Call,The following statement contains a magic number: Find_an_entity_which_was_just_detected_by_Detect_Changes_in_the_Find_Call_implementation(                  c => c.Products.Find(-55));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_which_was_just_detected_by_Detect_Changes_in_the_Find_Call,The following statement contains a magic number: Find_an_entity_which_was_just_detected_by_Detect_Changes_in_the_Find_Call_implementation(                  c => c.Set(typeof(Product)).Find(-55));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_which_was_just_detected_by_Detect_Changes_in_the_Find_Call_implementation,The following statement contains a magic number: var product = new Product                                    {                                        Id = -55'                                        Name = "Red Velvet"                                    };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_which_was_just_detected_by_Detect_Changes_in_the_Find_Call_implementation,The following statement contains a magic number: Assert.Equal(foundProduct.Id' -55);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_returns_null_if_entity_is_not_found,The following statement contains a magic number: Find_returns_null_if_entity_is_not_found_implementation(c => c.Products.FindAsync(-666).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_returns_null_if_entity_is_not_found,The following statement contains a magic number: Find_returns_null_if_entity_is_not_found_implementation(c => c.Set(typeof(Product)).FindAsync(-666).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_with_int_key_on_Base_Set_returns_derived_entity_from_store,The following statement contains a magic number: Find_with_int_key_on_Base_Set_returns_derived_entity_from_store_implementation(c => c.Products.FindAsync(7).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_with_int_key_on_Base_Set_returns_derived_entity_from_store,The following statement contains a magic number: Find_with_int_key_on_Base_Set_returns_derived_entity_from_store_implementation(                  c => c.Set(typeof(Product)).FindAsync(7).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_with_int_key_returns_entity_from_state_manager,The following statement contains a magic number: Find_with_int_key_returns_entity_from_state_manager_implementation(c => c.Products.FindAsync(2).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_with_int_key_returns_entity_from_state_manager,The following statement contains a magic number: Find_with_int_key_returns_entity_from_state_manager_implementation(c => c.Set(typeof(Product)).FindAsync(2).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_with_int_key_returns_derived_entity_state_manager,The following statement contains a magic number: Find_with_int_key_returns_derived_entity_state_manager_implementation(c => c.Products.FindAsync(7).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_with_int_key_returns_derived_entity_state_manager,The following statement contains a magic number: Find_with_int_key_returns_derived_entity_state_manager_implementation(c => c.Set(typeof(Product)).FindAsync(7).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_with_int_key_returns_added_derived_entity_from_state_manager,The following statement contains a magic number: Find_with_int_key_returns_added_derived_entity_from_state_manager_implementation(c => c.Products.FindAsync(7).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_with_int_key_returns_added_derived_entity_from_state_manager,The following statement contains a magic number: Find_with_int_key_returns_added_derived_entity_from_state_manager_implementation(                  c => c.Set(typeof(Product)).FindAsync(7).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_for_base_type_can_return_derived_type,The following statement contains a magic number: Find_for_base_type_can_return_derived_type_implementation(c => c.Products.FindAsync(7).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_for_base_type_can_return_derived_type,The following statement contains a magic number: Find_for_base_type_can_return_derived_type_implementation(c => c.Set(typeof(Product)).FindAsync(7).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_on_Derived_Set_a_derived_entity_that_lives_in_store_Sanity_test,The following statement contains a magic number: Find_on_Derived_Set_a_derived_entity_that_lives_in_store_Sanity_test_implementation(s => s.FindAsync(7).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_on_Derived_Set_a_derived_entity_that_lives_in_state_manager_Sanity_test,The following statement contains a magic number: Find_on_Derived_Set_a_derived_entity_that_lives_in_state_manager_Sanity_test_implementation(s => s.FindAsync(7).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_derived_entity_in_added_state_from_state_manager_Sanity_test,The following statement contains a magic number: Find_derived_entity_in_added_state_from_state_manager_Sanity_test_implementation(s => s.FindAsync(7).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_which_was_just_detected_by_Detect_Changes_in_the_Find_Call,The following statement contains a magic number: Find_an_entity_which_was_just_detected_by_Detect_Changes_in_the_Find_Call_implementation(                  c => c.Products.FindAsync(-55).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_which_was_just_detected_by_Detect_Changes_in_the_Find_Call,The following statement contains a magic number: Find_an_entity_which_was_just_detected_by_Detect_Changes_in_the_Find_Call_implementation(                  c => c.Set(typeof(Product)).FindAsync(-55).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_float_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<FloatKeyEntity>((s' v) => s.Find(v)' 33.2F);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_decimal_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DecimalKeyEntity>((s' v) => s.Find(v)' 300.5m);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_double_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DoubleKeyEntity>((s' v) => s.Find(v)' 1.7E+3D);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_long_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<LongKeyEntity>((s' v) => s.Find(v)' 4294967296L);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_short_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<ShortKeyEntity>((s' v) => s.Find(v)' (short)32767);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_byte_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<ByteKeyEntity>((s' v) => s.Find(v)' (byte)255);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_TimeSpan_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<TimeSpanKeyEntity>((s' v) => s.Find(v)' new TimeSpan(2' 14' 18));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_TimeSpan_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<TimeSpanKeyEntity>((s' v) => s.Find(v)' new TimeSpan(2' 14' 18));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_TimeSpan_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<TimeSpanKeyEntity>((s' v) => s.Find(v)' new TimeSpan(2' 14' 18));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_DateTime_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeKeyEntity>((s' v) => s.Find(v)' new DateTime(2008' 5' 1' 8' 30' 52));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_DateTime_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeKeyEntity>((s' v) => s.Find(v)' new DateTime(2008' 5' 1' 8' 30' 52));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_DateTime_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeKeyEntity>((s' v) => s.Find(v)' new DateTime(2008' 5' 1' 8' 30' 52));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_DateTime_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeKeyEntity>((s' v) => s.Find(v)' new DateTime(2008' 5' 1' 8' 30' 52));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_DateTime_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeKeyEntity>((s' v) => s.Find(v)' new DateTime(2008' 5' 1' 8' 30' 52));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_DateTimeOffset_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeOffSetKeyEntity>(                  (s' v) => s.Find(v)'                  new DateTimeOffset(new DateTime(2008' 5' 1' 8' 30' 52)));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_DateTimeOffset_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeOffSetKeyEntity>(                  (s' v) => s.Find(v)'                  new DateTimeOffset(new DateTime(2008' 5' 1' 8' 30' 52)));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_DateTimeOffset_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeOffSetKeyEntity>(                  (s' v) => s.Find(v)'                  new DateTimeOffset(new DateTime(2008' 5' 1' 8' 30' 52)));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_DateTimeOffset_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeOffSetKeyEntity>(                  (s' v) => s.Find(v)'                  new DateTimeOffset(new DateTime(2008' 5' 1' 8' 30' 52)));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_entity_with_DateTimeOffset_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeOffSetKeyEntity>(                  (s' v) => s.Find(v)'                  new DateTimeOffset(new DateTime(2008' 5' 1' 8' 30' 52)));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_float_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<FloatKeyEntity>((s' v) => s.FindAsync(v).Result' 33.2F);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_decimal_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DecimalKeyEntity>((s' v) => s.FindAsync(v).Result' 300.5m);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_double_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DoubleKeyEntity>((s' v) => s.FindAsync(v).Result' 1.7E+3D);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_long_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<LongKeyEntity>((s' v) => s.FindAsync(v).Result' 4294967296L);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_short_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<ShortKeyEntity>((s' v) => s.FindAsync(v).Result' (short)32767);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_byte_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<ByteKeyEntity>((s' v) => s.FindAsync(v).Result' (byte)255);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_TimeSpan_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<TimeSpanKeyEntity>((s' v) => s.FindAsync(v).Result' new TimeSpan(2' 14' 18));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_TimeSpan_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<TimeSpanKeyEntity>((s' v) => s.FindAsync(v).Result' new TimeSpan(2' 14' 18));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_TimeSpan_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<TimeSpanKeyEntity>((s' v) => s.FindAsync(v).Result' new TimeSpan(2' 14' 18));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_DateTime_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeKeyEntity>(                  (s' v) => s.FindAsync(v).Result' new DateTime(2008' 5' 1' 8' 30' 52));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_DateTime_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeKeyEntity>(                  (s' v) => s.FindAsync(v).Result' new DateTime(2008' 5' 1' 8' 30' 52));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_DateTime_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeKeyEntity>(                  (s' v) => s.FindAsync(v).Result' new DateTime(2008' 5' 1' 8' 30' 52));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_DateTime_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeKeyEntity>(                  (s' v) => s.FindAsync(v).Result' new DateTime(2008' 5' 1' 8' 30' 52));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_DateTime_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeKeyEntity>(                  (s' v) => s.FindAsync(v).Result' new DateTime(2008' 5' 1' 8' 30' 52));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_DateTimeOffset_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeOffSetKeyEntity>(                  (s' v) => s.FindAsync(v).Result'                  new DateTimeOffset(new DateTime(2008' 5' 1' 8' 30' 52)));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_DateTimeOffset_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeOffSetKeyEntity>(                  (s' v) => s.FindAsync(v).Result'                  new DateTimeOffset(new DateTime(2008' 5' 1' 8' 30' 52)));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_DateTimeOffset_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeOffSetKeyEntity>(                  (s' v) => s.FindAsync(v).Result'                  new DateTimeOffset(new DateTime(2008' 5' 1' 8' 30' 52)));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_DateTimeOffset_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeOffSetKeyEntity>(                  (s' v) => s.FindAsync(v).Result'                  new DateTimeOffset(new DateTime(2008' 5' 1' 8' 30' 52)));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_entity_with_DateTimeOffset_key_from_store,The following statement contains a magic number: Find_entity_with_key_from_store_implementation<DateTimeOffSetKeyEntity>(                  (s' v) => s.FindAsync(v).Result'                  new DateTimeOffset(new DateTime(2008' 5' 1' 8' 30' 52)));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 201' 202' 203' 204 }' 4' "TheOneWithBinaryKeyLength4"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 201' 202' 203' 204 }' 4' "TheOneWithBinaryKeyLength4"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 201' 202' 203' 204 }' 4' "TheOneWithBinaryKeyLength4"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 201' 202' 203' 204 }' 4' "TheOneWithBinaryKeyLength4"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 201' 202' 203' 204 }' 4' "TheOneWithBinaryKeyLength4"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(                      new byte[] { 201' 202' 203' 204 }' 4'                      "TheOneWithBinaryKeyLength4"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(                      new byte[] { 201' 202' 203' 204 }' 4'                      "TheOneWithBinaryKeyLength4"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(                      new byte[] { 201' 202' 203' 204 }' 4'                      "TheOneWithBinaryKeyLength4"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(                      new byte[] { 201' 202' 203' 204 }' 4'                      "TheOneWithBinaryKeyLength4"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(                      new byte[] { 201' 202' 203' 204 }' 4'                      "TheOneWithBinaryKeyLength4"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation,The following statement contains a magic number: var foundEntity = context.CompositeKeyEntities.Find(                      new byte[] { 1' 2' 3' 4' 5' 6 }' 6'                      "TheOneWithBinaryKeyLength6");
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation,The following statement contains a magic number: var foundEntity = context.CompositeKeyEntities.Find(                      new byte[] { 1' 2' 3' 4' 5' 6 }' 6'                      "TheOneWithBinaryKeyLength6");
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation,The following statement contains a magic number: var foundEntity = context.CompositeKeyEntities.Find(                      new byte[] { 1' 2' 3' 4' 5' 6 }' 6'                      "TheOneWithBinaryKeyLength6");
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation,The following statement contains a magic number: var foundEntity = context.CompositeKeyEntities.Find(                      new byte[] { 1' 2' 3' 4' 5' 6 }' 6'                      "TheOneWithBinaryKeyLength6");
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation,The following statement contains a magic number: var foundEntity = context.CompositeKeyEntities.Find(                      new byte[] { 1' 2' 3' 4' 5' 6 }' 6'                      "TheOneWithBinaryKeyLength6");
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation,The following statement contains a magic number: var foundEntity = context.CompositeKeyEntities.Find(                      new byte[] { 1' 2' 3' 4' 5' 6 }' 6'                      "TheOneWithBinaryKeyLength6");
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation,The following statement contains a magic number: var compositeKeyEntity = new CompositeKeyEntity                                               {                                                   intKey = 6'                                                   binaryKey = new byte[] { 1' 2' 3' 4' 5' 6 }'                                                   stringKey = "TheOneWithBinaryKeyLength6"                                               };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation,The following statement contains a magic number: var compositeKeyEntity = new CompositeKeyEntity                                               {                                                   intKey = 6'                                                   binaryKey = new byte[] { 1' 2' 3' 4' 5' 6 }'                                                   stringKey = "TheOneWithBinaryKeyLength6"                                               };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation,The following statement contains a magic number: var compositeKeyEntity = new CompositeKeyEntity                                               {                                                   intKey = 6'                                                   binaryKey = new byte[] { 1' 2' 3' 4' 5' 6 }'                                                   stringKey = "TheOneWithBinaryKeyLength6"                                               };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation,The following statement contains a magic number: var compositeKeyEntity = new CompositeKeyEntity                                               {                                                   intKey = 6'                                                   binaryKey = new byte[] { 1' 2' 3' 4' 5' 6 }'                                                   stringKey = "TheOneWithBinaryKeyLength6"                                               };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation,The following statement contains a magic number: var compositeKeyEntity = new CompositeKeyEntity                                               {                                                   intKey = 6'                                                   binaryKey = new byte[] { 1' 2' 3' 4' 5' 6 }'                                                   stringKey = "TheOneWithBinaryKeyLength6"                                               };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation,The following statement contains a magic number: var compositeKeyEntity = new CompositeKeyEntity                                               {                                                   intKey = 6'                                                   binaryKey = new byte[] { 1' 2' 3' 4' 5' 6 }'                                                   stringKey = "TheOneWithBinaryKeyLength6"                                               };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation,The following statement contains a magic number: Assert.Equal(3' foundEntity.intKey);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation,The following statement contains a magic number: Assert.True(new byte[] { 230' 231' 232 }.SequenceEqual(foundEntity.binaryKey));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation,The following statement contains a magic number: Assert.True(new byte[] { 230' 231' 232 }.SequenceEqual(foundEntity.binaryKey));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation,The following statement contains a magic number: Assert.True(new byte[] { 230' 231' 232 }.SequenceEqual(foundEntity.binaryKey));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation,The following statement contains a magic number: var compositeEntity = new CompositeKeyEntityWithOrderingAnnotations                                            {                                                intKey = 3'                                                stringKey = "TheOneWithBinaryKeyLength3"'                                                binaryKey = new byte[] { 230' 231' 232 }                                            };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation,The following statement contains a magic number: var compositeEntity = new CompositeKeyEntityWithOrderingAnnotations                                            {                                                intKey = 3'                                                stringKey = "TheOneWithBinaryKeyLength3"'                                                binaryKey = new byte[] { 230' 231' 232 }                                            };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation,The following statement contains a magic number: var compositeEntity = new CompositeKeyEntityWithOrderingAnnotations                                            {                                                intKey = 3'                                                stringKey = "TheOneWithBinaryKeyLength3"'                                                binaryKey = new byte[] { 230' 231' 232 }                                            };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation,The following statement contains a magic number: var compositeEntity = new CompositeKeyEntityWithOrderingAnnotations                                            {                                                intKey = 3'                                                stringKey = "TheOneWithBinaryKeyLength3"'                                                binaryKey = new byte[] { 230' 231' 232 }                                            };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 201' 202' 203' 204 }' 4' "TheOneWithBinaryKeyLength4").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 201' 202' 203' 204 }' 4' "TheOneWithBinaryKeyLength4").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 201' 202' 203' 204 }' 4' "TheOneWithBinaryKeyLength4").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 201' 202' 203' 204 }' 4' "TheOneWithBinaryKeyLength4").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 201' 202' 203' 204 }' 4' "TheOneWithBinaryKeyLength4").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(                      new byte[] { 201' 202' 203' 204 }' 4'                      "TheOneWithBinaryKeyLength4").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(                      new byte[] { 201' 202' 203' 204 }' 4'                      "TheOneWithBinaryKeyLength4").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(                      new byte[] { 201' 202' 203' 204 }' 4'                      "TheOneWithBinaryKeyLength4").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(                      new byte[] { 201' 202' 203' 204 }' 4'                      "TheOneWithBinaryKeyLength4").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_store_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(                      new byte[] { 201' 202' 203' 204 }' 4'                      "TheOneWithBinaryKeyLength4").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_unchanged_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c => c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_from_state_manager_Added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_from_state_manager_Added_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).FindAsync(new byte[] { 1' 2' 3' 4' 5' 6 }' 6' "TheOneWithBinaryKeyLength6").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_store_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_unchanged_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_DataMember_Ordering_from_state_manager_added_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                      3'                      "TheOneWithBinaryKeyLength3"'                      new byte[] { 230' 231' 232 }).Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_throws_for_wrong_number_of_key_values,The following statement contains a magic number: Find_throws_for_wrong_number_of_key_values_implementation(c => c.Products.Find(1' 2));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_throws_for_wrong_number_of_key_values,The following statement contains a magic number: Find_throws_for_wrong_number_of_key_values_implementation(c => c.Set(typeof(Product)).Find(1' 2));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_in_derived_set_when_matching_base_type_lives_in_state_manager_in_added_state_and_matching_derived_type_lives_in_store,The following statement contains a magic number: Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store                  (EntityState.Added' c => c.Set<FeaturedProduct>().Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_in_derived_set_when_matching_base_type_lives_in_state_manager_in_unchanged_state_and_matching_derived_type_lives_in_store,The following statement contains a magic number: Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store                  (EntityState.Unchanged' c => c.Set<FeaturedProduct>().Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_in_derived_set_when_matching_base_type_lives_in_state_manager_in_deleted_state_and_matching_derived_type_lives_in_store,The following statement contains a magic number: Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store                  (EntityState.Deleted' c => c.Set<FeaturedProduct>().Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store,The following statement contains a magic number: var product = new Product                                    {                                        Id = 7'                                        Name = "Benz"'                                        CategoryId = "Cars"                                    };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_in_derived_set_when_matching_base_type_entity_lives_in_unchanged_and_matching_derived_type_lives_in_added_state_in_state_manager,The following statement contains a magic number: Find_in_derived_set_when_matching_base_type_entity_lives_in_unchanged_and_matching_derived_type_lives_in_added_state_in_state_manager_implementation                  (c => c.Set<FeaturedProduct>().Find(7));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_in_derived_set_when_matching_base_type_entity_lives_in_unchanged_and_matching_derived_type_lives_in_added_state_in_state_manager_implementation,The following statement contains a magic number: var actualProduct = context.Products.Find(7);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_in_derived_set_when_matching_base_type_entity_lives_in_unchanged_and_matching_derived_type_lives_in_added_state_in_state_manager_implementation,The following statement contains a magic number: var product = new Product                                    {                                        Id = 7'                                        Name = "Benz"'                                        CategoryId = "Cars"                                    };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.CompositeKeyEntities.Find(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4")'                  findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.CompositeKeyEntities.Find(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4")'                  findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.CompositeKeyEntities.Find(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4")'                  findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.CompositeKeyEntities.Find(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4")'                  findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.CompositeKeyEntities.Find(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4")'                  findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(                      4' new byte[] { 201' 202' 203' 204 }'                      "TheOneWithBinaryKeyLength4")' findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(                      4' new byte[] { 201' 202' 203' 204 }'                      "TheOneWithBinaryKeyLength4")' findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(                      4' new byte[] { 201' 202' 203' 204 }'                      "TheOneWithBinaryKeyLength4")' findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(                      4' new byte[] { 201' 202' 203' 204 }'                      "TheOneWithBinaryKeyLength4")' findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  c.Set(typeof(CompositeKeyEntity)).Find(                      4' new byte[] { 201' 202' 203' 204 }'                      "TheOneWithBinaryKeyLength4")' findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.CompositeKeyEntities.Find(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4")'                  findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.CompositeKeyEntities.Find(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4")'                  findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.CompositeKeyEntities.Find(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4")'                  findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.CompositeKeyEntities.Find(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4")'                  findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.CompositeKeyEntities.Find(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4")'                  findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.Set(typeof(CompositeKeyEntity)).Find(                      4' new byte[] { 201' 202' 203' 204 }'                      "TheOneWithBinaryKeyLength4")' findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.Set(typeof(CompositeKeyEntity)).Find(                      4' new byte[] { 201' 202' 203' 204 }'                      "TheOneWithBinaryKeyLength4")' findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.Set(typeof(CompositeKeyEntity)).Find(                      4' new byte[] { 201' 202' 203' 204 }'                      "TheOneWithBinaryKeyLength4")' findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.Set(typeof(CompositeKeyEntity)).Find(                      4' new byte[] { 201' 202' 203' 204 }'                      "TheOneWithBinaryKeyLength4")' findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_Find_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => c.Set(typeof(CompositeKeyEntity)).Find(                      4' new byte[] { 201' 202' 203' 204 }'                      "TheOneWithBinaryKeyLength4")' findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation,The following statement contains a magic number: var actual = context.CompositeKeyEntities.Find(                          new byte[] { 201' 202' 203' 204 }' 4'                          "TheOneWithBinaryKeyLength4");
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation,The following statement contains a magic number: var actual = context.CompositeKeyEntities.Find(                          new byte[] { 201' 202' 203' 204 }' 4'                          "TheOneWithBinaryKeyLength4");
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation,The following statement contains a magic number: var actual = context.CompositeKeyEntities.Find(                          new byte[] { 201' 202' 203' 204 }' 4'                          "TheOneWithBinaryKeyLength4");
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation,The following statement contains a magic number: var actual = context.CompositeKeyEntities.Find(                          new byte[] { 201' 202' 203' 204 }' 4'                          "TheOneWithBinaryKeyLength4");
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation,The following statement contains a magic number: var actual = context.CompositeKeyEntities.Find(                          new byte[] { 201' 202' 203' 204 }' 4'                          "TheOneWithBinaryKeyLength4");
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_returns_added_entity_which_contains_partially_null_composite_key,The following statement contains a magic number: Find_returns_added_entity_which_contains_partially_null_composite_key_implementation(                  s => s.Find(null' 6' "TheOneWithNullBinaryKey"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_returns_added_entity_which_contains_partially_null_composite_key_implementation,The following statement contains a magic number: var compositeKeyEntity = new CompositeKeyEntity                                               {                                                   intKey = 6'                                                   binaryKey = null'                                                   stringKey = "TheOneWithNullBinaryKey"                                               };
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_returns_null_when_no_added_entity_which_contains_partially_null_composite_key_is_found,The following statement contains a magic number: Find_returns_null_when_no_added_entity_which_contains_partially_null_composite_key_is_found_implementation(                  s => s.Find(null' 6' "TheOneWithNullBinaryKey"));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      new byte[] { 1' 2' 3' 4 }' "Composite1"' 1));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      new byte[] { 1' 2' 3' 4 }' "Composite1"' 1));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      new byte[] { 1' 2' 3' 4 }' "Composite1"' 1));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_No_Ordering_Defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_No_Ordering_Defined_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4 }' 2.3F' 1));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_No_Ordering_Defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_No_Ordering_Defined_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4 }' 2.3F' 1));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_No_Ordering_Defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_No_Ordering_Defined_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4 }' 2.3F' 1));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_an_entity_with_Composite_Key_With_No_Ordering_Defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_No_Ordering_Defined_implementation(                  c => c.CompositeKeyEntities.Find(new byte[] { 1' 2' 3' 4 }' 2.3F' 1));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_composite_entity_by_specifying_some_of_its_keys_in_an_array,The following statement contains a magic number: Find_composite_entity_by_specifying_some_of_its_keys_in_an_array_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      new object[] { 2' "TheOneWithBinaryKeyLength2" }' new byte[] { 220' 221 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_composite_entity_by_specifying_some_of_its_keys_in_an_array,The following statement contains a magic number: Find_composite_entity_by_specifying_some_of_its_keys_in_an_array_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      new object[] { 2' "TheOneWithBinaryKeyLength2" }' new byte[] { 220' 221 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Find_composite_entity_by_specifying_some_of_its_keys_in_an_array,The following statement contains a magic number: Find_composite_entity_by_specifying_some_of_its_keys_in_an_array_implementation(                  c => c.CompositeKeyEntitiesWithOrderingAnnotations.Find(                      new object[] { 2' "TheOneWithBinaryKeyLength2" }' new byte[] { 220' 221 }));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_throws_for_wrong_number_of_key_values,The following statement contains a magic number: Find_throws_for_wrong_number_of_key_values_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.Products.FindAsync(1' 2).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_throws_for_wrong_number_of_key_values,The following statement contains a magic number: Find_throws_for_wrong_number_of_key_values_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.Set(typeof(Product)).FindAsync(1' 2).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_in_derived_set_when_matching_base_type_lives_in_state_manager_in_added_state_and_matching_derived_type_lives_in_store,The following statement contains a magic number: Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store                  (EntityState.Added' c => ExceptionHelpers.UnwrapAggregateExceptions(() => c.Set<FeaturedProduct>().FindAsync(7).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_in_derived_set_when_matching_base_type_lives_in_state_manager_in_unchanged_state_and_matching_derived_type_lives_in_store,The following statement contains a magic number: Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store                  (EntityState.Unchanged' c => ExceptionHelpers.UnwrapAggregateExceptions(() => c.Set<FeaturedProduct>().FindAsync(7).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_in_derived_set_when_matching_base_type_lives_in_state_manager_in_deleted_state_and_matching_derived_type_lives_in_store,The following statement contains a magic number: Find_derived_entity_when_matching_base_type_lives_in_state_manager_in_added_unchanged_or_deleted_state_and_matching_derived_type_lives_in_store                  (EntityState.Deleted' c => ExceptionHelpers.UnwrapAggregateExceptions(() => c.Set<FeaturedProduct>().FindAsync(7).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_in_derived_set_when_matching_base_type_entity_lives_in_unchanged_and_matching_derived_type_lives_in_added_state_in_state_manager,The following statement contains a magic number: Find_in_derived_set_when_matching_base_type_entity_lives_in_unchanged_and_matching_derived_type_lives_in_added_state_in_state_manager_implementation                  (c => ExceptionHelpers.UnwrapAggregateExceptions(() => c.Set<FeaturedProduct>().FindAsync(7).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntities.FindAsync(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4").Result)'                  findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntities.FindAsync(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4").Result)'                  findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntities.FindAsync(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4").Result)'                  findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntities.FindAsync(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4").Result)'                  findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntities.FindAsync(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4").Result)'                  findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () =>                      c.Set(typeof(CompositeKeyEntity)).FindAsync(                          4' new byte[] { 201' 202' 203' 204 }'                          "TheOneWithBinaryKeyLength4").Result)' findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () =>                      c.Set(typeof(CompositeKeyEntity)).FindAsync(                          4' new byte[] { 201' 202' 203' 204 }'                          "TheOneWithBinaryKeyLength4").Result)' findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () =>                      c.Set(typeof(CompositeKeyEntity)).FindAsync(                          4' new byte[] { 201' 202' 203' 204 }'                          "TheOneWithBinaryKeyLength4").Result)' findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () =>                      c.Set(typeof(CompositeKeyEntity)).FindAsync(                          4' new byte[] { 201' 202' 203' 204 }'                          "TheOneWithBinaryKeyLength4").Result)' findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () =>                      c.Set(typeof(CompositeKeyEntity)).FindAsync(                          4' new byte[] { 201' 202' 203' 204 }'                          "TheOneWithBinaryKeyLength4").Result)' findInStateManager: false);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntities.FindAsync(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4").Result)'                  findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntities.FindAsync(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4").Result)'                  findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntities.FindAsync(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4").Result)'                  findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntities.FindAsync(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4").Result)'                  findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c =>                  ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntities.FindAsync(4' new byte[] { 201' 202' 203' 204 }' "TheOneWithBinaryKeyLength4").Result)'                  findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.Set(typeof(CompositeKeyEntity)).FindAsync(                          4' new byte[] { 201' 202' 203' 204 }'                          "TheOneWithBinaryKeyLength4").Result)' findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.Set(typeof(CompositeKeyEntity)).FindAsync(                          4' new byte[] { 201' 202' 203' 204 }'                          "TheOneWithBinaryKeyLength4").Result)' findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.Set(typeof(CompositeKeyEntity)).FindAsync(                          4' new byte[] { 201' 202' 203' 204 }'                          "TheOneWithBinaryKeyLength4").Result)' findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.Set(typeof(CompositeKeyEntity)).FindAsync(                          4' new byte[] { 201' 202' 203' 204 }'                          "TheOneWithBinaryKeyLength4").Result)' findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,Non_generic_FindAsync_an_entity_already_in_the_state_manager_with_Composite_Key_with_wrong_order_of_Keys,The following statement contains a magic number: Find_an_entity_with_Composite_Key_with_wrong_order_of_Keys_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.Set(typeof(CompositeKeyEntity)).FindAsync(                          4' new byte[] { 201' 202' 203' 204 }'                          "TheOneWithBinaryKeyLength4").Result)' findInStateManager: true);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_returns_added_entity_which_contains_partially_null_composite_key,The following statement contains a magic number: Find_returns_added_entity_which_contains_partially_null_composite_key_implementation(                  s => s.FindAsync(null' 6' "TheOneWithNullBinaryKey").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_returns_null_when_no_added_entity_which_contains_partially_null_composite_key_is_found,The following statement contains a magic number: Find_returns_null_when_no_added_entity_which_contains_partially_null_composite_key_is_found_implementation(                  s => s.FindAsync(null' 6' "TheOneWithNullBinaryKey").Result);
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                          new byte[] { 1' 2' 3' 4 }' "Composite1"' 1).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                          new byte[] { 1' 2' 3' 4 }' "Composite1"' 1).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_Key_Annotations_With_Wrong_Ordering_defined_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                          new byte[] { 1' 2' 3' 4 }' "Composite1"' 1).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_No_Ordering_Defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_No_Ordering_Defined_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () =>                      c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4 }' 2.3F' 1).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_No_Ordering_Defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_No_Ordering_Defined_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () =>                      c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4 }' 2.3F' 1).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_No_Ordering_Defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_No_Ordering_Defined_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () =>                      c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4 }' 2.3F' 1).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_an_entity_with_Composite_Key_With_No_Ordering_Defined,The following statement contains a magic number: Find_an_entity_with_Composite_Key_With_No_Ordering_Defined_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () =>                      c.CompositeKeyEntities.FindAsync(new byte[] { 1' 2' 3' 4 }' 2.3F' 1).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_composite_entity_by_specifying_some_of_its_keys_in_an_array,The following statement contains a magic number: Find_composite_entity_by_specifying_some_of_its_keys_in_an_array_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                          new object[] { 2' "TheOneWithBinaryKeyLength2" }' new byte[] { 220' 221 }).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_composite_entity_by_specifying_some_of_its_keys_in_an_array,The following statement contains a magic number: Find_composite_entity_by_specifying_some_of_its_keys_in_an_array_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                          new object[] { 2' "TheOneWithBinaryKeyLength2" }' new byte[] { 220' 221 }).Result));
Magic Number,ProductivityApiTests,FindTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\FindTests.cs,FindAsync_composite_entity_by_specifying_some_of_its_keys_in_an_array,The following statement contains a magic number: Find_composite_entity_by_specifying_some_of_its_keys_in_an_array_implementation(                  c => ExceptionHelpers.UnwrapAggregateExceptions(                      () => c.CompositeKeyEntitiesWithOrderingAnnotations.FindAsync(                          new object[] { 2' "TheOneWithBinaryKeyLength2" }' new byte[] { 220' 221 }).Result));
Magic Number,ProductivityApiTests,InvalidMappingContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\InvalidMappingModel\InvalidMappingContext.cs,OnModelCreating,The following statement contains a magic number: builder.Entity<InvalidDerivedProductDependent>().Property(p => p.SalePrice).IsRequired().HasColumnType("char").HasMaxLength(20).                  IsFixedLength();
Magic Number,ProductivityApiTests,InvalidMappingContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\InvalidMappingModel\InvalidMappingContext.cs,OnModelCreating,The following statement contains a magic number: builder.Entity<InvalidPrincipal>().Property(p => p.Description).HasColumnType("binary").HasMaxLength(10).IsFixedLength();
Magic Number,ProductivityApiTests,InvalidTypeTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\InvalidTypeTests.cs,Set_throws_only_when_used_if_type_not_in_the_model_even_if_type_is_anonymous,The following statement contains a magic number: var anon = new                  {                      Id = 4'                      Name = ""                  };
Magic Number,ProductivityApiTests,InvalidTypeTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\InvalidTypeTests.cs,Non_generic_Set_throws_only_when_used_if_type_not_in_the_model_even_if_type_is_anonymous,The following statement contains a magic number: var anon = new                  {                      Id = 4'                      Name = ""                  };
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Non_generic_DbQuery_ToString_contains_parameter_info_in_expected_format,The following statement contains a magic number: var sponsorInfo = new SponsorInfo(5);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,LINQ_with_OrderBy_and_Skip_results_in_IQueryable_that_is_DbQuery,The following statement contains a magic number: var query = context.Numbers.OrderBy(n => n.Id).Skip(4);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Where_Simple_1_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => from n in q                       where n.Value < 5                       select n' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Where_Simple_3_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => from p in q                       where p.UnitsInStock > 0 && p.UnitPrice > 3.00M                       select p' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Select_Anonymous_Types_2_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => from n in q                       select new                                  {                                      Digit = strings[n.Value]'                                      Even = (n.Value % 2 == 0)                                  }' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,SelectMany_Compound_from_2_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => from c in q                       from o in c.Orders                       where o.Total < 500.00M                       select new                                  {                                      CustomerId = c.Id'                                      OrderId = o.Id'                                      o.Total                                  }' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,SelectMany_Compound_from_3_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => from c in q                       from o in c.Orders                       where o.OrderDate >= new DateTime(1998' 1' 1)                       select new                                  {                                      CustomerId = c.Id'                                      OrderId = o.Id'                                      o.OrderDate                                  }' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,SelectMany_from_Assignment_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => from c in q                       from o in c.Orders                       where o.Total >= 2000.0M                       select new                                  {                                      CustomerId = c.Id'                                      OrderId = o.Id'                                      o.Total                                  }' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,SelectMany_Multiple_from_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: var cutoffDate = new DateTime(1997' 1' 1);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Take_Simple_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(q => q.Take(3)' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Take_Nested_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => (from c in q                        from o in c.Orders                        where c.Region == "WA"                        select new                                   {                                       c.Id'                                       OrderId = o.Id'                                       o.OrderDate                                   }).Take(3)' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Skip_Simple_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(q => q.OrderBy(n => n.Id).Skip(4)' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Skip_Nested_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => (from c in q                        from o in c.Orders                        where c.Region == "WA"                        orderby c.Id                        select new                                   {                                       c.Id'                                       OrderId = o.Id'                                       o.OrderDate                                   }).Skip(2)' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,TakeWhile_Simple_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(q => q.OrderBy(n => n.Id).TakeWhile(n => n.Value < 6)' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,SkipWhile_Simple_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(q => q.OrderBy(n => n.Id).SkipWhile(n => n.Value % 3 != 0)' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,GroupBy_Simple_1_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => from n in q                       group n by n.Value % 5                       into g                       select new                                  {                                      Remainder = g.Key'                                      Numbers = g                                  }' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,GroupBy_Comparer_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(q => q.GroupBy(w => w.Name.Substring(0' 2)' new CaseInsensitiveStringComparer())' ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,GroupBy_Comparer_Mapped_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => q.GroupBy(w => w.Name.Substring(0' 2)' a => a.Name.ToUpper()' new CaseInsensitiveStringComparer())'                  ToListExecutor' ToListAsyncExecutor);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,First_Simple_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => from p in q                       where p.Id == 12                       select p'                  q => ((IQueryable<ProductForLinq>)q).First()'  #if NET40                  q => ((IQueryable<ProductForLinq>)q).First());  #else                  q => ((IQueryable<ProductForLinq>)q).FirstAsync().Result);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,ElementAt_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => from n in q                       where n.Value > 5                       select n'                  q => ((IQueryable<NumberForLinq>)q).ElementAt(1)'                  q => null);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Single_Simple_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => from p in q                       where p.Id == 12                       select p'                  q => ((IQueryable<ProductForLinq>)q).Single()'  #if NET40                  q => ((IQueryable<ProductForLinq>)q).Single());  #else                  q => ((IQueryable<ProductForLinq>)q).SingleAsync().Result);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,All_Simple_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => q'                  q => ((IQueryable<NumberForLinq>)q).All(n => n.Value % 2 == 1)'  #if NET40                  q => ((IQueryable<NumberForLinq>)q).All(n => n.Value % 2 == 1));  #else                  q => ((IQueryable<NumberForLinq>)q).AllAsync(n => n.Value % 2 == 1).Result);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,All_Simple_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => q'                  q => ((IQueryable<NumberForLinq>)q).All(n => n.Value % 2 == 1)'  #if NET40                  q => ((IQueryable<NumberForLinq>)q).All(n => n.Value % 2 == 1));  #else                  q => ((IQueryable<NumberForLinq>)q).AllAsync(n => n.Value % 2 == 1).Result);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Contains_Simple_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => q.Select(n => n.Value)'                  q => ((IQueryable<int>)q).Contains(2)'  #if NET40                  q => ((IQueryable<int>)q).Contains(2));  #else                  q => ((IQueryable<int>)q).ContainsAsync(2).Result);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Contains_Simple_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => q.Select(n => n.Value)'                  q => ((IQueryable<int>)q).Contains(2)'  #if NET40                  q => ((IQueryable<int>)q).Contains(2));  #else                  q => ((IQueryable<int>)q).ContainsAsync(2).Result);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Count_Conditional_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => q'                  q => ((IQueryable<NumberForLinq>)q).Count(n => n.Value % 2 == 1)'  #if NET40                  q => ((IQueryable<NumberForLinq>)q).Count(n => n.Value % 2 == 1));  #else                  q => ((IQueryable<NumberForLinq>)q).CountAsync(n => n.Value % 2 == 1).Result);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Count_Conditional_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => q'                  q => ((IQueryable<NumberForLinq>)q).Count(n => n.Value % 2 == 1)'  #if NET40                  q => ((IQueryable<NumberForLinq>)q).Count(n => n.Value % 2 == 1));  #else                  q => ((IQueryable<NumberForLinq>)q).CountAsync(n => n.Value % 2 == 1).Result);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,LongCount_Conditional_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => q'                  q => ((IQueryable<NumberForLinq>)q).LongCount(n => n.Value % 2 == 1)'  #if NET40                  q => ((IQueryable<NumberForLinq>)q).LongCount(n => n.Value % 2 == 1));  #else                  q => ((IQueryable<NumberForLinq>)q).LongCountAsync(n => n.Value % 2 == 1).Result);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,LongCount_Conditional_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: runner(                  q => q'                  q => ((IQueryable<NumberForLinq>)q).LongCount(n => n.Value % 2 == 1)'  #if NET40                  q => ((IQueryable<NumberForLinq>)q).LongCount(n => n.Value % 2 == 1));  #else                  q => ((IQueryable<NumberForLinq>)q).LongCountAsync(n => n.Value % 2 == 1).Result);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Aggregate_Seed_from_LINQ_101_returns_same_results_as_ObjectQuery_implementation,The following statement contains a magic number: var startBalance = 100;
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Verify142974Results,The following statement contains a magic number: Assert.Equal(7' results.Count);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Verify142974Results,The following statement contains a magic number: Assert.Equal(7' innerResults.Count);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Verify142979Results,The following statement contains a magic number: Assert.Equal(7' results.Count);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Verify142979Results,The following statement contains a magic number: Assert.Equal(7' innerResults.Count);
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Verify142979Results,The following statement contains a magic number: Assert.True(innerResults.Contains(7));
Magic Number,ProductivityApiTests,LinqTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\LinqTests.cs,Test_runner_detects_different_results_for_simple_IQueryable_results_implementation,The following statement contains a magic number: RunLinqTest(                      c => (from n in (useNonGeneric                                           ? (IQueryable<NumberForLinq>)c.Set(typeof(NumberForLinq))                                           : c.Set<NumberForLinq>())                            orderby n.Id                            select n).ToList()'                      c =>                      (from n in c.CreateObjectSet<NumberForLinq>()                       orderby n.Id                       where n.Id != 7                       select n).ToList());
Magic Number,ProductivityApiTests,MultiInitContext3,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\MultiThreadingTests.cs,CreateConnection,The following statement contains a magic number: _count <= 5
Magic Number,ProductivityApiTests,NoTrackingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NoTrackingTests.cs,AsNoTracking_can_be_used_before_the_rest_of_the_query,The following statement contains a magic number: Assert.Equal(13' drivers.Count);
Magic Number,ProductivityApiTests,NoTrackingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NoTrackingTests.cs,AsNoTracking_can_be_used_after_the_rest_of_the_query,The following statement contains a magic number: Assert.Equal(13' drivers.Count);
Magic Number,ProductivityApiTests,NoTrackingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NoTrackingTests.cs,AsNoTracking_does_not_change_the_state_of_the_original_query,The following statement contains a magic number: Assert.Equal(13' drivers.Count);
Magic Number,ProductivityApiTests,NoTrackingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NoTrackingTests.cs,ObjectSet_AsNoTracking_can_be_used_before_the_rest_of_the_query,The following statement contains a magic number: Assert.Equal(13' drivers.Count);
Magic Number,ProductivityApiTests,NoTrackingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NoTrackingTests.cs,ObjectSet_AsNoTracking_can_be_used_after_the_rest_of_the_query,The following statement contains a magic number: Assert.Equal(13' drivers.Count);
Magic Number,ProductivityApiTests,NoTrackingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\NoTrackingTests.cs,ObjectSet_AsNoTracking_does_not_change_the_state_of_the_original_query,The following statement contains a magic number: Assert.Equal(13' drivers.Count);
Magic Number,ProductivityApiTests,PartialTrustTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PartialTrustTests.cs,DbPropertyValues_SetValues_for_an_entity_wih_complex_objects_works_under_partial_trust,The following statement contains a magic number: var newBuilding = new Building                                        {                                            BuildingId = new Guid(building.BuildingId.ToString())'                                            Name = "Bag End"'                                            Value = building.Value'                                            Address = new Address                                                          {                                                              Street = "The Hill"'                                                              City = "Hobbiton"'                                                              State = "WF"'                                                              ZipCode = "00001"'                                                              SiteInfo = new SiteInfo                                                                             {                                                                                 Zone = 3'                                                                                 Environment = "Comfortable"                                                                             }                                                          }'                                        };
Magic Number,ProductivityApiTests,PartialTrustTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PartialTrustTests.cs,Non_generic_store_query_works_under_partial_trust,The following statement contains a magic number: Assert.Equal(7' products.Count);
Magic Number,ProductivityApiTests,PartialTrustTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PartialTrustTests.cs,Query_with_top_level_nested_query_obtained_from_context_field_in_select_works_under_partial_trust,The following statement contains a magic number: Assert.Equal(7' results.Count);
Magic Number,ProductivityApiTests,PartialTrustTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PartialTrustTests.cs,Change_tracking_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_partial_trust,The following statement contains a magic number: proxy.Id = 77;
Magic Number,ProductivityApiTests,PartialTrustTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PartialTrustTests.cs,Change_tracking_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_partial_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,ProductivityApiTests,PartialTrustTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PartialTrustTests.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_partial_trust,The following statement contains a magic number: proxy.Id = 77;
Magic Number,ProductivityApiTests,PartialTrustTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PartialTrustTests.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_resolver_when_running_under_partial_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,ProductivityApiTests,PartialTrustTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PartialTrustTests.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_known_types_when_running_under_partial_trust,The following statement contains a magic number: proxy.Id = 77;
Magic Number,ProductivityApiTests,PartialTrustTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PartialTrustTests.cs,Lazy_loading_proxy_can_be_data_contract_deserialized_with_known_types_when_running_under_partial_trust,The following statement contains a magic number: Assert.Equal(77' deserialized.Id);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Generic_collection_navigation_property_can_be_loaded_and_IsLoaded_is_set,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Non_generic_collection_navigation_property_can_be_loaded_and_IsLoaded_is_set,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_for_many_to_many_relationship_can_be_loaded,The following statement contains a magic number: Assert.Equal(3' team.Sponsors.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_can_be_reloaded_with_AppendOnly_semantics,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_can_be_reloaded_with_AppendOnly_semantics,The following statement contains a magic number: Assert.Equal(2' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_can_be_reloaded_with_AppendOnly_semantics,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_can_be_reloaded_even_if_marked_as_loaded,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_can_be_reloaded_even_if_marked_as_loaded,The following statement contains a magic number: Assert.Equal(4' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Related_collection_can_still_be_explicitly_loaded_when_IsLoaded_is_set_to_true,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Related_collection_is_lazy_loaded_again_when_IsLoaded_is_changed_back_to_false,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Related_collection_is_lazy_loaded_again_when_IsLoaded_is_changed_back_to_false,The following statement contains a magic number: Assert.Equal(3' driversCollection.CurrentValue.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Related_collection_IsLoaded_is_reset_when_one_of_the_related_entities_is_detached,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Related_collection_IsLoaded_is_reset_when_one_of_the_related_entities_is_detached,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Related_collection_reload_after_detach_can_be_avoided_by_setting_IsLoaded_to_true,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Related_collection_reload_after_detach_can_be_avoided_by_setting_IsLoaded_to_true,The following statement contains a magic number: Assert.Equal(2' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Generic_collection_navigation_property_can_be_loaded_asynchronously_and_IsLoaded_is_set,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Non_generic_collection_navigation_property_can_be_loaded_asynchronously_and_IsLoaded_is_set,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_for_many_to_many_relationship_can_be_loaded_asynchronously,The following statement contains a magic number: Assert.Equal(3' team.Sponsors.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_can_be_reloaded_asynchronously_with_AppendOnly_semantics,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_can_be_reloaded_asynchronously_with_AppendOnly_semantics,The following statement contains a magic number: Assert.Equal(2' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_can_be_reloaded_asynchronously_with_AppendOnly_semantics,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_can_be_reloaded_even_if_marked_as_loaded_asynchronously,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Collection_navigation_property_can_be_reloaded_even_if_marked_as_loaded_asynchronously,The following statement contains a magic number: Assert.Equal(4' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,GetTeamEntry,The following statement contains a magic number: team.Engine = new Engine                                {                                    Id = -2'                                    Name = "WubbsyV8"'                                    Teams = new List<Team>                                                {                                                    team                                                }'                                    Gearboxes = new List<Gearbox>()                                };
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Generic_Query_for_collection_loads_related_end,The following statement contains a magic number: Assert.Equal(2' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Generic_Query_for_collection_loads_related_end,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Non_Generic_Query_for_collection_loads_related_end,The following statement contains a magic number: Assert.Equal(2' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Non_Generic_Query_for_collection_loads_related_end,The following statement contains a magic number: Assert.Equal(3' team.Drivers.Count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Query_for_collection_can_be_used_to_count_without_loading_entities,The following statement contains a magic number: Assert.Equal(3' count);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,ValidateModifiedProperties,The following statement contains a magic number: Assert.Equal(2' modified.Count());
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,CreateNewAddress,The following statement contains a magic number: return new Address                         {                             Street = "300 Main St"'                             City = "Ames"'                             State = "IA"'                             ZipCode = "50010"'                             SiteInfo = new SiteInfo                                            {                                                Zone = 3'                                                Environment = "Contaminated"                                            }                         };
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Rejecting_changes_to_a_complex_property_creates_a_new_complex_object_which_is_then_not_detected_as_changed_by_future_DetectChanges,The following statement contains a magic number: Assert.Equal(3' newAddress.SiteInfo.Zone);
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Setting_IsModified_to_false_for_a_modified_property_marks_the_entity_as_Unchanged_if_no_properties_remain_modified,The following statement contains a magic number: entry.Property(b => b.Value).CurrentValue = 100.0M;
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Setting_IsModified_to_false_for_a_modified_complex_property_marks_the_entity_as_Unchanged_if_no_properties_remain_modified,The following statement contains a magic number: entry.Property(b => b.Value).CurrentValue = 100.0M;
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Setting_IsModified_to_false_for_a_nested_property_of_a_modified_complex_property_marks_the_entity_as_Unchanged_if_no_properties_remain_modified,The following statement contains a magic number: entry.Property(b => b.Value).CurrentValue = 100.0M;
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,RejectPropertyChanges_is_noop_for_a_property_that_is_not_modified,The following statement contains a magic number: context.Entry(hamilton).Property(d => d.Podiums).CurrentValue = 1000;
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,TestComplexOriginalValue,The following statement contains a magic number: var newAddress = new Address                                   {                                       Street = "300 Main St"'                                       City = "Ames"'                                       State = "IA"'                                       ZipCode = "50010"'                                       SiteInfo = new SiteInfo                                                      {                                                          Zone = 2'                                                          Environment = "Contaminated"                                                      }                                   };
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,TestComplexOriginalValue,The following statement contains a magic number: var newInfo = new SiteInfo                                {                                    Zone = 2'                                    Environment = "Contaminated"                                };
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,TestComplexCurentValue,The following statement contains a magic number: var newAddress = new Address                                   {                                       Street = "300 Main St"'                                       City = "Ames"'                                       State = "IA"'                                       ZipCode = "50010"'                                       SiteInfo = new SiteInfo                                                      {                                                          Zone = 2'                                                          Environment = "Contaminated"                                                      }                                   };
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,TestComplexCurentValue,The following statement contains a magic number: var newInfo = new SiteInfo                                {                                    Zone = 2'                                    Environment = "Contaminated"                                };
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,DbPropertyEntryTest,The following statement contains a magic number: var entry = context.Entry(                      new Building                          {                              Name = "Building 18"'                              Address = new Address                                            {                                                Street = "1 Microsoft Way"'                                                City = "Redmond"'                                                State = "WA"'                                                ZipCode = "98052"'                                                County = "KING"'                                                SiteInfo = new SiteInfo                                                               {                                                                   Zone = 2'                                                                   Environment = "Clean"                                                               }                                            }'                              NotInModel = "NotInModel"'                          });
Magic Number,ProductivityApiTests,PropertyApiTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\PropertyApiTests.cs,Current_reference_value_for_one_to_many_principal_can_be_read_and_set,The following statement contains a magic number: value = new Gearbox                              {                                  Id = -7                              };
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: var entity = new EntityWithExplicitWideProperties                                       {                                           Property1 = new String('1'' 1000)'                                           Property2 = new String('2'' 1000)'                                           Property3 = new String('3'' 1000)'                                           Property4 = new String('4'' 1000)'                                       };
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: var entity = new EntityWithExplicitWideProperties                                       {                                           Property1 = new String('1'' 1000)'                                           Property2 = new String('2'' 1000)'                                           Property3 = new String('3'' 1000)'                                           Property4 = new String('4'' 1000)'                                       };
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: var entity = new EntityWithExplicitWideProperties                                       {                                           Property1 = new String('1'' 1000)'                                           Property2 = new String('2'' 1000)'                                           Property3 = new String('3'' 1000)'                                           Property4 = new String('4'' 1000)'                                       };
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: var entity = new EntityWithExplicitWideProperties                                       {                                           Property1 = new String('1'' 1000)'                                           Property2 = new String('2'' 1000)'                                           Property3 = new String('3'' 1000)'                                           Property4 = new String('4'' 1000)'                                       };
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: entity.Property1 = new String('A'' 4000);
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: entity.Property2 = new String('B'' 4000);
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: var entity = new EntityWithImplicitWideProperties                                       {                                           Property1 = new String('1'' 1000)'                                           Property2 = new String('2'' 1000)'                                           Property3 = new String('3'' 1000)'                                           Property4 = new String('4'' 1000)'                                       };
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: var entity = new EntityWithImplicitWideProperties                                       {                                           Property1 = new String('1'' 1000)'                                           Property2 = new String('2'' 1000)'                                           Property3 = new String('3'' 1000)'                                           Property4 = new String('4'' 1000)'                                       };
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: var entity = new EntityWithImplicitWideProperties                                       {                                           Property1 = new String('1'' 1000)'                                           Property2 = new String('2'' 1000)'                                           Property3 = new String('3'' 1000)'                                           Property4 = new String('4'' 1000)'                                       };
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: var entity = new EntityWithImplicitWideProperties                                       {                                           Property1 = new String('1'' 1000)'                                           Property2 = new String('2'' 1000)'                                           Property3 = new String('3'' 1000)'                                           Property4 = new String('4'' 1000)'                                       };
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: entity.Property1 = new String('A'' 4000);
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,SqlServer_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_and_data_longer_than_8060_can_be_inserted,The following statement contains a magic number: entity.Property2 = new String('B'' 4000);
Magic Number,ProductivityApiTests,SimpleScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenarios.cs,Scenario_Query,The following statement contains a magic number: Assert.Equal(7' products.Count);
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithExplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ExplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithExplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ExplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithExplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ExplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithExplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ExplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithExplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ExplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_explicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithExplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ExplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithImplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ImplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithImplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ImplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithImplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ImplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithImplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ImplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithImplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ImplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,SqlCe_Database_can_be_created_with_columns_that_implicitly_total_more_that_8060_bytes_but_data_longer_than_8060_cannot_be_inserted,The following statement contains a magic number: RunInSqlCeTransaction<ModelWithWidePropertiesForSqlCe>(                  context =>                      {                          var entity = new EntityWithImplicitWideProperties                                           {                                               Property1 =                                                   new String('1'' 1000)'                                               Property2 =                                                   new String('2'' 1000)'                                               Property3 =                                                   new String('3'' 1000)'                                               Property4 =                                                   new String('4'' 1000)'                                           };                            context.ImplicitlyWide.Add(entity);                            context.SaveChanges();                            entity.Property1 = new String('A'' 4000);                          entity.Property2 = new String('B'' 4000);                            Assert.Throws<DbUpdateException>(                              () => context.SaveChanges());                      });
Magic Number,ProductivityApiTests,SimpleScenariosForSqlCe,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SimpleScenariosForSqlCe.cs,Scenario_Query_OnSqlCe,The following statement contains a magic number: Assert.Equal(7' products.Count);
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_with_TVFs_mapped_to_context_instance_methods_involving_spatial_types_works,The following statement contains a magic number: var suppliers = toList(                      from x in context.Suppliers                      select                          context.SuppliersWithinRange(                              1000'                              DbGeography.FromText(                                  "POINT(-122.335576 47.610676)"'                                  4326)));
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_with_TVFs_mapped_to_context_instance_methods_involving_spatial_types_works,The following statement contains a magic number: var suppliers = toList(                      from x in context.Suppliers                      select                          context.SuppliersWithinRange(                              1000'                              DbGeography.FromText(                                  "POINT(-122.335576 47.610676)"'                                  4326)));
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_with_TVFs_mapped_to_context_instance_methods_involving_spatial_types_works,The following statement contains a magic number: Assert.Equal(16' suppliers.Count);
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_with_TVFs_mapped_to_static_methods_involving_spatial_types_works,The following statement contains a magic number: var suppliers = toList(                      from x in context.Suppliers                      select                          SpatialNorthwindContext.StaticSuppliersWithinRange(                              1000'                              DbGeography.FromText(                                  "POINT(-122.335576 47.610676)"'                                  4326)));
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_with_TVFs_mapped_to_static_methods_involving_spatial_types_works,The following statement contains a magic number: var suppliers = toList(                      from x in context.Suppliers                      select                          SpatialNorthwindContext.StaticSuppliersWithinRange(                              1000'                              DbGeography.FromText(                                  "POINT(-122.335576 47.610676)"'                                  4326)));
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_with_TVFs_mapped_to_static_methods_involving_spatial_types_works,The following statement contains a magic number: Assert.Equal(16' suppliers.Count);
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_with_TVFs_mapped_to_arbitrary_instance_methods_involving_spatial_types_works,The following statement contains a magic number: var suppliers = (from x in context.Suppliers                                   select                                       ArbitrarySuppliersWithinRange(                                           1000'                                           DbGeography.FromText(                                               "POINT(-122.335576 47.610676)"'                                               4326))).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_with_TVFs_mapped_to_arbitrary_instance_methods_involving_spatial_types_works,The following statement contains a magic number: var suppliers = (from x in context.Suppliers                                   select                                       ArbitrarySuppliersWithinRange(                                           1000'                                           DbGeography.FromText(                                               "POINT(-122.335576 47.610676)"'                                               4326))).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_with_TVFs_mapped_to_arbitrary_instance_methods_involving_spatial_types_works,The following statement contains a magic number: Assert.Equal(16' suppliers.Count);
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SuppliersWithinRange(1000' DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       from s2 in                           context.SuppliersWithinRange(1000' DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       where s1.Name == s2.Name                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SuppliersWithinRange(1000' DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       from s2 in                           context.SuppliersWithinRange(1000' DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       where s1.Name == s2.Name                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SuppliersWithinRange(1000' DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       from s2 in                           context.SuppliersWithinRange(1000' DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       where s1.Name == s2.Name                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SuppliersWithinRange(1000' DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       from s2 in                           context.SuppliersWithinRange(1000' DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       where s1.Name == s2.Name                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_works,The following statement contains a magic number: Assert.Equal(16' results.Count);
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_using_Point_in_function_import_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SuppliersWithinRangeUsingPoint(                               1000'                               DbGeography.FromText(                                   "POINT(-122.335576 47.610676)"'                                   4326))                       from s2 in                           context.SuppliersWithinRangeUsingPoint(                               1000'                               DbGeography.FromText(                                   "POINT(-122.335576 47.610676)"'                                   4326))                       where s1.Name == s2.Name                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_using_Point_in_function_import_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SuppliersWithinRangeUsingPoint(                               1000'                               DbGeography.FromText(                                   "POINT(-122.335576 47.610676)"'                                   4326))                       from s2 in                           context.SuppliersWithinRangeUsingPoint(                               1000'                               DbGeography.FromText(                                   "POINT(-122.335576 47.610676)"'                                   4326))                       where s1.Name == s2.Name                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_using_Point_in_function_import_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SuppliersWithinRangeUsingPoint(                               1000'                               DbGeography.FromText(                                   "POINT(-122.335576 47.610676)"'                                   4326))                       from s2 in                           context.SuppliersWithinRangeUsingPoint(                               1000'                               DbGeography.FromText(                                   "POINT(-122.335576 47.610676)"'                                   4326))                       where s1.Name == s2.Name                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_using_Point_in_function_import_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SuppliersWithinRangeUsingPoint(                               1000'                               DbGeography.FromText(                                   "POINT(-122.335576 47.610676)"'                                   4326))                       from s2 in                           context.SuppliersWithinRangeUsingPoint(                               1000'                               DbGeography.FromText(                                   "POINT(-122.335576 47.610676)"'                                   4326))                       where s1.Name == s2.Name                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_using_Point_in_function_import_works,The following statement contains a magic number: Assert.Equal(16' results.Count);
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_using_Point_and_Point_return_in_function_import_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SupplierLocationsWithinRange(                               1000'                               DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       from s2 in                           context.SupplierLocationsWithinRange(                               1000'                               DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_using_Point_and_Point_return_in_function_import_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SupplierLocationsWithinRange(                               1000'                               DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       from s2 in                           context.SupplierLocationsWithinRange(                               1000'                               DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_using_Point_and_Point_return_in_function_import_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SupplierLocationsWithinRange(                               1000'                               DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       from s2 in                           context.SupplierLocationsWithinRange(                               1000'                               DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_using_Point_and_Point_return_in_function_import_works,The following statement contains a magic number: var results =                      (from s1 in                           context.SupplierLocationsWithinRange(                               1000'                               DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       from s2 in                           context.SupplierLocationsWithinRange(                               1000'                               DbGeography.FromText("POINT(-122.335576 47.610676)"' 4326))                       select new                                  {                                      s1'                                      s2                                  }).ToList();
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,DbQuery_SelectMany_with_TVFs_and_spatial_types_using_Point_and_Point_return_in_function_import_works,The following statement contains a magic number: Assert.Equal(256' results.Count);
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,Can_query_for_strongly_typed_geographic_point_using_type_construction,The following statement contains a magic number: Assert.Equal(16' TestWithReader(context' query' r => Assert.IsType<DbGeography>(r.GetValue(2))));
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,Can_query_for_strongly_typed_geographic_point_using_type_construction,The following statement contains a magic number: Assert.Equal(16' TestWithReader(context' query' r => Assert.IsType<DbGeography>(r.GetValue(2))));
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,Can_query_for_strongly_typed_geometric_point_using_type_construction,The following statement contains a magic number: Assert.Equal(                      4' TestWithReader(                          context' query' r =>                                              {                                                  Assert.Equal(-77' r.GetInt32(0));                                                  Assert.IsType<DbGeometry>(r.GetValue(2));                                                  var nestedRecord = r.GetDataRecord(3);                                                  Assert.IsType<DbGeometry>(nestedRecord.GetValue(1));                                              }));
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,Can_query_for_strongly_typed_geometric_point_using_type_construction,The following statement contains a magic number: Assert.Equal(                      4' TestWithReader(                          context' query' r =>                                              {                                                  Assert.Equal(-77' r.GetInt32(0));                                                  Assert.IsType<DbGeometry>(r.GetValue(2));                                                  var nestedRecord = r.GetDataRecord(3);                                                  Assert.IsType<DbGeometry>(nestedRecord.GetValue(1));                                              }));
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,Can_query_for_strongly_typed_geometric_point_using_type_construction,The following statement contains a magic number: Assert.Equal(                      4' TestWithReader(                          context' query' r =>                                              {                                                  Assert.Equal(-77' r.GetInt32(0));                                                  Assert.IsType<DbGeometry>(r.GetValue(2));                                                  var nestedRecord = r.GetDataRecord(3);                                                  Assert.IsType<DbGeometry>(nestedRecord.GetValue(1));                                              }));
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,Can_query_for_strongly_typed_geometric_point_using_type_construction,The following statement contains a magic number: Assert.Equal(                      4' TestWithReader(                          context' query' r =>                                              {                                                  Assert.Equal(-77' r.GetInt32(0));                                                  Assert.IsType<DbGeometry>(r.GetValue(2));                                                  var nestedRecord = r.GetDataRecord(3);                                                  Assert.IsType<DbGeometry>(nestedRecord.GetValue(1));                                              }));
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,Can_query_for_strongly_typed_geometric_point_using_complex_type_type_construction,The following statement contains a magic number: Assert.Equal(                      4' TestWithReader(                          context' query' r =>                                              {                                                  Assert.Equal("A"' r.GetString(0));                                                  Assert.IsType<DbGeometry>(r.GetValue(1));                                              }));
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,Can_materialize_record_containing_geometric_types_and_get_names_of_the_types_without_null_arg_exception,The following statement contains a magic number: Assert.Equal(2' results.Count);
Magic Number,ProductivityApiTests,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\SpatialTests.cs,Can_materialize_record_containing_geographic_types_and_get_names_of_the_types_without_null_arg_exception,The following statement contains a magic number: Assert.Equal(16' results.Count);
Magic Number,ProductivityApiTests,WriteEdmxTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\WriteEdmxTests.cs,EDMX_can_be_written_multiple_times,The following statement contains a magic number: EdmxWriter.WriteEdmx(context' XmlWriter.Create(edmxBuilders[2]));
Magic Number,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Cast_constant_to_byte_enum,The following statement contains a magic number: var query = context.AllTypes.Where(a => a.c34_byteenum == (ArubaByteEnum)2).Select(a => a.c34_byteenum);
Magic Number,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Cast_constant_to_byte_enum,The following statement contains a magic number: var expectedCount = context.AllTypes.ToList().Count(a => a.c34_byteenum == (ArubaByteEnum)2);
Magic Number,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Unnamed_enum_constant_in_Where_clause,The following statement contains a magic number: var query = context.AllTypes.Where(a => a.c33_enum == (ArubaEnum)42).Select(p => p.c33_enum);
Magic Number,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Enum_with_arithmetic_operations,The following statement contains a magic number: var query = context.AllTypes                                    .Where(a => a.c34_byteenum != a.c34_byteenum + 2)                                    .Where(a => a.c33_enum + 1 != a.c33_enum - 2)                                    .Select(a => a.c1_int);
Magic Number,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Enum_with_arithmetic_operations,The following statement contains a magic number: var query = context.AllTypes                                    .Where(a => a.c34_byteenum != a.c34_byteenum + 2)                                    .Where(a => a.c33_enum + 1 != a.c33_enum - 2)                                    .Select(a => a.c1_int);
Magic Number,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Enum_with_bitwise_operations,The following statement contains a magic number: var query = context.AllTypes                                    .Where(a => (a.c34_byteenum & ArubaByteEnum.ByteEnumValue1) > 0)                                    .Where(a => (a.c33_enum | (ArubaEnum)1) == (ArubaEnum)3)                                    .Select(                                        a => new                                            {                                                a.c33_enum'                                                a.c34_byteenum                                            });
Magic Number,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Enum_with_bitwise_operations,The following statement contains a magic number: Assert.Equal((ArubaEnum)3' result.c33_enum);
Magic Number,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Enum_with_coalesce_operator,The following statement contains a magic number: var query = context.AllTypes.Select(p => p.c1_int % 2 == 0 ? p.c33_enum : (ArubaEnum?)null)                                    .Select(a => a ?? ArubaEnum.EnumValue1);
Magic Number,System.Data.Entity.Query.LinqToEntities,EnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\EnumTests.cs,Enum_with_coalesce_operator,The following statement contains a magic number: var expected = context.AllTypes.ToList().Select(p => p.c1_int % 2 == 0 ? p.c33_enum : (ArubaEnum?)null)                                       .Select(a => a ?? ArubaEnum.EnumValue1).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_anonymous_type_default,The following statement contains a magic number: var query = context.Runs.SelectMany(r => r.Tasks.Where(t => t.Id == 2 && t.Name == "Foo").Select(t => new { t.Id' t.Name' t.Deleted' }).DefaultIfEmpty(new { Id = -1' Name = "Unknown"' Deleted = true })' (r' t) => new { r' t });
Magic Number,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_anonymous_type_default,The following statement contains a magic number: var taskDeletedForIdTwoNameFoo = context.Tasks.Where(t => t.Id == 2 && t.Name == "Foo").Single().Deleted;
Magic Number,System.Data.Entity.Query.LinqToEntities,DefaultIfEmptyTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\DefaultIfEmptyTests.cs,DefaultIfEmpty_with_anonymous_type_default,The following statement contains a magic number: Assert.True(task.Id == -1 || task.Id == 2);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_ICollection_count_when_passed_as_parameter,The following statement contains a magic number: var localList = new List<int> { 1' 2' 3 };
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_ICollection_count_when_passed_as_parameter,The following statement contains a magic number: var localList = new List<int> { 1' 2' 3 };
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_ICollection_count_when_passed_as_parameter,The following statement contains a magic number: Assert.True(results.All(r => r == 3));
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_byte_array,The following statement contains a magic number: var query = context.Tasks.Where(c => new byte[] { 1' 2' 3 } == new byte[] { 1' 2' 3 }).Select(c => c.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_byte_array,The following statement contains a magic number: var query = context.Tasks.Where(c => new byte[] { 1' 2' 3 } == new byte[] { 1' 2' 3 }).Select(c => c.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_byte_array,The following statement contains a magic number: var query = context.Tasks.Where(c => new byte[] { 1' 2' 3 } == new byte[] { 1' 2' 3 }).Select(c => c.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_byte_array,The following statement contains a magic number: var query = context.Tasks.Where(c => new byte[] { 1' 2' 3 } == new byte[] { 1' 2' 3 }).Select(c => c.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: var query = context.Tasks.Select(c => new                      {                          a = new Decimal(1.5)'                           b = new Decimal((float)2.5)'                           c = new Decimal(5)'                           e = new Decimal((long)7)'                          f = new Decimal((uint)9)'                          g = new Decimal((ulong)11)'                          h = new Decimal(13' 0' 0' false' 4)'                      });
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: var query = context.Tasks.Select(c => new                      {                          a = new Decimal(1.5)'                           b = new Decimal((float)2.5)'                           c = new Decimal(5)'                           e = new Decimal((long)7)'                          f = new Decimal((uint)9)'                          g = new Decimal((ulong)11)'                          h = new Decimal(13' 0' 0' false' 4)'                      });
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: var query = context.Tasks.Select(c => new                      {                          a = new Decimal(1.5)'                           b = new Decimal((float)2.5)'                           c = new Decimal(5)'                           e = new Decimal((long)7)'                          f = new Decimal((uint)9)'                          g = new Decimal((ulong)11)'                          h = new Decimal(13' 0' 0' false' 4)'                      });
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: var query = context.Tasks.Select(c => new                      {                          a = new Decimal(1.5)'                           b = new Decimal((float)2.5)'                           c = new Decimal(5)'                           e = new Decimal((long)7)'                          f = new Decimal((uint)9)'                          g = new Decimal((ulong)11)'                          h = new Decimal(13' 0' 0' false' 4)'                      });
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: var query = context.Tasks.Select(c => new                      {                          a = new Decimal(1.5)'                           b = new Decimal((float)2.5)'                           c = new Decimal(5)'                           e = new Decimal((long)7)'                          f = new Decimal((uint)9)'                          g = new Decimal((ulong)11)'                          h = new Decimal(13' 0' 0' false' 4)'                      });
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: var query = context.Tasks.Select(c => new                      {                          a = new Decimal(1.5)'                           b = new Decimal((float)2.5)'                           c = new Decimal(5)'                           e = new Decimal((long)7)'                          f = new Decimal((uint)9)'                          g = new Decimal((ulong)11)'                          h = new Decimal(13' 0' 0' false' 4)'                      });
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: var query = context.Tasks.Select(c => new                      {                          a = new Decimal(1.5)'                           b = new Decimal((float)2.5)'                           c = new Decimal(5)'                           e = new Decimal((long)7)'                          f = new Decimal((uint)9)'                          g = new Decimal((ulong)11)'                          h = new Decimal(13' 0' 0' false' 4)'                      });
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: var query = context.Tasks.Select(c => new                      {                          a = new Decimal(1.5)'                           b = new Decimal((float)2.5)'                           c = new Decimal(5)'                           e = new Decimal((long)7)'                          f = new Decimal((uint)9)'                          g = new Decimal((ulong)11)'                          h = new Decimal(13' 0' 0' false' 4)'                      });
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: Assert.Equal((decimal)1.5' result.a);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: Assert.Equal((decimal)2.5' result.b);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: Assert.Equal(5' result.c);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: Assert.Equal(7' result.e);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: Assert.Equal(9' result.f);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: Assert.Equal(11' result.g);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_decimal_constructors,The following statement contains a magic number: Assert.Equal((decimal)0.0013' result.h);
Magic Number,System.Data.Entity.Query.LinqToEntities,FuncletizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FuncletizationTests.cs,Funcletize_string_constructors,The following statement contains a magic number: var query = context.Tasks.Select(c => new                  {                      b = new String('a'' 5)'                  });
Magic Number,System.Data.Entity.Query.LinqToEntities,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FunctionsTests.cs,String_Insert_properly_translated_to_function,The following statement contains a magic number: var query = context.Owners.Select(o => o.LastName.Insert(2' "Foo"));
Magic Number,System.Data.Entity.Query.LinqToEntities,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FunctionsTests.cs,String_Remove_properly_translated_to_function,The following statement contains a magic number: var query = context.Owners.Select(o => o.LastName.Remove(2' 3));
Magic Number,System.Data.Entity.Query.LinqToEntities,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FunctionsTests.cs,String_Remove_properly_translated_to_function,The following statement contains a magic number: var query = context.Owners.Select(o => o.LastName.Remove(2' 3));
Magic Number,System.Data.Entity.Query.LinqToEntities,StringFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FunctionsTests.cs,Substring_properly_translated_to_function,The following statement contains a magic number: var query2 = context.Owners.Select(o => o.LastName.Substring(1' 2));
Magic Number,System.Data.Entity.Query.LinqToEntities,MathFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FunctionsTests.cs,Rounds_properly_translated_to_function,The following statement contains a magic number: var query2 = context.AllTypes.Select(a => Math.Round(a.c7_decimal_28_4' 2));
Magic Number,System.Data.Entity.Query.LinqToEntities,MathFunctions,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\FunctionsTests.cs,Rounds_properly_translated_to_function,The following statement contains a magic number: var query4 = context.AllTypes.Select(a => Math.Round(a.c10_float' 2));
Magic Number,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_expression_containing_group_key,The following statement contains a magic number: var query = context.Owners.GroupBy(o => o.Id).Select(g => g.Key * 2);
Magic Number,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_expression_containing_group_key,The following statement contains a magic number: var expected = context.Owners.ToList().GroupBy(o => o.Id).Select(g => g.Key * 2).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_anonymous_type_containing_group_key_and_multiple_group_aggregates,The following statement contains a magic number: var query = context.Owners.GroupBy(o => o.FirstName).Select(g => new { key1 = g.Key' key2 = g.Key' max = g.Max(p => p.Id)' min = g.Min(s => s.Id + 2) });
Magic Number,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_anonymous_type_containing_group_key_and_multiple_group_aggregates,The following statement contains a magic number: var expected = context.Owners.ToList().GroupBy(o => o.FirstName).Select(g => new { key1 = g.Key' key2 = g.Key' max = g.Max(p => p.Id)' min = g.Min(s => s.Id + 2) }).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_filerting_and_projecting_anonymous_type_with_group_key_and_function_aggregate,The following statement contains a magic number: var query = context.Owners.Where(o => o.Id > 5).GroupBy(o => o.FirstName).Select(g => new { FirstName = g.Key' AverageId = g.Average(p => p.Id) });
Magic Number,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_filerting_and_projecting_anonymous_type_with_group_key_and_function_aggregate,The following statement contains a magic number: var expected = context.Owners.ToList().Where(o => o.Id > 5).GroupBy(o => o.FirstName).Select(g => new { FirstName = g.Key' AverageId = g.Average(p => p.Id) }).OrderBy(r => r.AverageId).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_function_aggregate_with_expression,The following statement contains a magic number: var query = context.Owners.GroupBy(p => p.FirstName).Select(g => g.Max(p => p.Id * 2));
Magic Number,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_projecting_function_aggregate_with_expression,The following statement contains a magic number: var expected = context.Owners.ToList().GroupBy(p => p.FirstName).Select(g => g.Max(p => p.Id * 2)).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_grouping_by_row_and_projecting_column_of_the_key_row,The following statement contains a magic number: var query = context.Owners.Where(o => o.Id < 4).GroupBy(g => new { g.FirstName }).Select(g => g.Key.FirstName);
Magic Number,System.Data.Entity.Query.LinqToEntities,GroupByOptimizationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\GroupByOptimizationTests.cs,GroupBy_is_optimized_when_grouping_by_row_and_projecting_column_of_the_key_row,The following statement contains a magic number: var expected = context.Owners.ToList().Where(o => o.Id < 4).GroupBy(g => new { g.FirstName }).Select(g => g.Key.FirstName).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,MaterializationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\MaterializationTests.cs,Can_materialize_list_of_entity_properties,The following statement contains a magic number: Assert.Equal(2' results[0].Count);
Magic Number,System.Data.Entity.Query.LinqToEntities,MaterializationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\MaterializationTests.cs,Can_materialize_list_inside_anonymous_type,The following statement contains a magic number: Assert.Equal(3' results[0].List.Count);
Magic Number,System.Data.Entity.Query.LinqToEntities,MaterializationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\MaterializationTests.cs,Can_materialize_list_inside_anonymous_type,The following statement contains a magic number: Assert.Equal("b"' results[0].List[2]);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_projection,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 });
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_projection,The following statement contains a magic number: var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_projection,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_projection,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 });
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_projection,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 });
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_projection,The following statement contains a magic number: var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_projection,The following statement contains a magic number: var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_projection,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_projection,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_type_filter,The following statement contains a magic number: var query = context.Configs.OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Skip(5).OfType<ArubaMachineConfig>();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_lifted_above_type_filter,The following statement contains a magic number: var expected = context.Configs.ToList().OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Skip(5).OfType<ArubaMachineConfig>().ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_projection,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 });
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_projection,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 });
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_projection,The following statement contains a magic number: var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_projection,The following statement contains a magic number: var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_projection,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_projection,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Take(10).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_type_filter,The following statement contains a magic number: var query = context.Configs.OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Take(10).OfType<ArubaMachineConfig>();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Take_lifted_above_type_filter,The following statement contains a magic number: var expected = context.Configs.ToList().OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Take(10).OfType<ArubaMachineConfig>().ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 });
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 });
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 });
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The following statement contains a magic number: var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The following statement contains a magic number: var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The following statement contains a magic number: var baseline = context.Owners.Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_projection,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Select(p => new { p.FirstName' p.Id' Foo = p.Id * 5 }).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_with_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var query = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var baseline = context.Owners.OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).OrderByDescending(p => p.FirstName).ThenBy(p => p.Id);
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_filter_without_clr_null_semantics,The following statement contains a magic number: var expected = context.Owners.ToList().OrderByDescending(p => p.FirstName).ThenBy(p => p.Id).Skip(5).Take(10).Where(p => p.Id % 2 == 0).ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_type_filter,The following statement contains a magic number: var query = context.Configs.OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Skip(5).Take(10).OfType<ArubaMachineConfig>();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_type_filter,The following statement contains a magic number: var query = context.Configs.OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Skip(5).Take(10).OfType<ArubaMachineConfig>();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_type_filter,The following statement contains a magic number: var expected = context.Configs.ToList().OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Skip(5).Take(10).OfType<ArubaMachineConfig>().ToList();
Magic Number,System.Data.Entity.Query.LinqToEntities,OrderByLiftingTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\LinqToEntities\OrderByLiftingTests.cs,OrderBy_ThenBy_Skip_Take_lifted_above_type_filter,The following statement contains a magic number: var expected = context.Configs.ToList().OrderByDescending(p => p.Arch).ThenBy(p => p.Id).Skip(5).Take(10).OfType<ArubaMachineConfig>().ToList();
Magic Number,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_with_nulls,The following statement contains a magic number: var input = DbExpressionBuilder.NewCollection(new[] { 1' 2' 3' intNull' intNull' 2' 1' intNull });
Magic Number,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_with_nulls,The following statement contains a magic number: var input = DbExpressionBuilder.NewCollection(new[] { 1' 2' 3' intNull' intNull' 2' 1' intNull });
Magic Number,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_with_nulls,The following statement contains a magic number: var input = DbExpressionBuilder.NewCollection(new[] { 1' 2' 3' intNull' intNull' 2' 1' intNull });
Magic Number,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,GroupBy_row,The following statement contains a magic number: var rows = new DbExpression[3]                             {                                 DbExpressionBuilder.NewRow(                                     new List<KeyValuePair<string' DbExpression>>                                         {                                             new KeyValuePair<string' DbExpression>("x"' one)'                                             new KeyValuePair<string' DbExpression>("y"' one)'                                         })'                                 DbExpressionBuilder.NewRow(                                     new List<KeyValuePair<string' DbExpression>>                                         {                                             new KeyValuePair<string' DbExpression>("x"' one)'                                             new KeyValuePair<string' DbExpression>("y"' intNull)'                                         })'                                 DbExpressionBuilder.NewRow(                                     new List<KeyValuePair<string' DbExpression>>                                         {                                             new KeyValuePair<string' DbExpression>("x"' intNull)'                                             new KeyValuePair<string' DbExpression>("y"' intNull)'                                         })'                             };
Magic Number,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_filter_over_group_aggregate,The following statement contains a magic number: var projections = new List<KeyValuePair<string' DbExpression>>                                    {                                        new KeyValuePair<string' DbExpression>("groupKey"' groupByBinding.Variable.Property("groupKey"))'                                        new KeyValuePair<string' DbExpression>(                                            "count"'                                            countFunction.Invoke(                                                groupByBinding.Variable.Property("groupPartition").Where(                                                    f => f.Property("ProductID").LessThan(3)).Select(p => p.Property("ProductID"))))'                                    };
Magic Number,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_project_filtered_group_aggregate_also_include_group_key_and_function_aggregate,The following statement contains a magic number: var filteredGroupAggregateProjection = groupBy.Select(                  p => new                           {                               groupKey = p.Property("groupKey")'                               max = p.Property("max")'                               groupPartition = p.Property("groupPartition").Where(g => g.Property("ProductID").LessThan(3))'                           });
Magic Number,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_group_aggregate_propagated_through_Limit,The following statement contains a magic number: var groupByLimit = groupBy.Limit(2);
Magic Number,System.Data.Entity.Query,GroupAggregateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\GroupAggregateTests.cs,Count_over_group_aggregate_propagated_through_Filter,The following statement contains a magic number: var groupByFilter = groupBy.Where(c => c.Property("groupKey").LessThan(3));
Magic Number,System.Data.Entity.Query,JoinEliminationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\JoinEliminationTests.cs,LeftOuterJoin_duplicates_are_eliminated,The following statement contains a magic number: var query = context.DocumentDetails.Where(x => x.Document.Customer.PersonId == 1 || x.Document.Customer.PersonId == 2);
Magic Number,System.Data.Entity.Query,QueryEnumTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\QueryEnumTests.cs,Constant_integer_based_Enum_in_where_clause,The following statement contains a magic number: var query = entitySet.Scan()                  .Where(c => c.Property("MessageType").Equal(c.Property("MessageType").ResultType.Constant(-5)));
Magic Number,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeometryDistanceFrom,The following statement contains a magic number: VerifyValueCondition(reader' a => (double) a <= 5);
Magic Number,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeographyDistanceFromMultiPolygon,The following statement contains a magic number: VerifyValueCondition(reader' a => (double)a <= 600000);
Magic Number,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeometryPointsWithinPolygon,The following statement contains a magic number: var shape = DbGeometry.MultiLineFromText(                         "MULTILINESTRING ((10 20' 15 20' 15 25' 10 25' 10 20)' (12 22' 13 22' 13 23' 12 23' 12 22))"' 32768);
Magic Number,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeographyPointsIntersectsPolygon,The following statement contains a magic number: var polygon = DbGeography.MultiPolygonFromText(                             "MULTIPOLYGON (((-136.34518219919187 -45.444057174306' 100.08107983924452 0.029396673640468753' -12.771444237628261 0.029396673640468753' -136.34518219919187 -45.444057174306)' (-136.34518219919187 -59.574853846584816' -6.6232329320655019 -12.718185214660565' 93.93286853368177 -12.718185214660565' -136.34518219919187 -59.574853846584816)))"'                             4326);
Magic Number,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeometryPolygonsIntersectionAndDisjointAnother,The following statement contains a magic number: var polygon = DbGeometry.PolygonFromText("POLYGON ((13 22' 12 22' 12 23' 13 22))"' 32768);
Magic Number,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeometryPolygonsIntersectionAndDisjointAnother,The following statement contains a magic number: var multiString =                 DbGeometry.MultiLineFromText(                     "MULTILINESTRING ((12 22' 15 22' 15 25' 12 25' 12 22)' (13 23' 14 23' 14 24' 13 24' 13 23))"' 32768);
Magic Number,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeometryPointsIntersectWithBufferOfPolygon,The following statement contains a magic number: var polygon = DbGeometry.PolygonFromText("POLYGON ((11 20' 10 20' 10 21' 11 20))"' 32768);
Magic Number,System.Data.Entity.Query,SpatialTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SpatialTests.cs,GeometryPointsIntersectWithBufferOfPolygon,The following statement contains a magic number: VerifyValueCondition(reader' o =>                 {                     var g = (DbGeometry)o;                     return DbSpatialServices.Default.Intersects(polygon' DbSpatialServices.Default.Buffer(g' 5));                 });
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_two,The following statement contains a magic number: VerifyTypeAndCount(reader' 2' "Int32");
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_order_by_desc,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 3);
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_nested_two_order_by,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 3);
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_nested_order_by,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 4);
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_distinct,The following statement contains a magic number: VerifySortDescAndCountString(reader' 2' distinct: true);
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_nested_with_inheritance,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 3);
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_order_by_with_inheritance,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 3);
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_order_by_reduced_with_inheritance,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 3);
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_nested_asc_and_desc_with_params,The following statement contains a magic number: prm1.Value = 5;
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_nested_asc_and_desc_with_params,The following statement contains a magic number: prm2.Value = 3;
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_nested_asc_and_desc_with_params,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 3);
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_nested_with_params,The following statement contains a magic number: prm1.Value = 5;
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_nested_with_params,The following statement contains a magic number: prm2.Value = 2;
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_top_nested_with_params,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 2);
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_desc_skip_limit_with_params,The following statement contains a magic number: prm1.Value = 5;
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_desc_skip_limit_with_params,The following statement contains a magic number: prm2.Value = 2;
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_desc_skip_limit_with_params,The following statement contains a magic number: var expectedResults = db.Owners.ToList().OrderByDescending(o => o.Id).Skip(5).Take(2).Select(o => o.Id).ToList();
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_desc_skip_limit_with_params,The following statement contains a magic number: var expectedResults = db.Owners.ToList().OrderByDescending(o => o.Id).Skip(5).Take(2).Select(o => o.Id).ToList();
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_desc_skip_limit_with_params,The following statement contains a magic number: Assert.Equal(expectedResults.Count' 2);
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_desc_skip_limit_with_params_and_literal,The following statement contains a magic number: prm1.Value = 5;
Magic Number,System.Data.Entity.Query,Top,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Select_desc_skip_limit_with_params_and_literal,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 5);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Nested_limit,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 3);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Basic_skip_limit,The following statement contains a magic number: var expectedResults =                                 db.Configs.ToList().OfType<ArubaMachineConfig>().OrderByDescending(o => o.Id).Skip(3).Take(2)                                   .Select(o => o.Id).ToList();
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Basic_skip_limit,The following statement contains a magic number: var expectedResults =                                 db.Configs.ToList().OfType<ArubaMachineConfig>().OrderByDescending(o => o.Id).Skip(3).Take(2)                                   .Select(o => o.Id).ToList();
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Basic_skip_limit,The following statement contains a magic number: Assert.Equal(expectedResults.Count()' 2);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_group_by,The following statement contains a magic number: VerifySortDescAndCountString(reader' 2);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Multiple_sort_keys,The following statement contains a magic number: var expectedResults = db.Owners.ToList().OrderBy(o => o.FirstName).ThenByDescending(o => o.LastName)                                                     .Skip(3).Take(4).Select(o => o.Id);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Multiple_sort_keys,The following statement contains a magic number: var expectedResults = db.Owners.ToList().OrderBy(o => o.FirstName).ThenByDescending(o => o.LastName)                                                     .Skip(3).Take(4).Select(o => o.Id);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Nested_skip_limits_in_select,The following statement contains a magic number: Assert.Equal(3 * 2' count);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Nested_skip_limits_in_select,The following statement contains a magic number: Assert.Equal(3 * 2' count);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Nested_skip_limits_in_from,The following statement contains a magic number: VerifyTypeAndCount(reader' 2' "Int32");
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Intersect_with_split_limit,The following statement contains a magic number: var query1 = db.Owners.ToList().OrderByDescending(o => o.Id).ThenByDescending(o => o.Alias).Skip(3).Take(7)                                            .Select(o => o.Id);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Intersect_with_split_limit,The following statement contains a magic number: var query1 = db.Owners.ToList().OrderByDescending(o => o.Id).ThenByDescending(o => o.Alias).Skip(3).Take(7)                                            .Select(o => o.Id);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Intersect_with_split_limit,The following statement contains a magic number: var query2 = db.Owners.ToList().OrderBy(o => o.Id).ThenBy(o => o.Alias).Skip(4).Take(6).Select(o => o.Id);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Intersect_with_split_limit,The following statement contains a magic number: var query2 = db.Owners.ToList().OrderBy(o => o.Id).ThenBy(o => o.Alias).Skip(4).Take(6).Select(o => o.Id);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_desc_with_params,The following statement contains a magic number: prm1.Value = 5;
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_desc_with_params,The following statement contains a magic number: prm2.Value = 2;
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_desc_with_params,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 2);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_with_params,The following statement contains a magic number: prm1.Value = 5;
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_with_params,The following statement contains a magic number: prm2.Value = 2;
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_with_params,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 2);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_with_params_and_literal,The following statement contains a magic number: prm1.Value = 5;
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_with_params_and_literal,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 5);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Nested_projections_list,The following statement contains a magic number: Assert.Equal(4' count);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Complicated_order_by,The following statement contains a magic number: VerifySortDescAndCountInt(reader' 3);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_with_no_limit_and_multiset,The following statement contains a magic number: var expectedResults = db.Owners.ToList().OrderByDescending(o => o.Id).Skip(2).Select(o => o.Id);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Edge_case_column_name,The following statement contains a magic number: VerifySortAscAndCountInt(reader' 3);
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_with_duplicates,The following statement contains a magic number: var values = new List<int> { 1' 2' 2 };
Magic Number,System.Data.Entity.Query,SkipLimit,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Skip_limit_with_duplicates,The following statement contains a magic number: var values = new List<int> { 1' 2' 2 };
Magic Number,System.Data.Entity.Query,IntersectAndExcept,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\SqlGeneratorTests.cs,Intersect_with_nulls,The following statement contains a magic number: VerifyAgainstBaselineResults(reader' new List<object> { DBNull.Value' 5 });
Magic Number,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Stored_procedure_with_first_result_set_without_spatial_and_second_with_spatial,The following statement contains a magic number: Assert.Equal(3' animals.Count());
Magic Number,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Stored_procedure_with_first_result_set_without_spatial_and_second_with_spatial,The following statement contains a magic number: Assert.Equal(4' houses.Count());
Magic Number,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Stored_procedure_with_first_result_set_with_spatial_and_second_without_spatial,The following statement contains a magic number: Assert.Equal(4' houses.Count());
Magic Number,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Stored_procedure_with_first_result_set_with_spatial_and_second_without_spatial,The following statement contains a magic number: Assert.Equal(3' animals.Count());
Magic Number,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Stored_procedure_with_two_results_being_same_entity_with_spatial,The following statement contains a magic number: Assert.Equal(4' houses.Count());
Magic Number,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Stored_procedure_with_two_results_being_same_entity_with_spatial,The following statement contains a magic number: Assert.Equal(4' alsoHouses.Count());
Magic Number,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Stored_procedure_with_two_results_being_two_child_entities_of_the_same_hierarchy,The following statement contains a magic number: Assert.Equal(11' humans.Count());
Magic Number,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Stored_procedure_with_two_results_being_two_child_entities_of_the_same_hierarchy,The following statement contains a magic number: Assert.Equal(3' animals.Count());
Magic Number,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Stored_procedure_with_two_results_second_being_hierarchy,The following statement contains a magic number: Assert.Equal(4' lands.Count());
Magic Number,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Stored_procedure_with_two_results_second_being_hierarchy,The following statement contains a magic number: Assert.Equal(3' creaturesList.OfType<IceAndFireModel.Animal>().Count());
Magic Number,System.Data.Entity.Query.StoredProcedures,StoredProceduresTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Query\StoredProcedures\StoredProceduresTests.cs,Stored_procedure_with_two_results_second_being_hierarchy,The following statement contains a magic number: Assert.Equal(11' creaturesList.OfType<IceAndFireModel.Human>().Count());
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c7_decimal_28_4).HasColumnType("decimal").HasPrecision(28' 4);
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c7_decimal_28_4).HasColumnType("decimal").HasPrecision(28' 4);
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c8_numeric_28_4).HasColumnType("numeric").HasPrecision(28' 4);
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c8_numeric_28_4).HasColumnType("numeric").HasPrecision(28' 4);
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c13_varchar_512_).HasMaxLength(512).IsVariableLength().IsUnicode(false);
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c14_char_512_).HasMaxLength(512).IsFixedLength().IsUnicode(false);
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c16_binary_512_).HasMaxLength(512).IsFixedLength();
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c17_varbinary_512_).HasMaxLength(512).IsVariableLength();
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c19_nvarchar_512_).HasMaxLength(512).IsVariableLength().IsUnicode(true);
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllTypes>().Property(p => p.c20_nchar_512_).HasMaxLength(512).IsFixedLength().IsUnicode(true);
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaOwner>().Property(o => o.FirstName).HasMaxLength(30);
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,Seed,The following statement contains a magic number: bugs[i].Failure = failures[i % 4];
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,Seed,The following statement contains a magic number: failures[i % 4].Bugs.Add(bugs[i]);
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,Seed,The following statement contains a magic number: j < i % 3
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,Seed,The following statement contains a magic number: j < i % 2
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,Seed,The following statement contains a magic number: j < 5
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,Seed,The following statement contains a magic number: j < 3
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c6_smalldatetime = new DateTime(2010' i % 12 + 1' i % 28 + 1' i % 12' 0' 0)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c12_smallmoney = i + (decimal)((double)i / 2)'                         c13_varchar_512_ = new string((char)(i + 'a')' i % 8)'                         c14_char_512_= new string((char)(i + 'a')' 512)'                         c15_text = new string((char)(i + 'a')' 20 + i)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c24_varchar_max_ = new string((char)(i + 'A')' 15 + i % 4)'                         c25_nvarchar_max_ = new string((char)(i + 'A')' 15 + i % 7)'                         c26_varbinary_max_ = Enumerable.Repeat<byte>((byte)i' 15 + i % 8).ToArray()'                         c27_time = new TimeSpan(10' i % 60 + 1' i % 60 + i)'                         c28_date = new DateTime(2000' i % 8 + 1' i % 8 + 1)'                         c29_datetime2 = new DateTime(2012' i % 5 + 1' i % 5 + 1' 1' 2' 3)'                         c30_datetimeoffset = new DateTimeOffset(new DateTime(2030 + i' 1' 2)' new TimeSpan(i % 12' i % 60' 0))'                         c31_geography = DbGeography.FromText(string.Format("POINT ({0}.0 {0}.0)"' i % 8)' 4326)'                         c32_geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{0}.0)"' i % 8)' 32768)'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)'                         //c35_timestamp                         c36_geometry_linestring = DbGeometry.FromText(string.Format("LINESTRING (1{0} 2{0}' 1{1} 2{0}' 1{1} 2{1}' 1{0} 2{1}' 1{0} 2{0})"' i % 5 + 2' i % 5 + 4)' 32768)'                         c37_geometry_polygon = DbGeometry.FromText(string.Format("POLYGON ((1{1} 2{0}' 1{0} 2{0}' 1{0} 2{1}' 1{1} 2{0}))"' i % 5+ 3' i % 5 + 4)' 32768)'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeBugs,The following statement contains a magic number: var bug = new ArubaBug                 {                     Comment = "Bug Comment " + i'                     Number = i'                     Resolution = (ArubaBugResolution)(i % 5)'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeConfigs,The following statement contains a magic number: var config = new ArubaConfig                     {                         Arch = "Config Architecture " + i % 3'                         Lang = "Config Language" + i'                         OS = "Config Operating System" + i'                         Failures = new List<ArubaFailure>()'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeConfigs,The following statement contains a magic number: i % 2 == 0
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeFailures,The following statement contains a magic number: var failure = new ArubaFailure                     {                         Changed = new DateTime(2000' i % 12 + 1' i % 28 + 1)'                         Log = "Failure Log " + i'                         TestCase = "Failure Test Case " + i'                         TestId = i'                         Variation = i % 4'                         Configs = new List<ArubaConfig>()'                         Bugs = new List<ArubaBug>()'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeFailures,The following statement contains a magic number: var failure = new ArubaFailure                     {                         Changed = new DateTime(2000' i % 12 + 1' i % 28 + 1)'                         Log = "Failure Log " + i'                         TestCase = "Failure Test Case " + i'                         TestId = i'                         Variation = i % 4'                         Configs = new List<ArubaConfig>()'                         Bugs = new List<ArubaBug>()'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeFailures,The following statement contains a magic number: var failure = new ArubaFailure                     {                         Changed = new DateTime(2000' i % 12 + 1' i % 28 + 1)'                         Log = "Failure Log " + i'                         TestCase = "Failure Test Case " + i'                         TestId = i'                         Variation = i % 4'                         Configs = new List<ArubaConfig>()'                         Bugs = new List<ArubaBug>()'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeFailures,The following statement contains a magic number: var failure = new ArubaFailure                     {                         Changed = new DateTime(2000' i % 12 + 1' i % 28 + 1)'                         Log = "Failure Log " + i'                         TestCase = "Failure Test Case " + i'                         TestId = i'                         Variation = i % 4'                         Configs = new List<ArubaConfig>()'                         Bugs = new List<ArubaBug>()'                     };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeFailures,The following statement contains a magic number: i % 3 == 0
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeOwners,The following statement contains a magic number: var owner = new ArubaOwner                 {                     Id = i'                     Alias = "Owner Alias " + i'                     FirstName = "First Name " + i % 3'                     LastName = "Last Name " + i'                     Bugs = new List<ArubaBug>()'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeRuns,The following statement contains a magic number: var run = new ArubaRun                 {                     Id = i'                     Name = "Run Name" + i'                     Purpose = i + 10'                     Tasks = new List<ArubaTask>()'                     Geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{1}.0)"' i % 8' 8 - i % 8)' 32768)'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeRuns,The following statement contains a magic number: var run = new ArubaRun                 {                     Id = i'                     Name = "Run Name" + i'                     Purpose = i + 10'                     Tasks = new List<ArubaTask>()'                     Geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{1}.0)"' i % 8' 8 - i % 8)' 32768)'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeRuns,The following statement contains a magic number: var run = new ArubaRun                 {                     Id = i'                     Name = "Run Name" + i'                     Purpose = i + 10'                     Tasks = new List<ArubaTask>()'                     Geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{1}.0)"' i % 8' 8 - i % 8)' 32768)'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeRuns,The following statement contains a magic number: var run = new ArubaRun                 {                     Id = i'                     Name = "Run Name" + i'                     Purpose = i + 10'                     Tasks = new List<ArubaTask>()'                     Geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{1}.0)"' i % 8' 8 - i % 8)' 32768)'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeRuns,The following statement contains a magic number: var run = new ArubaRun                 {                     Id = i'                     Name = "Run Name" + i'                     Purpose = i + 10'                     Tasks = new List<ArubaTask>()'                     Geometry = DbGeometry.FromText(string.Format("POINT (1{0}.0 2{1}.0)"' i % 8' 8 - i % 8)' 32768)'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeTasks,The following statement contains a magic number: var task = new ArubaTask                 {                     Id = i / 2'                     Name = i % 2 == 0 ? "Foo" : "Bar"'                     Deleted = i % 3 == 0'                     TaskInfo = new ArubaTaskInfo                     {                         Failed = i'                         Improvements = i * 2'                         Investigates = i % 4'                         Passed = i % 2'                     }'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeTasks,The following statement contains a magic number: var task = new ArubaTask                 {                     Id = i / 2'                     Name = i % 2 == 0 ? "Foo" : "Bar"'                     Deleted = i % 3 == 0'                     TaskInfo = new ArubaTaskInfo                     {                         Failed = i'                         Improvements = i * 2'                         Investigates = i % 4'                         Passed = i % 2'                     }'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeTasks,The following statement contains a magic number: var task = new ArubaTask                 {                     Id = i / 2'                     Name = i % 2 == 0 ? "Foo" : "Bar"'                     Deleted = i % 3 == 0'                     TaskInfo = new ArubaTaskInfo                     {                         Failed = i'                         Improvements = i * 2'                         Investigates = i % 4'                         Passed = i % 2'                     }'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeTasks,The following statement contains a magic number: var task = new ArubaTask                 {                     Id = i / 2'                     Name = i % 2 == 0 ? "Foo" : "Bar"'                     Deleted = i % 3 == 0'                     TaskInfo = new ArubaTaskInfo                     {                         Failed = i'                         Improvements = i * 2'                         Investigates = i % 4'                         Passed = i % 2'                     }'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeTasks,The following statement contains a magic number: var task = new ArubaTask                 {                     Id = i / 2'                     Name = i % 2 == 0 ? "Foo" : "Bar"'                     Deleted = i % 3 == 0'                     TaskInfo = new ArubaTaskInfo                     {                         Failed = i'                         Improvements = i * 2'                         Investigates = i % 4'                         Passed = i % 2'                     }'                 };
Magic Number,System.Data.Entity.TestModels.ArubaModel,ArubaInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaModel\ArubaInitializer.cs,InitializeTasks,The following statement contains a magic number: var task = new ArubaTask                 {                     Id = i / 2'                     Name = i % 2 == 0 ? "Foo" : "Bar"'                     Deleted = i % 3 == 0'                     TaskInfo = new ArubaTaskInfo                     {                         Failed = i'                         Improvements = i * 2'                         Investigates = i % 4'                         Passed = i % 2'                     }'                 };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllCeTypes>().Property(p => p.c7_decimal_28_4).HasColumnType("decimal").HasPrecision(28' 4);
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllCeTypes>().Property(p => p.c7_decimal_28_4).HasColumnType("decimal").HasPrecision(28' 4);
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllCeTypes>().Property(p => p.c8_numeric_28_4).HasColumnType("numeric").HasPrecision(28' 4);
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllCeTypes>().Property(p => p.c8_numeric_28_4).HasColumnType("numeric").HasPrecision(28' 4);
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllCeTypes>().Property(p => p.c16_binary_512_).HasMaxLength(512).IsFixedLength();
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllCeTypes>().Property(p => p.c17_varbinary_512_).HasMaxLength(512).IsVariableLength();
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllCeTypes>().Property(p => p.c19_nvarchar_512_).HasMaxLength(512).IsVariableLength().IsUnicode(true);
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<ArubaAllCeTypes>().Property(p => p.c20_nchar_512_).HasMaxLength(512).IsFixedLength().IsUnicode(true);
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.ArubaCeModel,ArubaCeInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ArubaCeModel\ArubaCeInitializer.cs,InitializeAllTypes,The following statement contains a magic number: var allTypes = new ArubaAllCeTypes                     {                         c2_smallint = (short)i'                         c3_tinyint = (byte)i'                         c4_bit = i % 2 == 0'                         c5_datetime = new DateTime(1990' i % 12 + 1' i % 28 + 1' i % 12' i % 60' i % 60)'                         c7_decimal_28_4 = 10 + (decimal)((double)i / 4)'                         c8_numeric_28_4 = -5 + (decimal)((double)i / 8)'                         c9_real = (float)i / 3'                         c10_float = i + (double)i / 3'                         c11_money = i + (decimal)((double)i / 5)'                         c16_binary_512_ = Enumerable.Repeat<byte>((byte)i' 512).ToArray()'                         c17_varbinary_512_ = Enumerable.Repeat<byte>((byte)i' 1 + i % 7).ToArray()'                         c18_image = Enumerable.Repeat<byte>((byte)i' i + 10).ToArray()'                         c19_nvarchar_512_ = new string((char)(i + 'a')' i)'                         c20_nchar_512_ = new string((char)(i + 'a')' 512)'                         c21_ntext = new string((char)(i + 'a')' 20 + i)'                         c22_uniqueidentifier = new Guid(new string((char)((i % 5) + '0')' 32))'                         c23_bigint = (long)i * 10'                         c33_enum = (ArubaEnum)(i % 4)'                         c34_byteenum = (ArubaByteEnum)(i % 3)                     };
Magic Number,System.Data.Entity.TestModels.GearsOfWarModel,GearsOfWarContext,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\GearsOfWarModel\GearsOfWarContext.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<CogTag>().Property(t => t.Note).HasMaxLength(40);
Magic Number,System.Data.Entity.TestModels.GearsOfWarModel,GearsOfWarInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\GearsOfWarModel\GearsOfWarInitializer.cs,Seed,The following statement contains a magic number: var lancer = new StandardWeapon             {                 Name = "Lancer"'                 Specs = new WeaponSpecification                 {                     AmmoPerClip = 60'                     ClipsCount = 8'                 }             };
Magic Number,System.Data.Entity.TestModels.GearsOfWarModel,GearsOfWarInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\GearsOfWarModel\GearsOfWarInitializer.cs,Seed,The following statement contains a magic number: var lancer = new StandardWeapon             {                 Name = "Lancer"'                 Specs = new WeaponSpecification                 {                     AmmoPerClip = 60'                     ClipsCount = 8'                 }             };
Magic Number,System.Data.Entity.TestModels.GearsOfWarModel,GearsOfWarInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\GearsOfWarModel\GearsOfWarInitializer.cs,Seed,The following statement contains a magic number: var gnasher = new StandardWeapon             {                 Name = "Gnasher"'                 Specs = new WeaponSpecification                 {                     AmmoPerClip = 8'                     ClipsCount = 6'                 }'                                  SynergyWith = lancer'             };
Magic Number,System.Data.Entity.TestModels.GearsOfWarModel,GearsOfWarInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\GearsOfWarModel\GearsOfWarInitializer.cs,Seed,The following statement contains a magic number: var gnasher = new StandardWeapon             {                 Name = "Gnasher"'                 Specs = new WeaponSpecification                 {                     AmmoPerClip = 8'                     ClipsCount = 6'                 }'                                  SynergyWith = lancer'             };
Magic Number,System.Data.Entity.TestModels.GearsOfWarModel,GearsOfWarInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\GearsOfWarModel\GearsOfWarInitializer.cs,Seed,The following statement contains a magic number: var hammerburst = new StandardWeapon             {                 Name = "Hammerburst"'                 Specs = new WeaponSpecification                 {                     AmmoPerClip = 20'                     ClipsCount = 7'                 }             };
Magic Number,System.Data.Entity.TestModels.GearsOfWarModel,GearsOfWarInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\GearsOfWarModel\GearsOfWarInitializer.cs,Seed,The following statement contains a magic number: var hammerburst = new StandardWeapon             {                 Name = "Hammerburst"'                 Specs = new WeaponSpecification                 {                     AmmoPerClip = 20'                     ClipsCount = 7'                 }             };
Magic Number,System.Data.Entity.TestModels.GearsOfWarModel,GearsOfWarInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\GearsOfWarModel\GearsOfWarInitializer.cs,Seed,The following statement contains a magic number: var markza = new StandardWeapon             {                 Name = "Markza"'                 Specs = new WeaponSpecification                 {                 AmmoPerClip = 10'                 ClipsCount = 12'                 }'                                  SynergyWith = gnasher'             };
Magic Number,System.Data.Entity.TestModels.GearsOfWarModel,GearsOfWarInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\GearsOfWarModel\GearsOfWarInitializer.cs,Seed,The following statement contains a magic number: var markza = new StandardWeapon             {                 Name = "Markza"'                 Specs = new WeaponSpecification                 {                 AmmoPerClip = 10'                 ClipsCount = 12'                 }'                                  SynergyWith = gnasher'             };
Magic Number,System.Data.Entity.TestModels.GearsOfWarModel,GearsOfWarInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\GearsOfWarModel\GearsOfWarInitializer.cs,Seed,The following statement contains a magic number: var kiloSquad = new Squad             {                 Id = 2'                 Name = "Kilo"'             };
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_truncate_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  9.88888888888888888888888888888888m' 9.8888m'                  11.88888888888888888888888888888888m' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_truncate_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  9.88888888888888888888888888888888m' 9.8888m'                  11.88888888888888888888888888888888m' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_truncate_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  9.88888888888888888888888888888888m' 9.8888m'                  11.88888888888888888888888888888888m' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_truncate_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  9.88888888888888888888888888888888m' 9.8888m'                  11.88888888888888888888888888888888m' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_truncate_behaves_differently_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      9.88888888888888888888888888888888m' 9.8889m'                      11.88888888888888888888888888888888m' 11.8889m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_truncate_behaves_differently_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      9.88888888888888888888888888888888m' 9.8889m'                      11.88888888888888888888888888888888m' 11.8889m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_truncate_behaves_differently_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      9.88888888888888888888888888888888m' 9.8889m'                      11.88888888888888888888888888888888m' 11.8889m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_truncate_behaves_differently_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      9.88888888888888888888888888888888m' 9.8889m'                      11.88888888888888888888888888888888m' 11.8889m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  9.11111111111111111111111111111111m + 0.00005m' 9.1111m'                  11.11111111111111111111111111111111m + 0.00005m' 11.1111m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  9.11111111111111111111111111111111m + 0.00005m' 9.1111m'                  11.11111111111111111111111111111111m + 0.00005m' 11.1111m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  9.11111111111111111111111111111111m + 0.00005m' 9.1111m'                  11.11111111111111111111111111111111m + 0.00005m' 11.1111m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  9.11111111111111111111111111111111m + 0.00005m' 9.1111m'                  11.11111111111111111111111111111111m + 0.00005m' 11.1111m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  9.11111111111111111111111111111111m + 0.00005m' 9.1111m'                  11.11111111111111111111111111111111m + 0.00005m' 11.1111m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  9.11111111111111111111111111111111m + 0.00005m' 9.1111m'                  11.11111111111111111111111111111111m + 0.00005m' 11.1111m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_behaves_differently_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      9.11111111111111111111111111111111m + 0.00005m' 9.1112m'                      11.11111111111111111111111111111111m + 0.00005m' 11.1112m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_behaves_differently_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      9.11111111111111111111111111111111m + 0.00005m' 9.1112m'                      11.11111111111111111111111111111111m + 0.00005m' 11.1112m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_behaves_differently_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      9.11111111111111111111111111111111m + 0.00005m' 9.1112m'                      11.11111111111111111111111111111111m + 0.00005m' 11.1112m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_behaves_differently_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      9.11111111111111111111111111111111m + 0.00005m' 9.1112m'                      11.11111111111111111111111111111111m + 0.00005m' 11.1112m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_behaves_differently_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      9.11111111111111111111111111111111m + 0.00005m' 9.1112m'                      11.11111111111111111111111111111111m + 0.00005m' 11.1112m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_relies_on_old_behavior_to_round_behaves_differently_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      9.11111111111111111111111111111111m + 0.00005m' 9.1112m'                      11.11111111111111111111111111111111m + 0.00005m' 11.1112m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                  Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                  Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                  Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                  Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                  Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                  Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                      Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                      Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                      Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                      Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                      Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_rounds_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Round(9.88888888888888888888888888888888m' 4)' 9.8889m'                      Math.Round(11.88888888888888888888888888888888m' 4)' 11.8889m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                  Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                  Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                  Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                  Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                  Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                  Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                  Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_by_default,The following statement contains a magic number: InsertAndUpdateWithDecimals(                  Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                  Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                      Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                      Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                      Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                      Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                      Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                      Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                      Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,Legacy_code_that_explicitly_truncates_continues_to_work_when_flag_is_changed,The following statement contains a magic number: RunWithTruncateFlag(                  () => InsertAndUpdateWithDecimals(                      Math.Truncate(9.88888888888888888888888888888888m * 10000) / 10000' 9.8888m'                      Math.Truncate(11.88888888888888888888888888888888m * 10000) / 10000' 11.8888m));
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,SQL_Compact_does_not_truncate_decimals_on_insert_or_update,The following statement contains a magic number: var allTypes = context.AllTypes.Add(                          new ArubaAllCeTypes                              {                                  c7_decimal_28_4 = 9.88888888888888888888888888888888m'                                  c8_numeric_28_4 = 9.88888888888888888888888888888888m'                                  c5_datetime = DateTime.Now'                              });
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,SQL_Compact_does_not_truncate_decimals_on_insert_or_update,The following statement contains a magic number: var allTypes = context.AllTypes.Add(                          new ArubaAllCeTypes                              {                                  c7_decimal_28_4 = 9.88888888888888888888888888888888m'                                  c8_numeric_28_4 = 9.88888888888888888888888888888888m'                                  c5_datetime = DateTime.Now'                              });
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,SQL_Compact_does_not_truncate_decimals_on_insert_or_update,The following statement contains a magic number: ValidateSavedValues(context' allTypes' 9.8889m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,SQL_Compact_does_not_truncate_decimals_on_insert_or_update,The following statement contains a magic number: allTypes.c7_decimal_28_4 = 11.88888888888888888888888888888888m;
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,SQL_Compact_does_not_truncate_decimals_on_insert_or_update,The following statement contains a magic number: allTypes.c8_numeric_28_4 = 11.88888888888888888888888888888888m;
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,SQL_Compact_does_not_truncate_decimals_on_insert_or_update,The following statement contains a magic number: ValidateSavedValues(context' allTypes' 11.8889m);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,SQL_Compact_always_truncates_money_on_insert_or_update,The following statement contains a magic number: var allTypes = context.AllTypes.Add(                          new ArubaAllCeTypes                              {                                  c11_money = 9.88888888888888888888888888888888m'                                  c5_datetime = DateTime.Now'                              });
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,SQL_Compact_always_truncates_money_on_insert_or_update,The following statement contains a magic number: Assert.Equal(9.8888m' context.AllTypes.AsNoTracking().Single(t => t.c1_int == allTypes.c1_int).c11_money);
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,SQL_Compact_always_truncates_money_on_insert_or_update,The following statement contains a magic number: allTypes.c11_money = 11.88888888888888888888888888888888m;
Magic Number,System.Data.Entity.Update,TruncationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\TruncationTests.cs,SQL_Compact_always_truncates_money_on_insert_or_update,The following statement contains a magic number: Assert.Equal(11.8888m' context.AllTypes.AsNoTracking().Single(t => t.c1_int == allTypes.c1_int).c11_money);
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Verify_that_deletes_precede_inserts,The following statement contains a magic number: var squad1 = new Squad                     {                         Id = 3'                         Name = "Alpha"'                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Verify_that_deletes_precede_inserts,The following statement contains a magic number: var squad2 = new Squad                     {                         Id = 3'                         Name = "Bravo"'                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Verify_that_deletes_precede_inserts,The following statement contains a magic number: Assert.Equal(                     "Bravo"' context.Squads.Where(o => o.Id == 3).Select(s => s.Name).Single());
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Verify_that_order_of_insert_is_based_on_key_values_and_not_order_of_adding_to_collection,The following statement contains a magic number: var weapon1 = new HeavyWeapon                     {                         Id = 10'                         Name = "Mortar"'                         Overheats = false'                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Verify_that_order_of_insert_is_based_on_key_values_and_not_order_of_adding_to_collection,The following statement contains a magic number: var weapon2 = new HeavyWeapon                     {                         Id = 11'                         Name = "Oneshot"'                         Overheats = false'                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Verify_that_order_of_insert_is_based_on_key_values_and_not_order_of_adding_to_collection,The following statement contains a magic number: var weapon3 = new StandardWeapon                     {                         Id = 12'                         Name = "Boltok"'                         Specs = new WeaponSpecification                             {                                 AmmoPerClip = 6'                                 ClipsCount = 9'                             }'                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Verify_that_order_of_insert_is_based_on_key_values_and_not_order_of_adding_to_collection,The following statement contains a magic number: var weapon3 = new StandardWeapon                     {                         Id = 12'                         Name = "Boltok"'                         Specs = new WeaponSpecification                             {                                 AmmoPerClip = 6'                                 ClipsCount = 9'                             }'                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Verify_that_order_of_insert_is_based_on_key_values_and_not_order_of_adding_to_collection,The following statement contains a magic number: var weapon3 = new StandardWeapon                     {                         Id = 12'                         Name = "Boltok"'                         Specs = new WeaponSpecification                             {                                 AmmoPerClip = 6'                                 ClipsCount = 9'                             }'                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Verify_that_order_of_insert_is_based_on_key_values_and_not_order_of_adding_to_collection,The following statement contains a magic number: var newWeapons = context.Weapons.OrderByDescending(t => t.Id).Take(3).ToList();
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Verify_that_order_of_insert_is_based_on_key_values_and_not_order_of_adding_to_collection,The following statement contains a magic number: Assert.Equal("Mortar"' newWeapons[2].Name);
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Insert_resulting_in_data_truncation_throws_exception,The following statement contains a magic number: var cogTagNoteMaxLength = 40;
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Update_resulting_in_data_truncation_throws_exception,The following statement contains a magic number: var cogTagNoteMaxLength = 40;
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Inserting_entities_that_both_reference_each_other_throws,The following statement contains a magic number: var snub = new StandardWeapon                     {                         Name = "Snub"'                         Specs = new WeaponSpecification                             {                                 AmmoPerClip = 12'                                 ClipsCount = 11'                             }                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Inserting_entities_that_both_reference_each_other_throws,The following statement contains a magic number: var snub = new StandardWeapon                     {                         Name = "Snub"'                         Specs = new WeaponSpecification                             {                                 AmmoPerClip = 12'                                 ClipsCount = 11'                             }                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Inserting_entities_that_both_reference_each_other_throws,The following statement contains a magic number: var sawedoff = new StandardWeapon                     {                         Name = "Sawed-Off Shotgun"'                         Specs = new WeaponSpecification                             {                                 AmmoPerClip = 1'                                 ClipsCount = 6'                             }                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Inserting_entities_that_reference_themselves_in_a_cycle_throws,The following statement contains a magic number: var snub = new StandardWeapon                     {                         Name = "Snub"'                         Specs = new WeaponSpecification                             {                                 AmmoPerClip = 12'                                 ClipsCount = 11'                             }                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Inserting_entities_that_reference_themselves_in_a_cycle_throws,The following statement contains a magic number: var snub = new StandardWeapon                     {                         Name = "Snub"'                         Specs = new WeaponSpecification                             {                                 AmmoPerClip = 12'                                 ClipsCount = 11'                             }                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Inserting_entities_that_reference_themselves_in_a_cycle_throws,The following statement contains a magic number: var sawedoff = new StandardWeapon                     {                         Name = "Sawed-Off Shotgun"'                         Specs = new WeaponSpecification                             {                                 AmmoPerClip = 1'                                 ClipsCount = 6'                             }                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Inserting_entities_that_reference_themselves_in_a_cycle_throws,The following statement contains a magic number: var longshot = new StandardWeapon                     {                         Name = "Longshot"'                         Specs = new WeaponSpecification                             {                                 AmmoPerClip = 1'                                 ClipsCount = 24'                             }                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Cascade_delete_works_properly_on_one_to_many_relationship,The following statement contains a magic number: Assert.Equal(gearsBefore + 2' gearsAfterAdd);
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Modifying_non_generated_key_throws,The following statement contains a magic number: var squad = new Squad                     {                         Id = 10'                         Name = "Lima"'                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Modifying_non_generated_key_throws,The following statement contains a magic number: squad.Id = 20;
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Modifying_identity_non_key_throws,The following statement contains a magic number: var squad = new Squad                     {                         Id = 10'                         Name = "Lima"'                     };
Magic Number,System.Data.Entity.Update,UpdateTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Update\UpdateTests.cs,Insert_update_delete_entity_with_spatial_property,The following statement contains a magic number: var GeographySrid = 4326;
Magic Number,System.Data.Entity.ViewGeneration,PregenContextEdmxViews,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ViewGeneration\PregenContextEdmxViews.cs,PregenContextEdmxViews,The following statement contains a magic number: this.ViewCount = 2;
Magic Number,System.Data.Entity.ViewGeneration,PregenContextViews,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ViewGeneration\PregenContextViews.cs,PregenContextViews,The following statement contains a magic number: this.ViewCount = 2;
Magic Number,System.Data.Entity.EntityClient,AsyncScenarios,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\EntityClient\AsyncScenarios.cs,CreateProduct,The following statement contains a magic number: product.Name = (string)values[2];
Magic Number,SimpleModel,SimpleModelForLinq,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinq.cs,NumbersGreaterThanTen,The following statement contains a magic number: return Numbers.Where(n => n.Value > 10);
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<NumberForLinq>                  {                      new NumberForLinq(5' "Five")'                      new NumberForLinq(4' "Four")'                      new NumberForLinq(1' "One")'                      new NumberForLinq(3' "Three")'                      new NumberForLinq(9' "Nine")'                      new NumberForLinq(8' "Eight")'                      new NumberForLinq(6' "Six")'                      new NumberForLinq(7' "Seven")'                      new NumberForLinq(2' "Two")'                      new NumberForLinq(0' "Zero")'                  }.ForEach(i => context.Numbers.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<NumberForLinq>                  {                      new NumberForLinq(5' "Five")'                      new NumberForLinq(4' "Four")'                      new NumberForLinq(1' "One")'                      new NumberForLinq(3' "Three")'                      new NumberForLinq(9' "Nine")'                      new NumberForLinq(8' "Eight")'                      new NumberForLinq(6' "Six")'                      new NumberForLinq(7' "Seven")'                      new NumberForLinq(2' "Two")'                      new NumberForLinq(0' "Zero")'                  }.ForEach(i => context.Numbers.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<NumberForLinq>                  {                      new NumberForLinq(5' "Five")'                      new NumberForLinq(4' "Four")'                      new NumberForLinq(1' "One")'                      new NumberForLinq(3' "Three")'                      new NumberForLinq(9' "Nine")'                      new NumberForLinq(8' "Eight")'                      new NumberForLinq(6' "Six")'                      new NumberForLinq(7' "Seven")'                      new NumberForLinq(2' "Two")'                      new NumberForLinq(0' "Zero")'                  }.ForEach(i => context.Numbers.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<NumberForLinq>                  {                      new NumberForLinq(5' "Five")'                      new NumberForLinq(4' "Four")'                      new NumberForLinq(1' "One")'                      new NumberForLinq(3' "Three")'                      new NumberForLinq(9' "Nine")'                      new NumberForLinq(8' "Eight")'                      new NumberForLinq(6' "Six")'                      new NumberForLinq(7' "Seven")'                      new NumberForLinq(2' "Two")'                      new NumberForLinq(0' "Zero")'                  }.ForEach(i => context.Numbers.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<NumberForLinq>                  {                      new NumberForLinq(5' "Five")'                      new NumberForLinq(4' "Four")'                      new NumberForLinq(1' "One")'                      new NumberForLinq(3' "Three")'                      new NumberForLinq(9' "Nine")'                      new NumberForLinq(8' "Eight")'                      new NumberForLinq(6' "Six")'                      new NumberForLinq(7' "Seven")'                      new NumberForLinq(2' "Two")'                      new NumberForLinq(0' "Zero")'                  }.ForEach(i => context.Numbers.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<NumberForLinq>                  {                      new NumberForLinq(5' "Five")'                      new NumberForLinq(4' "Four")'                      new NumberForLinq(1' "One")'                      new NumberForLinq(3' "Three")'                      new NumberForLinq(9' "Nine")'                      new NumberForLinq(8' "Eight")'                      new NumberForLinq(6' "Six")'                      new NumberForLinq(7' "Seven")'                      new NumberForLinq(2' "Two")'                      new NumberForLinq(0' "Zero")'                  }.ForEach(i => context.Numbers.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<NumberForLinq>                  {                      new NumberForLinq(5' "Five")'                      new NumberForLinq(4' "Four")'                      new NumberForLinq(1' "One")'                      new NumberForLinq(3' "Three")'                      new NumberForLinq(9' "Nine")'                      new NumberForLinq(8' "Eight")'                      new NumberForLinq(6' "Six")'                      new NumberForLinq(7' "Seven")'                      new NumberForLinq(2' "Two")'                      new NumberForLinq(0' "Zero")'                  }.ForEach(i => context.Numbers.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<NumberForLinq>                  {                      new NumberForLinq(5' "Five")'                      new NumberForLinq(4' "Four")'                      new NumberForLinq(1' "One")'                      new NumberForLinq(3' "Three")'                      new NumberForLinq(9' "Nine")'                      new NumberForLinq(8' "Eight")'                      new NumberForLinq(6' "Six")'                      new NumberForLinq(7' "Seven")'                      new NumberForLinq(2' "Two")'                      new NumberForLinq(0' "Zero")'                  }.ForEach(i => context.Numbers.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<ProductForLinq>                  {                      new ProductForLinq                          {                              ProductName = "Chai"'                              Category = "Beverages"'                              UnitPrice = 18.0000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Chang"'                              Category = "Beverages"'                              UnitPrice = 19.0000M'                              UnitsInStock = 17                          }'                      new ProductForLinq                          {                              ProductName = "Aniseed Syrup"'                              Category = "Condiments"'                              UnitPrice = 10.0000M'                              UnitsInStock = 13                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Cajun Seasoning"'                              Category = "Condiments"'                              UnitPrice = 22.0000M'                              UnitsInStock = 53                          }'                      new ProductForLinq                          {                              ProductName = "Chef Anton's Gumbo Mix"'                              Category = "Condiments"'                              UnitPrice = 21.3500M'                              UnitsInStock = 0                          }'                      new ProductForLinq                          {                              ProductName = "Grandma's Boysenberry Spread"'                              Category = "Condiments"'                              UnitPrice = 25.0000M'                              UnitsInStock = 120                          }'                      new ProductForLinq                          {                              ProductName = "Uncle Bob's Organic Dried Pears"'                              Category = "Produce"'                              UnitPrice = 30.0000M'                              UnitsInStock = 15                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Northwoods Cranberry Sauce"'                              Category = "Condiments"'                              UnitPrice = 40.0000M'                              UnitsInStock = 6                          }'                      new ProductForLinq                          {                              ProductName = "Mishi Kobe Niku"'                              Category = "Meat/Poultry"'                              UnitPrice = 97.0000M'                              UnitsInStock = 29                          }'                      new ProductForLinq                          {                              ProductName = "Ikura"'                              Category = "Seafood"'                              UnitPrice = 31.0000M'                              UnitsInStock = 31                          }'                      new ProductForLinq                          {                              ProductName = "Queso Cabrales"'                              Category = "Dairy Products"'                              UnitPrice = 21.0000M'                              UnitsInStock = 22                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Queso Manchego La Pastora"'                              Category = "Dairy Products"'                              UnitPrice = 38.0000M'                              UnitsInStock = 86                          }'                      new ProductForLinq                          {                              ProductName = "Konbu"'                              Category = "Seafood"'                              UnitPrice = 6.0000M'                              UnitsInStock = 24                          }'                      new ProductForLinq                          {                              ProductName = "Tofu"'                              Category = "Produce"'                              UnitPrice = 23.2500M'                              UnitsInStock = 35                          }'                      new ProductForLinq                          {                              ProductName = "Genen Shouyu"'                              Category = "Condiments"'                              UnitPrice = 15.5000M'                              UnitsInStock = 39                          }'                      new ProductForLinq                          {                              ProductName = "Pavlova"'                              Category = "Confections"'                              UnitPrice = 17.4500M'                              UnitsInStock = 29                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Alice Mutton"'                              Category = "Meat/Poultry"'                              UnitPrice = 39.0000M'                              UnitsInStock = 0                          }'                      new FeaturedProductForLinq                          {                              ProductName = "Carnarvon Tigers"'                              Category = "Seafood"'                              UnitPrice = 62.5000M'                              UnitsInStock = 42                          }'                      new ProductForLinq                          {                              ProductName = "Teatime Chocolate Biscuits"'                              Category = "Confections"'                              UnitPrice = 9.2000M'                              UnitsInStock = 25                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Marmalade"'                              Category = "Confections"'                              UnitPrice = 81.0000M'                              UnitsInStock = 40                          }'                      new ProductForLinq                          {                              ProductName = "Sir Rodney's Scones"'                              Category = "Confections"'                              UnitPrice = 10.0000M'                              UnitsInStock = 3                          }'                  }.ForEach(i => context.Products.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,SimpleModel,SimpleModelForLinqInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\LinqModels\SimpleModelForLinqInitializer.cs,Seed,The following statement contains a magic number: new List<OrderForLinq>                  {                      new OrderForLinq                          {                              Total = 111M'                              OrderDate = new DateTime(1997' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 222M'                              OrderDate = new DateTime(2006' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 333M'                              OrderDate = new DateTime(1999' 9' 3)'                              Customer = customers[0]                          }'                      new OrderForLinq                          {                              Total = 444M'                              OrderDate = new DateTime(2010' 9' 3)'                              Customer = customers[1]                          }'                      new OrderForLinq                          {                              Total = 2555M'                              OrderDate = new DateTime(2009' 9' 3)'                              Customer = customers[2]                          }'                      new OrderForLinq                          {                              Total = 6555M'                              OrderDate = new DateTime(1976' 9' 3)'                              Customer = customers[3]                          }'                      new OrderForLinq                          {                              Total = 555M'                              OrderDate = new DateTime(1985' 9' 3)'                              Customer = customers[2]                          }'                  }.ForEach(i => context.Orders.Add(i));
Magic Number,LazyUnicorns,LazyBlogsContextInitializer,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\TestModels\ExtraLazyLoading\lazyblogcontext.cs,Seed,The following statement contains a magic number: context.Posts.Add(                  new LazyPost                      {                          Id = 2'                          Title = "Sleepy Horses"'                          Comments = new List<LazyComment>                                         {                                             new LazyComment                                                 {                                                     Content = "Are enums supported?"                                                 }'                                         }                      });
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ShouldValidateEntityTestRunner,The following statement contains a magic number: Assert.Equal(                      shouldValidateEntityReturnValue                          ? 4                          : // we don't see entities in Detached state so validation is not called at all                      0'                      callCount);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,GetValidationErrors_does_not_return_errors_for_valid_entities,The following statement contains a magic number: var results = Invoke_DbContext_GetValidationErrors(                  new object[]                      {                          new EntityWithNoValidation()'                          new EntityWithAllKindsOfValidation                              {                                  ID = 5'                                  Name = "abc"                              }                      });
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,GetValidationErrors_returns_errors_for_invalid_entities_builtin_validation_attributes,The following statement contains a magic number: Assert.Equal(3' entityValidationResult.ValidationErrors.Count);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,GetValidationErrors_returns_errors_for_invalid_entities_builtin_validation_attributes,The following statement contains a magic number: Assert.True(                  entityValidationResult.ValidationErrors.SingleOrDefault(                      e => e.PropertyName == "ID" &&                           e.ErrorMessage == string.Format(RangeAttribute_ValidationError' "ID"' 0' 100)) != null);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,GetValidationErrors_returns_errors_for_invalid_entities_builtin_validation_attributes,The following statement contains a magic number: Assert.True(                  entityValidationResult.ValidationErrors.SingleOrDefault(                      e => e.PropertyName == "Name" &&                           e.ErrorMessage == string.Format(StringLengthAttribute_ValidationError' "Name"' 5)) != null);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,GetValidationErrors_returns_errors_for_invalid_entities_custom_validation_attributes,The following statement contains a magic number: var results =                      Invoke_DbContext_GetValidationErrors(                          new object[]                              {                                  new EntityWithAllKindsOfValidation                                      {                                          ID = 5'                                          Name = "abc"                                      }                              });
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,GetValidationErrors_returns_errors_for_invalid_entities_IValidatableObject,The following statement contains a magic number: var entity = new EntityWithAllKindsOfValidation                               {                                   ID = 5'                                   Name = "abc"                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,GetValidationErrors_returns_errors_for_invalid_entities_MetadataType,The following statement contains a magic number: Assert.Equal(string.Format(StringLengthAttribute_ValidationError' "Name"' 5)' validationError.ErrorMessage);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,GetValidationErrors_validates_only_added_and_modified_entities_by_default,The following statement contains a magic number: Assert.Equal(2' callCount);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbEntityEntry_GetValidationResult_returns_no_errors_for_valid_entities,The following statement contains a magic number: var entity = new EntityWithBuiltInValidationAttributes                               {                                   ID = 3'                                   Name = "abc"                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbEntityEntry_GetValidationResult_returns_error_for_invalid_entities,The following statement contains a magic number: var entity = new EntityWithBuiltInValidationAttributes                               {                                   ID = -3'                                   Name = "????"                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbEntityEntry_GetValidationResult_returns_error_for_invalid_entities,The following statement contains a magic number: Assert.Equal(2' validationResult.ValidationErrors.Count);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbEntityEntry_GetValidationResult_returns_errors_for_invalid_entities_MetadataType,The following statement contains a magic number: Assert.Equal(                      string.Format(StringLengthAttribute_ValidationError' "Name"' 5)'                      validationError.ErrorMessage);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbContext_ValidateEntity_is_called_when_validating_using_DbEntityEntry_GetValidationResult,The following statement contains a magic number: var entity = new EntityWithBuiltInValidationAttributes                               {                                   ID = 3'                                   Name = "abc"                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbContext_ValidateEntity_is_called_when_validating_using_DbEntityEntry_GetValidationResult,The following statement contains a magic number: Assert.Equal(2' callCount);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbMemberEntry_GetValidationErrors_returns_no_errors_when_validating_property_of_entity_without_any_validation,The following statement contains a magic number: var entity = new EntityWithNoValidation                               {                                   ID = 3                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbMemberEntry_GetValidationErrors_returns_no_errors_when_validating_property_not_having_validators,The following statement contains a magic number: var entity = new EntityWithSomeValidation                               {                                   ID = 3'                                   Name = "abc"                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbMemberEntry_GetValidationErrors_returns_no_errors_for_valid_members,The following statement contains a magic number: var entity = new EntityWithBuiltInValidationAttributes                               {                                   ID = 3'                                   Name = "abc"                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbPropertyEntry_GetValidationErrors_returns_errors_for_invalid_members,The following statement contains a magic number: var entity = new EntityWithBuiltInValidationAttributes                               {                                   ID = 3'                                   Name = "???????"                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbPropertyEntry_GetValidationErrors_returns_errors_for_invalid_members,The following statement contains a magic number: Assert.Equal(2' errors.Count());
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbPropertyEntry_GetValidationErrors_returns_errors_for_invalid_members_MetadataType,The following statement contains a magic number: Assert.Equal(                      string.Format(StringLengthAttribute_ValidationError' "Name"' 5)'                      validationError.ErrorMessage);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbPropertyEntry_GetValidationErrors_returns_no_errors_for_valid_primitive_properties,The following statement contains a magic number: var entity = new EntityWithBuiltInValidationAttributes                               {                                   ID = 3'                                   Name = "abc"                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbPropertyEntry_GetValidationErrors_returns_errors_for_invalid_primitive_properties,The following statement contains a magic number: var entity = new EntityWithBuiltInValidationAttributes                               {                                   ID = 3'                                   Name = "???????"                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbPropertyEntry_GetValidationErrors_returns_errors_for_invalid_primitive_properties,The following statement contains a magic number: Assert.Equal(2' errors.Count());
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbComplexPropertyEntry_GetValidationErrors_returns_no_errors_for_valid_complex_property,The following statement contains a magic number: var entity = new EntityWithComplexType                               {                                   ID = 3'                                   ComplexProperty = new ComplexType                                                         {                                                             RequiredProperty = "abc"                                                         }                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbComplexPropertyEntry_GetValidationErrors_returns_errors_for_invalid_complex_property,The following statement contains a magic number: var entity = new EntityWithComplexType                               {                                   ID = 3'                                   ComplexProperty = new ComplexType                                                         {                                                             RequiredProperty = null                                                         }                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbPropertyEntry_GetValidationErrors_does_not_drill_into_navigation_properties,The following statement contains a magic number: var entity = new EntityWithReferenceNavigationProperty                               {                                   ID = 1'                                   Name = "Test"'                                   RelatedEntity = new EntityWithBuiltInValidationAttributes                                                       {                                                           ID = 3'                                                           Name = "<>?<>?"                                                       }                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,DbCollectionEntry_GetValidationErrors_does_not_drill_into_navigation_properties,The following statement contains a magic number: var entity = new EntityWithCollectionNavigationProperty                               {                                   ID = 1'                                   Name = "Test"'                                   RelatedEntities = new List<EntityWithBuiltInValidationAttributes>(                                       new[]                                           {                                               new EntityWithBuiltInValidationAttributes                                                   {                                                       ID = 3'                                                       Name = "<>?<>?"                                                   }                                           })                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_does_not_return_errors_for_valid_entities,The following statement contains a magic number: var entities = new object[]                                 {                                     new EntityWithNoValidation                                         {                                             ID = 1                                         }'                                     new EntityWithSomeValidation                                         {                                             ID = 5'                                             Name = "123"'                                             Required = 42                                         }'                                     new EntityWithBuiltInValidationAttributes                                         {                                             ID = 3'                                             Name = "abc"                                         }'                                     new EntityWithComplexType                                         {                                             ID = 42'                                             ComplexProperty = new ComplexType                                                                   {                                                                       RequiredProperty = "abc"                                                                   }                                         }'                                     new EntityWithComplexTypeLevelCustomValidationAttributes                                         {                                             ID = 43'                                             ComplexProperty = new ComplexTypeWithTypeLevelCustomValidationAttributes()                                         }'                                     new EntityWithPropertyLevelCustomValidationAttributes                                         {                                             ID = 2                                         }'                                     entityWithEntityLevelCustomValidationAttributes'                                     new EntityWithFKReferenceNavigationPropertyDependant                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new EntityWithFKReferenceNavigationPropertyWorkaround                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new ValidatableEntity()                                 };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_does_not_return_errors_for_valid_entities,The following statement contains a magic number: var entities = new object[]                                 {                                     new EntityWithNoValidation                                         {                                             ID = 1                                         }'                                     new EntityWithSomeValidation                                         {                                             ID = 5'                                             Name = "123"'                                             Required = 42                                         }'                                     new EntityWithBuiltInValidationAttributes                                         {                                             ID = 3'                                             Name = "abc"                                         }'                                     new EntityWithComplexType                                         {                                             ID = 42'                                             ComplexProperty = new ComplexType                                                                   {                                                                       RequiredProperty = "abc"                                                                   }                                         }'                                     new EntityWithComplexTypeLevelCustomValidationAttributes                                         {                                             ID = 43'                                             ComplexProperty = new ComplexTypeWithTypeLevelCustomValidationAttributes()                                         }'                                     new EntityWithPropertyLevelCustomValidationAttributes                                         {                                             ID = 2                                         }'                                     entityWithEntityLevelCustomValidationAttributes'                                     new EntityWithFKReferenceNavigationPropertyDependant                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new EntityWithFKReferenceNavigationPropertyWorkaround                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new ValidatableEntity()                                 };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_does_not_return_errors_for_valid_entities,The following statement contains a magic number: var entities = new object[]                                 {                                     new EntityWithNoValidation                                         {                                             ID = 1                                         }'                                     new EntityWithSomeValidation                                         {                                             ID = 5'                                             Name = "123"'                                             Required = 42                                         }'                                     new EntityWithBuiltInValidationAttributes                                         {                                             ID = 3'                                             Name = "abc"                                         }'                                     new EntityWithComplexType                                         {                                             ID = 42'                                             ComplexProperty = new ComplexType                                                                   {                                                                       RequiredProperty = "abc"                                                                   }                                         }'                                     new EntityWithComplexTypeLevelCustomValidationAttributes                                         {                                             ID = 43'                                             ComplexProperty = new ComplexTypeWithTypeLevelCustomValidationAttributes()                                         }'                                     new EntityWithPropertyLevelCustomValidationAttributes                                         {                                             ID = 2                                         }'                                     entityWithEntityLevelCustomValidationAttributes'                                     new EntityWithFKReferenceNavigationPropertyDependant                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new EntityWithFKReferenceNavigationPropertyWorkaround                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new ValidatableEntity()                                 };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_does_not_return_errors_for_valid_entities,The following statement contains a magic number: var entities = new object[]                                 {                                     new EntityWithNoValidation                                         {                                             ID = 1                                         }'                                     new EntityWithSomeValidation                                         {                                             ID = 5'                                             Name = "123"'                                             Required = 42                                         }'                                     new EntityWithBuiltInValidationAttributes                                         {                                             ID = 3'                                             Name = "abc"                                         }'                                     new EntityWithComplexType                                         {                                             ID = 42'                                             ComplexProperty = new ComplexType                                                                   {                                                                       RequiredProperty = "abc"                                                                   }                                         }'                                     new EntityWithComplexTypeLevelCustomValidationAttributes                                         {                                             ID = 43'                                             ComplexProperty = new ComplexTypeWithTypeLevelCustomValidationAttributes()                                         }'                                     new EntityWithPropertyLevelCustomValidationAttributes                                         {                                             ID = 2                                         }'                                     entityWithEntityLevelCustomValidationAttributes'                                     new EntityWithFKReferenceNavigationPropertyDependant                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new EntityWithFKReferenceNavigationPropertyWorkaround                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new ValidatableEntity()                                 };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_does_not_return_errors_for_valid_entities,The following statement contains a magic number: var entities = new object[]                                 {                                     new EntityWithNoValidation                                         {                                             ID = 1                                         }'                                     new EntityWithSomeValidation                                         {                                             ID = 5'                                             Name = "123"'                                             Required = 42                                         }'                                     new EntityWithBuiltInValidationAttributes                                         {                                             ID = 3'                                             Name = "abc"                                         }'                                     new EntityWithComplexType                                         {                                             ID = 42'                                             ComplexProperty = new ComplexType                                                                   {                                                                       RequiredProperty = "abc"                                                                   }                                         }'                                     new EntityWithComplexTypeLevelCustomValidationAttributes                                         {                                             ID = 43'                                             ComplexProperty = new ComplexTypeWithTypeLevelCustomValidationAttributes()                                         }'                                     new EntityWithPropertyLevelCustomValidationAttributes                                         {                                             ID = 2                                         }'                                     entityWithEntityLevelCustomValidationAttributes'                                     new EntityWithFKReferenceNavigationPropertyDependant                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new EntityWithFKReferenceNavigationPropertyWorkaround                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new ValidatableEntity()                                 };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_does_not_return_errors_for_valid_entities,The following statement contains a magic number: var entities = new object[]                                 {                                     new EntityWithNoValidation                                         {                                             ID = 1                                         }'                                     new EntityWithSomeValidation                                         {                                             ID = 5'                                             Name = "123"'                                             Required = 42                                         }'                                     new EntityWithBuiltInValidationAttributes                                         {                                             ID = 3'                                             Name = "abc"                                         }'                                     new EntityWithComplexType                                         {                                             ID = 42'                                             ComplexProperty = new ComplexType                                                                   {                                                                       RequiredProperty = "abc"                                                                   }                                         }'                                     new EntityWithComplexTypeLevelCustomValidationAttributes                                         {                                             ID = 43'                                             ComplexProperty = new ComplexTypeWithTypeLevelCustomValidationAttributes()                                         }'                                     new EntityWithPropertyLevelCustomValidationAttributes                                         {                                             ID = 2                                         }'                                     entityWithEntityLevelCustomValidationAttributes'                                     new EntityWithFKReferenceNavigationPropertyDependant                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new EntityWithFKReferenceNavigationPropertyWorkaround                                         {                                             RelatedEntity = entityWithEntityLevelCustomValidationAttributes                                         }'                                     new ValidatableEntity()                                 };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_returns_errors_for_invalid_entities_with_built_in_attributes_defined_on_properties,The following statement contains a magic number: Assert.Equal(3' entityValidationResult.ValidationErrors.Count);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_returns_errors_for_invalid_entities_with_built_in_attributes_defined_on_properties,The following statement contains a magic number: Assert.True(                  entityValidationResult.ValidationErrors.SingleOrDefault(                      e => e.PropertyName == "ID" &&                           e.ErrorMessage == string.Format(RangeAttribute_ValidationError' "ID"' 0' 100)) != null);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_returns_errors_for_invalid_entities_with_built_in_attributes_defined_on_properties,The following statement contains a magic number: Assert.True(                  entityValidationResult.ValidationErrors.SingleOrDefault(                      e => e.PropertyName == "Name" &&                           e.ErrorMessage == string.Format(StringLengthAttribute_ValidationError' "Name"' 5)) != null);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_does_not_drill_into_navigation_properties,The following statement contains a magic number: var entity = new EntityWithReferenceNavigationProperty                               {                                   ID = 1'                                   Name = "Test"'                                   RelatedEntity = new EntityWithBuiltInValidationAttributes                                                       {                                                           ID = 3'                                                           Name = "<>?<>?"                                                       }                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,Test_ValidateEntity_LazyLoading,The following statement contains a magic number: var entity = new EntityWithReferenceNavigationProperty                               {                                   ID = 1'                                   Name = "Test"'                                   RelatedEntity = new EntityWithBuiltInValidationAttributes                                                       {                                                           ID = 3'                                                           Name = "abc"                                                       }                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_returns_errors_for_entities_with_invalid_transient_properties,The following statement contains a magic number: Assert.Equal(2' entityValidationResult.ValidationErrors.Count());
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_returns_errors_for_invalid_entities_with_custom_attributes_defined_on_properties,The following statement contains a magic number: var entity = new EntityWithPropertyLevelCustomValidationAttributes                                   {                                       ID = -3                                   };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_does_not_return_errors_for_valid_validatable_entity,The following statement contains a magic number: var entity = new ValidatableEntity                               {                                   ID = 3                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_returns_error_for_invalid_validatable_entity,The following statement contains a magic number: var entity = new ValidatableEntity                               {                                   ID = 3                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_does_not_run_type_level_validation_for_null_complex_properties,The following statement contains a magic number: var entity = new EntityWithComplexTypeLevelCustomValidationAttributes                               {                                   ID = 3                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_returns_errors_for_invalid_entities_with_custom_type_level_attributes_defined_on_complex_properties,The following statement contains a magic number: var entity = new EntityWithComplexTypeLevelCustomValidationAttributes                               {                                   ID = 4'                                   ComplexProperty =                                       new ComplexTypeWithTypeLevelCustomValidationAttributes                                           {                                               IsValid = false                                           }                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,ValidateEntity_does_not_run_type_level_validation_for_invalid_complex_properties,The following statement contains a magic number: var entity = new EntityWithComplexTypeLevelCustomValidationAttributes                               {                                   ID = 4'                                   ComplexProperty =                                       new ComplexTypeWithTypeLevelCustomValidationAttributes                                           {                                               IsValid = false                                           }                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,Changing_entity_property_MaxLength_value_does_not_override_attribute_setting,The following statement contains a magic number: var entity = new EntityWithSomeValidation                               {                                   ID = 0'                                   Name = new string('a'' 5)'                                   Required = 0                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,Changing_entity_property_MaxLength_value_does_not_override_attribute_setting,The following statement contains a magic number: entity.Name = new string('a'' 10);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,Changing_entity_property_MaxLength_value_does_not_override_attribute_setting,The following statement contains a magic number: entity.Name = new string('a'' 21);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,Configuring_complex_type_property_MaxLength_setting_does_not_override_attribute_setting,The following statement contains a magic number: var entity = new EntityWithComplexType                               {                                   ComplexProperty =                                       new ComplexType                                           {                                               ByteArray = new byte[3]'                                               RequiredProperty = "a"'                                               StringWithStringLengthAttribute = new string('a'' 8)                                           }                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,Configuring_complex_type_property_MaxLength_setting_does_not_override_attribute_setting,The following statement contains a magic number: var entity = new EntityWithComplexType                               {                                   ComplexProperty =                                       new ComplexType                                           {                                               ByteArray = new byte[3]'                                               RequiredProperty = "a"'                                               StringWithStringLengthAttribute = new string('a'' 8)                                           }                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,Configuring_complex_type_property_MaxLength_setting_does_not_override_attribute_setting,The following statement contains a magic number: entity.ComplexProperty.ByteArray = new byte[11];
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,Configuring_property_to_be_MaxLength_does_not_override_StringLength_and_MaxLength_attributes,The following statement contains a magic number: var entity = new EntityWithComplexType                               {                                   ComplexProperty =                                       new ComplexType                                           {                                               StringWithMaxLengthAndStringLengthAttributes = new string('z'' 4096)'                                               RequiredProperty = "a"'                                               StringWithStringLengthAttribute = new string('a'' 8)                                           }                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,Configuring_property_to_be_MaxLength_does_not_override_StringLength_and_MaxLength_attributes,The following statement contains a magic number: var entity = new EntityWithComplexType                               {                                   ComplexProperty =                                       new ComplexType                                           {                                               StringWithMaxLengthAndStringLengthAttributes = new string('z'' 4096)'                                               RequiredProperty = "a"'                                               StringWithStringLengthAttribute = new string('a'' 8)                                           }                               };
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,ValidationTests,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,Configuring_property_to_be_MaxLength_does_not_override_StringLength_and_MaxLength_attributes,The following statement contains a magic number: Assert.Equal(2' ctx.Entry(entity).GetValidationResult().ValidationErrors.Count());
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,DataAnnotationsConfigurationOverridesCtx,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.Entity<EntityWithSomeValidation>().Property(p => p.Name).HasMaxLength(20);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,DataAnnotationsConfigurationOverridesCtx,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.ComplexType<ComplexType>().Property(p => p.ByteArray).HasMaxLength(5);
Magic Number,Microsoft.Data.CodeFirst.FunctionalTests.ProductivityApi.Validation,DataAnnotationsConfigurationOverridesCtx,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\ProductivityApi\ValidationTests.cs,OnModelCreating,The following statement contains a magic number: modelBuilder.ComplexType<ComplexType>().Property(p => p.StringWithStringLengthAttribute).HasMaxLength(20);
Missing Default,System.Data.Entity.Migrations,BaseV1,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following switch statement is missing a default case: switch (_columnName)                  {                      case "Decimal15ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal15ToDouble).HasPrecision(15' 2);                          break;                        case "Decimal6ToDouble":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToDouble).HasPrecision(6' 2);                          break;                        case "Decimal6ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal6ToSingle).HasPrecision(6' 2);                          break;                        case "Decimal7ToSingle":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.Decimal7ToSingle).HasPrecision(7' 2);                          break;                  }
Missing Default,System.Data.Entity.Migrations,BaseV2,C:\research\architectureSmells\repos\mono_entityframework\test\EntityFramework\FunctionalTests\Migrations\AutoAndGenerateScenarios.cs,OnModelCreating,The following switch statement is missing a default case: switch (_columnName)                  {                      case "DoubleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.DoubleToDecimal16_v2).HasPrecision(16' 2);                          break;                        case "SingleToDecimal11":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal11_v2).HasPrecision(11' 2);                          break;                        case "SingleToDecimal16":                          modelBuilder.Entity<TypeCasts>().Property(tc => tc.SingleToDecimal16_v2).HasPrecision(16' 2);                          break;                  }
