Implementation smell,Namespace,Class,File,Method,Description
Long Method,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,RunSetupQueries,The method has 227 lines of code.
Long Statement,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,RunSetupQueries,The length of the statement  "				INSERT INTO DecimalTests VALUES (12.3' 0' 1' 12345' 39201.230' -4892384.38209' 1328783742987.29' 2940382040198493029.23456' -1) " is 127.
Long Statement,OrcaMDF.Core.Tests.Features.Compression,RecordFormatTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\RecordFormatTests.cs,RunSetupQueries,The length of the statement  "				CREATE TABLE MixedShortAndLongDataColumns (A tinyint' B binary(10)' C tinyint' D binary(10)) WITH (DATA_COMPRESSION = ROW) " is 122.
Long Statement,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,RunSetupQueries,The length of the statement  "				INSERT INTO VardecimalTest VALUES (12.3' 0' 1' 12345' 39201.230' -4892384.38209' 1328783742987.29' 2940382040198493029.23456' -1) " is 129.
Long Statement,OrcaMDF.Core.Tests.Engine,SparseVectorParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SparseVectorParserTests.cs,Parse,The length of the statement  "			byte[] bytes = new byte [] { 0x05' 0x00' 0x02' 0x00' 0x03' 0x00' 0x06' 0x00' 0x10' 0x00' 0x14' 0x00' 0x03' 0x00' 0x00' 0x00' 0xd2' 0x04' 0x00' 0x00 }; " is 150.
Long Statement,OrcaMDF.Core.Tests.Engine.Records,PrimaryRecordTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\PrimaryRecordTests.cs,TestFixedAndVarLength,The length of the statement  "			var a = new byte[] { 0x30' 0x00' 0x06' 0x00' 0x02' 0x00' 0x02' 0x00' 0x00' 0x01' 0x00' 0x11' 0x00' 0x6d' 0x61' 0x72' 0x6b }; " is 124.
Long Statement,OrcaMDF.Core.Tests.Engine.Records,PrimaryRecordTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\PrimaryRecordTests.cs,TestGhostForwardedRecord,The length of the statement  "			var a = new byte[] { 0x30' 0x01' 0x06' 0x00' 0x02' 0x00' 0x02' 0x00' 0x00' 0x01' 0x00' 0x11' 0x00' 0x6d' 0x61' 0x72' 0x6b }; " is 124.
Long Statement,OrcaMDF.Core.Tests.Features.LobTypes,VarBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarBinaryTests.cs,RunSetupQueries,The length of the statement  "						INSERT INTO VarBinaryTest20000000 VALUES (CAST(REPLICATE(CAST('A' AS varchar(MAX))' 20000000) AS varbinary(MAX)))"' conn); " is 122.
Long Statement,OrcaMDF.Core.Tests.Features.MultiDataFile,MultiFileTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\MultiDataFile\MultiFileTests.cs,RunSetupQueries,The length of the statement  "			RunQuery("ALTER DATABASE [" + conn.Database + "] ADD FILE ( NAME = N'SecondaryFGFile'' FILENAME = N'" + Path.Combine(DataFileRootPath' conn.Database + "_SecondFG.ndf") + "' ' SIZE = 3072KB ' FILEGROWTH = 1024KB ) TO FILEGROUP [SecondaryFilegroup]"' conn); " is 255.
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,DateCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\DateCompressionTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(7' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,DateCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\DateCompressionTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(7' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,DateCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\DateCompressionTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(7' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,DateCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\DateCompressionTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(7' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,DateCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\DateCompressionTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(5' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,DateCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\DateCompressionTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(5' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,DateCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\DateCompressionTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(4' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,DateCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\DateCompressionTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(6' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,SmallInt,The following statement contains a magic number: Assert.AreEqual(2' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,SmallInt,The following statement contains a magic number: Assert.AreEqual(2' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,SmallInt,The following statement contains a magic number: Assert.AreEqual(2' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,SmallInt,The following statement contains a magic number: Assert.AreEqual(2' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(2' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(2' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(3' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(3' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(4' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(2' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(3' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(4' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,BigInt,The following statement contains a magic number: Assert.AreEqual(8' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,BigInt,The following statement contains a magic number: Assert.AreEqual(7' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,BigInt,The following statement contains a magic number: Assert.AreEqual(6' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,BigInt,The following statement contains a magic number: Assert.AreEqual(5' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Engine.Records.CompressedRecordParserTests,IntegerCompressionTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\CompressedRecordParserTests\IntegerCompressionTests.cs,BigInt,The following statement contains a magic number: Assert.AreEqual(4' parser.GetPhysicalColumnBytes(0).GetBytes().Count());
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BinaryTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BinaryTest").ToList();    				Assert.AreEqual(null' rows[0].Field<byte[]>("A"));  				Assert.AreEqual(TestHelper.GetBytesFromByteString("25FF2500000000000000")' rows[1].Field<byte[]>("A"));  				Assert.AreEqual(TestHelper.GetBytesFromByteString("01020304050607080910")' rows[2].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BitTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BitTests").ToList();    				Assert.AreEqual(null' rows[0].Field<bool?>("A"));  				Assert.AreEqual(true' rows[1].Field<bool?>("A"));  				Assert.AreEqual(true' rows[2].Field<bool?>("A"));  				Assert.AreEqual(false' rows[3].Field<bool?>("A"));  				Assert.AreEqual(true' rows[4].Field<bool?>("A"));  				Assert.AreEqual(false' rows[5].Field<bool?>("A"));  				Assert.AreEqual(false' rows[6].Field<bool?>("A"));  				Assert.AreEqual(null' rows[7].Field<bool?>("A"));  				Assert.AreEqual(true' rows[8].Field<bool?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BitTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BitTests").ToList();    				Assert.AreEqual(null' rows[0].Field<bool?>("A"));  				Assert.AreEqual(true' rows[1].Field<bool?>("A"));  				Assert.AreEqual(true' rows[2].Field<bool?>("A"));  				Assert.AreEqual(false' rows[3].Field<bool?>("A"));  				Assert.AreEqual(true' rows[4].Field<bool?>("A"));  				Assert.AreEqual(false' rows[5].Field<bool?>("A"));  				Assert.AreEqual(false' rows[6].Field<bool?>("A"));  				Assert.AreEqual(null' rows[7].Field<bool?>("A"));  				Assert.AreEqual(true' rows[8].Field<bool?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BitTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BitTests").ToList();    				Assert.AreEqual(null' rows[0].Field<bool?>("A"));  				Assert.AreEqual(true' rows[1].Field<bool?>("A"));  				Assert.AreEqual(true' rows[2].Field<bool?>("A"));  				Assert.AreEqual(false' rows[3].Field<bool?>("A"));  				Assert.AreEqual(true' rows[4].Field<bool?>("A"));  				Assert.AreEqual(false' rows[5].Field<bool?>("A"));  				Assert.AreEqual(false' rows[6].Field<bool?>("A"));  				Assert.AreEqual(null' rows[7].Field<bool?>("A"));  				Assert.AreEqual(true' rows[8].Field<bool?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BitTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BitTests").ToList();    				Assert.AreEqual(null' rows[0].Field<bool?>("A"));  				Assert.AreEqual(true' rows[1].Field<bool?>("A"));  				Assert.AreEqual(true' rows[2].Field<bool?>("A"));  				Assert.AreEqual(false' rows[3].Field<bool?>("A"));  				Assert.AreEqual(true' rows[4].Field<bool?>("A"));  				Assert.AreEqual(false' rows[5].Field<bool?>("A"));  				Assert.AreEqual(false' rows[6].Field<bool?>("A"));  				Assert.AreEqual(null' rows[7].Field<bool?>("A"));  				Assert.AreEqual(true' rows[8].Field<bool?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BitTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BitTests").ToList();    				Assert.AreEqual(null' rows[0].Field<bool?>("A"));  				Assert.AreEqual(true' rows[1].Field<bool?>("A"));  				Assert.AreEqual(true' rows[2].Field<bool?>("A"));  				Assert.AreEqual(false' rows[3].Field<bool?>("A"));  				Assert.AreEqual(true' rows[4].Field<bool?>("A"));  				Assert.AreEqual(false' rows[5].Field<bool?>("A"));  				Assert.AreEqual(false' rows[6].Field<bool?>("A"));  				Assert.AreEqual(null' rows[7].Field<bool?>("A"));  				Assert.AreEqual(true' rows[8].Field<bool?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BitTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BitTests").ToList();    				Assert.AreEqual(null' rows[0].Field<bool?>("A"));  				Assert.AreEqual(true' rows[1].Field<bool?>("A"));  				Assert.AreEqual(true' rows[2].Field<bool?>("A"));  				Assert.AreEqual(false' rows[3].Field<bool?>("A"));  				Assert.AreEqual(true' rows[4].Field<bool?>("A"));  				Assert.AreEqual(false' rows[5].Field<bool?>("A"));  				Assert.AreEqual(false' rows[6].Field<bool?>("A"));  				Assert.AreEqual(null' rows[7].Field<bool?>("A"));  				Assert.AreEqual(true' rows[8].Field<bool?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BitTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BitTests").ToList();    				Assert.AreEqual(null' rows[0].Field<bool?>("A"));  				Assert.AreEqual(true' rows[1].Field<bool?>("A"));  				Assert.AreEqual(true' rows[2].Field<bool?>("A"));  				Assert.AreEqual(false' rows[3].Field<bool?>("A"));  				Assert.AreEqual(true' rows[4].Field<bool?>("A"));  				Assert.AreEqual(false' rows[5].Field<bool?>("A"));  				Assert.AreEqual(false' rows[6].Field<bool?>("A"));  				Assert.AreEqual(null' rows[7].Field<bool?>("A"));  				Assert.AreEqual(true' rows[8].Field<bool?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,CharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("CharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(""' rows[5].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,CharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("CharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(""' rows[5].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,CharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("CharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(""' rows[5].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,CharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("CharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(""' rows[5].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DecimalTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DecimalTests").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DecimalTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DecimalTests").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DecimalTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DecimalTests").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DecimalTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DecimalTests").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DecimalTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DecimalTests").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DecimalTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DecimalTests").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,ImageTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ImageTests").ToList();    				Assert.AreEqual(null' rows[0].Field<byte[]>("A"));  				Assert.AreEqual(TestHelper.GetBytesFromByteString("25FF25")' rows[1].Field<byte[]>("A"));  				Assert.AreEqual(TestHelper.GetBytesFromByteString("01020304050607080910")' rows[2].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,VarbinaryTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarbinaryTests").ToList();    				Assert.AreEqual(null' rows[0].Field<byte[]>("A"));  				Assert.AreEqual(TestHelper.GetBytesFromByteString("25FF25")' rows[1].Field<byte[]>("A"));  				Assert.AreEqual(TestHelper.GetBytesFromByteString("01020304050607080910")' rows[2].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,MoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,MoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,MoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,MoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,MoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,MoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,MoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,MoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,MoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,MoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallMoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallMoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallMoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallMoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallMoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallMoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallMoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallMoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallMoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallMoneyTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTests").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NCharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NCharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(""' rows[5].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨѨѨѨѨѨѨ"' rows[6].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NCharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NCharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(""' rows[5].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨѨѨѨѨѨѨ"' rows[6].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NCharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NCharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(""' rows[5].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨѨѨѨѨѨѨ"' rows[6].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NCharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NCharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(""' rows[5].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨѨѨѨѨѨѨ"' rows[6].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NCharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NCharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(""' rows[5].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨѨѨѨѨѨѨ"' rows[6].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,TinyintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TinyintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<byte?>("A"));  				Assert.AreEqual(127' rows[1].Field<byte?>("A"));  				Assert.AreEqual(128' rows[2].Field<byte?>("A"));  				Assert.AreEqual(255' rows[3].Field<byte?>("A"));  				Assert.AreEqual(null' rows[4].Field<byte?>("A"));  				Assert.AreEqual(0' rows[5].Field<byte?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,TinyintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TinyintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<byte?>("A"));  				Assert.AreEqual(127' rows[1].Field<byte?>("A"));  				Assert.AreEqual(128' rows[2].Field<byte?>("A"));  				Assert.AreEqual(255' rows[3].Field<byte?>("A"));  				Assert.AreEqual(null' rows[4].Field<byte?>("A"));  				Assert.AreEqual(0' rows[5].Field<byte?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,TinyintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TinyintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<byte?>("A"));  				Assert.AreEqual(127' rows[1].Field<byte?>("A"));  				Assert.AreEqual(128' rows[2].Field<byte?>("A"));  				Assert.AreEqual(255' rows[3].Field<byte?>("A"));  				Assert.AreEqual(null' rows[4].Field<byte?>("A"));  				Assert.AreEqual(0' rows[5].Field<byte?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,TinyintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TinyintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<byte?>("A"));  				Assert.AreEqual(127' rows[1].Field<byte?>("A"));  				Assert.AreEqual(128' rows[2].Field<byte?>("A"));  				Assert.AreEqual(255' rows[3].Field<byte?>("A"));  				Assert.AreEqual(null' rows[4].Field<byte?>("A"));  				Assert.AreEqual(0' rows[5].Field<byte?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,TinyintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TinyintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<byte?>("A"));  				Assert.AreEqual(127' rows[1].Field<byte?>("A"));  				Assert.AreEqual(128' rows[2].Field<byte?>("A"));  				Assert.AreEqual(255' rows[3].Field<byte?>("A"));  				Assert.AreEqual(null' rows[4].Field<byte?>("A"));  				Assert.AreEqual(0' rows[5].Field<byte?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,TinyintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TinyintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<byte?>("A"));  				Assert.AreEqual(127' rows[1].Field<byte?>("A"));  				Assert.AreEqual(128' rows[2].Field<byte?>("A"));  				Assert.AreEqual(255' rows[3].Field<byte?>("A"));  				Assert.AreEqual(null' rows[4].Field<byte?>("A"));  				Assert.AreEqual(0' rows[5].Field<byte?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,TinyintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TinyintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<byte?>("A"));  				Assert.AreEqual(127' rows[1].Field<byte?>("A"));  				Assert.AreEqual(128' rows[2].Field<byte?>("A"));  				Assert.AreEqual(255' rows[3].Field<byte?>("A"));  				Assert.AreEqual(null' rows[4].Field<byte?>("A"));  				Assert.AreEqual(0' rows[5].Field<byte?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,SmallintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallintTest").ToList();    				Assert.AreEqual(1' rows[0].Field<short?>("A"));  				Assert.AreEqual(-125' rows[1].Field<short?>("A"));  				Assert.AreEqual(-129' rows[2].Field<short?>("A"));  				Assert.AreEqual(-130' rows[3].Field<short?>("A"));  				Assert.AreEqual(125' rows[4].Field<short?>("A"));  				Assert.AreEqual(130' rows[5].Field<short?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<short?>("A"));  				Assert.AreEqual(32767' rows[7].Field<short?>("A"));  				Assert.AreEqual(null' rows[8].Field<short?>("A"));  				Assert.AreEqual(0' rows[9].Field<short?>("A"));  				Assert.AreEqual(127' rows[10].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,IntTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IntTests").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(-125' rows[1].Field<int?>("A"));  				Assert.AreEqual(-129' rows[2].Field<int?>("A"));  				Assert.AreEqual(-130' rows[3].Field<int?>("A"));  				Assert.AreEqual(125' rows[4].Field<int?>("A"));  				Assert.AreEqual(130' rows[5].Field<int?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<int?>("A"));  				Assert.AreEqual(32767' rows[7].Field<int?>("A"));  				Assert.AreEqual(null' rows[8].Field<int?>("A"));  				Assert.AreEqual(0' rows[9].Field<int?>("A"));  				Assert.AreEqual(32768' rows[10].Field<int?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<int?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<int?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<int?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<int?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<int?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,BigintTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("BigintTests").ToList();    				Assert.AreEqual(1' rows[0].Field<long?>("A"));  				Assert.AreEqual(-125' rows[1].Field<long?>("A"));  				Assert.AreEqual(-129' rows[2].Field<long?>("A"));  				Assert.AreEqual(-130' rows[3].Field<long?>("A"));  				Assert.AreEqual(125' rows[4].Field<long?>("A"));  				Assert.AreEqual(130' rows[5].Field<long?>("A"));  				Assert.AreEqual(-32768' rows[6].Field<long?>("A"));  				Assert.AreEqual(32767' rows[7].Field<long?>("A"));  				Assert.AreEqual(null' rows[8].Field<long?>("A"));  				Assert.AreEqual(0' rows[9].Field<long?>("A"));  				Assert.AreEqual(32768' rows[10].Field<long?>("A"));  				Assert.AreEqual(8388607' rows[11].Field<long?>("A"));  				Assert.AreEqual(2147483647' rows[12].Field<long?>("A"));  				Assert.AreEqual(-8388608' rows[13].Field<long?>("A"));  				Assert.AreEqual(-8388609' rows[14].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[15].Field<long?>("A"));  				Assert.AreEqual(9223372036854775807' rows[16].Field<long?>("A"));  				Assert.AreEqual(36028797018963967' rows[17].Field<long?>("A"));  				Assert.AreEqual(140737488355327' rows[18].Field<long?>("A"));  				Assert.AreEqual(549755813887' rows[19].Field<long?>("A"));  				Assert.AreEqual(2147483648' rows[20].Field<long?>("A"));  				Assert.AreEqual(-9223372036854775808' rows[21].Field<long?>("A"));  				Assert.AreEqual(-36028797018963967' rows[22].Field<long?>("A"));  				Assert.AreEqual(-140737488355327' rows[23].Field<long?>("A"));  				Assert.AreEqual(-549755813887' rows[24].Field<long?>("A"));  				Assert.AreEqual(-2147483648' rows[25].Field<long?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NVarcharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(" "' rows[5].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨѨѨѨѨѨѨ"' rows[6].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NVarcharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(" "' rows[5].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨѨѨѨѨѨѨ"' rows[6].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NVarcharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(" "' rows[5].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨѨѨѨѨѨѨ"' rows[6].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NVarcharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(" "' rows[5].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨѨѨѨѨѨѨ"' rows[6].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NVarcharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(" "' rows[5].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨѨѨѨѨѨѨ"' rows[6].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,VarcharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(" "' rows[5].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,VarcharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(" "' rows[5].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,VarcharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(" "' rows[5].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,VarcharTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("123"' rows[3].Field<string>("A"));  				Assert.AreEqual(""' rows[4].Field<string>("A"));  				Assert.AreEqual(" "' rows[5].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NTextTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NTextTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨ"' rows[3].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,NTextTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NTextTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  				Assert.AreEqual("ѨѨѨѨ"' rows[3].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,TextTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TextTests").ToList();    				Assert.AreEqual(null' rows[0].Field<string>("A"));  				Assert.AreEqual("a"' rows[1].Field<string>("A"));  				Assert.AreEqual("1234567890"' rows[2].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,DataTypeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\DataTypeTests.cs,DatetimeTests,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 997)' rows[0].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2012' 01' 29' 23' 57' 42' 447)' rows[1].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(2099' 12' 31' 23' 59' 59' 997)' rows[2].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1753' 01' 01' 00' 00' 00' 000)' rows[3].Field<DateTime?>("A"));  				Assert.AreEqual(null' rows[4].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00' 000)' rows[5].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 22' 17' 21' 447)' rows[6].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 05' 06' 07' 997)' rows[7].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 13' 12' 11' 447)' rows[8].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 00' 00' 00' 000)' rows[9].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1900' 01' 02' 18' 22' 11' 123)' rows[10].Field<DateTime?>("A"));  				Assert.AreEqual(new DateTime(1899' 01' 02' 18' 22' 11' 123)' rows[11].Field<DateTime?>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,RecordFormatTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\RecordFormatTests.cs,MultipleShortDataColumns,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MultipleShortDataColumns").ToList();    				Assert.AreEqual(1' rows[0].Field<byte>("A"));  				Assert.AreEqual(2' rows[0].Field<byte>("B"));  				Assert.AreEqual(3' rows[0].Field<byte>("C"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,RecordFormatTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\RecordFormatTests.cs,MultipleShortDataColumns,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MultipleShortDataColumns").ToList();    				Assert.AreEqual(1' rows[0].Field<byte>("A"));  				Assert.AreEqual(2' rows[0].Field<byte>("B"));  				Assert.AreEqual(3' rows[0].Field<byte>("C"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,RecordFormatTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\RecordFormatTests.cs,MixedShortAndLongDataColumns,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MixedShortAndLongDataColumns").ToList();    				Assert.AreEqual(8' rows[0].Field<byte>("A"));  				Assert.AreEqual(TestHelper.GetBytesFromByteString("01020304050607080910")' rows[0].Field<byte[]>("B"));  				Assert.AreEqual(9' rows[0].Field<byte>("C"));  				Assert.AreEqual(TestHelper.GetBytesFromByteString("112233445566778899AA")' rows[0].Field<byte[]>("D"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,RecordFormatTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\RecordFormatTests.cs,MixedShortAndLongDataColumns,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MixedShortAndLongDataColumns").ToList();    				Assert.AreEqual(8' rows[0].Field<byte>("A"));  				Assert.AreEqual(TestHelper.GetBytesFromByteString("01020304050607080910")' rows[0].Field<byte[]>("B"));  				Assert.AreEqual(9' rows[0].Field<byte>("C"));  				Assert.AreEqual(TestHelper.GetBytesFromByteString("112233445566778899AA")' rows[0].Field<byte[]>("D"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,RowOverflowTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\RowOverflowTests.cs,VarcharOverflow,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharOverflow").ToList();    				Assert.AreEqual("".PadLeft(5000' 'A')' rows[0].Field<string>("A"));  				Assert.AreEqual("".PadLeft(5000' 'B')' rows[0].Field<string>("B"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,RowOverflowTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\RowOverflowTests.cs,VarcharOverflow,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharOverflow").ToList();    				Assert.AreEqual("".PadLeft(5000' 'A')' rows[0].Field<string>("A"));  				Assert.AreEqual("".PadLeft(5000' 'B')' rows[0].Field<string>("B"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,RowOverflowTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\RowOverflowTests.cs,VarcharBlobInlineRoot,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharBlobInlineRoot").ToList();    				Assert.AreEqual("".PadLeft(25000' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,UniquifierTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\UniquifierTests.cs,UniquifierTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("UniquifierTest").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(0' rows[0].Field<int?>(DataColumn.Uniquifier));  				Assert.AreEqual(1' rows[1].Field<int?>("A"));  				Assert.AreEqual(1' rows[1].Field<int?>(DataColumn.Uniquifier));  				Assert.AreEqual(1' rows[2].Field<int?>("A"));  				Assert.AreEqual(2' rows[2].Field<int?>(DataColumn.Uniquifier));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,UniquifierTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\UniquifierTests.cs,UniquifierTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("UniquifierTest").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(0' rows[0].Field<int?>(DataColumn.Uniquifier));  				Assert.AreEqual(1' rows[1].Field<int?>("A"));  				Assert.AreEqual(1' rows[1].Field<int?>(DataColumn.Uniquifier));  				Assert.AreEqual(1' rows[2].Field<int?>("A"));  				Assert.AreEqual(2' rows[2].Field<int?>(DataColumn.Uniquifier));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Compression,UniquifierTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Compression\UniquifierTests.cs,UniquifierTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("UniquifierTest").ToList();    				Assert.AreEqual(1' rows[0].Field<int?>("A"));  				Assert.AreEqual(0' rows[0].Field<int?>(DataColumn.Uniquifier));  				Assert.AreEqual(1' rows[1].Field<int?>("A"));  				Assert.AreEqual(1' rows[1].Field<int?>(DataColumn.Uniquifier));  				Assert.AreEqual(1' rows[2].Field<int?>("A"));  				Assert.AreEqual(2' rows[2].Field<int?>(DataColumn.Uniquifier));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallDatetimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallDatetimeTests.cs,SmallDatetimeTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallDatetimeTest").ToList();    				Assert.AreEqual(new DateTime(2012' 08' 07' 12' 23' 00)' rows[0].Field<DateTime>("A"));  				Assert.AreEqual(new DateTime(2011' 02' 23' 01' 02' 00)' rows[0].Field<DateTime>("B"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 00' 00)' rows[0].Field<DateTime>("C"));  				Assert.AreEqual(new DateTime(1900' 01' 01' 00' 01' 00)' rows[0].Field<DateTime>("D"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 59' 00)' rows[0].Field<DateTime>("E"));  				Assert.AreEqual(new DateTime(2079' 06' 06' 23' 58' 00)' rows[0].Field<DateTime>("F"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallMoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallMoneyTests.cs,SmallMoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallMoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallMoneyTests.cs,SmallMoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallMoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallMoneyTests.cs,SmallMoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallMoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallMoneyTests.cs,SmallMoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallMoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallMoneyTests.cs,SmallMoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallMoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallMoneyTests.cs,SmallMoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallMoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallMoneyTests.cs,SmallMoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallMoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallMoneyTests.cs,SmallMoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallMoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallMoneyTests.cs,SmallMoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,SmallMoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\SmallMoneyTests.cs,SmallMoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("SmallMoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-214748.3648m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(214748.3647m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,DecimalTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\DecimalTests.cs,DecimalTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DecimalTest").ToList();    				Assert.AreEqual(12345m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,DecimalTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\DecimalTests.cs,DecimalTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DecimalTest").ToList();    				Assert.AreEqual(12345m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,DecimalTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\DecimalTests.cs,DecimalTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DecimalTest").ToList();    				Assert.AreEqual(12345m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,DecimalTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\DecimalTests.cs,DecimalTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DecimalTest").ToList();    				Assert.AreEqual(12345m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,DecimalTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\DecimalTests.cs,DecimalTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DecimalTest").ToList();    				Assert.AreEqual(12345m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,MoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\MoneyTests.cs,MoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,MoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\MoneyTests.cs,MoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,MoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\MoneyTests.cs,MoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,MoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\MoneyTests.cs,MoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,MoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\MoneyTests.cs,MoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,MoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\MoneyTests.cs,MoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,MoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\MoneyTests.cs,MoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,MoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\MoneyTests.cs,MoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,MoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\MoneyTests.cs,MoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.DataTypes,MoneyTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\DataTypes\MoneyTests.cs,MoneyTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("MoneyTest").ToList();    				Assert.AreEqual(123.4568m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(-123.4568m' rows[1].Field<decimal>("A"));  				Assert.AreEqual(123456789.0123m' rows[2].Field<decimal>("A"));  				Assert.AreEqual(-123456789.0123m' rows[3].Field<decimal>("A"));  				Assert.AreEqual(-922337203685477.5808m' rows[4].Field<decimal>("A"));  				Assert.AreEqual(922337203685477.5807m' rows[5].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,VardecimalTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VardecimalTest").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,VardecimalTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VardecimalTest").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,VardecimalTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VardecimalTest").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,VardecimalTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VardecimalTest").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,VardecimalTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VardecimalTest").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,VardecimalTest,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VardecimalTest").ToList();    				Assert.AreEqual(12.3m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(0m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(1m' rows[0].Field<decimal>("C"));  				Assert.AreEqual(12345m' rows[0].Field<decimal>("D"));  				Assert.AreEqual(39201.230m' rows[0].Field<decimal>("E"));  				Assert.AreEqual(-4892384.382090m' rows[0].Field<decimal>("F"));  				Assert.AreEqual(1328783742987.29m' rows[0].Field<decimal>("G"));  				Assert.AreEqual(2940382040198493029.235m' rows[0].Field<decimal>("H"));  				Assert.AreEqual(-1m' rows[0].Field<decimal>("I"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,TruncatedZeroes,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TruncatedZeroes").ToList();    				Assert.AreEqual(4398046511104m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(4398046511104m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(4398046511104m' rows[0].Field<decimal>("C"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,TruncatedZeroes,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TruncatedZeroes").ToList();    				Assert.AreEqual(4398046511104m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(4398046511104m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(4398046511104m' rows[0].Field<decimal>("C"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,TruncatedZeroes,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TruncatedZeroes").ToList();    				Assert.AreEqual(4398046511104m' rows[0].Field<decimal>("A"));  				Assert.AreEqual(4398046511104m' rows[0].Field<decimal>("B"));  				Assert.AreEqual(4398046511104m' rows[0].Field<decimal>("C"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,EnabledBeforeInserting,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("EnabledBeforeInserting").ToList();    				Assert.AreEqual(1234.45m' rows[0].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,EnabledBeforeInsertingThenDisabled,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("EnabledBeforeInsertingThenDisabled").ToList();    				Assert.AreEqual(1234.45m' rows[0].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,EnabledAfterInsertingThenDisabled,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("EnabledAfterInsertingThenDisabled").ToList();    				Assert.AreEqual(1234.45m' rows[0].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.Vardecimal,VardecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\Vardecimal\VardecimalTests.cs,EnabledAfterInserting,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("EnabledAfterInserting").ToList();    				Assert.AreEqual(1234.45m' rows[0].Field<decimal>("A"));  			});
Magic Number,OrcaMDF.Core.Tests,SqlServerSystemTestBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\SqlServerSystemTestBase.cs,RunQuery,The following statement contains a magic number: cmd.CommandTimeout = 600;
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanClusteredIndexOnUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("UniqueClusteredTable"' "CX_Num1_Name").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual("Doe"' result[0]["Name"]);  				Assert.AreEqual(382' result[1]["Num1"]);  				Assert.AreEqual("John"' result[1]["Name"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanClusteredIndexOnUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("UniqueClusteredTable"' "CX_Num1_Name").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual("Doe"' result[0]["Name"]);  				Assert.AreEqual(382' result[1]["Num1"]);  				Assert.AreEqual("John"' result[1]["Name"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanNonclusteredIndexOnUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("UniqueClusteredTable"' "IDX_Num1").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual(382' result[1]["Num1"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanNonclusteredIndexOnUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("UniqueClusteredTable"' "IDX_Num1").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual(382' result[1]["Num1"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanHeapAsIndex,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("Heap"' null).ToList();    				Assert.AreEqual(382' result[0]["Num1"]);  				Assert.AreEqual("John"' result[0]["Name"]);  				Assert.AreEqual(112' result[1]["Num1"]);  				Assert.AreEqual("Doe"' result[1]["Name"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanHeapAsIndex,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("Heap"' null).ToList();    				Assert.AreEqual(382' result[0]["Num1"]);  				Assert.AreEqual("John"' result[0]["Name"]);  				Assert.AreEqual(112' result[1]["Num1"]);  				Assert.AreEqual("Doe"' result[1]["Name"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanNonclusteredIndexOnNonUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("NonUniqueClusteredTable"' "IDX_Num1").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual(0' result[0][DataColumn.Uniquifier]);  				Assert.AreEqual(382' result[1]["Num1"]);  				Assert.AreEqual(0' result[1][DataColumn.Uniquifier]);  				Assert.AreEqual(382' result[2]["Num1"]);  				Assert.AreEqual(1' result[2][DataColumn.Uniquifier]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanNonclusteredIndexOnNonUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("NonUniqueClusteredTable"' "IDX_Num1").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual(0' result[0][DataColumn.Uniquifier]);  				Assert.AreEqual(382' result[1]["Num1"]);  				Assert.AreEqual(0' result[1][DataColumn.Uniquifier]);  				Assert.AreEqual(382' result[2]["Num1"]);  				Assert.AreEqual(1' result[2][DataColumn.Uniquifier]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanNonclusteredIndexOnNonUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("NonUniqueClusteredTable"' "IDX_Num1").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual(0' result[0][DataColumn.Uniquifier]);  				Assert.AreEqual(382' result[1]["Num1"]);  				Assert.AreEqual(0' result[1][DataColumn.Uniquifier]);  				Assert.AreEqual(382' result[2]["Num1"]);  				Assert.AreEqual(1' result[2][DataColumn.Uniquifier]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanNonclusteredIndexOnNonUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("NonUniqueClusteredTable"' "IDX_Num1").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual(0' result[0][DataColumn.Uniquifier]);  				Assert.AreEqual(382' result[1]["Num1"]);  				Assert.AreEqual(0' result[1][DataColumn.Uniquifier]);  				Assert.AreEqual(382' result[2]["Num1"]);  				Assert.AreEqual(1' result[2][DataColumn.Uniquifier]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanNonclusteredIndexOnNonUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("NonUniqueClusteredTable"' "IDX_Num1").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual(0' result[0][DataColumn.Uniquifier]);  				Assert.AreEqual(382' result[1]["Num1"]);  				Assert.AreEqual(0' result[1][DataColumn.Uniquifier]);  				Assert.AreEqual(382' result[2]["Num1"]);  				Assert.AreEqual(1' result[2][DataColumn.Uniquifier]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanNonclusteredIndexOnHeap,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				// Index stored in sorted order  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("Heap"' "IDX_Num1").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual(1' ((SlotPointer)result[0][DataColumn.RID]).FileID);  				Assert.AreEqual(1' ((SlotPointer)result[0][DataColumn.RID]).SlotID);  				Assert.AreEqual(382' result[1]["Num1"]);  				Assert.AreEqual(1' ((SlotPointer)result[1][DataColumn.RID]).FileID);  				Assert.AreEqual(0' ((SlotPointer)result[1][DataColumn.RID]).SlotID);    				// Data stored in insertion order  				var dataScanner = new DataScanner(db);  				var dataResult = dataScanner.ScanTable("Heap").ToList();    				Assert.AreEqual(382' dataResult[0]["Num1"]);  				Assert.AreEqual(112' dataResult[1]["Num1"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanNonclusteredIndexOnHeap,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				// Index stored in sorted order  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("Heap"' "IDX_Num1").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual(1' ((SlotPointer)result[0][DataColumn.RID]).FileID);  				Assert.AreEqual(1' ((SlotPointer)result[0][DataColumn.RID]).SlotID);  				Assert.AreEqual(382' result[1]["Num1"]);  				Assert.AreEqual(1' ((SlotPointer)result[1][DataColumn.RID]).FileID);  				Assert.AreEqual(0' ((SlotPointer)result[1][DataColumn.RID]).SlotID);    				// Data stored in insertion order  				var dataScanner = new DataScanner(db);  				var dataResult = dataScanner.ScanTable("Heap").ToList();    				Assert.AreEqual(382' dataResult[0]["Num1"]);  				Assert.AreEqual(112' dataResult[1]["Num1"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanNonclusteredIndexOnHeap,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				// Index stored in sorted order  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("Heap"' "IDX_Num1").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual(1' ((SlotPointer)result[0][DataColumn.RID]).FileID);  				Assert.AreEqual(1' ((SlotPointer)result[0][DataColumn.RID]).SlotID);  				Assert.AreEqual(382' result[1]["Num1"]);  				Assert.AreEqual(1' ((SlotPointer)result[1][DataColumn.RID]).FileID);  				Assert.AreEqual(0' ((SlotPointer)result[1][DataColumn.RID]).SlotID);    				// Data stored in insertion order  				var dataScanner = new DataScanner(db);  				var dataResult = dataScanner.ScanTable("Heap").ToList();    				Assert.AreEqual(382' dataResult[0]["Num1"]);  				Assert.AreEqual(112' dataResult[1]["Num1"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,IndexScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\IndexScannerTests.cs,ScanNonclusteredIndexOnHeap,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				// Index stored in sorted order  				var scanner = new IndexScanner(db);  				var result = scanner.ScanIndex("Heap"' "IDX_Num1").ToList();    				Assert.AreEqual(112' result[0]["Num1"]);  				Assert.AreEqual(1' ((SlotPointer)result[0][DataColumn.RID]).FileID);  				Assert.AreEqual(1' ((SlotPointer)result[0][DataColumn.RID]).SlotID);  				Assert.AreEqual(382' result[1]["Num1"]);  				Assert.AreEqual(1' ((SlotPointer)result[1][DataColumn.RID]).FileID);  				Assert.AreEqual(0' ((SlotPointer)result[1][DataColumn.RID]).SlotID);    				// Data stored in insertion order  				var dataScanner = new DataScanner(db);  				var dataResult = dataScanner.ScanTable("Heap").ToList();    				Assert.AreEqual(382' dataResult[0]["Num1"]);  				Assert.AreEqual(112' dataResult[1]["Num1"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine,SparseVectorParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SparseVectorParserTests.cs,Parse,The following statement contains a magic number: Assert.AreEqual(2' parser.ColumnCount);
Magic Number,OrcaMDF.Core.Tests.Engine,SparseVectorParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SparseVectorParserTests.cs,Parse,The following statement contains a magic number: Assert.AreEqual(3' BitConverter.ToInt32(parser.ColumnValues[3]' 0));
Magic Number,OrcaMDF.Core.Tests.Engine,SparseVectorParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SparseVectorParserTests.cs,Parse,The following statement contains a magic number: Assert.AreEqual(3' BitConverter.ToInt32(parser.ColumnValues[3]' 0));
Magic Number,OrcaMDF.Core.Tests.Engine,SparseVectorParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SparseVectorParserTests.cs,Parse,The following statement contains a magic number: Assert.AreEqual(1234' BitConverter.ToInt32(parser.ColumnValues[6]' 0));
Magic Number,OrcaMDF.Core.Tests.Engine,SparseVectorParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SparseVectorParserTests.cs,Parse,The following statement contains a magic number: Assert.AreEqual(1234' BitConverter.ToInt32(parser.ColumnValues[6]' 0));
Magic Number,OrcaMDF.Core.Tests.Engine,DataScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\DataScannerTests.cs,ScanUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("UniqueClusteredTable").ToList();    				Assert.AreEqual(112' rows[0].Field<int>("Num1"));  				Assert.AreEqual("Doe"' rows[0].Field<string>("Name"));    				Assert.AreEqual(382' rows[1].Field<int>("Num1"));  				Assert.AreEqual("John"' rows[1].Field<string>("Name"));  			});
Magic Number,OrcaMDF.Core.Tests.Engine,DataScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\DataScannerTests.cs,ScanUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("UniqueClusteredTable").ToList();    				Assert.AreEqual(112' rows[0].Field<int>("Num1"));  				Assert.AreEqual("Doe"' rows[0].Field<string>("Name"));    				Assert.AreEqual(382' rows[1].Field<int>("Num1"));  				Assert.AreEqual("John"' rows[1].Field<string>("Name"));  			});
Magic Number,OrcaMDF.Core.Tests.Engine,DataScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\DataScannerTests.cs,ScanNonUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NonUniqueClusteredTable").ToList();    				Assert.AreEqual(112' rows[0].Field<int>("Num1"));  				Assert.AreEqual("Doe"' rows[0].Field<string>("Name"));  				Assert.AreEqual(0' rows[0].Field<int>(DataColumn.Uniquifier));    				Assert.AreEqual(112' rows[1].Field<int>("Num1"));  				Assert.AreEqual("Doe"' rows[1].Field<string>("Name"));  				Assert.AreEqual(1' rows[1].Field<int>(DataColumn.Uniquifier));  			});
Magic Number,OrcaMDF.Core.Tests.Engine,DataScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\DataScannerTests.cs,ScanNonUniqueClusteredTable,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NonUniqueClusteredTable").ToList();    				Assert.AreEqual(112' rows[0].Field<int>("Num1"));  				Assert.AreEqual("Doe"' rows[0].Field<string>("Name"));  				Assert.AreEqual(0' rows[0].Field<int>(DataColumn.Uniquifier));    				Assert.AreEqual(112' rows[1].Field<int>("Num1"));  				Assert.AreEqual("Doe"' rows[1].Field<string>("Name"));  				Assert.AreEqual(1' rows[1].Field<int>(DataColumn.Uniquifier));  			});
Magic Number,OrcaMDF.Core.Tests.Engine,DataScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\DataScannerTests.cs,IgnoreDroppedColumnData,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IgnoreDroppedColumnData").ToList();    				Assert.AreEqual(1' rows.Count);  				Assert.AreEqual(1' rows[0].Field<int>("A"));  				Assert.AreEqual(27' rows[0].Field<int>("B"));  				Assert.AreEqual("A"' rows[0].Field<string>("C"));  				Assert.AreEqual(3' rows[0].Field<int>("D"));  			});
Magic Number,OrcaMDF.Core.Tests.Engine,DataScannerTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\DataScannerTests.cs,IgnoreDroppedColumnData,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("IgnoreDroppedColumnData").ToList();    				Assert.AreEqual(1' rows.Count);  				Assert.AreEqual(1' rows[0].Field<int>("A"));  				Assert.AreEqual(27' rows[0].Field<int>("B"));  				Assert.AreEqual("A"' rows[0].Field<string>("C"));  				Assert.AreEqual(3' rows[0].Field<int>("D"));  			});
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,GamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\GamPageTests.cs,GetGamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 2)' GamPage.GetGamPointerForPage(new PagePointer(1' 27)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,GamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\GamPageTests.cs,GetGamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 2)' GamPage.GetGamPointerForPage(new PagePointer(1' 27)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,GamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\GamPageTests.cs,GetGamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 2)' GamPage.GetGamPointerForPage(new PagePointer(1' 0)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,GamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\GamPageTests.cs,GetGamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 2)' GamPage.GetGamPointerForPage(new PagePointer(1' 511231)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,GamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\GamPageTests.cs,GetGamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 2)' GamPage.GetGamPointerForPage(new PagePointer(1' 511231)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,GamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\GamPageTests.cs,GetGamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 511232)' GamPage.GetGamPointerForPage(new PagePointer(1' 511232)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,GamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\GamPageTests.cs,GetGamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 511232)' GamPage.GetGamPointerForPage(new PagePointer(1' 511232)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,GamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\GamPageTests.cs,GetGamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 511232)' GamPage.GetGamPointerForPage(new PagePointer(1' 511233)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,GamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\GamPageTests.cs,GetGamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 511232)' GamPage.GetGamPointerForPage(new PagePointer(1' 511233)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,SgamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\SgamPageTests.cs,GetSgamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 3)' SgamPage.GetSgamPointerForPage(new PagePointer(1' 27)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,SgamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\SgamPageTests.cs,GetSgamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 3)' SgamPage.GetSgamPointerForPage(new PagePointer(1' 27)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,SgamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\SgamPageTests.cs,GetSgamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 3)' SgamPage.GetSgamPointerForPage(new PagePointer(1' 0)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,SgamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\SgamPageTests.cs,GetSgamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 511233)' SgamPage.GetSgamPointerForPage(new PagePointer(1' 511232)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,SgamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\SgamPageTests.cs,GetSgamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 511233)' SgamPage.GetSgamPointerForPage(new PagePointer(1' 511232)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,SgamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\SgamPageTests.cs,GetSgamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 511233)' SgamPage.GetSgamPointerForPage(new PagePointer(1' 511233)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,SgamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\SgamPageTests.cs,GetSgamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 511233)' SgamPage.GetSgamPointerForPage(new PagePointer(1' 511233)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,SgamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\SgamPageTests.cs,GetSgamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 511233)' SgamPage.GetSgamPointerForPage(new PagePointer(1' 511234)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages,SgamPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\SgamPageTests.cs,GetSgamPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 511233)' SgamPage.GetSgamPointerForPage(new PagePointer(1' 511234)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages.PFS,PfsPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\PFS\PfsPageTests.cs,GetPfsPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 1)' PfsPage.GetPfsPointerForPage(new PagePointer(1' 27)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages.PFS,PfsPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\PFS\PfsPageTests.cs,GetPfsPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 1)' PfsPage.GetPfsPointerForPage(new PagePointer(1' 8087)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages.PFS,PfsPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\PFS\PfsPageTests.cs,GetPfsPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 8088)' PfsPage.GetPfsPointerForPage(new PagePointer(1' 8088)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages.PFS,PfsPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\PFS\PfsPageTests.cs,GetPfsPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 8088)' PfsPage.GetPfsPointerForPage(new PagePointer(1' 8088)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages.PFS,PfsPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\PFS\PfsPageTests.cs,GetPfsPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 8088)' PfsPage.GetPfsPointerForPage(new PagePointer(1' 8089)));
Magic Number,OrcaMDF.Core.Tests.Engine.Pages.PFS,PfsPageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Pages\PFS\PfsPageTests.cs,GetPfsPointerForPage,The following statement contains a magic number: Assert.AreEqual(new PagePointer(1' 8088)' PfsPage.GetPfsPointerForPage(new PagePointer(1' 8089)));
Magic Number,OrcaMDF.Core.Tests.Engine.Records,PrimaryRecordTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\PrimaryRecordTests.cs,TestNoVarLength,The following statement contains a magic number: Assert.AreEqual(2' record.FixedLengthData.Length);
Magic Number,OrcaMDF.Core.Tests.Engine.Records,PrimaryRecordTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\PrimaryRecordTests.cs,TestFixedAndVarLength,The following statement contains a magic number: Assert.AreEqual(2' record.FixedLengthData.Length);
Magic Number,OrcaMDF.Core.Tests.Engine.Records,PrimaryRecordTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\PrimaryRecordTests.cs,TestGhostForwardedRecord,The following statement contains a magic number: Assert.AreEqual(2' record.FixedLengthData.Length);
Magic Number,OrcaMDF.Core.Tests.Engine.Records,RecordTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\RecordTests.cs,RowOverflowPointer,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("RowOverflowPointer").ToList();    				Assert.AreEqual(1' rows.Count);  				Assert.AreEqual("".PadLeft(5000' 'a')' rows[0]["A"]);  				Assert.AreEqual("".PadLeft(5000' 'b')' rows[0]["B"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine.Records,RecordTestsBase,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\Records\RecordTests.cs,RowOverflowPointer,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("RowOverflowPointer").ToList();    				Assert.AreEqual(1' rows.Count);  				Assert.AreEqual("".PadLeft(5000' 'a')' rows[0]["A"]);  				Assert.AreEqual("".PadLeft(5000' 'b')' rows[0]["B"]);  			});
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlBigIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlBigIntTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(9223372036854775807' Convert.ToInt64(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlBigIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlBigIntTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(8200279581513702018' Convert.ToInt64(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlBigIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlBigIntTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-8200279581513702017' Convert.ToInt64(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlBigIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlBigIntTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[9]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlBigIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlBigIntTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[7]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlBinaryTests.cs,GetValue,The following statement contains a magic number: var type = new SqlBinary(3' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlBinaryTests.cs,Length,The following statement contains a magic number: var type = new SqlBinary(5' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlBinaryTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[6]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlBinaryTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlCharTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlCharTests.cs,GetValue,The following statement contains a magic number: var type = new SqlChar(5' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlCharTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlCharTests.cs,Length,The following statement contains a magic number: var type = new SqlChar(5' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlCharTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlCharTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlCharTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlCharTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[6]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2028' 09' 09)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2028' 09' 09)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2028' 09' 09)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2039' 07' 17)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2039' 07' 17)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2039' 07' 17)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[2]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2001' 09' 25' 05' 39' 26' 820)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2001' 09' 25' 05' 39' 26' 820)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2001' 09' 25' 05' 39' 26' 820)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2001' 09' 25' 05' 39' 26' 820)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2001' 09' 25' 05' 39' 26' 820)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2001' 09' 25' 05' 39' 26' 820)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(2001' 09' 25' 05' 39' 26' 820)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1997' 12' 31' 14' 35' 44' 607)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1997' 12' 31' 14' 35' 44' 607)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1997' 12' 31' 14' 35' 44' 607)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1997' 12' 31' 14' 35' 44' 607)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1997' 12' 31' 14' 35' 44' 607)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1997' 12' 31' 14' 35' 44' 607)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1997' 12' 31' 14' 35' 44' 607)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1982' 03' 18' 17' 17' 36' 790)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1982' 03' 18' 17' 17' 36' 790)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1982' 03' 18' 17' 17' 36' 790)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1982' 03' 18' 17' 17' 36' 790)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1982' 03' 18' 17' 17' 36' 790)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1982' 03' 18' 17' 17' 36' 790)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1982' 03' 18' 17' 17' 36' 790)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(9999' 12' 31' 23' 59' 59' 997)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(9999' 12' 31' 23' 59' 59' 997)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(9999' 12' 31' 23' 59' 59' 997)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(9999' 12' 31' 23' 59' 59' 997)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(9999' 12' 31' 23' 59' 59' 997)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(9999' 12' 31' 23' 59' 59' 997)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(9999' 12' 31' 23' 59' 59' 997)' (DateTime)type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[9]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDateTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[7]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: type = new SqlDecimal(5' 0' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(12345m' type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: type = new SqlDecimal(5' 3' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: type = new SqlDecimal(5' 3' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(12.345m' type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: type = new SqlDecimal(5' 3' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: type = new SqlDecimal(5' 3' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-12.345m' type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: type = new SqlDecimal(9' 1' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(12398.2m' type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: type = new SqlDecimal(17' 5' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: type = new SqlDecimal(17' 5' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(1234232398.24313m' type.GetValue(input));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,Length,The following statement contains a magic number: var type = new SqlDecimal(38' 2' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,Length,The following statement contains a magic number: var type = new SqlDecimal(38' 2' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[7]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,Length,The following statement contains a magic number: type.GetValue(new byte[17]);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,Length,The following statement contains a magic number: type = new SqlDecimal(15' 13' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,Length,The following statement contains a magic number: type = new SqlDecimal(15' 13' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[7]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlDecimalTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlDecimalTests.cs,Length,The following statement contains a magic number: type.GetValue(new byte[9]);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlIntTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(707214174' Convert.ToInt32(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlIntTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(816511373' Convert.ToInt32(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlIntTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-495826310' Convert.ToInt32(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlIntTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[3]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlIntTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[5]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlNCharTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlNCharTests.cs,GetValue,The following statement contains a magic number: var type = new SqlNChar(6' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlNCharTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlNCharTests.cs,Length,The following statement contains a magic number: var type = new SqlNChar(6' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlNCharTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlNCharTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[7]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlNCharTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlNCharTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[5]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1926' 11' 22' 11' 23' 0)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1926' 11' 22' 11' 23' 0)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1926' 11' 22' 11' 23' 0)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1926' 11' 22' 11' 23' 0)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1926' 11' 22' 11' 23' 0)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1906' 9' 24' 14' 1' 0)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1906' 9' 24' 14' 1' 0)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1906' 9' 24' 14' 1' 0)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallDateTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new DateTime(1906' 9' 24' 14' 1' 0)' Convert.ToDateTime(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallDateTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[3]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallDateTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallDateTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[5]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallIntTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(13078' Convert.ToInt16(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallIntTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(3577' Convert.ToInt16(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallIntTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(-10588' Convert.ToInt16(type.GetValue(input)));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlSmallIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlSmallIntTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[3]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(11' 22' 33)' (TimeSpan)time0.GetValue(input0));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(11' 22' 33)' (TimeSpan)time0.GetValue(input0));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(11' 22' 33)' (TimeSpan)time0.GetValue(input0));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 1)' (TimeSpan)time1.GetValue(input1));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 1)' (TimeSpan)time1.GetValue(input1));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 1)' (TimeSpan)time1.GetValue(input1));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: var time2 = new SqlTime(2' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 12)' (TimeSpan)time2.GetValue(input2));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 12)' (TimeSpan)time2.GetValue(input2));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 12)' (TimeSpan)time2.GetValue(input2));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 12)' (TimeSpan)time2.GetValue(input2));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: var time3 = new SqlTime(3' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 123)' (TimeSpan)time3.GetValue(input3));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 123)' (TimeSpan)time3.GetValue(input3));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 123)' (TimeSpan)time3.GetValue(input3));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 123)' (TimeSpan)time3.GetValue(input3));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: var time4 = new SqlTime(4' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 1235)' (TimeSpan)time4.GetValue(input4));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 1235)' (TimeSpan)time4.GetValue(input4));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 1235)' (TimeSpan)time4.GetValue(input4));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 1235)' (TimeSpan)time4.GetValue(input4));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: var time5 = new SqlTime(5' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 12346)' (TimeSpan)time5.GetValue(input5));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 12346)' (TimeSpan)time5.GetValue(input5));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 12346)' (TimeSpan)time5.GetValue(input5));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 12346)' (TimeSpan)time5.GetValue(input5));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: var time6 = new SqlTime(6' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 123457)' (TimeSpan)time6.GetValue(input6));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 123457)' (TimeSpan)time6.GetValue(input6));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 123457)' (TimeSpan)time6.GetValue(input6));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 123457)' (TimeSpan)time6.GetValue(input6));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: var time7 = new SqlTime(7' CompressionContext.NoCompression);
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 1234567)' (TimeSpan)time7.GetValue(input7));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 1234567)' (TimeSpan)time7.GetValue(input7));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 1234567)' (TimeSpan)time7.GetValue(input7));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,GetValue,The following statement contains a magic number: Assert.AreEqual(new TimeSpan(0' 11' 22' 33' 1234567)' (TimeSpan)time7.GetValue(input7));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(0' CompressionContext.NoCompression).GetValue(new byte[2]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(0' CompressionContext.NoCompression).GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(1' CompressionContext.NoCompression).GetValue(new byte[2]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(1' CompressionContext.NoCompression).GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(2' CompressionContext.NoCompression).GetValue(new byte[2]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(2' CompressionContext.NoCompression).GetValue(new byte[2]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(2' CompressionContext.NoCompression).GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(2' CompressionContext.NoCompression).GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(3' CompressionContext.NoCompression).GetValue(new byte[3]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(3' CompressionContext.NoCompression).GetValue(new byte[3]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(3' CompressionContext.NoCompression).GetValue(new byte[5]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(3' CompressionContext.NoCompression).GetValue(new byte[5]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(4' CompressionContext.NoCompression).GetValue(new byte[3]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(4' CompressionContext.NoCompression).GetValue(new byte[3]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(4' CompressionContext.NoCompression).GetValue(new byte[5]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(4' CompressionContext.NoCompression).GetValue(new byte[5]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(5' CompressionContext.NoCompression).GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(5' CompressionContext.NoCompression).GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(5' CompressionContext.NoCompression).GetValue(new byte[6]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(5' CompressionContext.NoCompression).GetValue(new byte[6]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(6' CompressionContext.NoCompression).GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(6' CompressionContext.NoCompression).GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(6' CompressionContext.NoCompression).GetValue(new byte[6]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(6' CompressionContext.NoCompression).GetValue(new byte[6]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(7' CompressionContext.NoCompression).GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(7' CompressionContext.NoCompression).GetValue(new byte[4]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(7' CompressionContext.NoCompression).GetValue(new byte[6]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTimeTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTimeTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => new SqlTime(7' CompressionContext.NoCompression).GetValue(new byte[6]));
Magic Number,OrcaMDF.Core.Tests.Engine.SqlTypes,SqlTinyIntTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Engine\SqlTypes\SqlTinyIntTests.cs,Length,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => type.GetValue(new byte[2]));
Magic Number,OrcaMDF.Core.Tests.Features.ForwardedRecords,ForwardedRecordTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\ForwardedRecords\ForwardedRecordTests.cs,HeapForwardedRecord,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("HeapForwardedRecord").ToList();    				Assert.AreEqual(25' rows[0].Field<int>("A"));  				Assert.AreEqual("".PadLeft(5000' 'A')' rows[0].Field<string>("B"));    				Assert.AreEqual(28' rows[1].Field<int>("A"));  				Assert.AreEqual("".PadLeft(4000' 'B')' rows[1].Field<string>("B"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.ForwardedRecords,ForwardedRecordTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\ForwardedRecords\ForwardedRecordTests.cs,HeapForwardedRecord,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("HeapForwardedRecord").ToList();    				Assert.AreEqual(25' rows[0].Field<int>("A"));  				Assert.AreEqual("".PadLeft(5000' 'A')' rows[0].Field<string>("B"));    				Assert.AreEqual(28' rows[1].Field<int>("A"));  				Assert.AreEqual("".PadLeft(4000' 'B')' rows[1].Field<string>("B"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.ForwardedRecords,ForwardedRecordTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\ForwardedRecords\ForwardedRecordTests.cs,HeapForwardedRecord,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("HeapForwardedRecord").ToList();    				Assert.AreEqual(25' rows[0].Field<int>("A"));  				Assert.AreEqual("".PadLeft(5000' 'A')' rows[0].Field<string>("B"));    				Assert.AreEqual(28' rows[1].Field<int>("A"));  				Assert.AreEqual("".PadLeft(4000' 'B')' rows[1].Field<string>("B"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.ForwardedRecords,ForwardedRecordTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\ForwardedRecords\ForwardedRecordTests.cs,HeapForwardedRecord,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("HeapForwardedRecord").ToList();    				Assert.AreEqual(25' rows[0].Field<int>("A"));  				Assert.AreEqual("".PadLeft(5000' 'A')' rows[0].Field<string>("B"));    				Assert.AreEqual(28' rows[1].Field<int>("A"));  				Assert.AreEqual("".PadLeft(4000' 'B')' rows[1].Field<string>("B"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarBinaryTests.cs,VarBinary64,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarBinaryTest64").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(64' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarBinaryTests.cs,VarBinary65,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarBinaryTest65").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(65' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarBinaryTests.cs,VarBinary8040,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarBinaryTest8040").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(8040' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarBinaryTests.cs,VarBinary8041,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarBinaryTest8041").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(8041' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarBinaryTests.cs,VarBinary40200,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarBinaryTest40200").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(40200' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarBinaryTests.cs,VarBinary40201,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarBinaryTest40201").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(40201' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarBinaryTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarBinaryTests.cs,VarBinary20000000,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarBinaryTest20000000").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(20000000' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NVarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NVarcharMaxTests.cs,NVarcharMax32,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharMaxTest32").ToList();    				Assert.AreEqual("".PadLeft(32' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NVarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NVarcharMaxTests.cs,NVarcharMax33,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharMaxTest33").ToList();    				Assert.AreEqual("".PadLeft(33' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NVarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NVarcharMaxTests.cs,NVarcharMax4020,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharMaxTest4020").ToList();    				Assert.AreEqual("".PadLeft(4020' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NVarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NVarcharMaxTests.cs,NVarcharMax4021,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharMaxTest4021").ToList();    				Assert.AreEqual("".PadLeft(4021' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NVarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NVarcharMaxTests.cs,NVarcharMax20100,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharMaxTest20100").ToList();    				Assert.AreEqual("".PadLeft(20100' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NVarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NVarcharMaxTests.cs,NVarcharMax20101,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharMaxTest20101").ToList();    				Assert.AreEqual("".PadLeft(20101' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NVarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NVarcharMaxTests.cs,NVarcharMax10000000,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NVarcharMaxTest10000000").ToList();    				Assert.AreEqual("".PadLeft(10000000' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarcharMaxTests.cs,VarcharMax64,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharMaxTest64").ToList();    				Assert.AreEqual("".PadLeft(64' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarcharMaxTests.cs,VarcharMax65,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharMaxTest65").ToList();    				Assert.AreEqual("".PadLeft(65' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarcharMaxTests.cs,VarcharMax8040,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharMaxTest8040").ToList();    				Assert.AreEqual("".PadLeft(8040' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarcharMaxTests.cs,VarcharMax8041,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharMaxTest8041").ToList();    				Assert.AreEqual("".PadLeft(8041' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarcharMaxTests.cs,VarcharMax40200,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharMaxTest40200").ToList();    				Assert.AreEqual("".PadLeft(40200' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarcharMaxTests.cs,VarcharMax40201,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharMaxTest40201").ToList();    				Assert.AreEqual("".PadLeft(40201' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,VarcharMaxTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\VarcharMaxTests.cs,VarcharMax20000000,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("VarcharMaxTest20000000").ToList();    				Assert.AreEqual("".PadLeft(20000000' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,ImageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\ImageTests.cs,Image64,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ImageTest64").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(64' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,ImageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\ImageTests.cs,Image65,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ImageTest65").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(65' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,ImageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\ImageTests.cs,Image8040,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ImageTest8040").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(8040' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,ImageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\ImageTests.cs,Image8041,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ImageTest8041").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(8041' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,ImageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\ImageTests.cs,Image40200,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ImageTest40200").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(40200' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,ImageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\ImageTests.cs,Image40201,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ImageTest40201").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(40201' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,ImageTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\ImageTests.cs,Image20000000,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ImageTest20000000").ToList();    				Assert.AreEqual(Encoding.UTF7.GetBytes("".PadLeft(20000000' 'A'))' rows[0].Field<byte[]>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NTextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NTextTests.cs,NText32,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NTextTest32").ToList();    				Assert.AreEqual("".PadLeft(32' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NTextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NTextTests.cs,NText33,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NTextTest33").ToList();    				Assert.AreEqual("".PadLeft(33' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NTextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NTextTests.cs,NText4020,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NTextTest4020").ToList();    				Assert.AreEqual("".PadLeft(4020' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NTextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NTextTests.cs,NText4021,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NTextTest4021").ToList();    				Assert.AreEqual("".PadLeft(4021' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NTextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NTextTests.cs,NText20100,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NTextTest20100").ToList();    				Assert.AreEqual("".PadLeft(20100' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NTextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NTextTests.cs,NText20101,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NTextTest20101").ToList();    				Assert.AreEqual("".PadLeft(20101' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,NTextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\NTextTests.cs,NText10000000,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("NTextTest10000000").ToList();    				Assert.AreEqual("".PadLeft(10000000' '\u040A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,TextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\TextTests.cs,Text64,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TextTest64").ToList();    				Assert.AreEqual("".PadLeft(64' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,TextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\TextTests.cs,Text65,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TextTest65").ToList();    				Assert.AreEqual("".PadLeft(65' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,TextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\TextTests.cs,Text8040,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TextTest8040").ToList();    				Assert.AreEqual("".PadLeft(8040' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,TextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\TextTests.cs,Text8041,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TextTest8041").ToList();    				Assert.AreEqual("".PadLeft(8041' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,TextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\TextTests.cs,Text40200,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TextTest40200").ToList();    				Assert.AreEqual("".PadLeft(40200' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,TextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\TextTests.cs,Text40201,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TextTest40201").ToList();    				Assert.AreEqual("".PadLeft(40201' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.LobTypes,TextTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\LobTypes\TextTests.cs,Text20000000,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("TextTest20000000").ToList();    				Assert.AreEqual("".PadLeft(20000000' 'A')' rows[0].Field<string>("A"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.MultiDataFile,MultiFileTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\MultiDataFile\MultiFileTests.cs,RoundRobinHeapAllocation,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("RoundRobinHeap").ToList();    				Assert.AreEqual(100' rows.Count);  			});
Magic Number,OrcaMDF.Core.Tests.Features.MultiDataFile,MultiFileTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\MultiDataFile\MultiFileTests.cs,RoundRobinClusteredAllocation,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("RoundRobinClustered").ToList();    				Assert.AreEqual(100' rows.Count);  			});
Magic Number,OrcaMDF.Core.Tests.Features.MultiDataFile,MultiFileTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\MultiDataFile\MultiFileTests.cs,FGSpecificHeapAllocation,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("FGSpecificHeap").ToList();    				Assert.AreEqual(100' rows.Count);  			});
Magic Number,OrcaMDF.Core.Tests.Features.MultiDataFile,MultiFileTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\MultiDataFile\MultiFileTests.cs,FGSpecificClusteredAllocation,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("FGSpecificClustered").ToList();    				Assert.AreEqual(100' rows.Count);  			});
Magic Number,OrcaMDF.Core.Tests.Features.MultiDataFile,MultiFileTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\MultiDataFile\MultiFileTests.cs,GetNumberOfFiles,The following statement contains a magic number: return 3;
Magic Number,OrcaMDF.Core.Tests.Features.MultiDataFile,MultiFileTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\MultiDataFile\MultiFileTests.cs,RunSetupQueries,The following statement contains a magic number: i < 100
Magic Number,OrcaMDF.Core.Tests.Features.MultiDataFile,MultiFileTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\MultiDataFile\MultiFileTests.cs,RunSetupQueries,The following statement contains a magic number: i < 100
Magic Number,OrcaMDF.Core.Tests.Features.MultiDataFile,MultiFileTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\MultiDataFile\MultiFileTests.cs,RunSetupQueries,The following statement contains a magic number: i < 100
Magic Number,OrcaMDF.Core.Tests.Features.MultiDataFile,MultiFileTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\MultiDataFile\MultiFileTests.cs,RunSetupQueries,The following statement contains a magic number: i < 100
Magic Number,OrcaMDF.Core.Tests.Features.NullBitmap,NullBitmapTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\NullBitmap\NullBitmapTests.cs,Garbage,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("Garbage").ToList();    				Assert.AreEqual(5' rows[0].Field<int?>("A"));  				Assert.AreEqual(null' rows[0].Field<int?>("B"));  				Assert.AreEqual(null' rows[0].Field<int?>("C"));  				Assert.AreEqual(null' rows[0].Field<int?>("D"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.NullBitmap,NullBitmapTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\NullBitmap\NullBitmapTests.cs,Garbage2,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("Garbage2").ToList();    				Assert.AreEqual(5' rows[0].Field<int?>("A"));  				Assert.AreEqual(2' rows[0].Field<int?>("B"));  				Assert.AreEqual(null' rows[0].Field<string>("C"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.NullBitmap,NullBitmapTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\NullBitmap\NullBitmapTests.cs,Garbage2,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("Garbage2").ToList();    				Assert.AreEqual(5' rows[0].Field<int?>("A"));  				Assert.AreEqual(2' rows[0].Field<int?>("B"));  				Assert.AreEqual(null' rows[0].Field<string>("C"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanNonSparseInts,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanNonSparseInts").ToList();    				Assert.AreEqual(123' rows[0].Field<int?>("A"));  				Assert.AreEqual(null' rows[0].Field<int?>("B"));  				Assert.AreEqual(null' rows[0].Field<int?>("C"));  				Assert.AreEqual(127' rows[0].Field<int?>("D"));    				Assert.AreEqual(null' rows[1].Field<int?>("A"));  				Assert.AreEqual(null' rows[1].Field<int?>("B"));  				Assert.AreEqual(123982' rows[1].Field<int?>("C"));  				Assert.AreEqual(null' rows[1].Field<int?>("D"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanNonSparseInts,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanNonSparseInts").ToList();    				Assert.AreEqual(123' rows[0].Field<int?>("A"));  				Assert.AreEqual(null' rows[0].Field<int?>("B"));  				Assert.AreEqual(null' rows[0].Field<int?>("C"));  				Assert.AreEqual(127' rows[0].Field<int?>("D"));    				Assert.AreEqual(null' rows[1].Field<int?>("A"));  				Assert.AreEqual(null' rows[1].Field<int?>("B"));  				Assert.AreEqual(123982' rows[1].Field<int?>("C"));  				Assert.AreEqual(null' rows[1].Field<int?>("D"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanNonSparseInts,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanNonSparseInts").ToList();    				Assert.AreEqual(123' rows[0].Field<int?>("A"));  				Assert.AreEqual(null' rows[0].Field<int?>("B"));  				Assert.AreEqual(null' rows[0].Field<int?>("C"));  				Assert.AreEqual(127' rows[0].Field<int?>("D"));    				Assert.AreEqual(null' rows[1].Field<int?>("A"));  				Assert.AreEqual(null' rows[1].Field<int?>("B"));  				Assert.AreEqual(123982' rows[1].Field<int?>("C"));  				Assert.AreEqual(null' rows[1].Field<int?>("D"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanSparseInts,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanSparseInts").ToList();    				Assert.AreEqual(1' rows[0].Field<int>("ID"));  				Assert.AreEqual(null' rows[0].Field<int?>("A"));  				Assert.AreEqual(3' rows[0].Field<int?>("B"));  				Assert.AreEqual(null' rows[0].Field<int?>("C"));  				Assert.AreEqual(null' rows[0].Field<int?>("D"));  				Assert.AreEqual(1234' rows[0].Field<int?>("E"));    				Assert.AreEqual(45' rows[1].Field<int>("ID"));  				Assert.AreEqual(243' rows[1].Field<int?>("A"));  				Assert.AreEqual(328' rows[1].Field<int?>("B"));  				Assert.AreEqual(null' rows[1].Field<int?>("C"));  				Assert.AreEqual(null' rows[1].Field<int?>("D"));  				Assert.AreEqual(null' rows[1].Field<int?>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanSparseInts,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanSparseInts").ToList();    				Assert.AreEqual(1' rows[0].Field<int>("ID"));  				Assert.AreEqual(null' rows[0].Field<int?>("A"));  				Assert.AreEqual(3' rows[0].Field<int?>("B"));  				Assert.AreEqual(null' rows[0].Field<int?>("C"));  				Assert.AreEqual(null' rows[0].Field<int?>("D"));  				Assert.AreEqual(1234' rows[0].Field<int?>("E"));    				Assert.AreEqual(45' rows[1].Field<int>("ID"));  				Assert.AreEqual(243' rows[1].Field<int?>("A"));  				Assert.AreEqual(328' rows[1].Field<int?>("B"));  				Assert.AreEqual(null' rows[1].Field<int?>("C"));  				Assert.AreEqual(null' rows[1].Field<int?>("D"));  				Assert.AreEqual(null' rows[1].Field<int?>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanSparseInts,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanSparseInts").ToList();    				Assert.AreEqual(1' rows[0].Field<int>("ID"));  				Assert.AreEqual(null' rows[0].Field<int?>("A"));  				Assert.AreEqual(3' rows[0].Field<int?>("B"));  				Assert.AreEqual(null' rows[0].Field<int?>("C"));  				Assert.AreEqual(null' rows[0].Field<int?>("D"));  				Assert.AreEqual(1234' rows[0].Field<int?>("E"));    				Assert.AreEqual(45' rows[1].Field<int>("ID"));  				Assert.AreEqual(243' rows[1].Field<int?>("A"));  				Assert.AreEqual(328' rows[1].Field<int?>("B"));  				Assert.AreEqual(null' rows[1].Field<int?>("C"));  				Assert.AreEqual(null' rows[1].Field<int?>("D"));  				Assert.AreEqual(null' rows[1].Field<int?>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanSparseInts,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanSparseInts").ToList();    				Assert.AreEqual(1' rows[0].Field<int>("ID"));  				Assert.AreEqual(null' rows[0].Field<int?>("A"));  				Assert.AreEqual(3' rows[0].Field<int?>("B"));  				Assert.AreEqual(null' rows[0].Field<int?>("C"));  				Assert.AreEqual(null' rows[0].Field<int?>("D"));  				Assert.AreEqual(1234' rows[0].Field<int?>("E"));    				Assert.AreEqual(45' rows[1].Field<int>("ID"));  				Assert.AreEqual(243' rows[1].Field<int?>("A"));  				Assert.AreEqual(328' rows[1].Field<int?>("B"));  				Assert.AreEqual(null' rows[1].Field<int?>("C"));  				Assert.AreEqual(null' rows[1].Field<int?>("D"));  				Assert.AreEqual(null' rows[1].Field<int?>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanSparseInts,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanSparseInts").ToList();    				Assert.AreEqual(1' rows[0].Field<int>("ID"));  				Assert.AreEqual(null' rows[0].Field<int?>("A"));  				Assert.AreEqual(3' rows[0].Field<int?>("B"));  				Assert.AreEqual(null' rows[0].Field<int?>("C"));  				Assert.AreEqual(null' rows[0].Field<int?>("D"));  				Assert.AreEqual(1234' rows[0].Field<int?>("E"));    				Assert.AreEqual(45' rows[1].Field<int>("ID"));  				Assert.AreEqual(243' rows[1].Field<int?>("A"));  				Assert.AreEqual(328' rows[1].Field<int?>("B"));  				Assert.AreEqual(null' rows[1].Field<int?>("C"));  				Assert.AreEqual(null' rows[1].Field<int?>("D"));  				Assert.AreEqual(null' rows[1].Field<int?>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanSparseColumns,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanSparseColumns").ToList();    				Assert.AreEqual(null' rows[0].Field<int?>("A"));  				Assert.AreEqual("Mark"' rows[0].Field<string>("B"));  				Assert.AreEqual(3' rows[0].Field<long?>("C"));  				Assert.AreEqual(null' rows[0].Field<byte?>("D"));  				Assert.AreEqual(1234' rows[0].Field<int?>("E"));    				Assert.AreEqual(45' rows[1].Field<int?>("A"));  				Assert.AreEqual(null' rows[1].Field<string>("B"));  				Assert.AreEqual(null' rows[1].Field<long?>("C"));  				Assert.AreEqual(243' rows[1].Field<byte?>("D"));  				Assert.AreEqual(null' rows[1].Field<int?>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanSparseColumns,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanSparseColumns").ToList();    				Assert.AreEqual(null' rows[0].Field<int?>("A"));  				Assert.AreEqual("Mark"' rows[0].Field<string>("B"));  				Assert.AreEqual(3' rows[0].Field<long?>("C"));  				Assert.AreEqual(null' rows[0].Field<byte?>("D"));  				Assert.AreEqual(1234' rows[0].Field<int?>("E"));    				Assert.AreEqual(45' rows[1].Field<int?>("A"));  				Assert.AreEqual(null' rows[1].Field<string>("B"));  				Assert.AreEqual(null' rows[1].Field<long?>("C"));  				Assert.AreEqual(243' rows[1].Field<byte?>("D"));  				Assert.AreEqual(null' rows[1].Field<int?>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanSparseColumns,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanSparseColumns").ToList();    				Assert.AreEqual(null' rows[0].Field<int?>("A"));  				Assert.AreEqual("Mark"' rows[0].Field<string>("B"));  				Assert.AreEqual(3' rows[0].Field<long?>("C"));  				Assert.AreEqual(null' rows[0].Field<byte?>("D"));  				Assert.AreEqual(1234' rows[0].Field<int?>("E"));    				Assert.AreEqual(45' rows[1].Field<int?>("A"));  				Assert.AreEqual(null' rows[1].Field<string>("B"));  				Assert.AreEqual(null' rows[1].Field<long?>("C"));  				Assert.AreEqual(243' rows[1].Field<byte?>("D"));  				Assert.AreEqual(null' rows[1].Field<int?>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,ScanSparseColumns,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("ScanSparseColumns").ToList();    				Assert.AreEqual(null' rows[0].Field<int?>("A"));  				Assert.AreEqual("Mark"' rows[0].Field<string>("B"));  				Assert.AreEqual(3' rows[0].Field<long?>("C"));  				Assert.AreEqual(null' rows[0].Field<byte?>("D"));  				Assert.AreEqual(1234' rows[0].Field<int?>("E"));    				Assert.AreEqual(45' rows[1].Field<int?>("A"));  				Assert.AreEqual(null' rows[1].Field<string>("B"));  				Assert.AreEqual(null' rows[1].Field<long?>("C"));  				Assert.AreEqual(243' rows[1].Field<byte?>("D"));  				Assert.AreEqual(null' rows[1].Field<int?>("E"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,DifferingRecordFormats,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DifferingRecordFormats").ToList();    				Assert.AreEqual(5' rows[0].Field<int?>("A"));  				Assert.AreEqual(2' rows[0].Field<int?>("B"));  				Assert.AreEqual(6' rows[1].Field<int?>("A"));  				Assert.AreEqual(null' rows[1].Field<int?>("B"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,DifferingRecordFormats,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DifferingRecordFormats").ToList();    				Assert.AreEqual(5' rows[0].Field<int?>("A"));  				Assert.AreEqual(2' rows[0].Field<int?>("B"));  				Assert.AreEqual(6' rows[1].Field<int?>("A"));  				Assert.AreEqual(null' rows[1].Field<int?>("B"));  			});
Magic Number,OrcaMDF.Core.Tests.Features.SparseColumns,SparseColumnTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\Features\SparseColumns\SparseColumnTests.cs,DifferingRecordFormats,The following statement contains a magic number: RunDatabaseTest(version' db =>  			{  				var scanner = new DataScanner(db);  				var rows = scanner.ScanTable("DifferingRecordFormats").ToList();    				Assert.AreEqual(5' rows[0].Field<int?>("A"));  				Assert.AreEqual(2' rows[0].Field<int?>("B"));  				Assert.AreEqual(6' rows[1].Field<int?>("A"));  				Assert.AreEqual(null' rows[1].Field<int?>("B"));  			});
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Bigint,The following statement contains a magic number: var parser = new SysrscolTIParser(127);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Bigint,The following statement contains a magic number: Assert.AreEqual(19' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Bigint,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Bigint,The following statement contains a magic number: Assert.AreEqual(127' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Bigint,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Binary,The following statement contains a magic number: var parser = new SysrscolTIParser(12973);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Binary,The following statement contains a magic number: Assert.AreEqual(50' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Binary,The following statement contains a magic number: Assert.AreEqual(173' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Binary,The following statement contains a magic number: Assert.AreEqual(50' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Bit,The following statement contains a magic number: var parser = new SysrscolTIParser(104);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Bit,The following statement contains a magic number: Assert.AreEqual(104' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Char,The following statement contains a magic number: var parser = new SysrscolTIParser(2735);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Char,The following statement contains a magic number: Assert.AreEqual(10' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Char,The following statement contains a magic number: Assert.AreEqual(175' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Char,The following statement contains a magic number: Assert.AreEqual(10' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Date,The following statement contains a magic number: var parser = new SysrscolTIParser(40);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Date,The following statement contains a magic number: Assert.AreEqual(10' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Date,The following statement contains a magic number: Assert.AreEqual(3' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Date,The following statement contains a magic number: Assert.AreEqual(40' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Date,The following statement contains a magic number: Assert.AreEqual(3' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime,The following statement contains a magic number: var parser = new SysrscolTIParser(61);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(3' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(23' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(61' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: var parser = new SysrscolTIParser(1834);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: Assert.AreEqual(7' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: Assert.AreEqual(27' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: Assert.AreEqual(42' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: parser = new SysrscolTIParser(810);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: Assert.AreEqual(3' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: Assert.AreEqual(23' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: Assert.AreEqual(7' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: Assert.AreEqual(42' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetime2,The following statement contains a magic number: Assert.AreEqual(7' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: var parser = new SysrscolTIParser(1835);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: Assert.AreEqual(7' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: Assert.AreEqual(34' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: Assert.AreEqual(10' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: Assert.AreEqual(43' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: Assert.AreEqual(10' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: parser = new SysrscolTIParser(1067);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: Assert.AreEqual(4' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: Assert.AreEqual(31' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: Assert.AreEqual(9' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: Assert.AreEqual(43' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Datetimeoffset,The following statement contains a magic number: Assert.AreEqual(9' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: var parser = new SysrscolTIParser(330858);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: Assert.AreEqual(5' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: Assert.AreEqual(12' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: Assert.AreEqual(9' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: Assert.AreEqual(106' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: Assert.AreEqual(9' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: parser = new SysrscolTIParser(396138);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: Assert.AreEqual(6' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: Assert.AreEqual(11' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: Assert.AreEqual(9' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: Assert.AreEqual(106' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Decimal,The following statement contains a magic number: Assert.AreEqual(9' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Float,The following statement contains a magic number: var parser = new SysrscolTIParser(62);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Float,The following statement contains a magic number: Assert.AreEqual(53' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Float,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Float,The following statement contains a magic number: Assert.AreEqual(62' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Float,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varbinary,The following statement contains a magic number: var parser = new SysrscolTIParser(165);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varbinary,The following statement contains a magic number: Assert.AreEqual(165' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varbinary,The following statement contains a magic number: Assert.AreEqual(8000' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varbinary,The following statement contains a magic number: parser = new SysrscolTIParser(228517);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varbinary,The following statement contains a magic number: Assert.AreEqual(892' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varbinary,The following statement contains a magic number: Assert.AreEqual(165' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varbinary,The following statement contains a magic number: Assert.AreEqual(892' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Image,The following statement contains a magic number: var parser = new SysrscolTIParser(4130);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Image,The following statement contains a magic number: Assert.AreEqual(16' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Image,The following statement contains a magic number: Assert.AreEqual(34' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Image,The following statement contains a magic number: Assert.AreEqual(16' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Int,The following statement contains a magic number: var parser = new SysrscolTIParser(56);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(10' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(4' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(56' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Int,The following statement contains a magic number: Assert.AreEqual(4' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Money,The following statement contains a magic number: var parser = new SysrscolTIParser(60);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Money,The following statement contains a magic number: Assert.AreEqual(4' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Money,The following statement contains a magic number: Assert.AreEqual(19' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Money,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Money,The following statement contains a magic number: Assert.AreEqual(60' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Money,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Nchar,The following statement contains a magic number: var parser = new SysrscolTIParser(5359);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Nchar,The following statement contains a magic number: Assert.AreEqual(20' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Nchar,The following statement contains a magic number: Assert.AreEqual(239' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Nchar,The following statement contains a magic number: Assert.AreEqual(20' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Ntext,The following statement contains a magic number: var parser = new SysrscolTIParser(4195);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Ntext,The following statement contains a magic number: Assert.AreEqual(16' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Ntext,The following statement contains a magic number: Assert.AreEqual(99' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Ntext,The following statement contains a magic number: Assert.AreEqual(16' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: var parser = new SysrscolTIParser(265580);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: Assert.AreEqual(4' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: Assert.AreEqual(13' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: Assert.AreEqual(9' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: Assert.AreEqual(108' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: Assert.AreEqual(9' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: parser = new SysrscolTIParser(135020);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: Assert.AreEqual(2' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: Assert.AreEqual(15' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: Assert.AreEqual(9' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: Assert.AreEqual(108' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Numeric,The following statement contains a magic number: Assert.AreEqual(9' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Nvarchar,The following statement contains a magic number: var parser = new SysrscolTIParser(25831);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Nvarchar,The following statement contains a magic number: Assert.AreEqual(100' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Nvarchar,The following statement contains a magic number: Assert.AreEqual(231' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Nvarchar,The following statement contains a magic number: Assert.AreEqual(100' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Nvarchar,The following statement contains a magic number: parser = new SysrscolTIParser(231);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Nvarchar,The following statement contains a magic number: Assert.AreEqual(231' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Nvarchar,The following statement contains a magic number: Assert.AreEqual(8000' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Real,The following statement contains a magic number: var parser = new SysrscolTIParser(59);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Real,The following statement contains a magic number: Assert.AreEqual(24' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Real,The following statement contains a magic number: Assert.AreEqual(4' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Real,The following statement contains a magic number: Assert.AreEqual(59' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Real,The following statement contains a magic number: Assert.AreEqual(4' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smalldatetime,The following statement contains a magic number: var parser = new SysrscolTIParser(58);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smalldatetime,The following statement contains a magic number: Assert.AreEqual(16' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smalldatetime,The following statement contains a magic number: Assert.AreEqual(4' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smalldatetime,The following statement contains a magic number: Assert.AreEqual(58' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smalldatetime,The following statement contains a magic number: Assert.AreEqual(4' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smallint,The following statement contains a magic number: var parser = new SysrscolTIParser(52);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smallint,The following statement contains a magic number: Assert.AreEqual(5' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smallint,The following statement contains a magic number: Assert.AreEqual(2' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smallint,The following statement contains a magic number: Assert.AreEqual(52' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smallint,The following statement contains a magic number: Assert.AreEqual(2' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smallmoney,The following statement contains a magic number: var parser = new SysrscolTIParser(122);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smallmoney,The following statement contains a magic number: Assert.AreEqual(4' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smallmoney,The following statement contains a magic number: Assert.AreEqual(10' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smallmoney,The following statement contains a magic number: Assert.AreEqual(4' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smallmoney,The following statement contains a magic number: Assert.AreEqual(122' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Smallmoney,The following statement contains a magic number: Assert.AreEqual(4' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Sql_Variant,The following statement contains a magic number: var parser = new SysrscolTIParser(98);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Sql_Variant,The following statement contains a magic number: Assert.AreEqual(8016' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Sql_Variant,The following statement contains a magic number: Assert.AreEqual(98' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Sql_Variant,The following statement contains a magic number: Assert.AreEqual(8016' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Text,The following statement contains a magic number: var parser = new SysrscolTIParser(4131);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Text,The following statement contains a magic number: Assert.AreEqual(16' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Text,The following statement contains a magic number: Assert.AreEqual(35' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Text,The following statement contains a magic number: Assert.AreEqual(16' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: var parser = new SysrscolTIParser(1833);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: Assert.AreEqual(7' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: Assert.AreEqual(16' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: Assert.AreEqual(5' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: Assert.AreEqual(41' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: Assert.AreEqual(5' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: parser = new SysrscolTIParser(1065);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: Assert.AreEqual(4' parser.Scale);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: Assert.AreEqual(13' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: Assert.AreEqual(4' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: Assert.AreEqual(41' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Time,The following statement contains a magic number: Assert.AreEqual(4' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Timestamp,The following statement contains a magic number: var parser = new SysrscolTIParser(189);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Timestamp,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Timestamp,The following statement contains a magic number: Assert.AreEqual(189' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Timestamp,The following statement contains a magic number: Assert.AreEqual(8' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Tinyint,The following statement contains a magic number: var parser = new SysrscolTIParser(48);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Tinyint,The following statement contains a magic number: Assert.AreEqual(3' parser.Precision);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Tinyint,The following statement contains a magic number: Assert.AreEqual(48' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Uniqueidentifier,The following statement contains a magic number: var parser = new SysrscolTIParser(36);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Uniqueidentifier,The following statement contains a magic number: Assert.AreEqual(16' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Uniqueidentifier,The following statement contains a magic number: Assert.AreEqual(36' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Uniqueidentifier,The following statement contains a magic number: Assert.AreEqual(16' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varchar,The following statement contains a magic number: var parser = new SysrscolTIParser(12967);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varchar,The following statement contains a magic number: Assert.AreEqual(50' parser.MaxLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varchar,The following statement contains a magic number: Assert.AreEqual(167' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varchar,The following statement contains a magic number: Assert.AreEqual(50' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varchar,The following statement contains a magic number: parser = new SysrscolTIParser(167);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varchar,The following statement contains a magic number: Assert.AreEqual(167' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Varchar,The following statement contains a magic number: Assert.AreEqual(8000' parser.MaxInrowLength);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Xml,The following statement contains a magic number: var parser = new SysrscolTIParser(241);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Xml,The following statement contains a magic number: Assert.AreEqual(241' parser.TypeID);
Magic Number,OrcaMDF.Core.Tests.MetaData,SysrscolTIParserTests,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Core.Tests\MetaData\SysrscolTIParserTests.cs,Xml,The following statement contains a magic number: Assert.AreEqual(8000' parser.MaxInrowLength);
