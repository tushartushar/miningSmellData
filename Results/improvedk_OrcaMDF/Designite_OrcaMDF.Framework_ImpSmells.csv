Implementation smell,Namespace,Class,File,Method,Description
Long Method,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandSingleByte,The method has 131 lines of code.
Complex Method,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,Cyclomatic complexity of the method is 10
Complex Method,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandUnicode,Cyclomatic complexity of the method is 9
Complex Method,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandSingleByte,Cyclomatic complexity of the method is 16
Long Parameter List,OrcaMDF.Framework,ByteConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\ByteConverter.cs,ToInt16,The method has 5 parameters. Parameters: input' index' endian' offset' autoPad
Long Statement,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt16FromBigEndian,The length of the statement  "			short offsetValue = (short)(offset == Offset.Zero ? 0 : (-1 * (1 << Math.Min(input.Length - index' sizeof(short)) * 8 - 1))); " is 125.
Long Statement,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The length of the statement  "			long offsetValue = offset == Offset.Zero ? 0 : (-1 * ((long)1 << Math.Min(input.Length - index' sizeof(long)) * 8 - 1)); " is 120.
Long Statement,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The length of the statement  "					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]); " is 159.
Long Statement,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The length of the statement  "					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]); " is 190.
Long Statement,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The length of the statement  "					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]); " is 221.
Long Statement,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The length of the statement  "					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]); " is 252.
Magic Number,OrcaMDF.Framework,ByteConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\ByteConverter.cs,ToInt16,The following statement contains a magic number: input.Length - index < 2 && !autoPad
Magic Number,OrcaMDF.Framework,ByteConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\ByteConverter.cs,ToInt16,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					if (offset == Offset.Zero)  						return input[index];  					else  						return (short)(-128 + input[index]);    				default:  					if (endian == Endian.Little)  					{  						fixed (byte* ptr = &input[index])  						{  							if (offset == Offset.Zero)  								return *(short*)ptr;  							  							return (short)(-32768 + *(short*)ptr);  						}  					}  					else  					{  						if (offset == Offset.Zero)  							return (short)(input[index] << 8);  						  						return (short)(-32768 + (short)(input[index] << 8 | input[index + 1]));  					}  			}
Magic Number,OrcaMDF.Framework,ByteConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\ByteConverter.cs,ToInt16,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					if (offset == Offset.Zero)  						return input[index];  					else  						return (short)(-128 + input[index]);    				default:  					if (endian == Endian.Little)  					{  						fixed (byte* ptr = &input[index])  						{  							if (offset == Offset.Zero)  								return *(short*)ptr;  							  							return (short)(-32768 + *(short*)ptr);  						}  					}  					else  					{  						if (offset == Offset.Zero)  							return (short)(input[index] << 8);  						  						return (short)(-32768 + (short)(input[index] << 8 | input[index + 1]));  					}  			}
Magic Number,OrcaMDF.Framework,ByteConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\ByteConverter.cs,ToInt16,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					if (offset == Offset.Zero)  						return input[index];  					else  						return (short)(-128 + input[index]);    				default:  					if (endian == Endian.Little)  					{  						fixed (byte* ptr = &input[index])  						{  							if (offset == Offset.Zero)  								return *(short*)ptr;  							  							return (short)(-32768 + *(short*)ptr);  						}  					}  					else  					{  						if (offset == Offset.Zero)  							return (short)(input[index] << 8);  						  						return (short)(-32768 + (short)(input[index] << 8 | input[index + 1]));  					}  			}
Magic Number,OrcaMDF.Framework,ByteConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\ByteConverter.cs,ToInt16,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					if (offset == Offset.Zero)  						return input[index];  					else  						return (short)(-128 + input[index]);    				default:  					if (endian == Endian.Little)  					{  						fixed (byte* ptr = &input[index])  						{  							if (offset == Offset.Zero)  								return *(short*)ptr;  							  							return (short)(-32768 + *(short*)ptr);  						}  					}  					else  					{  						if (offset == Offset.Zero)  							return (short)(input[index] << 8);  						  						return (short)(-32768 + (short)(input[index] << 8 | input[index + 1]));  					}  			}
Magic Number,OrcaMDF.Framework,ByteConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\ByteConverter.cs,ToInt16,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					if (offset == Offset.Zero)  						return input[index];  					else  						return (short)(-128 + input[index]);    				default:  					if (endian == Endian.Little)  					{  						fixed (byte* ptr = &input[index])  						{  							if (offset == Offset.Zero)  								return *(short*)ptr;  							  							return (short)(-32768 + *(short*)ptr);  						}  					}  					else  					{  						if (offset == Offset.Zero)  							return (short)(input[index] << 8);  						  						return (short)(-32768 + (short)(input[index] << 8 | input[index + 1]));  					}  			}
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingGarbage,The following statement contains a magic number: int pageCount = (int)(file.Length / 8192);
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingGarbage,The following statement contains a magic number: byte[] garbage = new byte[8192];
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingGarbage,The following statement contains a magic number: file.Position = pageID * 8192 + 96;
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingGarbage,The following statement contains a magic number: file.Position = pageID * 8192 + 96;
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingGarbage,The following statement contains a magic number: file.Write(garbage' 0' 8060);
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingZeros,The following statement contains a magic number: byte[] zeros = new byte[8192];
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingZeros,The following statement contains a magic number: int pageCount = (int)(file.Length / 8192);
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingZeros,The following statement contains a magic number: file.Position = pageID * 8192;
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingZeros,The following statement contains a magic number: file.Write(zeros' 0' 8192);
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingZeros,The following statement contains a magic number: long numPagesInFile = file.Length / 8192;
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingZeros,The following statement contains a magic number: byte[] zeros = new byte[8192];
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingZeros,The following statement contains a magic number: file.Position = pageID * 8192;
Magic Number,OrcaMDF.Framework,Corruptor,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\Corruptor.cs,CorruptFileUsingZeros,The following statement contains a magic number: file.Write(zeros' 0' 8192);
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt16FromBigEndian,The following statement contains a magic number: short offsetValue = (short)(offset == Offset.Zero ? 0 : (-1 * (1 << Math.Min(input.Length - index' sizeof(short)) * 8 - 1)));
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt16FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return (short)(offsetValue + input[index]);    				default:  					return (short)(offsetValue + (input[index] << 8 | input[index + 1]));  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: int offsetValue = offset == Offset.Zero ? 0 : (-1 * (1 << Math.Min(input.Length - index' sizeof(int)) * 8 - 1));
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				default:  					return offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				default:  					return offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				default:  					return offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				default:  					return offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				default:  					return offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				default:  					return offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				default:  					return offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				default:  					return offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				default:  					return offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				default:  					return offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt32FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				default:  					return offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: long offsetValue = offset == Offset.Zero ? 0 : (-1 * ((long)1 << Math.Min(input.Length - index' sizeof(long)) * 8 - 1));
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,SqlBitConverter,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SqlBitConverter.cs,ToInt64FromBigEndian,The following statement contains a magic number: switch (input.Length - index)  			{  				case 1:  					return offsetValue + input[index];    				case 2:  					return offsetValue + (input[index] << 8 | input[index + 1]);    				case 3:  					return offsetValue + (input[index] << 16 | input[index + 1] << 8 | input[index + 2]);    				case 4:  					return (int)offsetValue + (input[index] << 24 | input[index + 1] << 16 | input[index + 2] << 8 | input[index + 3]);    				case 5:  					return offsetValue + ((long)input[index] << 32 | (long)input[index + 1] << 24 | (long)input[index + 2] << 16 | (long)input[index + 3] << 8 | input[index + 4]);    				case 6:  					return offsetValue + ((long)input[index] << 40 | (long)input[index + 1] << 32 | (long)input[index + 2] << 24 | (long)input[index + 3] << 16 | (long)input[index + 4] << 8 | input[index + 5]);    				case 7:  					return offsetValue + ((long)input[index] << 48 | (long)input[index + 1] << 40 | (long)input[index + 2] << 32 | (long)input[index + 3] << 24 | (long)input[index + 4] << 16 | (long)input[index + 5] << 8 | input[index + 6]);  					  				default:  					return offsetValue + ((long)input[index] << 56 | (long)input[index + 1] << 48 | (long)input[index + 2] << 40 | (long)input[index + 3] << 32 | (long)input[index + 4] << 24 | (long)input[index + 5] << 16 | (long)input[index + 6] << 8 | input[index + 7]);  			}
Magic Number,OrcaMDF.Framework,TestHelper,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\TestHelper.cs,GetBytesFromByteString,The following statement contains a magic number: input.Length % 2 != 0
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,defineWindow,The following statement contains a magic number: ScsuConstants.DynamicOffset[window] = iOffset << 7;
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,defineExtendedWindow,The following statement contains a magic number: uint iWindow = offset >> 13;
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,defineExtendedWindow,The following statement contains a magic number: ScsuConstants.DynamicOffset[iWindow] = ((offset & 0x1FFF) << 7) + (1 << 16);
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,defineExtendedWindow,The following statement contains a magic number: ScsuConstants.DynamicOffset[iWindow] = ((offset & 0x1FFF) << 7) + (1 << 16);
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandUnicode,The following statement contains a magic number: index >= input.Length - 2
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandUnicode,The following statement contains a magic number: defineExtendedWindow(charFromTwoBytes(input[index + 1]' input[index + 2]));
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandUnicode,The following statement contains a magic number: return index + 2;
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandUnicode,The following statement contains a magic number: index >= input.Length - 2
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,charFromTwoBytes,The following statement contains a magic number: return (char)(ch + (char)(hi << 8));
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandSingleByte,The following statement contains a magic number: switch (input[index])  				{  					// Quote from a static Window  					case ScsuConstants.SQ0:  					case ScsuConstants.SQ1:  					case ScsuConstants.SQ2:  					case ScsuConstants.SQ3:  					case ScsuConstants.SQ4:  					case ScsuConstants.SQ5:  					case ScsuConstants.SQ6:  					case ScsuConstants.SQ7:  						// Skip the command byte and check for length  						if (index >= input.Length - 1)  							continue;    						// Select window pair to quote from  						iDynamicWindow = (uint)(iStaticWindow = input[index] - ScsuConstants.SQ0);  						index ++;    						// Fall through  						goto default;    					default:  						uint ch;    						// Output as character  						if (input[index] < 128)  						{  							// Use static window  							ch = input[index] + ScsuConstants.StaticOffset[iStaticWindow];  							sb.Append((char)ch);  							outputLength++;  						}  						else  						{  							// Use dynamic window  							ch = input[index];  							ch -= 0x80;                // Reduce to range 00..7F  							ch += ScsuConstants.DynamicOffset[iDynamicWindow];  							  							if (ch < (1 << 16))  							{  								// In Unicode range' output directly  								sb.Append((char)ch);  								outputLength++;  							}  							else  							{  								// Compute and append the two surrogates:  								// Translate from 10000..10FFFF to 0..FFFFF  								ch -= 0x10000;    								// High surrogate = top 10 bits added to D800  								sb.Append((char)(0xD800 + (ch >> 10)));  								outputLength++;    								// Low surrogate = bottom 10 bits added to DC00  								sb.Append((char)(0xDC00 + (ch & ~0xFC00)));  								outputLength++;  							}  						}  						break;    					// Define a dynamic window as extended  					case ScsuConstants.SDX:  						index += 2;  						if (index >= input.Length)  							continue;    						defineExtendedWindow(charFromTwoBytes(input[index - 1]' input[index]));  						break;    					// Position a dynamic Window  					case ScsuConstants.SD0:  					case ScsuConstants.SD1:  					case ScsuConstants.SD2:  					case ScsuConstants.SD3:  					case ScsuConstants.SD4:  					case ScsuConstants.SD5:  					case ScsuConstants.SD6:  					case ScsuConstants.SD7:  						index ++;  						if (index >= input.Length)  							continue;    						defineWindow((uint)(input[index - 1] - ScsuConstants.SD0)' input[index]);  						break;    					// Select a new dynamic Window  					case ScsuConstants.SC0:  					case ScsuConstants.SC1:  					case ScsuConstants.SC2:  					case ScsuConstants.SC3:  					case ScsuConstants.SC4:  					case ScsuConstants.SC5:  					case ScsuConstants.SC6:  					case ScsuConstants.SC7:  						activeWindow = (uint)(input[index] - ScsuConstants.SC0);  						break;    					case ScsuConstants.SCU:  						// Switch to Unicode mode and continue parsing  						index = expandUnicode(input' index + 1' sb);  						break;    					case ScsuConstants.SQU:  						// Directly extract one Unicode character  						index += 2;  						if (index >= input.Length)  							continue;    						char cha = charFromTwoBytes(input[index - 1]' input[index]);    						sb.Append(cha);  						outputLength++;  						break;    					case ScsuConstants.Srs:  						throw new IllegalInputException();  				}
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandSingleByte,The following statement contains a magic number: switch (input[index])  				{  					// Quote from a static Window  					case ScsuConstants.SQ0:  					case ScsuConstants.SQ1:  					case ScsuConstants.SQ2:  					case ScsuConstants.SQ3:  					case ScsuConstants.SQ4:  					case ScsuConstants.SQ5:  					case ScsuConstants.SQ6:  					case ScsuConstants.SQ7:  						// Skip the command byte and check for length  						if (index >= input.Length - 1)  							continue;    						// Select window pair to quote from  						iDynamicWindow = (uint)(iStaticWindow = input[index] - ScsuConstants.SQ0);  						index ++;    						// Fall through  						goto default;    					default:  						uint ch;    						// Output as character  						if (input[index] < 128)  						{  							// Use static window  							ch = input[index] + ScsuConstants.StaticOffset[iStaticWindow];  							sb.Append((char)ch);  							outputLength++;  						}  						else  						{  							// Use dynamic window  							ch = input[index];  							ch -= 0x80;                // Reduce to range 00..7F  							ch += ScsuConstants.DynamicOffset[iDynamicWindow];  							  							if (ch < (1 << 16))  							{  								// In Unicode range' output directly  								sb.Append((char)ch);  								outputLength++;  							}  							else  							{  								// Compute and append the two surrogates:  								// Translate from 10000..10FFFF to 0..FFFFF  								ch -= 0x10000;    								// High surrogate = top 10 bits added to D800  								sb.Append((char)(0xD800 + (ch >> 10)));  								outputLength++;    								// Low surrogate = bottom 10 bits added to DC00  								sb.Append((char)(0xDC00 + (ch & ~0xFC00)));  								outputLength++;  							}  						}  						break;    					// Define a dynamic window as extended  					case ScsuConstants.SDX:  						index += 2;  						if (index >= input.Length)  							continue;    						defineExtendedWindow(charFromTwoBytes(input[index - 1]' input[index]));  						break;    					// Position a dynamic Window  					case ScsuConstants.SD0:  					case ScsuConstants.SD1:  					case ScsuConstants.SD2:  					case ScsuConstants.SD3:  					case ScsuConstants.SD4:  					case ScsuConstants.SD5:  					case ScsuConstants.SD6:  					case ScsuConstants.SD7:  						index ++;  						if (index >= input.Length)  							continue;    						defineWindow((uint)(input[index - 1] - ScsuConstants.SD0)' input[index]);  						break;    					// Select a new dynamic Window  					case ScsuConstants.SC0:  					case ScsuConstants.SC1:  					case ScsuConstants.SC2:  					case ScsuConstants.SC3:  					case ScsuConstants.SC4:  					case ScsuConstants.SC5:  					case ScsuConstants.SC6:  					case ScsuConstants.SC7:  						activeWindow = (uint)(input[index] - ScsuConstants.SC0);  						break;    					case ScsuConstants.SCU:  						// Switch to Unicode mode and continue parsing  						index = expandUnicode(input' index + 1' sb);  						break;    					case ScsuConstants.SQU:  						// Directly extract one Unicode character  						index += 2;  						if (index >= input.Length)  							continue;    						char cha = charFromTwoBytes(input[index - 1]' input[index]);    						sb.Append(cha);  						outputLength++;  						break;    					case ScsuConstants.Srs:  						throw new IllegalInputException();  				}
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandSingleByte,The following statement contains a magic number: switch (input[index])  				{  					// Quote from a static Window  					case ScsuConstants.SQ0:  					case ScsuConstants.SQ1:  					case ScsuConstants.SQ2:  					case ScsuConstants.SQ3:  					case ScsuConstants.SQ4:  					case ScsuConstants.SQ5:  					case ScsuConstants.SQ6:  					case ScsuConstants.SQ7:  						// Skip the command byte and check for length  						if (index >= input.Length - 1)  							continue;    						// Select window pair to quote from  						iDynamicWindow = (uint)(iStaticWindow = input[index] - ScsuConstants.SQ0);  						index ++;    						// Fall through  						goto default;    					default:  						uint ch;    						// Output as character  						if (input[index] < 128)  						{  							// Use static window  							ch = input[index] + ScsuConstants.StaticOffset[iStaticWindow];  							sb.Append((char)ch);  							outputLength++;  						}  						else  						{  							// Use dynamic window  							ch = input[index];  							ch -= 0x80;                // Reduce to range 00..7F  							ch += ScsuConstants.DynamicOffset[iDynamicWindow];  							  							if (ch < (1 << 16))  							{  								// In Unicode range' output directly  								sb.Append((char)ch);  								outputLength++;  							}  							else  							{  								// Compute and append the two surrogates:  								// Translate from 10000..10FFFF to 0..FFFFF  								ch -= 0x10000;    								// High surrogate = top 10 bits added to D800  								sb.Append((char)(0xD800 + (ch >> 10)));  								outputLength++;    								// Low surrogate = bottom 10 bits added to DC00  								sb.Append((char)(0xDC00 + (ch & ~0xFC00)));  								outputLength++;  							}  						}  						break;    					// Define a dynamic window as extended  					case ScsuConstants.SDX:  						index += 2;  						if (index >= input.Length)  							continue;    						defineExtendedWindow(charFromTwoBytes(input[index - 1]' input[index]));  						break;    					// Position a dynamic Window  					case ScsuConstants.SD0:  					case ScsuConstants.SD1:  					case ScsuConstants.SD2:  					case ScsuConstants.SD3:  					case ScsuConstants.SD4:  					case ScsuConstants.SD5:  					case ScsuConstants.SD6:  					case ScsuConstants.SD7:  						index ++;  						if (index >= input.Length)  							continue;    						defineWindow((uint)(input[index - 1] - ScsuConstants.SD0)' input[index]);  						break;    					// Select a new dynamic Window  					case ScsuConstants.SC0:  					case ScsuConstants.SC1:  					case ScsuConstants.SC2:  					case ScsuConstants.SC3:  					case ScsuConstants.SC4:  					case ScsuConstants.SC5:  					case ScsuConstants.SC6:  					case ScsuConstants.SC7:  						activeWindow = (uint)(input[index] - ScsuConstants.SC0);  						break;    					case ScsuConstants.SCU:  						// Switch to Unicode mode and continue parsing  						index = expandUnicode(input' index + 1' sb);  						break;    					case ScsuConstants.SQU:  						// Directly extract one Unicode character  						index += 2;  						if (index >= input.Length)  							continue;    						char cha = charFromTwoBytes(input[index - 1]' input[index]);    						sb.Append(cha);  						outputLength++;  						break;    					case ScsuConstants.Srs:  						throw new IllegalInputException();  				}
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandSingleByte,The following statement contains a magic number: switch (input[index])  				{  					// Quote from a static Window  					case ScsuConstants.SQ0:  					case ScsuConstants.SQ1:  					case ScsuConstants.SQ2:  					case ScsuConstants.SQ3:  					case ScsuConstants.SQ4:  					case ScsuConstants.SQ5:  					case ScsuConstants.SQ6:  					case ScsuConstants.SQ7:  						// Skip the command byte and check for length  						if (index >= input.Length - 1)  							continue;    						// Select window pair to quote from  						iDynamicWindow = (uint)(iStaticWindow = input[index] - ScsuConstants.SQ0);  						index ++;    						// Fall through  						goto default;    					default:  						uint ch;    						// Output as character  						if (input[index] < 128)  						{  							// Use static window  							ch = input[index] + ScsuConstants.StaticOffset[iStaticWindow];  							sb.Append((char)ch);  							outputLength++;  						}  						else  						{  							// Use dynamic window  							ch = input[index];  							ch -= 0x80;                // Reduce to range 00..7F  							ch += ScsuConstants.DynamicOffset[iDynamicWindow];  							  							if (ch < (1 << 16))  							{  								// In Unicode range' output directly  								sb.Append((char)ch);  								outputLength++;  							}  							else  							{  								// Compute and append the two surrogates:  								// Translate from 10000..10FFFF to 0..FFFFF  								ch -= 0x10000;    								// High surrogate = top 10 bits added to D800  								sb.Append((char)(0xD800 + (ch >> 10)));  								outputLength++;    								// Low surrogate = bottom 10 bits added to DC00  								sb.Append((char)(0xDC00 + (ch & ~0xFC00)));  								outputLength++;  							}  						}  						break;    					// Define a dynamic window as extended  					case ScsuConstants.SDX:  						index += 2;  						if (index >= input.Length)  							continue;    						defineExtendedWindow(charFromTwoBytes(input[index - 1]' input[index]));  						break;    					// Position a dynamic Window  					case ScsuConstants.SD0:  					case ScsuConstants.SD1:  					case ScsuConstants.SD2:  					case ScsuConstants.SD3:  					case ScsuConstants.SD4:  					case ScsuConstants.SD5:  					case ScsuConstants.SD6:  					case ScsuConstants.SD7:  						index ++;  						if (index >= input.Length)  							continue;    						defineWindow((uint)(input[index - 1] - ScsuConstants.SD0)' input[index]);  						break;    					// Select a new dynamic Window  					case ScsuConstants.SC0:  					case ScsuConstants.SC1:  					case ScsuConstants.SC2:  					case ScsuConstants.SC3:  					case ScsuConstants.SC4:  					case ScsuConstants.SC5:  					case ScsuConstants.SC6:  					case ScsuConstants.SC7:  						activeWindow = (uint)(input[index] - ScsuConstants.SC0);  						break;    					case ScsuConstants.SCU:  						// Switch to Unicode mode and continue parsing  						index = expandUnicode(input' index + 1' sb);  						break;    					case ScsuConstants.SQU:  						// Directly extract one Unicode character  						index += 2;  						if (index >= input.Length)  							continue;    						char cha = charFromTwoBytes(input[index - 1]' input[index]);    						sb.Append(cha);  						outputLength++;  						break;    					case ScsuConstants.Srs:  						throw new IllegalInputException();  				}
Magic Number,OrcaMDF.Framework.SCSU,ScsuExpander,D:\research\architectureSmells\repos\improvedk_OrcaMDF\src\OrcaMDF.Framework\SCSU\ScsuExpander.cs,expandSingleByte,The following statement contains a magic number: switch (input[index])  				{  					// Quote from a static Window  					case ScsuConstants.SQ0:  					case ScsuConstants.SQ1:  					case ScsuConstants.SQ2:  					case ScsuConstants.SQ3:  					case ScsuConstants.SQ4:  					case ScsuConstants.SQ5:  					case ScsuConstants.SQ6:  					case ScsuConstants.SQ7:  						// Skip the command byte and check for length  						if (index >= input.Length - 1)  							continue;    						// Select window pair to quote from  						iDynamicWindow = (uint)(iStaticWindow = input[index] - ScsuConstants.SQ0);  						index ++;    						// Fall through  						goto default;    					default:  						uint ch;    						// Output as character  						if (input[index] < 128)  						{  							// Use static window  							ch = input[index] + ScsuConstants.StaticOffset[iStaticWindow];  							sb.Append((char)ch);  							outputLength++;  						}  						else  						{  							// Use dynamic window  							ch = input[index];  							ch -= 0x80;                // Reduce to range 00..7F  							ch += ScsuConstants.DynamicOffset[iDynamicWindow];  							  							if (ch < (1 << 16))  							{  								// In Unicode range' output directly  								sb.Append((char)ch);  								outputLength++;  							}  							else  							{  								// Compute and append the two surrogates:  								// Translate from 10000..10FFFF to 0..FFFFF  								ch -= 0x10000;    								// High surrogate = top 10 bits added to D800  								sb.Append((char)(0xD800 + (ch >> 10)));  								outputLength++;    								// Low surrogate = bottom 10 bits added to DC00  								sb.Append((char)(0xDC00 + (ch & ~0xFC00)));  								outputLength++;  							}  						}  						break;    					// Define a dynamic window as extended  					case ScsuConstants.SDX:  						index += 2;  						if (index >= input.Length)  							continue;    						defineExtendedWindow(charFromTwoBytes(input[index - 1]' input[index]));  						break;    					// Position a dynamic Window  					case ScsuConstants.SD0:  					case ScsuConstants.SD1:  					case ScsuConstants.SD2:  					case ScsuConstants.SD3:  					case ScsuConstants.SD4:  					case ScsuConstants.SD5:  					case ScsuConstants.SD6:  					case ScsuConstants.SD7:  						index ++;  						if (index >= input.Length)  							continue;    						defineWindow((uint)(input[index - 1] - ScsuConstants.SD0)' input[index]);  						break;    					// Select a new dynamic Window  					case ScsuConstants.SC0:  					case ScsuConstants.SC1:  					case ScsuConstants.SC2:  					case ScsuConstants.SC3:  					case ScsuConstants.SC4:  					case ScsuConstants.SC5:  					case ScsuConstants.SC6:  					case ScsuConstants.SC7:  						activeWindow = (uint)(input[index] - ScsuConstants.SC0);  						break;    					case ScsuConstants.SCU:  						// Switch to Unicode mode and continue parsing  						index = expandUnicode(input' index + 1' sb);  						break;    					case ScsuConstants.SQU:  						// Directly extract one Unicode character  						index += 2;  						if (index >= input.Length)  							continue;    						char cha = charFromTwoBytes(input[index - 1]' input[index]);    						sb.Append(cha);  						outputLength++;  						break;    					case ScsuConstants.Srs:  						throw new IllegalInputException();  				}
