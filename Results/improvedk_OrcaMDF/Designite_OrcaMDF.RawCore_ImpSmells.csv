Implementation smell,Namespace,Class,File,Method,Description
Long Statement,OrcaMDF.RawCore,RawColumnParser,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\RawColumnParser.cs,Parse,The length of the statement  "				record.VariableLengthOffsetValues != null ? record.VariableLengthOffsetValues.Select(x => x.ToArray()).ToArray() : null' " is 120.
Empty Catch Block,OrcaMDF.RawCore,RawColumnParser,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\RawColumnParser.cs,BestEffortParse,The method has an empty catch block.
Magic Number,OrcaMDF.RawCore,RawColumnParser,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\RawColumnParser.cs,Parse,The following statement contains a magic number: int bitByteBitIndex = 8;
Magic Number,OrcaMDF.RawCore,RawColumnParser,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\RawColumnParser.cs,Parse,The following statement contains a magic number: foreach (var type in schema)  			{  				object value = null;    				// Is it a fixed length or a variable length type?  				if (type is IRawFixedLengthType)  				{  					var fixedType = (IRawFixedLengthType)type;    					if (fixedType is RawBit)  					{  						// Bits need to special care since they don't always consume bytes from the fixed length data stream  						if (bitByteBitIndex == 8)  						{  							bitByte = fixedLengthData.Skip(fixedIndex).Take(1).Single();  							fixedIndex++;  							bitByteBitIndex = 0;  						}    						value = (bitByte & (1 << bitByteBitIndex++)) != 0;  					}  					else  					{  						// Whereas any other fixed length column type is straightforward  						value = fixedType.GetValue(fixedLengthData.Skip(fixedIndex).Take(fixedType.Length).ToArray());  						fixedIndex += fixedType.Length;  					}  				}  				else  				{  					var variableType = (IRawVariableLengthType)type;    					// We may have schema columns that haven't been persisted' in which case we'll simply miss certain  					// variable length offset entries from the record completely. These can only be at the end. If we're  					// missing a value' it's an implicit null (ignoring 2012's ability to have non-persisted default values).  					if (variableLengthData != null && variableIndex < variableLengthData.Length)  					{  						value = variableType.GetValue(variableLengthData[variableIndex++]);  					}  					else  					{  						// If there is no variable length data for this column' and it's not null' it's empty  						value = variableType.EmptyValue;  					}  				}    				// If null bitmap indicates a null value' overwrite the previously found value  				if (nullBitmap[nullBitmapIndex++])  					value = null;    				result.Add(type.Name' value);  			}
Magic Number,OrcaMDF.RawCore,RawDataFile,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\RawDataFile.cs,GetPageBytes,The following statement contains a magic number: stream.Seek(pageID * 8192' SeekOrigin.Begin);
Magic Number,OrcaMDF.RawCore,RawDataFile,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\RawDataFile.cs,GetPageBytes,The following statement contains a magic number: var bytes = new byte[8192];
Magic Number,OrcaMDF.RawCore,RawDataFile,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\RawDataFile.cs,GetPageBytes,The following statement contains a magic number: stream.Read(bytes' 0' 8192);
Magic Number,OrcaMDF.RawCore.Records,RawIndexRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawIndexRecord.cs,RawIndexRecord,The following statement contains a magic number: NullBitmapRawBytes = new ArrayDelimiter<byte>(bytes.SourceArray' FixedLengthData.Offset + FixedLengthData.Count + 2' (NullBitmapColumnCount + 7) / 8);
Magic Number,OrcaMDF.RawCore.Records,RawIndexRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawIndexRecord.cs,RawIndexRecord,The following statement contains a magic number: NullBitmapRawBytes = new ArrayDelimiter<byte>(bytes.SourceArray' FixedLengthData.Offset + FixedLengthData.Count + 2' (NullBitmapColumnCount + 7) / 8);
Magic Number,OrcaMDF.RawCore.Records,RawIndexRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawIndexRecord.cs,RawIndexRecord,The following statement contains a magic number: NullBitmapRawBytes = new ArrayDelimiter<byte>(bytes.SourceArray' FixedLengthData.Offset + FixedLengthData.Count + 2' (NullBitmapColumnCount + 7) / 8);
Magic Number,OrcaMDF.RawCore.Records,RawIndexRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawIndexRecord.cs,RawIndexRecord,The following statement contains a magic number: if (HasVariableLengthColumns)  			{  				int endOfNullBitmapPointer = 1 + FixedLengthData.Count + 2 + NullBitmapRawBytes.Count;    				// Number of pointers  				NumberOfVariableLengthOffsetArrayEntries = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer);    				// Pointers  				VariableLengthOffsetArray = new List<short>();  				for (int i = 0; i < NumberOfVariableLengthOffsetArrayEntries; i++)  					VariableLengthOffsetArray.Add(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer + 2 + i * 2));    				// Values  				int endOfVariableLengthOffsetArrayPointer = endOfNullBitmapPointer + 2 + NumberOfVariableLengthOffsetArrayEntries.Value * 2;  				int previousPointer = endOfVariableLengthOffsetArrayPointer;    				VariableLengthOffsetValues = new List<ArrayDelimiter<byte>>();  				foreach (short entry in VariableLengthOffsetArray)  				{  					VariableLengthOffsetValues.Add(new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + previousPointer' entry - previousPointer));  					previousPointer = entry;  				}  			}
Magic Number,OrcaMDF.RawCore.Records,RawIndexRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawIndexRecord.cs,RawIndexRecord,The following statement contains a magic number: if (HasVariableLengthColumns)  			{  				int endOfNullBitmapPointer = 1 + FixedLengthData.Count + 2 + NullBitmapRawBytes.Count;    				// Number of pointers  				NumberOfVariableLengthOffsetArrayEntries = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer);    				// Pointers  				VariableLengthOffsetArray = new List<short>();  				for (int i = 0; i < NumberOfVariableLengthOffsetArrayEntries; i++)  					VariableLengthOffsetArray.Add(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer + 2 + i * 2));    				// Values  				int endOfVariableLengthOffsetArrayPointer = endOfNullBitmapPointer + 2 + NumberOfVariableLengthOffsetArrayEntries.Value * 2;  				int previousPointer = endOfVariableLengthOffsetArrayPointer;    				VariableLengthOffsetValues = new List<ArrayDelimiter<byte>>();  				foreach (short entry in VariableLengthOffsetArray)  				{  					VariableLengthOffsetValues.Add(new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + previousPointer' entry - previousPointer));  					previousPointer = entry;  				}  			}
Magic Number,OrcaMDF.RawCore.Records,RawIndexRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawIndexRecord.cs,RawIndexRecord,The following statement contains a magic number: if (HasVariableLengthColumns)  			{  				int endOfNullBitmapPointer = 1 + FixedLengthData.Count + 2 + NullBitmapRawBytes.Count;    				// Number of pointers  				NumberOfVariableLengthOffsetArrayEntries = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer);    				// Pointers  				VariableLengthOffsetArray = new List<short>();  				for (int i = 0; i < NumberOfVariableLengthOffsetArrayEntries; i++)  					VariableLengthOffsetArray.Add(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer + 2 + i * 2));    				// Values  				int endOfVariableLengthOffsetArrayPointer = endOfNullBitmapPointer + 2 + NumberOfVariableLengthOffsetArrayEntries.Value * 2;  				int previousPointer = endOfVariableLengthOffsetArrayPointer;    				VariableLengthOffsetValues = new List<ArrayDelimiter<byte>>();  				foreach (short entry in VariableLengthOffsetArray)  				{  					VariableLengthOffsetValues.Add(new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + previousPointer' entry - previousPointer));  					previousPointer = entry;  				}  			}
Magic Number,OrcaMDF.RawCore.Records,RawIndexRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawIndexRecord.cs,RawIndexRecord,The following statement contains a magic number: if (HasVariableLengthColumns)  			{  				int endOfNullBitmapPointer = 1 + FixedLengthData.Count + 2 + NullBitmapRawBytes.Count;    				// Number of pointers  				NumberOfVariableLengthOffsetArrayEntries = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer);    				// Pointers  				VariableLengthOffsetArray = new List<short>();  				for (int i = 0; i < NumberOfVariableLengthOffsetArrayEntries; i++)  					VariableLengthOffsetArray.Add(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer + 2 + i * 2));    				// Values  				int endOfVariableLengthOffsetArrayPointer = endOfNullBitmapPointer + 2 + NumberOfVariableLengthOffsetArrayEntries.Value * 2;  				int previousPointer = endOfVariableLengthOffsetArrayPointer;    				VariableLengthOffsetValues = new List<ArrayDelimiter<byte>>();  				foreach (short entry in VariableLengthOffsetArray)  				{  					VariableLengthOffsetValues.Add(new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + previousPointer' entry - previousPointer));  					previousPointer = entry;  				}  			}
Magic Number,OrcaMDF.RawCore.Records,RawIndexRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawIndexRecord.cs,RawIndexRecord,The following statement contains a magic number: if (HasVariableLengthColumns)  			{  				int endOfNullBitmapPointer = 1 + FixedLengthData.Count + 2 + NullBitmapRawBytes.Count;    				// Number of pointers  				NumberOfVariableLengthOffsetArrayEntries = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer);    				// Pointers  				VariableLengthOffsetArray = new List<short>();  				for (int i = 0; i < NumberOfVariableLengthOffsetArrayEntries; i++)  					VariableLengthOffsetArray.Add(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer + 2 + i * 2));    				// Values  				int endOfVariableLengthOffsetArrayPointer = endOfNullBitmapPointer + 2 + NumberOfVariableLengthOffsetArrayEntries.Value * 2;  				int previousPointer = endOfVariableLengthOffsetArrayPointer;    				VariableLengthOffsetValues = new List<ArrayDelimiter<byte>>();  				foreach (short entry in VariableLengthOffsetArray)  				{  					VariableLengthOffsetValues.Add(new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + previousPointer' entry - previousPointer));  					previousPointer = entry;  				}  			}
Magic Number,OrcaMDF.RawCore.Records,RawIndexRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawIndexRecord.cs,RawIndexRecord,The following statement contains a magic number: if (level > 0)  			{  				ChildPageID = BitConverter.ToInt32(bytes.SourceArray' bytes.Offset + 1 + FixedLengthData.Count - 6);  				ChildFileID = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + 1 + FixedLengthData.Count - 2);  			}
Magic Number,OrcaMDF.RawCore.Records,RawIndexRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawIndexRecord.cs,RawIndexRecord,The following statement contains a magic number: if (level > 0)  			{  				ChildPageID = BitConverter.ToInt32(bytes.SourceArray' bytes.Offset + 1 + FixedLengthData.Count - 6);  				ChildFileID = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + 1 + FixedLengthData.Count - 2);  			}
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: FixedLengthSize = (short)(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + 2) - 4);
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: FixedLengthSize = (short)(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + 2) - 4);
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: FixedLengthData = new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + 4' FixedLengthSize);
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: NullBitmapColumnCount = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + 4 + FixedLengthSize);
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: NullBitmapRawBytes = new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + 4 + FixedLengthSize + 2' (NullBitmapColumnCount + 7) / 8);
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: NullBitmapRawBytes = new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + 4 + FixedLengthSize + 2' (NullBitmapColumnCount + 7) / 8);
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: NullBitmapRawBytes = new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + 4 + FixedLengthSize + 2' (NullBitmapColumnCount + 7) / 8);
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: NullBitmapRawBytes = new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + 4 + FixedLengthSize + 2' (NullBitmapColumnCount + 7) / 8);
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: if (HasVariableLengthColumns)  			{  				int endOfNullBitmapPointer = 4 + FixedLengthSize + 2 + NullBitmapRawBytes.Count;  				  				// Number of pointers  				NumberOfVariableLengthOffsetArrayEntries = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer);  				  				// Pointers  				VariableLengthOffsetArray = new List<short>();  				for (int i = 0; i < NumberOfVariableLengthOffsetArrayEntries; i++)  					VariableLengthOffsetArray.Add(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer + 2 + i * 2));    				// Values  				int endOfVariableLengthOffsetArrayPointer = endOfNullBitmapPointer + 2 + NumberOfVariableLengthOffsetArrayEntries.Value * 2;  				int previousPointer = endOfVariableLengthOffsetArrayPointer;    				VariableLengthOffsetValues = new List<ArrayDelimiter<byte>>();  				foreach (short entry in VariableLengthOffsetArray)  				{  					VariableLengthOffsetValues.Add(new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + previousPointer' entry - previousPointer));  					previousPointer = entry;  				}  			}
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: if (HasVariableLengthColumns)  			{  				int endOfNullBitmapPointer = 4 + FixedLengthSize + 2 + NullBitmapRawBytes.Count;  				  				// Number of pointers  				NumberOfVariableLengthOffsetArrayEntries = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer);  				  				// Pointers  				VariableLengthOffsetArray = new List<short>();  				for (int i = 0; i < NumberOfVariableLengthOffsetArrayEntries; i++)  					VariableLengthOffsetArray.Add(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer + 2 + i * 2));    				// Values  				int endOfVariableLengthOffsetArrayPointer = endOfNullBitmapPointer + 2 + NumberOfVariableLengthOffsetArrayEntries.Value * 2;  				int previousPointer = endOfVariableLengthOffsetArrayPointer;    				VariableLengthOffsetValues = new List<ArrayDelimiter<byte>>();  				foreach (short entry in VariableLengthOffsetArray)  				{  					VariableLengthOffsetValues.Add(new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + previousPointer' entry - previousPointer));  					previousPointer = entry;  				}  			}
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: if (HasVariableLengthColumns)  			{  				int endOfNullBitmapPointer = 4 + FixedLengthSize + 2 + NullBitmapRawBytes.Count;  				  				// Number of pointers  				NumberOfVariableLengthOffsetArrayEntries = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer);  				  				// Pointers  				VariableLengthOffsetArray = new List<short>();  				for (int i = 0; i < NumberOfVariableLengthOffsetArrayEntries; i++)  					VariableLengthOffsetArray.Add(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer + 2 + i * 2));    				// Values  				int endOfVariableLengthOffsetArrayPointer = endOfNullBitmapPointer + 2 + NumberOfVariableLengthOffsetArrayEntries.Value * 2;  				int previousPointer = endOfVariableLengthOffsetArrayPointer;    				VariableLengthOffsetValues = new List<ArrayDelimiter<byte>>();  				foreach (short entry in VariableLengthOffsetArray)  				{  					VariableLengthOffsetValues.Add(new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + previousPointer' entry - previousPointer));  					previousPointer = entry;  				}  			}
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: if (HasVariableLengthColumns)  			{  				int endOfNullBitmapPointer = 4 + FixedLengthSize + 2 + NullBitmapRawBytes.Count;  				  				// Number of pointers  				NumberOfVariableLengthOffsetArrayEntries = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer);  				  				// Pointers  				VariableLengthOffsetArray = new List<short>();  				for (int i = 0; i < NumberOfVariableLengthOffsetArrayEntries; i++)  					VariableLengthOffsetArray.Add(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer + 2 + i * 2));    				// Values  				int endOfVariableLengthOffsetArrayPointer = endOfNullBitmapPointer + 2 + NumberOfVariableLengthOffsetArrayEntries.Value * 2;  				int previousPointer = endOfVariableLengthOffsetArrayPointer;    				VariableLengthOffsetValues = new List<ArrayDelimiter<byte>>();  				foreach (short entry in VariableLengthOffsetArray)  				{  					VariableLengthOffsetValues.Add(new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + previousPointer' entry - previousPointer));  					previousPointer = entry;  				}  			}
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: if (HasVariableLengthColumns)  			{  				int endOfNullBitmapPointer = 4 + FixedLengthSize + 2 + NullBitmapRawBytes.Count;  				  				// Number of pointers  				NumberOfVariableLengthOffsetArrayEntries = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer);  				  				// Pointers  				VariableLengthOffsetArray = new List<short>();  				for (int i = 0; i < NumberOfVariableLengthOffsetArrayEntries; i++)  					VariableLengthOffsetArray.Add(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer + 2 + i * 2));    				// Values  				int endOfVariableLengthOffsetArrayPointer = endOfNullBitmapPointer + 2 + NumberOfVariableLengthOffsetArrayEntries.Value * 2;  				int previousPointer = endOfVariableLengthOffsetArrayPointer;    				VariableLengthOffsetValues = new List<ArrayDelimiter<byte>>();  				foreach (short entry in VariableLengthOffsetArray)  				{  					VariableLengthOffsetValues.Add(new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + previousPointer' entry - previousPointer));  					previousPointer = entry;  				}  			}
Magic Number,OrcaMDF.RawCore.Records,RawPrimaryRecord,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Records\RawPrimaryRecord.cs,RawPrimaryRecord,The following statement contains a magic number: if (HasVariableLengthColumns)  			{  				int endOfNullBitmapPointer = 4 + FixedLengthSize + 2 + NullBitmapRawBytes.Count;  				  				// Number of pointers  				NumberOfVariableLengthOffsetArrayEntries = BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer);  				  				// Pointers  				VariableLengthOffsetArray = new List<short>();  				for (int i = 0; i < NumberOfVariableLengthOffsetArrayEntries; i++)  					VariableLengthOffsetArray.Add(BitConverter.ToInt16(bytes.SourceArray' bytes.Offset + endOfNullBitmapPointer + 2 + i * 2));    				// Values  				int endOfVariableLengthOffsetArrayPointer = endOfNullBitmapPointer + 2 + NumberOfVariableLengthOffsetArrayEntries.Value * 2;  				int previousPointer = endOfVariableLengthOffsetArrayPointer;    				VariableLengthOffsetValues = new List<ArrayDelimiter<byte>>();  				foreach (short entry in VariableLengthOffsetArray)  				{  					VariableLengthOffsetValues.Add(new ArrayDelimiter<byte>(bytes.SourceArray' bytes.Offset + previousPointer' entry - previousPointer));  					previousPointer = entry;  				}  			}
Magic Number,OrcaMDF.RawCore.Types,RawDecimal,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDecimal.cs,getNumberOfRequiredStorageInts,The following statement contains a magic number: if (precision <= 9)  				return 1;
Magic Number,OrcaMDF.RawCore.Types,RawDecimal,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDecimal.cs,getNumberOfRequiredStorageInts,The following statement contains a magic number: if (precision <= 19)  				return 2;
Magic Number,OrcaMDF.RawCore.Types,RawDecimal,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDecimal.cs,getNumberOfRequiredStorageInts,The following statement contains a magic number: if (precision <= 19)  				return 2;
Magic Number,OrcaMDF.RawCore.Types,RawDecimal,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDecimal.cs,getNumberOfRequiredStorageInts,The following statement contains a magic number: if (precision <= 28)  				return 3;
Magic Number,OrcaMDF.RawCore.Types,RawDecimal,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDecimal.cs,getNumberOfRequiredStorageInts,The following statement contains a magic number: if (precision <= 28)  				return 3;
Magic Number,OrcaMDF.RawCore.Types,RawDecimal,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDecimal.cs,getNumberOfRequiredStorageInts,The following statement contains a magic number: return 4;
Magic Number,OrcaMDF.RawCore.Types,RawDecimal,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDecimal.cs,GetValue,The following statement contains a magic number: var ints = new int[4];
Magic Number,OrcaMDF.RawCore.Types,RawDecimal,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDecimal.cs,GetValue,The following statement contains a magic number: for (int i = 0; i < getNumberOfRequiredStorageInts(); i++)  				ints[i] = BitConverter.ToInt32(bytes' 1 + i * 4);
Magic Number,OrcaMDF.RawCore.Types,RawDate,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDate.cs,GetValue,The following statement contains a magic number: int date = (bytes[2] << 16) + (bytes[1] << 8) + bytes[0];
Magic Number,OrcaMDF.RawCore.Types,RawDate,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDate.cs,GetValue,The following statement contains a magic number: int date = (bytes[2] << 16) + (bytes[1] << 8) + bytes[0];
Magic Number,OrcaMDF.RawCore.Types,RawDate,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDate.cs,GetValue,The following statement contains a magic number: int date = (bytes[2] << 16) + (bytes[1] << 8) + bytes[0];
Magic Number,OrcaMDF.RawCore.Types,RawDateTime,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDateTime.cs,GetValue,The following statement contains a magic number: int date = BitConverter.ToInt32(bytes' 4);
Magic Number,OrcaMDF.RawCore.Types,RawDateTime,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawDateTime.cs,GetValue,The following statement contains a magic number: return new DateTime(1900' 1' 1).AddMilliseconds(time * CLOCK_TICK_MS).AddDays(date);
Magic Number,OrcaMDF.RawCore.Types,RawNChar,C:\repos\improvedk_OrcaMDF\src\OrcaMDF.RawCore\Types\RawNChar.cs,RawNChar,The following statement contains a magic number: Length = (short)(length * 2);
