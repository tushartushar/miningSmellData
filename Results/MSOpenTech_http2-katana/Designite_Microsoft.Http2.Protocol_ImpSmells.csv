Implementation smell,Namespace,Class,File,Method,Description
Long Method,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,HandlePushPromiseFrame,The method has 105 lines of code.
Long Method,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,DispatchIncomingFrame,The method has 128 lines of code.
Complex Method,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,HandlePushPromiseFrame,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,Http2Session,Cyclomatic complexity of the method is 9
Complex Method,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,Close,Cyclomatic complexity of the method is 11
Long Parameter List,Microsoft.Http2.Protocol.Framing,PushPromiseFrame,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\PushPromiseFrame.cs,PushPromiseFrame,The method has 5 parameters. Parameters: streamId' promisedStreamId' hasPadding' isEndHeaders' headers
Long Parameter List,Microsoft.Http2.Protocol.Framing,HeadersFrame,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\HeadersFrame.cs,HeadersFrame,The method has 5 parameters. Parameters: streamId' hasPadding' streamDependency' weight' exclusive
Long Parameter List,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,Http2Session,The method has 8 parameters. Parameters: stream' end' usePriorities' useFlowControl' isSecure' cancel' initialWindowSize' maxConcurrentStreams
Long Parameter List,Microsoft.Http2.Protocol,Http2Stream,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Stream.cs,Http2Stream,The method has 5 parameters. Parameters: headers' id' writeQueue' flowCrtlManager' priority
Long Identifier,Microsoft.Http2.Protocol,Constants,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Constants.cs,,The length of the parameter InitialFlowControlOptionsValue is 30.
Long Identifier,Microsoft.Http2.Protocol.Compression.HeadersDeltaCompression,CompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HeadersDeltaCompression\CompressionProcessor\CompressionProcessor.cs,,The length of the parameter _isSettingHeaderTableSizeReceived is 33.
Long Statement,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,HandleWindowUpdateFrame,The length of the statement  "                throw new ProtocolError(ResetStatusCode.FlowControlError' String.Format("Incorrect window update delta : {0}"' windowUpdateFrame.Delta)); " is 137.
Long Statement,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,GetSessionHeaderAndVerifyIt,The length of the statement  "                throw new TimeoutException(String.Format("Session header was not received in timeout {0}"' incomingClient.ReadTimeout)); " is 120.
Long Statement,Microsoft.Http2.Protocol.Utils,Http2Logger,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Utils\Http2Logger.cs,LogError,The length of the statement  "                string outString = string.Format("[{0}] ThreadId:{1} ERROR: {2}"' DateTime.Now' Thread.CurrentThread.ManagedThreadId' errString); " is 129.
Long Statement,Microsoft.Http2.Protocol.Utils,Http2Logger,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Utils\Http2Logger.cs,LogDebug,The length of the statement  "                string outString = string.Format("[{0}] ThreadId:{1} DBG: {2}"' DateTime.Now' Thread.CurrentThread.ManagedThreadId' debugString); " is 129.
Complex Conditional,Microsoft.Http2.Protocol.Framing,HeadersSequence,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\HeadersSequence.cs,AddHeaders,The conditional expression  "(newFrame is HeadersFrame && newFrame.IsEndHeaders)                  || (newFrame is ContinuationFrame && newFrame.IsEndHeaders)                  || newFrame is PushPromiseFrame && (newFrame as PushPromiseFrame).IsEndHeaders"  is complex.
Complex Conditional,Microsoft.Http2.Protocol,ForbiddenHeaders,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\ForbiddenHeaders.cs,HasForbiddenHeader,The conditional expression  "header.Key.Equals(Connection' StringComparison.OrdinalIgnoreCase)                      || header.Key.Equals(KeepAlive' StringComparison.OrdinalIgnoreCase)                      || header.Key.Equals(ProxyConnection' StringComparison.OrdinalIgnoreCase)                      || header.Key.Equals(TE' StringComparison.OrdinalIgnoreCase)                      || header.Key.Equals(TransferEncoding' StringComparison.OrdinalIgnoreCase)                      || header.Key.Equals(Upgrade' StringComparison.OrdinalIgnoreCase)"  is complex.
Complex Conditional,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,HandleWindowUpdateFrame,The conditional expression  "!(stream.Opened || stream.HalfClosedRemote || stream.HalfClosedLocal || stream.Closed)"  is complex.
Complex Conditional,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,HandlePushPromiseFrame,The conditional expression  "frame.StreamId % 2 == 0                  || frame.PromisedStreamId == 0                  || (frame.PromisedStreamId % 2) != 0                  || frame.PromisedStreamId < _lastPromisedId                  || !((StreamDictionary[frame.StreamId].Opened || StreamDictionary[frame.StreamId].HalfClosedLocal))"  is complex.
Empty Catch Block,Microsoft.Http2.Protocol,Http2MessageHandler,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2MessageHandler.cs,StartSessionAsync,The method has an empty catch block.
Magic Number,Microsoft.Http2.Protocol.Framing,ContinuationFrame,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\ContinuationFrame.cs,ContinuationFrame,The following statement contains a magic number: if (hasPadding)              {                  // generate padding                  var padHigh = (byte) 1;                  var padLow = (byte) new Random().Next(1' 7);                  int padLength = padHigh * 256 + padLow;                    // construct frame with padding                  Buffer = new byte[Constants.FramePreambleSize + PadHighLowLength + headers.Length + padLength];                  HasPadHigh = true;                  HasPadLow = true;                  PadHigh = padHigh;                  PadLow = padLow;                  PayloadLength = PadHighLowLength + headers.Length + padLength;                    System.Buffer.BlockCopy(headers' 0' Buffer' Constants.FramePreambleSize + PadHighLowLength' headers.Length);              }              else              {                  // construct frame without padding                  Buffer = new byte[Constants.FramePreambleSize + headers.Length];                  PayloadLength = headers.Length;                    System.Buffer.BlockCopy(headers' 0' Buffer' Constants.FramePreambleSize' headers.Length);              }
Magic Number,Microsoft.Http2.Protocol.Framing,ContinuationFrame,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\ContinuationFrame.cs,ContinuationFrame,The following statement contains a magic number: if (hasPadding)              {                  // generate padding                  var padHigh = (byte) 1;                  var padLow = (byte) new Random().Next(1' 7);                  int padLength = padHigh * 256 + padLow;                    // construct frame with padding                  Buffer = new byte[Constants.FramePreambleSize + PadHighLowLength + headers.Length + padLength];                  HasPadHigh = true;                  HasPadLow = true;                  PadHigh = padHigh;                  PadLow = padLow;                  PayloadLength = PadHighLowLength + headers.Length + padLength;                    System.Buffer.BlockCopy(headers' 0' Buffer' Constants.FramePreambleSize + PadHighLowLength' headers.Length);              }              else              {                  // construct frame without padding                  Buffer = new byte[Constants.FramePreambleSize + headers.Length];                  PayloadLength = headers.Length;                    System.Buffer.BlockCopy(headers' 0' Buffer' Constants.FramePreambleSize' headers.Length);              }
Magic Number,Microsoft.Http2.Protocol.Framing,PushPromiseFrame,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\PushPromiseFrame.cs,PushPromiseFrame,The following statement contains a magic number: if (hasPadding)              {                  // generate padding                  var padHigh = (byte)1;                  var padLow = (byte)new Random().Next(1' 7);                    HasPadHigh = true;                  HasPadLow = true;                  PadHigh = padHigh;                  PadLow = padLow;              }
Magic Number,Microsoft.Http2.Protocol.Framing,DataFrame,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\DataFrame.cs,DataFrame,The following statement contains a magic number: if (hasPadding)              {                  // generate padding                  var padHigh = (byte) 1;                  var padLow = (byte) new Random().Next(1' 7);                  int padLength = padHigh * 256 + padLow;                    // construct frame with padding                  Buffer = new byte[Constants.FramePreambleSize + PadHighLowLength + data.Count + padLength];                  HasPadHigh = true;                  HasPadLow = true;                  PadHigh = padHigh;                  PadLow = padLow;                  PayloadLength = PadHighLowLength + data.Count + padLength;                    System.Buffer.BlockCopy(data.Array' data.Offset' Buffer' Constants.FramePreambleSize + PadHighLowLength' data.Count);              }              else              {                  // construct frame without padding                  Buffer = new byte[Constants.FramePreambleSize + data.Count];                  PayloadLength = data.Count;                                   System.Buffer.BlockCopy(data.Array' data.Offset' Buffer' Constants.FramePreambleSize' data.Count);              }
Magic Number,Microsoft.Http2.Protocol.Framing,DataFrame,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\DataFrame.cs,DataFrame,The following statement contains a magic number: if (hasPadding)              {                  // generate padding                  var padHigh = (byte) 1;                  var padLow = (byte) new Random().Next(1' 7);                  int padLength = padHigh * 256 + padLow;                    // construct frame with padding                  Buffer = new byte[Constants.FramePreambleSize + PadHighLowLength + data.Count + padLength];                  HasPadHigh = true;                  HasPadLow = true;                  PadHigh = padHigh;                  PadLow = padLow;                  PayloadLength = PadHighLowLength + data.Count + padLength;                    System.Buffer.BlockCopy(data.Array' data.Offset' Buffer' Constants.FramePreambleSize + PadHighLowLength' data.Count);              }              else              {                  // construct frame without padding                  Buffer = new byte[Constants.FramePreambleSize + data.Count];                  PayloadLength = data.Count;                                   System.Buffer.BlockCopy(data.Array' data.Offset' Buffer' Constants.FramePreambleSize' data.Count);              }
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,SetBit,The following statement contains a magic number: Contract.Assert(offset <= 7);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,SetBit,The following statement contains a magic number: Contract.Assert(offset <= 7);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,GetBit,The following statement contains a magic number: Contract.Assert(offset <= 7);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,GetBit,The following statement contains a magic number: return (input >> offset) % 2 == 1;
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,GetHigh3BitsAt,The following statement contains a magic number: return ((0xE0 & buffer[offset]) >> 5);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,SetHigh3BitsAt,The following statement contains a magic number: Contract.Assert(value >= 0 && value <= 7);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,SetHigh3BitsAt,The following statement contains a magic number: byte upper3Bits = (byte)(value << 5);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get15BitsAt,The following statement contains a magic number: return (highByte << 8) | buffer[offset + 1];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set15BitsAt,The following statement contains a magic number: buffer[offset] |= (byte)((value >> 8) & 0x7F);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get16BitsAt,The following statement contains a magic number: return (buffer[offset] << 8) | buffer[offset + 1];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set16BitsAt,The following statement contains a magic number: buffer[offset] = (byte)(value >> 8);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get24BitsAt,The following statement contains a magic number: Contract.Assert(offset >= 0 && offset + 2 < buffer.Length);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get24BitsAt,The following statement contains a magic number: return (buffer[offset] << 16) | (buffer[offset + 1] << 8) | buffer[offset + 2];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get24BitsAt,The following statement contains a magic number: return (buffer[offset] << 16) | (buffer[offset + 1] << 8) | buffer[offset + 2];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get24BitsAt,The following statement contains a magic number: return (buffer[offset] << 16) | (buffer[offset + 1] << 8) | buffer[offset + 2];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set24BitsAt,The following statement contains a magic number: Contract.Assert(offset >= 0 && offset + 2 < buffer.Length);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set24BitsAt,The following statement contains a magic number: buffer[offset] = (byte)(value >> 16);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set24BitsAt,The following statement contains a magic number: buffer[offset + 1] = (byte)(value >> 8);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set24BitsAt,The following statement contains a magic number: buffer[offset + 2] = (byte)value;
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get31BitsAt,The following statement contains a magic number: Contract.Assert(offset >= 0 && offset + 3 < buffer.Length);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get31BitsAt,The following statement contains a magic number: return (highByte << 24)                  | buffer[offset + 1] << 16                  | buffer[offset + 2] << 8                  | buffer[offset + 3];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get31BitsAt,The following statement contains a magic number: return (highByte << 24)                  | buffer[offset + 1] << 16                  | buffer[offset + 2] << 8                  | buffer[offset + 3];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get31BitsAt,The following statement contains a magic number: return (highByte << 24)                  | buffer[offset + 1] << 16                  | buffer[offset + 2] << 8                  | buffer[offset + 3];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get31BitsAt,The following statement contains a magic number: return (highByte << 24)                  | buffer[offset + 1] << 16                  | buffer[offset + 2] << 8                  | buffer[offset + 3];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get31BitsAt,The following statement contains a magic number: return (highByte << 24)                  | buffer[offset + 1] << 16                  | buffer[offset + 2] << 8                  | buffer[offset + 3];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set31BitsAt,The following statement contains a magic number: Contract.Assert(offset >= 0 && offset + 3 < buffer.Length);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set31BitsAt,The following statement contains a magic number: buffer[offset] |= (byte)((value >> 24) & 0x7F);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set31BitsAt,The following statement contains a magic number: buffer[offset + 1] = (byte)(value >> 16);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set31BitsAt,The following statement contains a magic number: buffer[offset + 2] = (byte)(value >> 8);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set31BitsAt,The following statement contains a magic number: buffer[offset + 2] = (byte)(value >> 8);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set31BitsAt,The following statement contains a magic number: buffer[offset + 3] = (byte)value;
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get32BitsAt,The following statement contains a magic number: Contract.Assert(offset >= 0 && offset + 3 < buffer.Length);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get32BitsAt,The following statement contains a magic number: return (buffer[offset] << 24)                  | buffer[offset + 1] << 16                  | buffer[offset + 2] << 8                  | buffer[offset + 3];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get32BitsAt,The following statement contains a magic number: return (buffer[offset] << 24)                  | buffer[offset + 1] << 16                  | buffer[offset + 2] << 8                  | buffer[offset + 3];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get32BitsAt,The following statement contains a magic number: return (buffer[offset] << 24)                  | buffer[offset + 1] << 16                  | buffer[offset + 2] << 8                  | buffer[offset + 3];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get32BitsAt,The following statement contains a magic number: return (buffer[offset] << 24)                  | buffer[offset + 1] << 16                  | buffer[offset + 2] << 8                  | buffer[offset + 3];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Get32BitsAt,The following statement contains a magic number: return (buffer[offset] << 24)                  | buffer[offset + 1] << 16                  | buffer[offset + 2] << 8                  | buffer[offset + 3];
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set32BitsAt,The following statement contains a magic number: Contract.Assert(offset >= 0 && offset + 3 < buffer.Length);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set32BitsAt,The following statement contains a magic number: buffer[offset] = (byte)(value >> 24);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set32BitsAt,The following statement contains a magic number: buffer[offset + 1] = (byte)(value >> 16);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set32BitsAt,The following statement contains a magic number: buffer[offset + 2] = (byte)(value >> 8);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set32BitsAt,The following statement contains a magic number: buffer[offset + 2] = (byte)(value >> 8);
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,Set32BitsAt,The following statement contains a magic number: buffer[offset + 3] = (byte)value;
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,SerializeHeaderBlock,The following statement contains a magic number: int encodedLength = 4 // 32 bit count of name value pairs                  + 8 * pairs.Count;
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,SerializeHeaderBlock,The following statement contains a magic number: int encodedLength = 4 // 32 bit count of name value pairs                  + 8 * pairs.Count;
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,SerializeHeaderBlock,The following statement contains a magic number: int offset = 4;
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,SerializeHeaderBlock,The following statement contains a magic number: foreach (var key in pairs.Keys)              {                  Set32BitsAt(buffer' offset' key.Length);                  offset += 4;                  SetAsciiAt(buffer' offset' key);                  offset += key.Length;                  Set32BitsAt(buffer' offset' pairs[key].Length);                  offset += 4;                  SetAsciiAt(buffer' offset' pairs[key]);                  offset += pairs[key].Length;              }
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,SerializeHeaderBlock,The following statement contains a magic number: foreach (var key in pairs.Keys)              {                  Set32BitsAt(buffer' offset' key.Length);                  offset += 4;                  SetAsciiAt(buffer' offset' key);                  offset += key.Length;                  Set32BitsAt(buffer' offset' pairs[key].Length);                  offset += 4;                  SetAsciiAt(buffer' offset' pairs[key]);                  offset += pairs[key].Length;              }
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,DeserializeHeaderBlock,The following statement contains a magic number: offset += 4;
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,DeserializeHeaderBlock,The following statement contains a magic number: for (int i = 0; i < headerCount; i++)              {                  int keyLength = Get32BitsAt(rawHeaders' offset);                  Contract.Assert(keyLength > 0);                  offset += 4;                  string key = GetAsciiAt(rawHeaders' offset' keyLength);                  offset += keyLength;                  int valueLength = Get32BitsAt(rawHeaders' offset);                  offset += 4;                  string value = GetAsciiAt(rawHeaders' offset' valueLength);                  offset += valueLength;                    headers.Add(key' value);              }
Magic Number,Microsoft.Http2.Protocol.Framing,FrameHelper,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\FrameHelper.cs,DeserializeHeaderBlock,The following statement contains a magic number: for (int i = 0; i < headerCount; i++)              {                  int keyLength = Get32BitsAt(rawHeaders' offset);                  Contract.Assert(keyLength > 0);                  offset += 4;                  string key = GetAsciiAt(rawHeaders' offset' keyLength);                  offset += keyLength;                  int valueLength = Get32BitsAt(rawHeaders' offset);                  offset += 4;                  string value = GetAsciiAt(rawHeaders' offset' valueLength);                  offset += valueLength;                    headers.Add(key' value);              }
Magic Number,Microsoft.Http2.Protocol.Framing,HeadersFrame,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Framing\HeadersFrame.cs,HeadersFrame,The following statement contains a magic number: if (hasPadding)              {                  // generate padding                  var padHigh = (byte) 1;                  var padLow = (byte) new Random().Next(1' 7);                    HasPadHigh = true;                  HasPadLow = true;                  PadHigh = padHigh;                  PadLow = padLow;              }
Magic Number,Microsoft.Http2.Protocol,StreamDictionary,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\StreamDictionary.cs,GetOpenedStreamsBy,The following statement contains a magic number: if (end == ConnectionEnd.Client)              {                  return FlowControlledStreams.Count(element => element.Key % 2 != 0) +                         NonFlowControlledStreams.Count(element => element.Key % 2 != 0);              }
Magic Number,Microsoft.Http2.Protocol,StreamDictionary,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\StreamDictionary.cs,GetOpenedStreamsBy,The following statement contains a magic number: if (end == ConnectionEnd.Client)              {                  return FlowControlledStreams.Count(element => element.Key % 2 != 0) +                         NonFlowControlledStreams.Count(element => element.Key % 2 != 0);              }
Magic Number,Microsoft.Http2.Protocol,StreamDictionary,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\StreamDictionary.cs,GetOpenedStreamsBy,The following statement contains a magic number: return FlowControlledStreams.Count(element => element.Key % 2 == 0) +                     NonFlowControlledStreams.Count(element => element.Key % 2 == 0);
Magic Number,Microsoft.Http2.Protocol,StreamDictionary,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\StreamDictionary.cs,GetOpenedStreamsBy,The following statement contains a magic number: return FlowControlledStreams.Count(element => element.Key % 2 == 0) +                     NonFlowControlledStreams.Count(element => element.Key % 2 == 0);
Magic Number,Microsoft.Http2.Protocol,HeadersSequenceList,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\HeadersSequenceList.cs,HeadersSequenceList,The following statement contains a magic number: _collection = initialCollection != null ?                               new List<HeadersSequence>(initialCollection) :                               new List<HeadersSequence>(64);
Magic Number,Microsoft.Http2.Protocol,HeadersList,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\HeadersList.cs,Add,The following statement contains a magic number: lock (_modificationLock)              {                  _collection.Add(header);                  StoredHeadersSize += header.Key.Length + header.Value.Length + 32;              }
Magic Number,Microsoft.Http2.Protocol,HeadersList,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\HeadersList.cs,Remove,The following statement contains a magic number: lock (_modificationLock)              {                  StoredHeadersSize -= header.Key.Length + header.Value.Length + 32;                  return _collection.Remove(header);              }
Magic Number,Microsoft.Http2.Protocol,HeadersList,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\HeadersList.cs,Insert,The following statement contains a magic number: lock (_modificationLock)              {                  Contract.Assert(index >= 0 && (index == 0 || index < Count));                  StoredHeadersSize += header.Key.Length + header.Value.Length + 32;                  _collection.Insert(index' header);              }
Magic Number,Microsoft.Http2.Protocol,HeadersList,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\HeadersList.cs,RemoveAt,The following statement contains a magic number: lock (_modificationLock)              {                  Contract.Assert(index >= 0 && index < Count);                  var header = _collection[index];                  _collection.RemoveAt(index);                  StoredHeadersSize -= header.Key.Length + header.Value.Length + 32;              }
Magic Number,Microsoft.Http2.Protocol,HeadersList,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\HeadersList.cs,RemoveAll,The following statement contains a magic number: lock (_modificationLock)              {                    var predMatch = _collection.FindAll(predicate);                  int toDeleteSize = predMatch.Sum(header => header.Key.Length + header.Value.Length + 32);                  StoredHeadersSize -= toDeleteSize;                    return _collection.RemoveAll(predicate);              }
Magic Number,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,HandlePushPromiseFrame,The following statement contains a magic number: if (frame.StreamId % 2 == 0                  || frame.PromisedStreamId == 0                  || (frame.PromisedStreamId % 2) != 0                  || frame.PromisedStreamId < _lastPromisedId                  || !((StreamDictionary[frame.StreamId].Opened || StreamDictionary[frame.StreamId].HalfClosedLocal)))              {                   throw new ProtocolError(ResetStatusCode.ProtocolError' "Incorrect Promised Stream id");              }
Magic Number,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,HandlePushPromiseFrame,The following statement contains a magic number: if (frame.StreamId % 2 == 0                  || frame.PromisedStreamId == 0                  || (frame.PromisedStreamId % 2) != 0                  || frame.PromisedStreamId < _lastPromisedId                  || !((StreamDictionary[frame.StreamId].Opened || StreamDictionary[frame.StreamId].HalfClosedLocal)))              {                   throw new ProtocolError(ResetStatusCode.ProtocolError' "Incorrect Promised Stream id");              }
Magic Number,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,Http2Session,The following statement contains a magic number: if (_ourEnd == ConnectionEnd.Client)              {                  _remoteEnd = ConnectionEnd.Server;                  _lastId = -1; // Streams opened by client are odd                    //if we got unsecure connection then server will respond with id == 1. We cant initiate                   //new stream with id == 1.                  if (!(stream is SslStream))                  {                      _lastId = 3;                  }              }              else              {                  _remoteEnd = ConnectionEnd.Client;                  _lastId = 0; // Streams opened by server are even              }
Magic Number,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,GetNextId,The following statement contains a magic number: _lastId += 2;
Magic Number,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,WriteSettings,The following statement contains a magic number: if (!isAck && !_settingsAckReceived.WaitOne(60000))              {                  WriteGoAway(ResetStatusCode.SettingsTimeout);                  Dispose();              }
Magic Number,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,Ping,The following statement contains a magic number: if (!_pingReceived.WaitOne(3000))              {                  //Remote endpoint was not answer at time.                  Dispose();              }
Magic Number,Microsoft.Http2.Protocol,Http2Session,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Session\Http2SessionFrameHandling.cs,Close,The following statement contains a magic number: if (!_goAwayReceived)              {                  WriteGoAway(status);                    //TODO fix delay. wait for goAway send and then dispose WriteQueue                  //Wait for GoAway send                  using (var goAwayDelay = new ManualResetEvent(false))                  {                      goAwayDelay.WaitOne(500);                  }              }
Magic Number,Microsoft.Http2.Protocol,Http2Stream,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Stream.cs,Http2Stream,The following statement contains a magic number: _unshippedFrames = new Queue<DataFrame>(16);
Magic Number,Microsoft.Http2.Protocol,Http2Stream,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Stream.cs,WritePushPromise,The following statement contains a magic number: if (Id % 2 != 0 && promisedId % 2 != 0)                  throw new InvalidOperationException("Client cant send push_promise frames");
Magic Number,Microsoft.Http2.Protocol,Http2Stream,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2Stream.cs,WritePushPromise,The following statement contains a magic number: if (Id % 2 != 0 && promisedId % 2 != 0)                  throw new InvalidOperationException("Client cant send push_promise frames");
Magic Number,Microsoft.Http2.Protocol.Compression.HeadersDeltaCompression,CompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HeadersDeltaCompression\CompressionProcessor\CompressionProcessor.cs,CompressionProcessor,The following statement contains a magic number: _maxHeaderByteSize = 4096;
Magic Number,Microsoft.Http2.Protocol.Compression.HeadersDeltaCompression,CompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HeadersDeltaCompression\CompressionProcessor\CompressionProcessor.cs,InsertToHeadersTable,The following statement contains a magic number: int headerLen = header.Key.Length + header.Value.Length + 32;
Magic Number,Microsoft.Http2.Protocol.Compression.HeadersDeltaCompression,CompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HeadersDeltaCompression\CompressionProcessor\CompressionProcessor.cs,EncodeString,The following statement contains a magic number: const byte prefix = 7;
Magic Number,Microsoft.Http2.Protocol.Compression.HeadersDeltaCompression,CompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HeadersDeltaCompression\CompressionProcessor\CompressionProcessor.cs,CompressIncremental,The following statement contains a magic number: using (var stream = new MemoryStream(64))              {                  byte[] indexBinary;                  byte[] nameBinary = new byte[0];                  byte[] valueBinary;                    if (isFound)                  {                      // Header key was found in the header table. Hence we should encode only value                      indexBinary = (index + 1).ToUVarInt(prefix);                      valueBinary = EncodeString(header.Value' true);                  }                  else                  {                      // Header key was not found in the header table. Hence we should encode name and value                      indexBinary = 0.ToUVarInt(prefix);                      nameBinary = EncodeString(header.Key' true);                      valueBinary = EncodeString(header.Value' true);                  }                    // Set without index type                  indexBinary[0] |= (byte)IndexationType.Incremental;                    stream.Write(indexBinary' 0' indexBinary.Length);                  stream.Write(nameBinary' 0' nameBinary.Length);                  stream.Write(valueBinary' 0' valueBinary.Length);                    WriteToOutput(stream.GetBuffer()' 0' (int)stream.Position);              }
Magic Number,Microsoft.Http2.Protocol.Compression.HeadersDeltaCompression,CompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HeadersDeltaCompression\CompressionProcessor\CompressionProcessor.cs,ProcessCookie,The following statement contains a magic number: if (cookie.Length > 0)              {                  // Add without last delimeter                  toProcess.Add(new KeyValuePair<string' string>(CommonHeaders.Cookie'                                                                 cookie.ToString(cookie.Length - 2' 2)));              }
Magic Number,Microsoft.Http2.Protocol.Compression.HeadersDeltaCompression,CompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HeadersDeltaCompression\CompressionProcessor\CompressionProcessor.cs,ProcessCookie,The following statement contains a magic number: if (cookie.Length > 0)              {                  // Add without last delimeter                  toProcess.Add(new KeyValuePair<string' string>(CommonHeaders.Cookie'                                                                 cookie.ToString(cookie.Length - 2' 2)));              }
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,ToBits,The following statement contains a magic number: var result = new bool[bytes.Length * 8];
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,ToBits,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  for (byte j = 0; j < 8; j++)                  {                      result[i*8 + j] = GetBit(bytes[i]' (byte)(7 - j));                  }              }
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,ToBits,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  for (byte j = 0; j < 8; j++)                  {                      result[i*8 + j] = GetBit(bytes[i]' (byte)(7 - j));                  }              }
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,ToBits,The following statement contains a magic number: for (int i = 0; i < bytes.Length; i++)              {                  for (byte j = 0; j < 8; j++)                  {                      result[i*8 + j] = GetBit(bytes[i]' (byte)(7 - j));                  }              }
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,ToBytes,The following statement contains a magic number: var result = new byte[bools.Count % 8 == 0 ? bools.Count / 8 : bools.Count / 8 + 1];
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,ToBytes,The following statement contains a magic number: var result = new byte[bools.Count % 8 == 0 ? bools.Count / 8 : bools.Count / 8 + 1];
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,ToBytes,The following statement contains a magic number: var result = new byte[bools.Count % 8 == 0 ? bools.Count / 8 : bools.Count / 8 + 1];
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,ToBytes,The following statement contains a magic number: byte count = 8;
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,ToBytes,The following statement contains a magic number: while (count != 0)              {                  result[resIndex++] = GetByte(bools' offset' count);                  offset += count;                  int roffset = bools.Count - offset;                  count = roffset >= 8 ? (byte)8 : (byte)roffset;              }
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,ToBytes,The following statement contains a magic number: while (count != 0)              {                  result[resIndex++] = GetByte(bools' offset' count);                  offset += count;                  int roffset = bools.Count - offset;                  count = roffset >= 8 ? (byte)8 : (byte)roffset;              }
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,GetByte,The following statement contains a magic number: if (count > 8)                  throw new ArgumentException("byte is 8 bits");
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,GetByte,The following statement contains a magic number: byte bitIndex = 7;
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BinaryConverter,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BinaryConverter.cs,GetBit,The following statement contains a magic number: if (pos > 7)                  throw new ArgumentOutOfRangeException("pos > 7");
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,BitTree,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\BitTree.cs,IsValidPadding,The following statement contains a magic number: if (symbolBits.Count >= 8)              {                  return false;              }
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,HuffmanCompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\HuffmanCompressor.cs,Compress,The following statement contains a magic number: int temp = 8 - huffmanEncodedMessage.Count % 8;
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,HuffmanCompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\HuffmanCompressor.cs,Compress,The following statement contains a magic number: int temp = 8 - huffmanEncodedMessage.Count % 8;
Magic Number,Microsoft.Http2.Protocol.Compression.Huffman,HuffmanCompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HuffmanCompression\HuffmanCompressor.cs,Compress,The following statement contains a magic number: int numberOfBitsInPadding = temp == 8 ? 0 : temp;
Magic Number,Microsoft.Http2.Protocol.Extensions,Int32Extensions,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Extensions\Int32Extensions.cs,ToUVarInt,The following statement contains a magic number: Contract.Assert(prefix <= 7);
Magic Number,Microsoft.Http2.Protocol.IO,WriteQueue,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\IO\WriteQueue.cs,PumpToStream,The following statement contains a magic number: while (!_disposed)              {                  if (cancel.IsCancellationRequested)                      cancel.ThrowIfCancellationRequested();                    // send one at a time                  lock (_writeLock)                  {                      if (_messageQueue.Count > 0)                      {                          var entry = _messageQueue.Dequeue();                            /* see https://github.com/MSOpenTech/http2-katana/issues/55                          It's critically important to keep compression context before sending                          headers frame. Since that we are unable to construct headers frame with                           compressed headers block as part of the frame's Buffer' because Queue has                           prioritization mechanism and we must compress headers list immediately before                          sending it. */                          if (IsPriorityTurnedOn && entry.Frame is IHeadersFrame && entry.Frame is IPaddingFrame)                          {                              /* There are two frame types bears Headers Block Fragment: HEADERS and PUSH_PROMISE                              and CONTINUATION' which implements IHeadersFrame interface. It can include additional                               padding as well. Since that we call to interface methods to avoid code redundant. */                                // frame reconstruction: headers compression                              var headers = (entry.Frame as IHeadersFrame).Headers;                              var compressedHeaders = _proc.Compress(headers);                              entry.Frame.PayloadLength += compressedHeaders.Length;                              // frame reconstruction: add padding                              var paddingFrame = entry.Frame as IPaddingFrame;                              byte[] padding = new byte[paddingFrame.PadHigh * 256 + paddingFrame.PadLow];                              entry.Frame.PayloadLength += padding.Length;                                if (entry.Frame is HeadersFrame)                              {                                  var headersFrame = entry.Frame as HeadersFrame;                                  Http2Logger.LogDebug("Sending HEADERS frame: stream id={0}' payload len={1}' " +                                                  "has pad={2}' pad high={3}' pad low={4}' end stream={5}' " +                                                  "has priority={6}' exclusive={7}' dependency={8}' weight={9}"'                                  headersFrame.StreamId' headersFrame.PayloadLength' headersFrame.HasPadding'                                  headersFrame.PadHigh' headersFrame.PadLow' headersFrame.IsEndStream'                                  headersFrame.HasPriority' headersFrame.Exclusive' headersFrame.StreamDependency'                                  headersFrame.Weight);                              }                              if (entry.Frame is PushPromiseFrame)                              {                                  var pushPromiseFrame = entry.Frame as PushPromiseFrame;                                  Http2Logger.LogDebug("Sending PUSH_PROMISE frame: stream id={0}' payload len={1}' " +                                                       "promised id={2}' has pad={3}' pad high={4}' pad low={5}' end headers={6}"'                                  pushPromiseFrame.StreamId' pushPromiseFrame.PayloadLength'                                  pushPromiseFrame.PromisedStreamId' pushPromiseFrame.HasPadding'                                  pushPromiseFrame.PadHigh' pushPromiseFrame.PadLow' pushPromiseFrame.IsEndHeaders);                                               }                              if (entry.Frame is ContinuationFrame)                              {                                  var contFrame = entry.Frame as ContinuationFrame;                                  Http2Logger.LogDebug("Sending CONTINUATION frame: stream id={0}' payload len={1}' has pad={2}' " +                                                       "pad high={3}' pad low={4}' end headers={5}"' contFrame.StreamId'                                  contFrame.PayloadLength' contFrame.HasPadding' contFrame.PadHigh' contFrame.PadLow'                                   contFrame.IsEndHeaders);                              }                                // write frame preamble                              _stream.Write(entry.Buffer' 0' entry.Buffer.Length);                              // write compressed Headers Block                              _stream.Write(compressedHeaders' 0' compressedHeaders.Length);                              // write frame padding                              _stream.Write(padding' 0' padding.Length);                          }                          else                          {                              _stream.Write(entry.Buffer' 0' entry.Buffer.Length);                          }                      }                      else                      {                          Thread.Sleep(10);                      }                  }                    _stream.Flush();              }
Magic Number,Microsoft.Http2.Protocol.IO,WriteQueue,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\IO\WriteQueue.cs,PumpToStream,The following statement contains a magic number: while (!_disposed)              {                  if (cancel.IsCancellationRequested)                      cancel.ThrowIfCancellationRequested();                    // send one at a time                  lock (_writeLock)                  {                      if (_messageQueue.Count > 0)                      {                          var entry = _messageQueue.Dequeue();                            /* see https://github.com/MSOpenTech/http2-katana/issues/55                          It's critically important to keep compression context before sending                          headers frame. Since that we are unable to construct headers frame with                           compressed headers block as part of the frame's Buffer' because Queue has                           prioritization mechanism and we must compress headers list immediately before                          sending it. */                          if (IsPriorityTurnedOn && entry.Frame is IHeadersFrame && entry.Frame is IPaddingFrame)                          {                              /* There are two frame types bears Headers Block Fragment: HEADERS and PUSH_PROMISE                              and CONTINUATION' which implements IHeadersFrame interface. It can include additional                               padding as well. Since that we call to interface methods to avoid code redundant. */                                // frame reconstruction: headers compression                              var headers = (entry.Frame as IHeadersFrame).Headers;                              var compressedHeaders = _proc.Compress(headers);                              entry.Frame.PayloadLength += compressedHeaders.Length;                              // frame reconstruction: add padding                              var paddingFrame = entry.Frame as IPaddingFrame;                              byte[] padding = new byte[paddingFrame.PadHigh * 256 + paddingFrame.PadLow];                              entry.Frame.PayloadLength += padding.Length;                                if (entry.Frame is HeadersFrame)                              {                                  var headersFrame = entry.Frame as HeadersFrame;                                  Http2Logger.LogDebug("Sending HEADERS frame: stream id={0}' payload len={1}' " +                                                  "has pad={2}' pad high={3}' pad low={4}' end stream={5}' " +                                                  "has priority={6}' exclusive={7}' dependency={8}' weight={9}"'                                  headersFrame.StreamId' headersFrame.PayloadLength' headersFrame.HasPadding'                                  headersFrame.PadHigh' headersFrame.PadLow' headersFrame.IsEndStream'                                  headersFrame.HasPriority' headersFrame.Exclusive' headersFrame.StreamDependency'                                  headersFrame.Weight);                              }                              if (entry.Frame is PushPromiseFrame)                              {                                  var pushPromiseFrame = entry.Frame as PushPromiseFrame;                                  Http2Logger.LogDebug("Sending PUSH_PROMISE frame: stream id={0}' payload len={1}' " +                                                       "promised id={2}' has pad={3}' pad high={4}' pad low={5}' end headers={6}"'                                  pushPromiseFrame.StreamId' pushPromiseFrame.PayloadLength'                                  pushPromiseFrame.PromisedStreamId' pushPromiseFrame.HasPadding'                                  pushPromiseFrame.PadHigh' pushPromiseFrame.PadLow' pushPromiseFrame.IsEndHeaders);                                               }                              if (entry.Frame is ContinuationFrame)                              {                                  var contFrame = entry.Frame as ContinuationFrame;                                  Http2Logger.LogDebug("Sending CONTINUATION frame: stream id={0}' payload len={1}' has pad={2}' " +                                                       "pad high={3}' pad low={4}' end headers={5}"' contFrame.StreamId'                                  contFrame.PayloadLength' contFrame.HasPadding' contFrame.PadHigh' contFrame.PadLow'                                   contFrame.IsEndHeaders);                              }                                // write frame preamble                              _stream.Write(entry.Buffer' 0' entry.Buffer.Length);                              // write compressed Headers Block                              _stream.Write(compressedHeaders' 0' compressedHeaders.Length);                              // write frame padding                              _stream.Write(padding' 0' padding.Length);                          }                          else                          {                              _stream.Write(entry.Buffer' 0' entry.Buffer.Length);                          }                      }                      else                      {                          Thread.Sleep(10);                      }                  }                    _stream.Flush();              }
Missing Default,Microsoft.Http2.Protocol,Http2MessageHandler,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Http2MessageHandler.cs,OnFrameReceivedHandler,The following switch statement is missing a default case: switch (frame.FrameType)              {                  case FrameType.Headers:                      if (ForbiddenHeaders.HasForbiddenHeader(stream.Headers))                      {                          stream.WriteRst(ResetStatusCode.ProtocolError);                          return;                      }                      ProcessRequest(stream' frame);                      break;                  case FrameType.Data:                      ProcessIncomingData(stream' frame);                      break;                  case FrameType.Settings:                      ProcessSettings(frame as SettingsFrame);                      break;              }
Missing Default,Microsoft.Http2.Protocol.Compression.HeadersDeltaCompression,CompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HeadersDeltaCompression\CompressionProcessor\CompressionProcessor.cs,ParseHeader,The following switch statement is missing a default case: switch (type)              {                  case IndexationType.Indexed:                      return ProcessIndexed(index);                  case IndexationType.Incremental:                      return ProcessIncremental(bytes' index);                  case IndexationType.EncodingContextUpdate:                      return ProcessEncodingContextUpdate(index' changeTypeFlag);                  case IndexationType.NeverIndexed:                      return ProcessNeverIndexed(bytes' index);                  case IndexationType.WithoutIndexation:                      return ProcessWithoutIndexing(bytes' index);              }
Missing Default,Microsoft.Http2.Protocol.Compression.HeadersDeltaCompression,CompressionProcessor,C:\repos\MSOpenTech_http2-katana\src\Libraries\Microsoft.Http2.Protocol\Compression\HeadersDeltaCompression\CompressionProcessor\CompressionProcessor.cs,GetIndex,The following switch statement is missing a default case: switch (type)              {                  case IndexationType.Incremental:                      prefix = (byte)UVarIntPrefix.Incremental;                      break;                  case IndexationType.WithoutIndexation:                      prefix = (byte)UVarIntPrefix.WithoutIndexing;                      break;                  case IndexationType.Indexed:                      prefix = (byte)UVarIntPrefix.Indexed;                      break;                  case IndexationType.EncodingContextUpdate:                      prefix = (byte)UVarIntPrefix.EncodingContextUpdate;                      break;                  case IndexationType.NeverIndexed:                      prefix = (byte) UVarIntPrefix.NeverIndexed;                      break;              }
