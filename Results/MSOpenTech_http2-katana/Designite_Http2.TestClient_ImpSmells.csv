Implementation smell,Namespace,Class,File,Method,Description
Long Method,Http2.TestClient,Http2SessionHandler,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Http2SessionHandler.cs,Connect,The method has 101 lines of code.
Long Method,Http2.TestClient,Program,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Program.cs,Main,The method has 139 lines of code.
Complex Method,Http2.TestClient,Http2SessionHandler,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Http2SessionHandler.cs,Connect,Cyclomatic complexity of the method is 8
Complex Method,Http2.TestClient.CommandParser,CommandParser,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\CommandParser\CommandParser.cs,Parse,Cyclomatic complexity of the method is 14
Complex Method,Http2.TestClient.Commands,HelpCommand,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Commands\HelpCommand.cs,Parse,Cyclomatic complexity of the method is 10
Long Parameter List,Http2.TestClient.Handshake,UpgradeHandshaker,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Handshake\UpgradeHandshaker.cs,TryFindRangeMatch,The method has 5 parameters. Parameters: buffer' offset' limit' matchSequence' matchIndex
Long Parameter List,Client.IO,FileHelper,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\IO\FileHelper.cs,SaveToFile,The method has 5 parameters. Parameters: data' offset' count' path' append
Long Statement,Http2.TestClient,Http2SessionHandler,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Http2SessionHandler.cs,Connect,The length of the statement  "                    _sessionAdapter = new Http2ClientMessageHandler(_clientStream' ConnectionEnd.Client' _isSecure' CancellationToken.None);" is 120.
Long Statement,Http2.TestClient.CommandParser,HelpDisplayer,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\CommandParser\HelpDisplayer.cs,ShowMainMenuHelp,The length of the statement  "            Console.WriteLine("GET <resource url>                                       Download resource from the specified url.\n" +" is 122.
Long Statement,Http2.TestClient.Handshake,UpgradeHandshaker,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Handshake\UpgradeHandshaker.cs,Handshake,The length of the statement  "                builder.Append(String.Format("{0}: {1}' {2}\r\n"' CommonHeaders.Connection' CommonHeaders.Upgrade' CommonHeaders.Http2Settings));" is 129.
Long Statement,Http2.TestClient.Handshake,UpgradeHandshaker,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Handshake\UpgradeHandshaker.cs,InspectHanshake,The length of the statement  "                    response.IndexOf(String.Format("\r\n{0}: {1}' {2}\r\n"' CommonHeaders.Connection' CommonHeaders.Upgrade' CommonHeaders.Http2Settings)' " is 134.
Complex Conditional,Http2.TestClient.Commands,DeleteCommand,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Commands\DeleteCommand.cs,Parse,The conditional expression  "Uri.Port == securePort                 &&                 Uri.Scheme == Uri.UriSchemeHttp                 ||                 Uri.Port != securePort                 &&                 Uri.Scheme == Uri.UriSchemeHttps"  is complex.
Complex Conditional,Http2.TestClient.Commands,DirCommand,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Commands\DirCommand.cs,Parse,The conditional expression  "Uri.Port == securePort                 &&                 Uri.Scheme == Uri.UriSchemeHttp                 ||                 Uri.Port != securePort                 &&                 Uri.Scheme == Uri.UriSchemeHttps"  is complex.
Complex Conditional,Http2.TestClient.Commands,GetCommand,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Commands\GetCommand.cs,Parse,The conditional expression  "Uri.Port == securePort                 &&                  Uri.Scheme == Uri.UriSchemeHttp                 ||                 Uri.Port != securePort                 &&                  Uri.Scheme == Uri.UriSchemeHttps"  is complex.
Complex Conditional,Http2.TestClient.Commands,PostCommand,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Commands\PostCommand.cs,Parse,The conditional expression  "Uri.Port == securePort                 &&                  Uri.Scheme == Uri.UriSchemeHttp                 ||                 Uri.Port != securePort                 &&                  Uri.Scheme == Uri.UriSchemeHttps"  is complex.
Complex Conditional,Http2.TestClient.Commands,PutCommand,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Commands\PutCommand.cs,Parse,The conditional expression  "Uri.Port == securePort                 &&                  Uri.Scheme == Uri.UriSchemeHttp                 ||                 Uri.Port != securePort                 &&                  Uri.Scheme == Uri.UriSchemeHttps"  is complex.
Complex Conditional,Http2.TestClient.Handshake,UpgradeHandshaker,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Handshake\UpgradeHandshaker.cs,UpgradeHandshaker,The conditional expression  "handshakeEnvironment.ContainsKey(CommonHeaders.Host) || (handshakeEnvironment[CommonHeaders.Host] is string)                     || handshakeEnvironment.ContainsKey(CommonHeaders.Version) || (handshakeEnvironment[CommonHeaders.Version] is string)"  is complex.
Magic Number,Http2.TestClient,Program,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Program.cs,Main,The following statement contains a magic number: Console.SetWindowSize(125' 29);
Magic Number,Http2.TestClient,Program,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Program.cs,Main,The following statement contains a magic number: Console.SetWindowSize(125' 29);
Magic Number,Http2.TestClient,Program,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Program.cs,Main,The following statement contains a magic number: ThreadPool.SetMaxThreads(10' 10);
Magic Number,Http2.TestClient,Program,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Program.cs,Main,The following statement contains a magic number: ThreadPool.SetMaxThreads(10' 10);
Magic Number,Http2.TestClient,Program,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Program.cs,Main,The following statement contains a magic number: waitForTestsFinish.WaitOne(5000);
Magic Number,Http2.TestClient.Commands,PostCommand,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Commands\PostCommand.cs,Parse,The following statement contains a magic number: cmdArgs.Length != 2 || Uri.TryCreate(cmdArgs[0]' UriKind.Absolute' out _uri) == false                 || System.IO.Path.GetFileName(cmdArgs[0]) == String.Empty
Magic Number,Http2.TestClient.Commands,PutCommand,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Commands\PutCommand.cs,Parse,The following statement contains a magic number: cmdArgs.Length != 2 || Uri.TryCreate(cmdArgs[0]' UriKind.Absolute' out _uri) == false                 || System.IO.Path.GetFileName(cmdArgs[0]) == String.Empty
Magic Number,Http2.TestClient.Handshake,UpgradeHandshaker,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Handshake\UpgradeHandshaker.cs,Handshake,The following statement contains a magic number: var settingsPayload = String.Format("{0}' {1}"' 200000' 100);
Magic Number,Http2.TestClient.Handshake,UpgradeHandshaker,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Handshake\UpgradeHandshaker.cs,Handshake,The following statement contains a magic number: var settingsPayload = String.Format("{0}' {1}"' 200000' 100);
Magic Number,Http2.TestClient.Adapters,Http11ClientMessageHandler,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Adapters\Http11ClientMessageHandler.cs,ParseHeadersAndReadResponseBody,The following statement contains a magic number: var reasonPhrase = firstStr[2];
Magic Number,Http2.TestClient.Adapters,Http11ClientMessageHandler,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Adapters\Http11ClientMessageHandler.cs,ParseHeadersAndReadResponseBody,The following statement contains a magic number: statusCode == 200
Magic Number,Client.IO,FileHelper,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\IO\FileHelper.cs,FileHelper,The following statement contains a magic number: _pathStreamDict = new Dictionary<string' FileStream>(5);
Magic Number,Client.IO,FileHelper,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\IO\FileHelper.cs,GetFile,The following statement contains a magic number: string assemblyPath = Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase.Substring(8));
Missing Default,Http2.TestClient,Program,C:\research\architectureSmells\repos\MSOpenTech_http2-katana\tests\Http2.TestClient\Program.cs,Main,The following switch statement is missing a default case: switch (cmd.GetCmdType())                     {                         case CommandType.Put:                         case CommandType.Post:                         case CommandType.Get:                         case CommandType.Delete:                         case CommandType.Dir:                             Http2Logger.LogConsole("Uri command detected");                             var uriCmd = (IUriCommand) cmd;                              string method = uriCmd.Method;                              //Only unique sessions can be opened                             if (_sessions.ContainsKey(uriCmd.Uri.Authority))                             {                                 Http2Logger.LogConsole("Session already exists");                                 _sessions[uriCmd.Uri.Authority].SendRequestAsync(uriCmd.Uri' method);                                 break;                             }                              Http2Logger.LogConsole("Creating new session");                             var sessionHandler = new Http2SessionHandler(_environment);                             _sessions.Add(uriCmd.Uri.Authority' sessionHandler);                             sessionHandler.OnClosed +=                                 (sender' eventArgs) =>                                     {                                         _sessions.Remove(sessionHandler.ServerUri);                                         Http2Logger.LogDebug("Session deleted from collection: " + sessionHandler.ServerUri);                                          waitForTestsFinish.Set();                                     };                              //Get cmd is equivalent for connect -> get. This means' that each get request                              //will open new session.                             Console.WriteLine(uriCmd.Uri.ToString());                             bool success = sessionHandler.Connect(uriCmd.Uri);                             if (!success)                             {                                 Http2Logger.LogError("Connection failed");                                 break;                             }                              if (!sessionHandler.WasHttp1Used)                             {                                 sessionHandler.StartConnection();                                  if (sessionHandler.Protocol != SslProtocols.None)                                 {                                     sessionHandler.SendRequestAsync(uriCmd.Uri' method);                                 }                             }                             break;                         case CommandType.Help:                             ((HelpCommand) cmd).ShowHelp.Invoke();                             break;                         case CommandType.Ping:                             string url = ((PingCommand) cmd).Uri.Authority;                             if (_sessions.ContainsKey(url))                             {                                 _sessions[url].Ping();                             }                             else                             {                                 Http2Logger.LogError("Can't ping until session is opened.");                             }                             break;                         case CommandType.Exit:                              var sessionsDictCopy = new Dictionary<string' Http2SessionHandler>(_sessions);                             foreach (var sessionUri in sessionsDictCopy.Keys)                             {                                 sessionsDictCopy[sessionUri].Dispose(false);                             }                             sessionsDictCopy.Clear();                             return;                     }
