Implementation smell,Namespace,Class,File,Method,Description
Long Method,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The method has 197 lines of code.
Long Method,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Distorted,The method has 119 lines of code.
Complex Method,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,DataSetFilesAvailable,Cyclomatic complexity of the method is 8
Complex Method,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,Cyclomatic complexity of the method is 14
Complex Method,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,Cyclomatic complexity of the method is 14
Complex Method,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,Cyclomatic complexity of the method is 45
Long Parameter List,CNNWB.Data,DatasetDownloadInformation,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,DatasetDownloadInformation,The method has 5 parameters.
Long Parameter List,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The method has 7 parameters.
Long Parameter List,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The method has 6 parameters.
Long Parameter List,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The method has 6 parameters.
Long Parameter List,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Distorted,The method has 10 parameters.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,DataSetFilesAvailable,The length of the statement  "		if (!File.Exists (path + @"\data_batch_1.bin") || !File.Exists (path + @"\data_batch_2.bin") || !File.Exists (path + @"\data_batch_3.bin") || !File.Exists (path + @"\data_batch_4.bin") || !File.Exists (path + @"\data_batch_5.bin") || !File.Exists (path + @"\test_batch.bin") || !File.Exists (path + @"\batches.meta.txt")) " is 321.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,DataSetFilesAvailable,The length of the statement  "		if (!File.Exists (path + @"\t10k-labels-idx1-ubyte") || !File.Exists (path + @"\train-labels-idx1-ubyte") || !File.Exists (path + @"\t10k-images-idx3-ubyte") || !File.Exists (path + @"\train-images-idx3-ubyte")) " is 211.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTDataSet,The length of the statement  "	OnRaiseDataLoadedEvent (new DataProviderEventArgs (100' String.Format ("Dataset loaded at {0}"' DateTime.Now.ToString ())' stopwatch.Elapsed)); " is 143.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The length of the statement  "		using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) { " is 151.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The length of the statement  "			TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216); " is 124.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The length of the statement  "		using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) { " is 149.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The length of the statement  "		using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) { " is 149.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The length of the statement  "			TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216); " is 123.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The length of the statement  "		using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) { " is 147.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "		using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_1.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) { " is 144.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "		using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) { " is 144.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "		using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) { " is 144.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "		using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) { " is 144.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "		using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) { " is 144.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "		using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\test_batch.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) { " is 142.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "		OnRaiseDataProgressEvent (new DataProviderEventArgs ((int)(counter / 1200)' "CIFAR-10 Dataset loading..."' stopwatch.Elapsed)); " is 127.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	OnRaiseDataProgressEvent (new DataProviderEventArgs (70' String.Format ("Creating Training Samples...")' stopwatch.Elapsed)); " is 125.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//OnRaiseDataProgressEvent(new DataProviderEventArgs(60' String.Format("Creating Training Patterns...")' stopwatch.Elapsed)); " is 125.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//    CIFAR10TrainingPatterns[j] = CIFAR10TrainingPatterns[j - (2 * part)].GetReducedSample(RGBImageData.Position.TopRight' 24' 24).Resize(32' 32' RGBImageData.Interpolation.Bilinear); " is 184.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//OnRaiseDataProgressEvent(new DataProviderEventArgs(65' String.Format("Creating Training Patterns...")' stopwatch.Elapsed)); " is 125.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//    CIFAR10TrainingPatterns[j] = CIFAR10TrainingPatterns[j - (3 * part)].GetReducedSample(RGBImageData.Position.TopLeft' 24' 24).GetMirroredImage().Resize(32' 32' RGBImageData.Interpolation.Bilinear); " is 202.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//OnRaiseDataProgressEvent(new DataProviderEventArgs(70' String.Format("Creating Training Patterns...")' stopwatch.Elapsed)); " is 125.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//    CIFAR10TrainingPatterns[j] = CIFAR10TrainingPatterns[j - (4 * part)].GetReducedSample(RGBImageData.Position.BottomRight' 24' 24).Resize(32' 32' RGBImageData.Interpolation.Bilinear); " is 187.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//OnRaiseDataProgressEvent(new DataProviderEventArgs(75' String.Format("Creating Training Patterns...")' stopwatch.Elapsed)); " is 125.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//    CIFAR10TrainingPatterns[j] = CIFAR10TrainingPatterns[j - (5 * part)].GetReducedSample(RGBImageData.Position.BottomLeft' 24' 24).GetMirroredImage().Resize(32' 32' RGBImageData.Interpolation.Bilinear); " is 205.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//OnRaiseDataProgressEvent(new DataProviderEventArgs(80' String.Format("Creating Training Patterns...")' stopwatch.Elapsed)); " is 125.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//    CIFAR10TrainingPatterns[j] = CIFAR10TrainingPatterns[j - (6 * part)].GetReducedSample(RGBImageData.Position.Center' 24' 24).GetMirroredImage().Resize(32' 32' RGBImageData.Interpolation.Bilinear); " is 201.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//OnRaiseDataProgressEvent(new DataProviderEventArgs(85' String.Format("Creating Training Patterns...")' stopwatch.Elapsed)); " is 125.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	//    CIFAR10TrainingPatterns[j] = CIFAR10TrainingPatterns[j - (7 * part)].GetReducedSample(RGBImageData.Position.Center' 24' 24).Resize(32' 32' RGBImageData.Interpolation.Bilinear); " is 182.
Long Statement,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The length of the statement  "	OnRaiseDataLoadedEvent (new DataProviderEventArgs (100' String.Format ("Dataset loaded at {0}"' DateTime.Now.ToString ())' stopwatch.Elapsed)); " is 143.
Long Statement,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The length of the statement  "	return Resize (dataProvider.SampleWidth' dataProvider.SampleHeight' destWidth' destHeight' dataProvider.SampleChannels' interpolation); " is 135.
Long Statement,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,SubstractMean,The length of the statement  "			meanSubstractedSample [i + (c * dataProvider.SampleSize)] = ((double)Image [i + (c * dataProvider.SampleSize)] / 255D) - dataProvider.Mean [i + (c * dataProvider.SampleSize)]; " is 175.
Long Statement,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The length of the statement  "					destImage [x + (y * destWidth) + (c * destSize)] = Image [x + (dX - 1 + ((y + dY - 1) * sourceWidth)) + (c * sourceSize)]; " is 122.
Long Statement,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The length of the statement  "					destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)]; " is 134.
Long Statement,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The length of the statement  "	return Crop (position' dataProvider.SampleWidth' dataProvider.SampleHeight' destWidth' destHeight' dataProvider.SampleChannels); " is 128.
Long Statement,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Distorted,The length of the statement  "			GaussianKernel [(row * dataProvider.GaussianFieldSize) + col] = twoPiSigma * (MathUtil.Exp (-((((row - Mid) * (row - Mid)) + ((col - Mid) * (col - Mid))) * twoSigmaSquared))); " is 175.
Long Statement,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Distorted,The length of the statement  "					sourceValue = (w1 * (double)sourceImage [sCol + (sRow * dataProvider.SampleWidth) + (c * dataProvider.SampleSize)]) + (w2 * (double)sourceImage [(sRow * dataProvider.SampleWidth) + sColp1 + (c * dataProvider.SampleSize)]) + (w3 * (double)sourceImage [(sRowp1 * dataProvider.SampleWidth) + sCol + (c * dataProvider.SampleSize)]) + (w4 * (double)sourceImage [(sRowp1 * dataProvider.SampleWidth) + sColp1 + (c * dataProvider.SampleSize)]); " is 436.
Long Statement,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,GetBitmapSource,The length of the statement  "	return GetBitmapSource (dataProvider.SampleWidth' dataProvider.SampleHeight' dataProvider.SampleChannels' dataProvider.UsedPixelFormat); " is 136.
Complex Conditional,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,DataSetFilesAvailable,The conditional expression  "!File.Exists (path + @"\data_batch_1.bin") || !File.Exists (path + @"\data_batch_2.bin") || !File.Exists (path + @"\data_batch_3.bin") || !File.Exists (path + @"\data_batch_4.bin") || !File.Exists (path + @"\data_batch_5.bin") || !File.Exists (path + @"\test_batch.bin") || !File.Exists (path + @"\batches.meta.txt")"  is complex.
Complex Conditional,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,DataSetFilesAvailable,The conditional expression  "!File.Exists (path + @"\t10k-labels-idx1-ubyte") || !File.Exists (path + @"\train-labels-idx1-ubyte") || !File.Exists (path + @"\t10k-images-idx3-ubyte") || !File.Exists (path + @"\train-images-idx3-ubyte")"  is complex.
Complex Conditional,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Distorted,The conditional expression  "xxxDisp < 0 || xxxDisp >= dataProvider.SampleWidth || yyyDisp < 0 || yyyDisp >= dataProvider.SampleHeight"  is complex.
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTDataSet,The following statement contains a magic number: ClassCount = 10;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTDataSet,The following statement contains a magic number: SampleWidth = 32;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTDataSet,The following statement contains a magic number: SampleHeight = 32;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTDataSet,The following statement contains a magic number: GaussianFieldSize = 25;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTDataSet,The following statement contains a magic number: while (!tasks.TrueForAll (task => task.IsCompleted)) {  	OnRaiseDataProgressEvent (new DataProviderEventArgs ((int)(counter)' "MNIST Dataset loading..."' stopwatch.Elapsed));  	Thread.Sleep (10);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTDataSet,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTDataSet,The following statement contains a magic number: OnRaiseDataLoadedEvent (new DataProviderEventArgs (100' String.Format ("Dataset loaded at {0}"' DateTime.Now.ToString ())' stopwatch.Elapsed));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: try {  	byte[] TrainPatterns;  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTrainPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  		fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  	}  	byte[] TrainLabels;  	using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TrainLabels = new byte[TrainingSamplesCount];  		fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TrainingSamples = new ImageData[TrainingSamplesCount];  	RandomTrainingSample = new int[TrainingSamplesCount];  	counter += 25;  	Parallel.For (0' TrainingSamplesCount' ParallelOption' j =>  {  		RandomTrainingSample [j] = j;  		ImageData sample = new ImageData (TrainLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TrainPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TrainingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  	// Fix wrongly assigned numbers in the MNIST training dataset  	TrainingSamples [7080].Label = 5;  	TrainingSamples [10994].Label = 9;  	TrainingSamples [30751].Label = 0;  	TrainingSamples [35310].Label = 6;  	TrainingSamples [40144].Label = 3;  	TrainingSamples [43454].Label = 3;  	TrainingSamples [59915].Label = 7;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\train-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTrainPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TrainPatterns = new byte[TrainingSamplesCount * MNistSize];  	fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTrainPatterns.Read (TrainPatterns' 0' TrainingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: fileStreamTrainPatterns.Read (magicNumber' 0' 16);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: fileStreamTrainPatterns.Seek (16' SeekOrigin.Begin);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: using (FileStream fileStreamTrainLabels = System.IO.File.Open (path + @"\train-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	TrainLabels = new byte[TrainingSamplesCount];  	fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  	fileStreamTrainLabels.Read (TrainLabels' 0' TrainingSamplesCount);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: fileStreamTrainLabels.Seek (8' SeekOrigin.Begin);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: counter += 25;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: counter += 25;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [7080].Label = 5;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [7080].Label = 5;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [10994].Label = 9;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [10994].Label = 9;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [30751].Label = 0;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [35310].Label = 6;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [35310].Label = 6;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [40144].Label = 3;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [40144].Label = 3;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [43454].Label = 3;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [43454].Label = 3;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [59915].Label = 7;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTrainingSamples,The following statement contains a magic number: TrainingSamples [59915].Label = 7;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: try {  	byte[] TestPatterns;  	using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		byte[] magicNumber = new byte[16];  		fileStreamTestPatterns.Read (magicNumber' 0' 16);  		//DataType dataType = (DataType)magicNumber[2];  		//int dimensions = (int)magicNumber[3];  		TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  		MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  		MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  		MNistSize = MNistWidth * MNistHeight;  		TestPatterns = new byte[TestingSamplesCount * MNistSize];  		fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  		fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  	}  	byte[] TestLabels;  	using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		TestLabels = new byte[TestingSamplesCount];  		fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  		fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  	}  	int xOffset = (SampleWidth - MNistWidth) / 2;  	int yOffset = (SampleHeight - MNistHeight) / 2;  	TestingSamples = new ImageData[TestingSamplesCount];  	counter += 25;  	Parallel.For (0' TestingSamplesCount' ParallelOption' j =>  {  		ImageData sample = new ImageData (TestLabels [j]' new byte[SampleSize]);  		for (int i = 0; i < SampleSize; i++)  			sample.Image [i] = 0;  		for (int y = 0; y < MNistHeight; y++)  			for (int x = 0; x < MNistWidth; x++)  				sample.Image [(x + xOffset) + ((y + yOffset) * SampleWidth)] = TestPatterns [x + (y * MNistWidth) + (j * MNistSize)];  		TestingSamples [j] = sample;  		//.InvertColors(PatternWidth' PatternHeight' PatternChannels);  	});  	counter += 25;  }  catch (Exception) {  	throw;  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestPatterns = System.IO.File.Open (path + @"\t10k-images-idx3-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	byte[] magicNumber = new byte[16];  	fileStreamTestPatterns.Read (magicNumber' 0' 16);  	//DataType dataType = (DataType)magicNumber[2];  	//int dimensions = (int)magicNumber[3];  	TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  	MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  	MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  	MNistSize = MNistWidth * MNistHeight;  	TestPatterns = new byte[TestingSamplesCount * MNistSize];  	fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  	fileStreamTestPatterns.Read (TestPatterns' 0' TestingSamplesCount * MNistSize);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: fileStreamTestPatterns.Read (magicNumber' 0' 16);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: TestingSamplesCount = magicNumber [7] + (magicNumber [6] * 256) + (magicNumber [5] * 65536) + (magicNumber [4] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistHeight = magicNumber [11] + (magicNumber [10] * 256) + (magicNumber [9] * 65536) + (magicNumber [8] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: MNistWidth = magicNumber [15] + (magicNumber [14] * 256) + (magicNumber [13] * 65536) + (magicNumber [12] * 16777216);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: fileStreamTestPatterns.Seek (16' SeekOrigin.Begin);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: using (FileStream fileStreamTestLabels = System.IO.File.Open (path + @"\t10k-labels-idx1-ubyte"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	TestLabels = new byte[TestingSamplesCount];  	fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  	fileStreamTestLabels.Read (TestLabels' 0' TestingSamplesCount);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: fileStreamTestLabels.Seek (8' SeekOrigin.Begin);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: counter += 25;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadMNISTTestingSamples,The following statement contains a magic number: counter += 25;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: SampleWidth = 32;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: SampleHeight = 32;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: SampleChannels = 3;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: ClassCount = 10;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: GaussianFieldSize = 25;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_1.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Training [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_1.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Training [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_1.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Training [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_1.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Training [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_1.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Training [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_1.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Training [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_1.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Training [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_1.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	fileStreamTrainPatterns.Read (samples' 0' 30730000);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: fileStreamTrainPatterns.Read (samples' 0' 30730000);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 0; index < 10000; index++) {  	CIFAR10Training [index].Label = samples [3073 * index];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * index) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 0; index < 10000; index++) {  	CIFAR10Training [index].Label = samples [3073 * index];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * index) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 0; index < 10000; index++) {  	CIFAR10Training [index].Label = samples [3073 * index];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * index) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 0; index < 10000; index++) {  	CIFAR10Training [index].Label = samples [3073 * index];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * index) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 0; index < 10000; index++) {  	CIFAR10Training [index].Label = samples [3073 * index];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * index) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: CIFAR10Training [index].Label = samples [3073 * index];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * index) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * index) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: image [i] = samples [((3073 * index) + 1) + i];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 10000; index < 20000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 10000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 10000; index < 20000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 10000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 10000; index < 20000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 10000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 10000; index < 20000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 10000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 10000; index < 20000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 10000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 10000; index < 20000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 10000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 10000; index < 20000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 10000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 10000; index < 20000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 10000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 10000; index < 20000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 10000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 10000; index < 20000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 10000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_2.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	fileStreamTrainPatterns.Read (samples' 0' 30730000);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: fileStreamTrainPatterns.Read (samples' 0' 30730000);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 10000; index < 20000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 10000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 10000; index < 20000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 10000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 10000; index < 20000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 10000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 10000; index < 20000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 10000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 10000; index < 20000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 10000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 10000; index < 20000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 10000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 10000; index < 20000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 10000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 10000; index < 20000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 10000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: CIFAR10Training [index].Label = samples [3073 * (index - 10000)];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 10000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 10000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 10000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: image [i] = samples [((3073 * (index - 10000)) + 1) + i];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: image [i] = samples [((3073 * (index - 10000)) + 1) + i];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 20000; index < 30000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 20000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 20000; index < 30000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 20000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 20000; index < 30000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 20000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 20000; index < 30000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 20000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 20000; index < 30000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 20000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 20000; index < 30000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 20000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 20000; index < 30000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 20000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 20000; index < 30000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 20000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 20000; index < 30000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 20000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 20000; index < 30000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 20000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_3.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	fileStreamTrainPatterns.Read (samples' 0' 30730000);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: fileStreamTrainPatterns.Read (samples' 0' 30730000);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 20000; index < 30000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 20000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 20000; index < 30000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 20000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 20000; index < 30000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 20000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 20000; index < 30000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 20000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 20000; index < 30000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 20000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 20000; index < 30000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 20000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 20000; index < 30000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 20000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 20000; index < 30000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 20000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: CIFAR10Training [index].Label = samples [3073 * (index - 20000)];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 20000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 20000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 20000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: image [i] = samples [((3073 * (index - 20000)) + 1) + i];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: image [i] = samples [((3073 * (index - 20000)) + 1) + i];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 30000; index < 40000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 30000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 30000; index < 40000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 30000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 30000; index < 40000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 30000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 30000; index < 40000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 30000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 30000; index < 40000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 30000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 30000; index < 40000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 30000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 30000; index < 40000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 30000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 30000; index < 40000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 30000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 30000; index < 40000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 30000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 30000; index < 40000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 30000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_4.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	fileStreamTrainPatterns.Read (samples' 0' 30730000);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: fileStreamTrainPatterns.Read (samples' 0' 30730000);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 30000; index < 40000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 30000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 30000; index < 40000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 30000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 30000; index < 40000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 30000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 30000; index < 40000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 30000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 30000; index < 40000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 30000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 30000; index < 40000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 30000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 30000; index < 40000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 30000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 30000; index < 40000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 30000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: CIFAR10Training [index].Label = samples [3073 * (index - 30000)];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 30000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 30000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 30000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: image [i] = samples [((3073 * (index - 30000)) + 1) + i];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: image [i] = samples [((3073 * (index - 30000)) + 1) + i];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 40000; index < 50000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 40000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 40000; index < 50000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 40000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 40000; index < 50000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 40000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 40000; index < 50000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 40000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 40000; index < 50000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 40000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 40000; index < 50000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 40000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 40000; index < 50000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 40000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 40000; index < 50000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 40000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 40000; index < 50000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 40000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 40000; index < 50000; index++) {  		CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * (index - 40000)) + 1) + i];  		}  		CIFAR10Training [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\data_batch_5.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	fileStreamTrainPatterns.Read (samples' 0' 30730000);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: fileStreamTrainPatterns.Read (samples' 0' 30730000);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 40000; index < 50000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 40000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 40000; index < 50000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 40000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 40000; index < 50000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 40000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 40000; index < 50000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 40000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 40000; index < 50000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 40000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 40000; index < 50000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 40000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 40000; index < 50000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 40000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 40000; index < 50000; index++) {  	CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * (index - 40000)) + 1) + i];  	}  	CIFAR10Training [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: CIFAR10Training [index].Label = samples [3073 * (index - 40000)];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 40000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 40000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * (index - 40000)) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: image [i] = samples [((3073 * (index - 40000)) + 1) + i];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: image [i] = samples [((3073 * (index - 40000)) + 1) + i];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\test_batch.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Testing [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Testing [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\test_batch.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Testing [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Testing [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\test_batch.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Testing [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Testing [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\test_batch.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Testing [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Testing [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\test_batch.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Testing [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Testing [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\test_batch.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Testing [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Testing [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: tasks.Add (new Task (() =>  {  	byte[] samples = new byte[30730000];  	using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\test_batch.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  		fileStreamTrainPatterns.Read (samples' 0' 30730000);  	}  	for (int index = 0; index < 10000; index++) {  		CIFAR10Testing [index].Label = samples [3073 * index];  		byte[] image = new byte[3072];  		for (int i = 0; i < 3072; i++) {  			image [i] = samples [((3073 * index) + 1) + i];  		}  		CIFAR10Testing [index].Image = image;  		System.Threading.Interlocked.Increment (ref counter);  	}  }));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: using (FileStream fileStreamTrainPatterns = System.IO.File.Open (path + @"\test_batch.bin"' FileMode.Open' FileAccess.Read' FileShare.Read)) {  	fileStreamTrainPatterns.Read (samples' 0' 30730000);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: fileStreamTrainPatterns.Read (samples' 0' 30730000);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 0; index < 10000; index++) {  	CIFAR10Testing [index].Label = samples [3073 * index];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * index) + 1) + i];  	}  	CIFAR10Testing [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 0; index < 10000; index++) {  	CIFAR10Testing [index].Label = samples [3073 * index];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * index) + 1) + i];  	}  	CIFAR10Testing [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 0; index < 10000; index++) {  	CIFAR10Testing [index].Label = samples [3073 * index];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * index) + 1) + i];  	}  	CIFAR10Testing [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 0; index < 10000; index++) {  	CIFAR10Testing [index].Label = samples [3073 * index];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * index) + 1) + i];  	}  	CIFAR10Testing [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int index = 0; index < 10000; index++) {  	CIFAR10Testing [index].Label = samples [3073 * index];  	byte[] image = new byte[3072];  	for (int i = 0; i < 3072; i++) {  		image [i] = samples [((3073 * index) + 1) + i];  	}  	CIFAR10Testing [index].Image = image;  	System.Threading.Interlocked.Increment (ref counter);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: CIFAR10Testing [index].Label = samples [3073 * index];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * index) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: for (int i = 0; i < 3072; i++) {  	image [i] = samples [((3073 * index) + 1) + i];  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: image [i] = samples [((3073 * index) + 1) + i];  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: while (!tasks.TrueForAll (task => task.IsCompleted)) {  	OnRaiseDataProgressEvent (new DataProviderEventArgs ((int)(counter / 1200)' "CIFAR-10 Dataset loading..."' stopwatch.Elapsed));  	Thread.Sleep (10);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: while (!tasks.TrueForAll (task => task.IsCompleted)) {  	OnRaiseDataProgressEvent (new DataProviderEventArgs ((int)(counter / 1200)' "CIFAR-10 Dataset loading..."' stopwatch.Elapsed));  	Thread.Sleep (10);  }  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: OnRaiseDataProgressEvent (new DataProviderEventArgs ((int)(counter / 1200)' "CIFAR-10 Dataset loading..."' stopwatch.Elapsed));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: Thread.Sleep (10);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: OnRaiseDataProgressEvent (new DataProviderEventArgs (50' "Creating Training Samples..."' stopwatch.Elapsed));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: TrainingSamplesCount = 100000;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: OnRaiseDataProgressEvent (new DataProviderEventArgs (70' String.Format ("Creating Training Samples...")' stopwatch.Elapsed));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: Parallel.For (part' 2 * part' ParallelOption' j =>  {  	RandomTrainingSample [j] = j;  	TrainingSamples [j] = TrainingSamples [j - part].Mirror (32' 32' 3);  });  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: Parallel.For (part' 2 * part' ParallelOption' j =>  {  	RandomTrainingSample [j] = j;  	TrainingSamples [j] = TrainingSamples [j - part].Mirror (32' 32' 3);  });  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: Parallel.For (part' 2 * part' ParallelOption' j =>  {  	RandomTrainingSample [j] = j;  	TrainingSamples [j] = TrainingSamples [j - part].Mirror (32' 32' 3);  });  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: Parallel.For (part' 2 * part' ParallelOption' j =>  {  	RandomTrainingSample [j] = j;  	TrainingSamples [j] = TrainingSamples [j - part].Mirror (32' 32' 3);  });  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: TrainingSamples [j] = TrainingSamples [j - part].Mirror (32' 32' 3);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: TrainingSamples [j] = TrainingSamples [j - part].Mirror (32' 32' 3);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: TrainingSamples [j] = TrainingSamples [j - part].Mirror (32' 32' 3);  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: Parallel.For (part' 2 * part' ParallelOption' j =>  {  	for (int i = 0; i < SampleSize; i++)  		for (int c = 0; c < SampleChannels; c++)  			Mean [i + (c * SampleSize)] += (double)TrainingSamples [j].Image [i + (c * SampleSize)] / 255D;  });  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: OnRaiseDataProgressEvent (new DataProviderEventArgs (90' "Creating Testing Samples..."' stopwatch.Elapsed));  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: TestingSamplesCount = 10000;  
Magic Number,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadCIFAR10DataSet,The following statement contains a magic number: OnRaiseDataLoadedEvent (new DataProviderEventArgs (100' String.Format ("Dataset loaded at {0}"' DateTime.Now.ToString ())' stopwatch.Elapsed));  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: if (interpolation == Interpolation.NearestNeighbor) {  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			for (int c = 0; c < channels; c++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x0 + (y0 * sourceWidth) + (c * sourceSize)];  		}  }  else if (interpolation == Interpolation.Bilinear) {  	double fracx' fracy' ifracx' ifracy;  	double l0' l1;  	double[] cf = new double[channels];  	int x1' y1;  	byte[] c1 = new byte[channels];  	byte[] c2 = new byte[channels];  	byte[] c3 = new byte[channels];  	byte[] c4 = new byte[channels];  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			// Calculate coordinates of the 4 interpolation points  			fracx = sx - x0;  			fracy = sy - y0;  			ifracx = 1f - fracx;  			ifracy = 1f - fracy;  			x1 = x0 + 1;  			if (x1 >= sourceWidth)  				x1 = x0;  			y1 = y0 + 1;  			if (y1 >= sourceHeight)  				y1 = y0;  			for (int c = 0; c < channels; c++) {  				c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  				c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  				c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  				c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  				l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  				l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  				cf [c] = ifracy * l0 + fracy * l1;  				// Divide by alpha  				cf [c] /= 255;  				destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  			}  		}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: if (interpolation == Interpolation.NearestNeighbor) {  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			for (int c = 0; c < channels; c++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x0 + (y0 * sourceWidth) + (c * sourceSize)];  		}  }  else if (interpolation == Interpolation.Bilinear) {  	double fracx' fracy' ifracx' ifracy;  	double l0' l1;  	double[] cf = new double[channels];  	int x1' y1;  	byte[] c1 = new byte[channels];  	byte[] c2 = new byte[channels];  	byte[] c3 = new byte[channels];  	byte[] c4 = new byte[channels];  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			// Calculate coordinates of the 4 interpolation points  			fracx = sx - x0;  			fracy = sy - y0;  			ifracx = 1f - fracx;  			ifracy = 1f - fracy;  			x1 = x0 + 1;  			if (x1 >= sourceWidth)  				x1 = x0;  			y1 = y0 + 1;  			if (y1 >= sourceHeight)  				y1 = y0;  			for (int c = 0; c < channels; c++) {  				c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  				c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  				c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  				c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  				l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  				l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  				cf [c] = ifracy * l0 + fracy * l1;  				// Divide by alpha  				cf [c] /= 255;  				destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  			}  		}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: if (interpolation == Interpolation.NearestNeighbor) {  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			for (int c = 0; c < channels; c++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x0 + (y0 * sourceWidth) + (c * sourceSize)];  		}  }  else if (interpolation == Interpolation.Bilinear) {  	double fracx' fracy' ifracx' ifracy;  	double l0' l1;  	double[] cf = new double[channels];  	int x1' y1;  	byte[] c1 = new byte[channels];  	byte[] c2 = new byte[channels];  	byte[] c3 = new byte[channels];  	byte[] c4 = new byte[channels];  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			// Calculate coordinates of the 4 interpolation points  			fracx = sx - x0;  			fracy = sy - y0;  			ifracx = 1f - fracx;  			ifracy = 1f - fracy;  			x1 = x0 + 1;  			if (x1 >= sourceWidth)  				x1 = x0;  			y1 = y0 + 1;  			if (y1 >= sourceHeight)  				y1 = y0;  			for (int c = 0; c < channels; c++) {  				c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  				c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  				c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  				c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  				l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  				l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  				cf [c] = ifracy * l0 + fracy * l1;  				// Divide by alpha  				cf [c] /= 255;  				destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  			}  		}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: if (interpolation == Interpolation.NearestNeighbor) {  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			for (int c = 0; c < channels; c++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x0 + (y0 * sourceWidth) + (c * sourceSize)];  		}  }  else if (interpolation == Interpolation.Bilinear) {  	double fracx' fracy' ifracx' ifracy;  	double l0' l1;  	double[] cf = new double[channels];  	int x1' y1;  	byte[] c1 = new byte[channels];  	byte[] c2 = new byte[channels];  	byte[] c3 = new byte[channels];  	byte[] c4 = new byte[channels];  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			// Calculate coordinates of the 4 interpolation points  			fracx = sx - x0;  			fracy = sy - y0;  			ifracx = 1f - fracx;  			ifracy = 1f - fracy;  			x1 = x0 + 1;  			if (x1 >= sourceWidth)  				x1 = x0;  			y1 = y0 + 1;  			if (y1 >= sourceHeight)  				y1 = y0;  			for (int c = 0; c < channels; c++) {  				c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  				c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  				c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  				c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  				l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  				l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  				cf [c] = ifracy * l0 + fracy * l1;  				// Divide by alpha  				cf [c] /= 255;  				destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  			}  		}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: if (interpolation == Interpolation.NearestNeighbor) {  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			for (int c = 0; c < channels; c++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x0 + (y0 * sourceWidth) + (c * sourceSize)];  		}  }  else if (interpolation == Interpolation.Bilinear) {  	double fracx' fracy' ifracx' ifracy;  	double l0' l1;  	double[] cf = new double[channels];  	int x1' y1;  	byte[] c1 = new byte[channels];  	byte[] c2 = new byte[channels];  	byte[] c3 = new byte[channels];  	byte[] c4 = new byte[channels];  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			// Calculate coordinates of the 4 interpolation points  			fracx = sx - x0;  			fracy = sy - y0;  			ifracx = 1f - fracx;  			ifracy = 1f - fracy;  			x1 = x0 + 1;  			if (x1 >= sourceWidth)  				x1 = x0;  			y1 = y0 + 1;  			if (y1 >= sourceHeight)  				y1 = y0;  			for (int c = 0; c < channels; c++) {  				c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  				c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  				c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  				c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  				l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  				l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  				cf [c] = ifracy * l0 + fracy * l1;  				// Divide by alpha  				cf [c] /= 255;  				destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  			}  		}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: if (interpolation == Interpolation.Bilinear) {  	double fracx' fracy' ifracx' ifracy;  	double l0' l1;  	double[] cf = new double[channels];  	int x1' y1;  	byte[] c1 = new byte[channels];  	byte[] c2 = new byte[channels];  	byte[] c3 = new byte[channels];  	byte[] c4 = new byte[channels];  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			// Calculate coordinates of the 4 interpolation points  			fracx = sx - x0;  			fracy = sy - y0;  			ifracx = 1f - fracx;  			ifracy = 1f - fracy;  			x1 = x0 + 1;  			if (x1 >= sourceWidth)  				x1 = x0;  			y1 = y0 + 1;  			if (y1 >= sourceHeight)  				y1 = y0;  			for (int c = 0; c < channels; c++) {  				c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  				c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  				c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  				c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  				l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  				l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  				cf [c] = ifracy * l0 + fracy * l1;  				// Divide by alpha  				cf [c] /= 255;  				destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  			}  		}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: if (interpolation == Interpolation.Bilinear) {  	double fracx' fracy' ifracx' ifracy;  	double l0' l1;  	double[] cf = new double[channels];  	int x1' y1;  	byte[] c1 = new byte[channels];  	byte[] c2 = new byte[channels];  	byte[] c3 = new byte[channels];  	byte[] c4 = new byte[channels];  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			// Calculate coordinates of the 4 interpolation points  			fracx = sx - x0;  			fracy = sy - y0;  			ifracx = 1f - fracx;  			ifracy = 1f - fracy;  			x1 = x0 + 1;  			if (x1 >= sourceWidth)  				x1 = x0;  			y1 = y0 + 1;  			if (y1 >= sourceHeight)  				y1 = y0;  			for (int c = 0; c < channels; c++) {  				c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  				c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  				c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  				c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  				l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  				l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  				cf [c] = ifracy * l0 + fracy * l1;  				// Divide by alpha  				cf [c] /= 255;  				destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  			}  		}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: if (interpolation == Interpolation.Bilinear) {  	double fracx' fracy' ifracx' ifracy;  	double l0' l1;  	double[] cf = new double[channels];  	int x1' y1;  	byte[] c1 = new byte[channels];  	byte[] c2 = new byte[channels];  	byte[] c3 = new byte[channels];  	byte[] c4 = new byte[channels];  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			// Calculate coordinates of the 4 interpolation points  			fracx = sx - x0;  			fracy = sy - y0;  			ifracx = 1f - fracx;  			ifracy = 1f - fracy;  			x1 = x0 + 1;  			if (x1 >= sourceWidth)  				x1 = x0;  			y1 = y0 + 1;  			if (y1 >= sourceHeight)  				y1 = y0;  			for (int c = 0; c < channels; c++) {  				c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  				c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  				c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  				c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  				l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  				l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  				cf [c] = ifracy * l0 + fracy * l1;  				// Divide by alpha  				cf [c] /= 255;  				destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  			}  		}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: if (interpolation == Interpolation.Bilinear) {  	double fracx' fracy' ifracx' ifracy;  	double l0' l1;  	double[] cf = new double[channels];  	int x1' y1;  	byte[] c1 = new byte[channels];  	byte[] c2 = new byte[channels];  	byte[] c3 = new byte[channels];  	byte[] c4 = new byte[channels];  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			// Calculate coordinates of the 4 interpolation points  			fracx = sx - x0;  			fracy = sy - y0;  			ifracx = 1f - fracx;  			ifracy = 1f - fracy;  			x1 = x0 + 1;  			if (x1 >= sourceWidth)  				x1 = x0;  			y1 = y0 + 1;  			if (y1 >= sourceHeight)  				y1 = y0;  			for (int c = 0; c < channels; c++) {  				c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  				c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  				c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  				c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  				l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  				l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  				cf [c] = ifracy * l0 + fracy * l1;  				// Divide by alpha  				cf [c] /= 255;  				destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  			}  		}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: if (interpolation == Interpolation.Bilinear) {  	double fracx' fracy' ifracx' ifracy;  	double l0' l1;  	double[] cf = new double[channels];  	int x1' y1;  	byte[] c1 = new byte[channels];  	byte[] c2 = new byte[channels];  	byte[] c3 = new byte[channels];  	byte[] c4 = new byte[channels];  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++) {  			sx = x * xs;  			sy = y * ys;  			x0 = (int)sx;  			y0 = (int)sy;  			// Calculate coordinates of the 4 interpolation points  			fracx = sx - x0;  			fracy = sy - y0;  			ifracx = 1f - fracx;  			ifracy = 1f - fracy;  			x1 = x0 + 1;  			if (x1 >= sourceWidth)  				x1 = x0;  			y1 = y0 + 1;  			if (y1 >= sourceHeight)  				y1 = y0;  			for (int c = 0; c < channels; c++) {  				c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  				c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  				c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  				c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  				l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  				l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  				cf [c] = ifracy * l0 + fracy * l1;  				// Divide by alpha  				cf [c] /= 255;  				destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  			}  		}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int y = 0; y < destHeight; y++)  	for (int x = 0; x < destWidth; x++) {  		sx = x * xs;  		sy = y * ys;  		x0 = (int)sx;  		y0 = (int)sy;  		// Calculate coordinates of the 4 interpolation points  		fracx = sx - x0;  		fracy = sy - y0;  		ifracx = 1f - fracx;  		ifracy = 1f - fracy;  		x1 = x0 + 1;  		if (x1 >= sourceWidth)  			x1 = x0;  		y1 = y0 + 1;  		if (y1 >= sourceHeight)  			y1 = y0;  		for (int c = 0; c < channels; c++) {  			c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  			c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  			c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  			c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  			l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  			l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  			cf [c] = ifracy * l0 + fracy * l1;  			// Divide by alpha  			cf [c] /= 255;  			destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  		}  	}  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int y = 0; y < destHeight; y++)  	for (int x = 0; x < destWidth; x++) {  		sx = x * xs;  		sy = y * ys;  		x0 = (int)sx;  		y0 = (int)sy;  		// Calculate coordinates of the 4 interpolation points  		fracx = sx - x0;  		fracy = sy - y0;  		ifracx = 1f - fracx;  		ifracy = 1f - fracy;  		x1 = x0 + 1;  		if (x1 >= sourceWidth)  			x1 = x0;  		y1 = y0 + 1;  		if (y1 >= sourceHeight)  			y1 = y0;  		for (int c = 0; c < channels; c++) {  			c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  			c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  			c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  			c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  			l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  			l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  			cf [c] = ifracy * l0 + fracy * l1;  			// Divide by alpha  			cf [c] /= 255;  			destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  		}  	}  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int y = 0; y < destHeight; y++)  	for (int x = 0; x < destWidth; x++) {  		sx = x * xs;  		sy = y * ys;  		x0 = (int)sx;  		y0 = (int)sy;  		// Calculate coordinates of the 4 interpolation points  		fracx = sx - x0;  		fracy = sy - y0;  		ifracx = 1f - fracx;  		ifracy = 1f - fracy;  		x1 = x0 + 1;  		if (x1 >= sourceWidth)  			x1 = x0;  		y1 = y0 + 1;  		if (y1 >= sourceHeight)  			y1 = y0;  		for (int c = 0; c < channels; c++) {  			c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  			c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  			c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  			c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  			l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  			l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  			cf [c] = ifracy * l0 + fracy * l1;  			// Divide by alpha  			cf [c] /= 255;  			destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  		}  	}  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int y = 0; y < destHeight; y++)  	for (int x = 0; x < destWidth; x++) {  		sx = x * xs;  		sy = y * ys;  		x0 = (int)sx;  		y0 = (int)sy;  		// Calculate coordinates of the 4 interpolation points  		fracx = sx - x0;  		fracy = sy - y0;  		ifracx = 1f - fracx;  		ifracy = 1f - fracy;  		x1 = x0 + 1;  		if (x1 >= sourceWidth)  			x1 = x0;  		y1 = y0 + 1;  		if (y1 >= sourceHeight)  			y1 = y0;  		for (int c = 0; c < channels; c++) {  			c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  			c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  			c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  			c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  			l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  			l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  			cf [c] = ifracy * l0 + fracy * l1;  			// Divide by alpha  			cf [c] /= 255;  			destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  		}  	}  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int y = 0; y < destHeight; y++)  	for (int x = 0; x < destWidth; x++) {  		sx = x * xs;  		sy = y * ys;  		x0 = (int)sx;  		y0 = (int)sy;  		// Calculate coordinates of the 4 interpolation points  		fracx = sx - x0;  		fracy = sy - y0;  		ifracx = 1f - fracx;  		ifracy = 1f - fracy;  		x1 = x0 + 1;  		if (x1 >= sourceWidth)  			x1 = x0;  		y1 = y0 + 1;  		if (y1 >= sourceHeight)  			y1 = y0;  		for (int c = 0; c < channels; c++) {  			c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  			c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  			c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  			c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  			l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  			l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  			cf [c] = ifracy * l0 + fracy * l1;  			// Divide by alpha  			cf [c] /= 255;  			destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  		}  	}  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int x = 0; x < destWidth; x++) {  	sx = x * xs;  	sy = y * ys;  	x0 = (int)sx;  	y0 = (int)sy;  	// Calculate coordinates of the 4 interpolation points  	fracx = sx - x0;  	fracy = sy - y0;  	ifracx = 1f - fracx;  	ifracy = 1f - fracy;  	x1 = x0 + 1;  	if (x1 >= sourceWidth)  		x1 = x0;  	y1 = y0 + 1;  	if (y1 >= sourceHeight)  		y1 = y0;  	for (int c = 0; c < channels; c++) {  		c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  		c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  		c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  		c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  		l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  		l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  		cf [c] = ifracy * l0 + fracy * l1;  		// Divide by alpha  		cf [c] /= 255;  		destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  	}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int x = 0; x < destWidth; x++) {  	sx = x * xs;  	sy = y * ys;  	x0 = (int)sx;  	y0 = (int)sy;  	// Calculate coordinates of the 4 interpolation points  	fracx = sx - x0;  	fracy = sy - y0;  	ifracx = 1f - fracx;  	ifracy = 1f - fracy;  	x1 = x0 + 1;  	if (x1 >= sourceWidth)  		x1 = x0;  	y1 = y0 + 1;  	if (y1 >= sourceHeight)  		y1 = y0;  	for (int c = 0; c < channels; c++) {  		c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  		c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  		c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  		c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  		l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  		l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  		cf [c] = ifracy * l0 + fracy * l1;  		// Divide by alpha  		cf [c] /= 255;  		destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  	}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int x = 0; x < destWidth; x++) {  	sx = x * xs;  	sy = y * ys;  	x0 = (int)sx;  	y0 = (int)sy;  	// Calculate coordinates of the 4 interpolation points  	fracx = sx - x0;  	fracy = sy - y0;  	ifracx = 1f - fracx;  	ifracy = 1f - fracy;  	x1 = x0 + 1;  	if (x1 >= sourceWidth)  		x1 = x0;  	y1 = y0 + 1;  	if (y1 >= sourceHeight)  		y1 = y0;  	for (int c = 0; c < channels; c++) {  		c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  		c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  		c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  		c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  		l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  		l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  		cf [c] = ifracy * l0 + fracy * l1;  		// Divide by alpha  		cf [c] /= 255;  		destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  	}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int x = 0; x < destWidth; x++) {  	sx = x * xs;  	sy = y * ys;  	x0 = (int)sx;  	y0 = (int)sy;  	// Calculate coordinates of the 4 interpolation points  	fracx = sx - x0;  	fracy = sy - y0;  	ifracx = 1f - fracx;  	ifracy = 1f - fracy;  	x1 = x0 + 1;  	if (x1 >= sourceWidth)  		x1 = x0;  	y1 = y0 + 1;  	if (y1 >= sourceHeight)  		y1 = y0;  	for (int c = 0; c < channels; c++) {  		c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  		c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  		c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  		c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  		l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  		l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  		cf [c] = ifracy * l0 + fracy * l1;  		// Divide by alpha  		cf [c] /= 255;  		destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  	}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int x = 0; x < destWidth; x++) {  	sx = x * xs;  	sy = y * ys;  	x0 = (int)sx;  	y0 = (int)sy;  	// Calculate coordinates of the 4 interpolation points  	fracx = sx - x0;  	fracy = sy - y0;  	ifracx = 1f - fracx;  	ifracy = 1f - fracy;  	x1 = x0 + 1;  	if (x1 >= sourceWidth)  		x1 = x0;  	y1 = y0 + 1;  	if (y1 >= sourceHeight)  		y1 = y0;  	for (int c = 0; c < channels; c++) {  		c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  		c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  		c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  		c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  		l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  		l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  		cf [c] = ifracy * l0 + fracy * l1;  		// Divide by alpha  		cf [c] /= 255;  		destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  	}  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int c = 0; c < channels; c++) {  	c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  	c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  	c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  	c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  	l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  	l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  	cf [c] = ifracy * l0 + fracy * l1;  	// Divide by alpha  	cf [c] /= 255;  	destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int c = 0; c < channels; c++) {  	c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  	c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  	c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  	c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  	l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  	l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  	cf [c] = ifracy * l0 + fracy * l1;  	// Divide by alpha  	cf [c] /= 255;  	destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int c = 0; c < channels; c++) {  	c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  	c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  	c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  	c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  	l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  	l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  	cf [c] = ifracy * l0 + fracy * l1;  	// Divide by alpha  	cf [c] /= 255;  	destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int c = 0; c < channels; c++) {  	c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  	c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  	c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  	c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  	l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  	l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  	cf [c] = ifracy * l0 + fracy * l1;  	// Divide by alpha  	cf [c] /= 255;  	destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: for (int c = 0; c < channels; c++) {  	c1 [c] = Image [(y0 * sourceWidth + x0) + (c * sourceSize)];  	c2 [c] = Image [(y0 * sourceWidth + x1) + (c * sourceSize)];  	c3 [c] = Image [(y1 * sourceWidth + x0) + (c * sourceSize)];  	c4 [c] = Image [(y1 * sourceWidth + x1) + (c * sourceSize)];  	l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  	l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  	cf [c] = ifracy * l0 + fracy * l1;  	// Divide by alpha  	cf [c] /= 255;  	destImage [x + (y * destWidth) + (c * destSize)] = (byte)cf [c];  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: l0 = ifracx * c1 [c] * 255 + fracx * c2 [c] * 255;  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: l1 = ifracx * c3 [c] * 255 + fracx * c4 [c] * 255;  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Resize,The following statement contains a magic number: cf [c] /= 255;  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,InvertColors,The following statement contains a magic number: for (int c = 0; c < channels; c++)  	for (int i = 0; i < size; i++)  		destImage [i + (c * size)] = (byte)(255 - Image [i + (c * size)]);  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,InvertColors,The following statement contains a magic number: for (int i = 0; i < size; i++)  	destImage [i + (c * size)] = (byte)(255 - Image [i + (c * size)]);  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,InvertColors,The following statement contains a magic number: destImage [i + (c * size)] = (byte)(255 - Image [i + (c * size)]);  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The following statement contains a magic number: switch (position) {  case Position.TopLeft:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + (y * sourceWidth) + (c * sourceSize)];  	break;  case Position.TopRight:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + (dX - 1 + (y * sourceWidth)) + (c * sourceSize)];  	break;  case Position.BottomLeft:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((y + dY - 1) * sourceWidth) + (c * sourceSize)];  	break;  case Position.BottomRight:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + (dX - 1 + ((y + dY - 1) * sourceWidth)) + (c * sourceSize)];  	break;  case Position.Center:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)];  	break;  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The following statement contains a magic number: switch (position) {  case Position.TopLeft:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + (y * sourceWidth) + (c * sourceSize)];  	break;  case Position.TopRight:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + (dX - 1 + (y * sourceWidth)) + (c * sourceSize)];  	break;  case Position.BottomLeft:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((y + dY - 1) * sourceWidth) + (c * sourceSize)];  	break;  case Position.BottomRight:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + (dX - 1 + ((y + dY - 1) * sourceWidth)) + (c * sourceSize)];  	break;  case Position.Center:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)];  	break;  }  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The following statement contains a magic number: for (int c = 0; c < channels; c++)  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++)  			destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)];  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The following statement contains a magic number: for (int c = 0; c < channels; c++)  	for (int y = 0; y < destHeight; y++)  		for (int x = 0; x < destWidth; x++)  			destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)];  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The following statement contains a magic number: for (int y = 0; y < destHeight; y++)  	for (int x = 0; x < destWidth; x++)  		destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)];  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The following statement contains a magic number: for (int y = 0; y < destHeight; y++)  	for (int x = 0; x < destWidth; x++)  		destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)];  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The following statement contains a magic number: for (int x = 0; x < destWidth; x++)  	destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)];  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The following statement contains a magic number: for (int x = 0; x < destWidth; x++)  	destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)];  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The following statement contains a magic number: destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)];  
Magic Number,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The following statement contains a magic number: destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)];  
Missing Default,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,DataSetFilesAvailable,The following switch statement is missing a default case: switch (set) {  case DataProviderSets.CIFAR10:  	if (!File.Exists (path + @"\data_batch_1.bin") || !File.Exists (path + @"\data_batch_2.bin") || !File.Exists (path + @"\data_batch_3.bin") || !File.Exists (path + @"\data_batch_4.bin") || !File.Exists (path + @"\data_batch_5.bin") || !File.Exists (path + @"\test_batch.bin") || !File.Exists (path + @"\batches.meta.txt"))  		available = false;  	break;  case DataProviderSets.MNIST:  	if (!File.Exists (path + @"\t10k-labels-idx1-ubyte") || !File.Exists (path + @"\train-labels-idx1-ubyte") || !File.Exists (path + @"\t10k-images-idx3-ubyte") || !File.Exists (path + @"\train-images-idx3-ubyte"))  		available = false;  	break;  }  
Missing Default,CNNWB.Data,DataProvider,C:\repos\supby_cnnwb\CNNWB.Data\DataProvider.cs,LoadDataset,The following switch statement is missing a default case: switch (set) {  case DataProviderSets.CIFAR10:  	Task.Factory.StartNew (() => LoadCIFAR10DataSet ());  	break;  case DataProviderSets.MNIST:  	Task.Factory.StartNew (() => LoadMNISTDataSet ());  	break;  }  
Missing Default,CNNWB.Data,ImageData,C:\repos\supby_cnnwb\CNNWB.Data\ImageData.cs,Crop,The following switch statement is missing a default case: switch (position) {  case Position.TopLeft:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + (y * sourceWidth) + (c * sourceSize)];  	break;  case Position.TopRight:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + (dX - 1 + (y * sourceWidth)) + (c * sourceSize)];  	break;  case Position.BottomLeft:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((y + dY - 1) * sourceWidth) + (c * sourceSize)];  	break;  case Position.BottomRight:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + (dX - 1 + ((y + dY - 1) * sourceWidth)) + (c * sourceSize)];  	break;  case Position.Center:  	for (int c = 0; c < channels; c++)  		for (int y = 0; y < destHeight; y++)  			for (int x = 0; x < destWidth; x++)  				destImage [x + (y * destWidth) + (c * destSize)] = Image [x + ((dX / 2) - 1 + ((y + (dY / 2) - 1) * sourceWidth)) + (c * sourceSize)];  	break;  }  
