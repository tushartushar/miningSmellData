Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Connect.WCF.Channels,DuplexChannelManager,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\WCF\Channels\DuplexChannelManager.cs,DuplexChannelManager,The method has 5 parameters. Parameters: connections' messageRate' binding' address' messageBuffer
Magic Number,Connect.Sockets,RawSocketClientManager,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\Sockets\ClientManager.cs,Start,The following statement contains a magic number: const int pollTimeSeconds = 2;
Magic Number,Connect.Sockets,RawSocketClientManager,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\Sockets\ClientManager.cs,Ping,The following statement contains a magic number: Observable.Interval(TimeSpan.FromSeconds(1))                      .TakeWhile(_ => clients.Count < arguments.ConnectionLimit)                      .Subscribe(_ =>                      {                          var numberOfClients = (int)Math.Ceiling(clients.Count / 60.0);                          Console.WriteLine("client: Pinging {0} connections"' numberOfClients);                          for (int i = 0; i < numberOfClients; i++)                          {                              MessageNextClient();                          }                      });
Magic Number,Connect.Sockets,Utility,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\Sockets\Utility.cs,GetChars,The following statement contains a magic number: var chars = Enumerable.Range(0' (int)size).Select(i =>              {                  return (char)((i % 26) + 65);              });
Magic Number,Connect.Sockets,Utility,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\Sockets\Utility.cs,GetChars,The following statement contains a magic number: var chars = Enumerable.Range(0' (int)size).Select(i =>              {                  return (char)((i % 26) + 65);              });
Magic Number,Connect,Program,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\Program.cs,SetupThreadPool,The following statement contains a magic number: ThreadPool.SetMinThreads(500' 1000);
Magic Number,Connect,Program,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\Program.cs,SetupThreadPool,The following statement contains a magic number: ThreadPool.SetMinThreads(500' 1000);
Magic Number,Connect.Sockets.LenghPrefixed,SocketClientWithAck,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\Sockets\LenghPrefixed\SocketClientWithAck.cs,Start,The following statement contains a magic number: var interval = Observable.Interval(TimeSpan.FromSeconds(1))                  .TakeWhile(_ => pending.CurrentCount > 0)                  .Subscribe(async _ =>                  {                      var parallelCount = Math.Min(pending.CurrentCount' 10);                        Task[] tasks = new Task[parallelCount];                      for (int i = 0; i < parallelCount; i++)                      {                          tasks[i] = Task.Run(() => ConnectAndSubscribeAsync(pending));                      }                        Task.WaitAll(tasks);                  }'                  ex =>                  {                      Console.WriteLine(ex.Message);                      Environment.Exit(1);                  });
Magic Number,Connect.Sockets.LenghPrefixed,SocketClientWithAck,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\Sockets\LenghPrefixed\SocketClientWithAck.cs,HandleResponse,The following statement contains a magic number: Trace.Assert(obj.Message.Length == 4);
Magic Number,Connect.Sockets.LenghPrefixed,SocketClientWithAck,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\Sockets\LenghPrefixed\SocketClientWithAck.cs,GetChars,The following statement contains a magic number: var chars = Enumerable.Range(0' size)                  .Select(i => (char)((i % 26) + 65))                  .ToArray();
Magic Number,Connect.Sockets.LenghPrefixed,SocketClientWithAck,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\Sockets\LenghPrefixed\SocketClientWithAck.cs,GetChars,The following statement contains a magic number: var chars = Enumerable.Range(0' size)                  .Select(i => (char)((i % 26) + 65))                  .ToArray();
Magic Number,Connect.WCF.Channels,DuplexChannelManager,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\WCF\Channels\DuplexChannelManager.cs,DuplexChannelManager,The following statement contains a magic number: _messageBuffer = messageBuffer ??  Message.CreateMessage(binding.MessageVersion' "TestAction"' new byte[1024]).CreateBufferedCopy(int.MaxValue);
Magic Number,Connect.WCF.Channels,DuplexChannelManager,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\WCF\Channels\DuplexChannelManager.cs,Start,The following statement contains a magic number: var load = Observable.Interval(TimeSpan.FromMilliseconds(1000))                  .TakeWhile(_ => !_isDisposed)                  .Where(_ => backlog <= _rate)                  .Subscribe(async _ =>                  {                      int pending = _rate;                        Action action = () =>                      {                          //Console.WriteLine("Thread ID" + System.Threading.Thread.CurrentThread.ManagedThreadId);                          while (Interlocked.Decrement(ref pending) >= 0)                          {                              var channel = GetNextChannel();                              monitor.OnMessageStart();                              var iar = channel.BeginSend(_messageBuffer.CreateMessage()' cb' channel);                          }                      };                        Parallel.Invoke(                          new ParallelOptions()                                      {                                          MaxDegreeOfParallelism = Environment.ProcessorCount * 4'                                      }'                                      action' action' action' action'                                      action' action' action' action                                      );                  }'                      ex => Console.WriteLine(ex.Message + " \n" + ex.StackTrace));
Magic Number,Connect.WCF.Channels,DuplexChannelManager,D:\research\architectureSmells\repos\IoFx_IoFx\src\Tests\Performance\Connect\WCF\Channels\DuplexChannelManager.cs,Start,The following statement contains a magic number: var load = Observable.Interval(TimeSpan.FromMilliseconds(1000))                  .TakeWhile(_ => !_isDisposed)                  .Where(_ => backlog <= _rate)                  .Subscribe(async _ =>                  {                      int pending = _rate;                        Action action = () =>                      {                          //Console.WriteLine("Thread ID" + System.Threading.Thread.CurrentThread.ManagedThreadId);                          while (Interlocked.Decrement(ref pending) >= 0)                          {                              var channel = GetNextChannel();                              monitor.OnMessageStart();                              var iar = channel.BeginSend(_messageBuffer.CreateMessage()' cb' channel);                          }                      };                        Parallel.Invoke(                          new ParallelOptions()                                      {                                          MaxDegreeOfParallelism = Environment.ProcessorCount * 4'                                      }'                                      action' action' action' action'                                      action' action' action' action                                      );                  }'                      ex => Console.WriteLine(ex.Message + " \n" + ex.StackTrace));
