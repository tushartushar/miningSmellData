Implementation smell,Namespace,Class,File,Method,Description
Magic Number,TurkishId,TurkishIdNumber,C:\repos\ssg_TurkishId\src\TurkishId\TurkishIdNumber.cs,nextDigit,The following statement contains a magic number: if (result < 0 || result > 9)              {                  invalid = true;              }
Magic Number,TurkishId,TurkishIdNumber,C:\repos\ssg_TurkishId\src\TurkishId\TurkishIdNumber.cs,IsValid,The following statement contains a magic number: fixed (char* inputPtr = number)              {                  bool invalid = false;                  char* pInput = inputPtr;                  int oddSum = nextDigit(ref pInput' ref invalid);                  if (oddSum == 0 || invalid)                  {                      return false;                  }                  int evenSum = 0;                  for (int i = 0; i < 4; i++)                  {                      evenSum += nextDigit(ref pInput' ref invalid);                      oddSum += nextDigit(ref pInput' ref invalid);                  }                  int firstChecksum = nextDigit(ref pInput' ref invalid);                  int finalChecksum = nextDigit(ref pInput' ref invalid);                  if (invalid)                  {                      return false;                  }                  int final = (oddSum + evenSum + firstChecksum) % 10;                  if (finalChecksum != final)                  {                      return false;                  }                  int first = ((oddSum * 7) - evenSum) % 10;                  if (first < 0)                  {                      first += 10;                  }                  return firstChecksum == first;              }
Magic Number,TurkishId,TurkishIdNumber,C:\repos\ssg_TurkishId\src\TurkishId\TurkishIdNumber.cs,IsValid,The following statement contains a magic number: fixed (char* inputPtr = number)              {                  bool invalid = false;                  char* pInput = inputPtr;                  int oddSum = nextDigit(ref pInput' ref invalid);                  if (oddSum == 0 || invalid)                  {                      return false;                  }                  int evenSum = 0;                  for (int i = 0; i < 4; i++)                  {                      evenSum += nextDigit(ref pInput' ref invalid);                      oddSum += nextDigit(ref pInput' ref invalid);                  }                  int firstChecksum = nextDigit(ref pInput' ref invalid);                  int finalChecksum = nextDigit(ref pInput' ref invalid);                  if (invalid)                  {                      return false;                  }                  int final = (oddSum + evenSum + firstChecksum) % 10;                  if (finalChecksum != final)                  {                      return false;                  }                  int first = ((oddSum * 7) - evenSum) % 10;                  if (first < 0)                  {                      first += 10;                  }                  return firstChecksum == first;              }
Magic Number,TurkishId,TurkishIdNumber,C:\repos\ssg_TurkishId\src\TurkishId\TurkishIdNumber.cs,IsValid,The following statement contains a magic number: fixed (char* inputPtr = number)              {                  bool invalid = false;                  char* pInput = inputPtr;                  int oddSum = nextDigit(ref pInput' ref invalid);                  if (oddSum == 0 || invalid)                  {                      return false;                  }                  int evenSum = 0;                  for (int i = 0; i < 4; i++)                  {                      evenSum += nextDigit(ref pInput' ref invalid);                      oddSum += nextDigit(ref pInput' ref invalid);                  }                  int firstChecksum = nextDigit(ref pInput' ref invalid);                  int finalChecksum = nextDigit(ref pInput' ref invalid);                  if (invalid)                  {                      return false;                  }                  int final = (oddSum + evenSum + firstChecksum) % 10;                  if (finalChecksum != final)                  {                      return false;                  }                  int first = ((oddSum * 7) - evenSum) % 10;                  if (first < 0)                  {                      first += 10;                  }                  return firstChecksum == first;              }
Magic Number,TurkishId,TurkishIdNumber,C:\repos\ssg_TurkishId\src\TurkishId\TurkishIdNumber.cs,IsValid,The following statement contains a magic number: fixed (char* inputPtr = number)              {                  bool invalid = false;                  char* pInput = inputPtr;                  int oddSum = nextDigit(ref pInput' ref invalid);                  if (oddSum == 0 || invalid)                  {                      return false;                  }                  int evenSum = 0;                  for (int i = 0; i < 4; i++)                  {                      evenSum += nextDigit(ref pInput' ref invalid);                      oddSum += nextDigit(ref pInput' ref invalid);                  }                  int firstChecksum = nextDigit(ref pInput' ref invalid);                  int finalChecksum = nextDigit(ref pInput' ref invalid);                  if (invalid)                  {                      return false;                  }                  int final = (oddSum + evenSum + firstChecksum) % 10;                  if (finalChecksum != final)                  {                      return false;                  }                  int first = ((oddSum * 7) - evenSum) % 10;                  if (first < 0)                  {                      first += 10;                  }                  return firstChecksum == first;              }
Magic Number,TurkishId,TurkishIdNumber,C:\repos\ssg_TurkishId\src\TurkishId\TurkishIdNumber.cs,IsValid,The following statement contains a magic number: fixed (char* inputPtr = number)              {                  bool invalid = false;                  char* pInput = inputPtr;                  int oddSum = nextDigit(ref pInput' ref invalid);                  if (oddSum == 0 || invalid)                  {                      return false;                  }                  int evenSum = 0;                  for (int i = 0; i < 4; i++)                  {                      evenSum += nextDigit(ref pInput' ref invalid);                      oddSum += nextDigit(ref pInput' ref invalid);                  }                  int firstChecksum = nextDigit(ref pInput' ref invalid);                  int finalChecksum = nextDigit(ref pInput' ref invalid);                  if (invalid)                  {                      return false;                  }                  int final = (oddSum + evenSum + firstChecksum) % 10;                  if (finalChecksum != final)                  {                      return false;                  }                  int first = ((oddSum * 7) - evenSum) % 10;                  if (first < 0)                  {                      first += 10;                  }                  return firstChecksum == first;              }
