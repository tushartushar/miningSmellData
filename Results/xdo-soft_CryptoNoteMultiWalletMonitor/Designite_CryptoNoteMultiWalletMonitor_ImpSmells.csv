Implementation smell,Namespace,Class,File,Method,Description
Long Method,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,Main,The method has 105 lines of code.
Complex Method,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,Main,Cyclomatic complexity of the method is 44
Complex Method,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,CommandIsForAll,Cyclomatic complexity of the method is 14
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,Main,The length of the statement  "		if (lsFirstArgumentLower == "HELP" || lsFirstArgumentLower == "-HELP" || lsFirstArgumentLower == "--HELP" || lsFirstArgumentLower == "/HELP" || lsFirstArgument == "/?" || lsFirstArgument == "-?") { " is 197.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,Main,The length of the statement  "				Console.WriteLine ("<command>                             Sends the command <command> to all child wallets. See below for supported child wallet commands."); " is 157.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,Main,The length of the statement  "				Console.WriteLine ("<walletfilename> <command>            Sends the command <command> to the child wallet <walletfilename>. See below for supported child wallet commands."); " is 173.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,DisplayGetSetHelp,The length of the statement  "	Console.WriteLine ("get <PropertyName> <PropertyValue>    Gets the current value of the property <PropertyName> of CryptoNoteMultiWalletMonitor."); " is 147.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,DisplayGetSetHelp,The length of the statement  "	Console.WriteLine ("set <PropertyName> <PropertyValue>    Sets the property <PropertyName> of CryptoNoteMultiWalletMonitor to the value <PropertyValue>."); " is 155.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,StartProcess,The length of the statement  "	ProcessStartInfo lPSI = new ProcessStartInfo (Settings.Default.CryptoNoteDirectory + Settings.Default.WalletCommand' "--wallet-file " + lsWallet + " --password " + msPassword); " is 176.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The length of the statement  "						mUnlockedBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["UnlockedBalance"].Value' CultureInfo.InvariantCulture); " is 123.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The length of the statement  "							if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) { " is 229.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The length of the statement  "									lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ()); " is 254.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The length of the statement  "									Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient."); " is 169.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The length of the statement  "							Console.WriteLine ("Total balance:                             " + lTotalBalance.ToString (CultureInfo.CurrentCulture)); " is 120.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The length of the statement  "							Console.WriteLine ("Total unlocked balance:                    " + lTotalUnlockedBalance.ToString (CultureInfo.CurrentCulture)); " is 128.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The length of the statement  "							Console.WriteLine ("Total auto-transferred:                    " + Settings.Default.AutoTransferredSoFar.ToString (CultureInfo.CurrentCulture)); " is 144.
Long Statement,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The length of the statement  "							Console.WriteLine ("Total balance' including auto-transferred: " + (lTotalBalance + Settings.Default.AutoTransferredSoFar).ToString (CultureInfo.CurrentCulture)); " is 162.
Complex Conditional,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,Main,The conditional expression  "lsFirstArgumentLower == "HELP" || lsFirstArgumentLower == "-HELP" || lsFirstArgumentLower == "--HELP" || lsFirstArgumentLower == "/HELP" || lsFirstArgument == "/?" || lsFirstArgument == "-?""  is complex.
Complex Conditional,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The conditional expression  "(!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee"  is complex.
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,Main,The following statement contains a magic number: while (lMonitorThread.IsAlive) {  	String lsCommand;  	try {  		if (mbIsPaused)  			lsCommand = Reader.ReadLine (Int32.MaxValue);  		else  			lsCommand = Reader.ReadLine ((int)Math.Min (Int32.MaxValue' Settings.Default.RefreshIntervalSeconds * 1000)).Trim ();  	}  	catch {  		lsCommand = "refresh";  	}  	switch (lsCommand) {  	case "exit":  		PushCommandToAll ("save");  		Settings.Default.Save ();  		PushCommandToAll ("exit");  		lMonitorThread.Join ();  		return;  	case "save":  		PushCommandToAll ("save");  		Settings.Default.Save ();  		break;  	case "refresh":  		Refresh ();  		break;  	case "help":  		lock (mConsoleLock) {  			Console.WriteLine ("Commands for CryptoNoteMultiMonitor include:");  			Console.WriteLine ("pause                                 Temporarily pauses automatic refreshing.");  			Console.WriteLine ("unpause                               Unpauses automatic refreshing.");  			Console.WriteLine ("<command>                             Sends the command <command> to all child wallets. See below for supported child wallet commands.");  			Console.WriteLine ("<walletfilename> <command>            Sends the command <command> to the child wallet <walletfilename>. See below for supported child wallet commands.");  			DisplayGetSetHelp ();  			Console.WriteLine ("Commands for the child wallets include:");  		}  		PushCommand ("help"' masWallets [1]);  		break;  	case "pause":  		mbIsPaused = true;  		lock (mConsoleLock)  			Console.WriteLine ("Automatic refreshing paused.");  		break;  	case "unpause":  		mbIsPaused = false;  		lock (mConsoleLock)  			Console.WriteLine ("Automatic refreshing unpaused.");  		Refresh ();  		break;  	case "":  		break;  	default:  		bool lbToAll = CommandIsForAll (lsCommand);  		if (lbToAll)  			PushCommandToAll (lsCommand);  		break;  	}  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,Main,The following statement contains a magic number: try {  	if (mbIsPaused)  		lsCommand = Reader.ReadLine (Int32.MaxValue);  	else  		lsCommand = Reader.ReadLine ((int)Math.Min (Int32.MaxValue' Settings.Default.RefreshIntervalSeconds * 1000)).Trim ();  }  catch {  	lsCommand = "refresh";  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,Main,The following statement contains a magic number: if (mbIsPaused)  	lsCommand = Reader.ReadLine (Int32.MaxValue);  else  	lsCommand = Reader.ReadLine ((int)Math.Min (Int32.MaxValue' Settings.Default.RefreshIntervalSeconds * 1000)).Trim ();  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,Main,The following statement contains a magic number: lsCommand = Reader.ReadLine ((int)Math.Min (Int32.MaxValue' Settings.Default.RefreshIntervalSeconds * 1000)).Trim ();  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,CommandIsForAll,The following statement contains a magic number: if (lsCommand.Length > 4 && lsCommand.Substring (0' 4) == "get ") {  	lsCommand = lsCommand.Substring (4).Trim ();  	int lnSpaceIndex = lsCommand.IndexOf (' ');  	if (lnSpaceIndex >= 0) {  		lock (mConsoleLock)  			DisplayGetSetHelp ();  		return false;  	}  	if (!masPropertyNames.Contains (lsCommand)) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lsCommand + " is not a valid property.");  			Console.ResetColor ();  			DisplayGetSetHelp ();  		}  	}  	try {  		lock (mConsoleLock)  			Console.WriteLine (Convert.ToString (Settings.Default [lsCommand]' CultureInfo.CurrentCulture));  	}  	catch (Exception lException) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lException.ToString ());  			Console.ResetColor ();  		}  	}  	return false;  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,CommandIsForAll,The following statement contains a magic number: if (lsCommand.Length > 4 && lsCommand.Substring (0' 4) == "get ") {  	lsCommand = lsCommand.Substring (4).Trim ();  	int lnSpaceIndex = lsCommand.IndexOf (' ');  	if (lnSpaceIndex >= 0) {  		lock (mConsoleLock)  			DisplayGetSetHelp ();  		return false;  	}  	if (!masPropertyNames.Contains (lsCommand)) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lsCommand + " is not a valid property.");  			Console.ResetColor ();  			DisplayGetSetHelp ();  		}  	}  	try {  		lock (mConsoleLock)  			Console.WriteLine (Convert.ToString (Settings.Default [lsCommand]' CultureInfo.CurrentCulture));  	}  	catch (Exception lException) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lException.ToString ());  			Console.ResetColor ();  		}  	}  	return false;  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,CommandIsForAll,The following statement contains a magic number: if (lsCommand.Length > 4 && lsCommand.Substring (0' 4) == "get ") {  	lsCommand = lsCommand.Substring (4).Trim ();  	int lnSpaceIndex = lsCommand.IndexOf (' ');  	if (lnSpaceIndex >= 0) {  		lock (mConsoleLock)  			DisplayGetSetHelp ();  		return false;  	}  	if (!masPropertyNames.Contains (lsCommand)) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lsCommand + " is not a valid property.");  			Console.ResetColor ();  			DisplayGetSetHelp ();  		}  	}  	try {  		lock (mConsoleLock)  			Console.WriteLine (Convert.ToString (Settings.Default [lsCommand]' CultureInfo.CurrentCulture));  	}  	catch (Exception lException) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lException.ToString ());  			Console.ResetColor ();  		}  	}  	return false;  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,CommandIsForAll,The following statement contains a magic number: lsCommand = lsCommand.Substring (4).Trim ();  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,CommandIsForAll,The following statement contains a magic number: if (lsCommand.Length > 4 && lsCommand.Substring (0' 4) == "set ") {  	lsCommand = lsCommand.Substring (4).Trim ();  	int lnSpaceIndex = lsCommand.IndexOf (' ');  	if (lnSpaceIndex < 0) {  		lock (mConsoleLock)  			DisplayGetSetHelp ();  		return false;  	}  	string lsToSet = lsCommand.Substring (0' lnSpaceIndex).Trim ();  	if (!masPropertyNames.Contains (lsToSet)) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lsToSet + " is not a valid property.");  			Console.ResetColor ();  			DisplayGetSetHelp ();  		}  	}  	string lsValue = lsCommand.Substring (lnSpaceIndex + 1).Trim ();  	try {  		lock (Settings.Default) {  			Type lType = Settings.Default [lsToSet].GetType ();  			Settings.Default [lsToSet] = Convert.ChangeType (lsValue' lType' CultureInfo.CurrentCulture);  			Settings.Default.Save ();  		}  	}  	catch (Exception lException) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lException.ToString ());  			Console.ResetColor ();  		}  	}  	return false;  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,CommandIsForAll,The following statement contains a magic number: if (lsCommand.Length > 4 && lsCommand.Substring (0' 4) == "set ") {  	lsCommand = lsCommand.Substring (4).Trim ();  	int lnSpaceIndex = lsCommand.IndexOf (' ');  	if (lnSpaceIndex < 0) {  		lock (mConsoleLock)  			DisplayGetSetHelp ();  		return false;  	}  	string lsToSet = lsCommand.Substring (0' lnSpaceIndex).Trim ();  	if (!masPropertyNames.Contains (lsToSet)) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lsToSet + " is not a valid property.");  			Console.ResetColor ();  			DisplayGetSetHelp ();  		}  	}  	string lsValue = lsCommand.Substring (lnSpaceIndex + 1).Trim ();  	try {  		lock (Settings.Default) {  			Type lType = Settings.Default [lsToSet].GetType ();  			Settings.Default [lsToSet] = Convert.ChangeType (lsValue' lType' CultureInfo.CurrentCulture);  			Settings.Default.Save ();  		}  	}  	catch (Exception lException) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lException.ToString ());  			Console.ResetColor ();  		}  	}  	return false;  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,CommandIsForAll,The following statement contains a magic number: if (lsCommand.Length > 4 && lsCommand.Substring (0' 4) == "set ") {  	lsCommand = lsCommand.Substring (4).Trim ();  	int lnSpaceIndex = lsCommand.IndexOf (' ');  	if (lnSpaceIndex < 0) {  		lock (mConsoleLock)  			DisplayGetSetHelp ();  		return false;  	}  	string lsToSet = lsCommand.Substring (0' lnSpaceIndex).Trim ();  	if (!masPropertyNames.Contains (lsToSet)) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lsToSet + " is not a valid property.");  			Console.ResetColor ();  			DisplayGetSetHelp ();  		}  	}  	string lsValue = lsCommand.Substring (lnSpaceIndex + 1).Trim ();  	try {  		lock (Settings.Default) {  			Type lType = Settings.Default [lsToSet].GetType ();  			Settings.Default [lsToSet] = Convert.ChangeType (lsValue' lType' CultureInfo.CurrentCulture);  			Settings.Default.Save ();  		}  	}  	catch (Exception lException) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lException.ToString ());  			Console.ResetColor ();  		}  	}  	return false;  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,CommandIsForAll,The following statement contains a magic number: lsCommand = lsCommand.Substring (4).Trim ();  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,DisplayGetSetHelp,The following statement contains a magic number: foreach (String lPropertyName in masPropertyNames) {  	Console.Write ("    " + lPropertyName);  	Console.CursorLeft = mnPropertyNameLength + 8;  	try {  		lock (mConsoleLock)  			Console.Write (Convert.ToString (Settings.Default [lPropertyName]' CultureInfo.CurrentCulture) + "\n");  	}  	catch (Exception lException) {  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Red;  			Console.WriteLine (lException.ToString ());  			Console.ResetColor ();  		}  	}  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,DisplayGetSetHelp,The following statement contains a magic number: Console.CursorLeft = mnPropertyNameLength + 8;  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: while (mProcesses.Count > 0) {  	foreach (string lsWallet in masWallets) {  		if (!mProcesses.ContainsKey (lsWallet))  			continue;  		Process lProcess = mProcesses [lsWallet];  		int lnKey = lProcess.Id;  		String lsFoundLine;  		lock (mLocks [lnKey]) {  			string lsCurrent = mOutputData [lnKey].Trim ();  			int lnIndex = lsCurrent.IndexOfAny (new char[] {  				'\r''  				'\n'  			});  			if (lnIndex > 0) {  				lsFoundLine = lsCurrent.Substring (0' lnIndex).Trim ();  				lsCurrent = lsCurrent.Substring (lnIndex).Trim ();  				mOutputData [lnKey] = lsCurrent;  			}  			else {  				lsFoundLine = lsCurrent;  				mOutputData [lnKey] = "";  				if (lProcess.HasExited)  					mProcesses.Remove (lsWallet);  			}  		}  		if (lsFoundLine.Length > 0) {  			Console.ForegroundColor = ConsoleColor.Yellow;  			Console.Write (lsWallet);  			Console.ResetColor ();  			Console.CursorLeft = mnWalletNameLength + 4;  			Console.Write (lsFoundLine + "\n");  			if (Regex.IsMatch (lsFoundLine' Settings.Default.RegexSpentMatch))  				mAwaitingTransfer [lnKey] = false;  			else {  				Match lRegexMatch = Regex.Match (lsFoundLine' Settings.Default.RegexBalanceMatch' RegexOptions.ExplicitCapture);  				if (lRegexMatch.Success) {  					mBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["Balance"].Value' CultureInfo.InvariantCulture);  					mUnlockedBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["UnlockedBalance"].Value' CultureInfo.InvariantCulture);  					lock (Settings.Default) {  						if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) {  							decimal lToTransfer = mUnlockedBalances [lnKey] - Settings.Default.AutoTransferFee;  							lock (mConsoleLock) {  								lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  								Settings.Default.AutoTransferredSoFar += lToTransfer;  								Settings.Default.Save ();  								Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  								mAwaitingTransfer [lnKey] = true;  								Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  								lProcess.StandardInput.WriteLine ("refresh");  								lProcess.StandardInput.WriteLine ("save");  								lProcess.StandardInput.WriteLine ("balance");  							}  						}  					}  					Decimal lTotalBalance = mBalances.Values.Sum ();  					Decimal lTotalUnlockedBalance = mUnlockedBalances.Values.Sum ();  					lock (mConsoleLock) {  						Console.ForegroundColor = ConsoleColor.Green;  						Console.WriteLine ("Total balance:                             " + lTotalBalance.ToString (CultureInfo.CurrentCulture));  						Console.WriteLine ("Total unlocked balance:                    " + lTotalUnlockedBalance.ToString (CultureInfo.CurrentCulture));  						Console.WriteLine ("Total auto-transferred:                    " + Settings.Default.AutoTransferredSoFar.ToString (CultureInfo.CurrentCulture));  						Console.WriteLine ("Total balance' including auto-transferred: " + (lTotalBalance + Settings.Default.AutoTransferredSoFar).ToString (CultureInfo.CurrentCulture));  						Console.ResetColor ();  					}  				}  			}  		}  		Thread.Sleep (0);  	}  	Thread.Sleep (100);  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: while (mProcesses.Count > 0) {  	foreach (string lsWallet in masWallets) {  		if (!mProcesses.ContainsKey (lsWallet))  			continue;  		Process lProcess = mProcesses [lsWallet];  		int lnKey = lProcess.Id;  		String lsFoundLine;  		lock (mLocks [lnKey]) {  			string lsCurrent = mOutputData [lnKey].Trim ();  			int lnIndex = lsCurrent.IndexOfAny (new char[] {  				'\r''  				'\n'  			});  			if (lnIndex > 0) {  				lsFoundLine = lsCurrent.Substring (0' lnIndex).Trim ();  				lsCurrent = lsCurrent.Substring (lnIndex).Trim ();  				mOutputData [lnKey] = lsCurrent;  			}  			else {  				lsFoundLine = lsCurrent;  				mOutputData [lnKey] = "";  				if (lProcess.HasExited)  					mProcesses.Remove (lsWallet);  			}  		}  		if (lsFoundLine.Length > 0) {  			Console.ForegroundColor = ConsoleColor.Yellow;  			Console.Write (lsWallet);  			Console.ResetColor ();  			Console.CursorLeft = mnWalletNameLength + 4;  			Console.Write (lsFoundLine + "\n");  			if (Regex.IsMatch (lsFoundLine' Settings.Default.RegexSpentMatch))  				mAwaitingTransfer [lnKey] = false;  			else {  				Match lRegexMatch = Regex.Match (lsFoundLine' Settings.Default.RegexBalanceMatch' RegexOptions.ExplicitCapture);  				if (lRegexMatch.Success) {  					mBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["Balance"].Value' CultureInfo.InvariantCulture);  					mUnlockedBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["UnlockedBalance"].Value' CultureInfo.InvariantCulture);  					lock (Settings.Default) {  						if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) {  							decimal lToTransfer = mUnlockedBalances [lnKey] - Settings.Default.AutoTransferFee;  							lock (mConsoleLock) {  								lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  								Settings.Default.AutoTransferredSoFar += lToTransfer;  								Settings.Default.Save ();  								Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  								mAwaitingTransfer [lnKey] = true;  								Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  								lProcess.StandardInput.WriteLine ("refresh");  								lProcess.StandardInput.WriteLine ("save");  								lProcess.StandardInput.WriteLine ("balance");  							}  						}  					}  					Decimal lTotalBalance = mBalances.Values.Sum ();  					Decimal lTotalUnlockedBalance = mUnlockedBalances.Values.Sum ();  					lock (mConsoleLock) {  						Console.ForegroundColor = ConsoleColor.Green;  						Console.WriteLine ("Total balance:                             " + lTotalBalance.ToString (CultureInfo.CurrentCulture));  						Console.WriteLine ("Total unlocked balance:                    " + lTotalUnlockedBalance.ToString (CultureInfo.CurrentCulture));  						Console.WriteLine ("Total auto-transferred:                    " + Settings.Default.AutoTransferredSoFar.ToString (CultureInfo.CurrentCulture));  						Console.WriteLine ("Total balance' including auto-transferred: " + (lTotalBalance + Settings.Default.AutoTransferredSoFar).ToString (CultureInfo.CurrentCulture));  						Console.ResetColor ();  					}  				}  			}  		}  		Thread.Sleep (0);  	}  	Thread.Sleep (100);  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: while (mProcesses.Count > 0) {  	foreach (string lsWallet in masWallets) {  		if (!mProcesses.ContainsKey (lsWallet))  			continue;  		Process lProcess = mProcesses [lsWallet];  		int lnKey = lProcess.Id;  		String lsFoundLine;  		lock (mLocks [lnKey]) {  			string lsCurrent = mOutputData [lnKey].Trim ();  			int lnIndex = lsCurrent.IndexOfAny (new char[] {  				'\r''  				'\n'  			});  			if (lnIndex > 0) {  				lsFoundLine = lsCurrent.Substring (0' lnIndex).Trim ();  				lsCurrent = lsCurrent.Substring (lnIndex).Trim ();  				mOutputData [lnKey] = lsCurrent;  			}  			else {  				lsFoundLine = lsCurrent;  				mOutputData [lnKey] = "";  				if (lProcess.HasExited)  					mProcesses.Remove (lsWallet);  			}  		}  		if (lsFoundLine.Length > 0) {  			Console.ForegroundColor = ConsoleColor.Yellow;  			Console.Write (lsWallet);  			Console.ResetColor ();  			Console.CursorLeft = mnWalletNameLength + 4;  			Console.Write (lsFoundLine + "\n");  			if (Regex.IsMatch (lsFoundLine' Settings.Default.RegexSpentMatch))  				mAwaitingTransfer [lnKey] = false;  			else {  				Match lRegexMatch = Regex.Match (lsFoundLine' Settings.Default.RegexBalanceMatch' RegexOptions.ExplicitCapture);  				if (lRegexMatch.Success) {  					mBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["Balance"].Value' CultureInfo.InvariantCulture);  					mUnlockedBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["UnlockedBalance"].Value' CultureInfo.InvariantCulture);  					lock (Settings.Default) {  						if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) {  							decimal lToTransfer = mUnlockedBalances [lnKey] - Settings.Default.AutoTransferFee;  							lock (mConsoleLock) {  								lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  								Settings.Default.AutoTransferredSoFar += lToTransfer;  								Settings.Default.Save ();  								Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  								mAwaitingTransfer [lnKey] = true;  								Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  								lProcess.StandardInput.WriteLine ("refresh");  								lProcess.StandardInput.WriteLine ("save");  								lProcess.StandardInput.WriteLine ("balance");  							}  						}  					}  					Decimal lTotalBalance = mBalances.Values.Sum ();  					Decimal lTotalUnlockedBalance = mUnlockedBalances.Values.Sum ();  					lock (mConsoleLock) {  						Console.ForegroundColor = ConsoleColor.Green;  						Console.WriteLine ("Total balance:                             " + lTotalBalance.ToString (CultureInfo.CurrentCulture));  						Console.WriteLine ("Total unlocked balance:                    " + lTotalUnlockedBalance.ToString (CultureInfo.CurrentCulture));  						Console.WriteLine ("Total auto-transferred:                    " + Settings.Default.AutoTransferredSoFar.ToString (CultureInfo.CurrentCulture));  						Console.WriteLine ("Total balance' including auto-transferred: " + (lTotalBalance + Settings.Default.AutoTransferredSoFar).ToString (CultureInfo.CurrentCulture));  						Console.ResetColor ();  					}  				}  			}  		}  		Thread.Sleep (0);  	}  	Thread.Sleep (100);  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: foreach (string lsWallet in masWallets) {  	if (!mProcesses.ContainsKey (lsWallet))  		continue;  	Process lProcess = mProcesses [lsWallet];  	int lnKey = lProcess.Id;  	String lsFoundLine;  	lock (mLocks [lnKey]) {  		string lsCurrent = mOutputData [lnKey].Trim ();  		int lnIndex = lsCurrent.IndexOfAny (new char[] {  			'\r''  			'\n'  		});  		if (lnIndex > 0) {  			lsFoundLine = lsCurrent.Substring (0' lnIndex).Trim ();  			lsCurrent = lsCurrent.Substring (lnIndex).Trim ();  			mOutputData [lnKey] = lsCurrent;  		}  		else {  			lsFoundLine = lsCurrent;  			mOutputData [lnKey] = "";  			if (lProcess.HasExited)  				mProcesses.Remove (lsWallet);  		}  	}  	if (lsFoundLine.Length > 0) {  		Console.ForegroundColor = ConsoleColor.Yellow;  		Console.Write (lsWallet);  		Console.ResetColor ();  		Console.CursorLeft = mnWalletNameLength + 4;  		Console.Write (lsFoundLine + "\n");  		if (Regex.IsMatch (lsFoundLine' Settings.Default.RegexSpentMatch))  			mAwaitingTransfer [lnKey] = false;  		else {  			Match lRegexMatch = Regex.Match (lsFoundLine' Settings.Default.RegexBalanceMatch' RegexOptions.ExplicitCapture);  			if (lRegexMatch.Success) {  				mBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["Balance"].Value' CultureInfo.InvariantCulture);  				mUnlockedBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["UnlockedBalance"].Value' CultureInfo.InvariantCulture);  				lock (Settings.Default) {  					if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) {  						decimal lToTransfer = mUnlockedBalances [lnKey] - Settings.Default.AutoTransferFee;  						lock (mConsoleLock) {  							lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  							Settings.Default.AutoTransferredSoFar += lToTransfer;  							Settings.Default.Save ();  							Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  							mAwaitingTransfer [lnKey] = true;  							Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  							lProcess.StandardInput.WriteLine ("refresh");  							lProcess.StandardInput.WriteLine ("save");  							lProcess.StandardInput.WriteLine ("balance");  						}  					}  				}  				Decimal lTotalBalance = mBalances.Values.Sum ();  				Decimal lTotalUnlockedBalance = mUnlockedBalances.Values.Sum ();  				lock (mConsoleLock) {  					Console.ForegroundColor = ConsoleColor.Green;  					Console.WriteLine ("Total balance:                             " + lTotalBalance.ToString (CultureInfo.CurrentCulture));  					Console.WriteLine ("Total unlocked balance:                    " + lTotalUnlockedBalance.ToString (CultureInfo.CurrentCulture));  					Console.WriteLine ("Total auto-transferred:                    " + Settings.Default.AutoTransferredSoFar.ToString (CultureInfo.CurrentCulture));  					Console.WriteLine ("Total balance' including auto-transferred: " + (lTotalBalance + Settings.Default.AutoTransferredSoFar).ToString (CultureInfo.CurrentCulture));  					Console.ResetColor ();  				}  			}  		}  	}  	Thread.Sleep (0);  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: foreach (string lsWallet in masWallets) {  	if (!mProcesses.ContainsKey (lsWallet))  		continue;  	Process lProcess = mProcesses [lsWallet];  	int lnKey = lProcess.Id;  	String lsFoundLine;  	lock (mLocks [lnKey]) {  		string lsCurrent = mOutputData [lnKey].Trim ();  		int lnIndex = lsCurrent.IndexOfAny (new char[] {  			'\r''  			'\n'  		});  		if (lnIndex > 0) {  			lsFoundLine = lsCurrent.Substring (0' lnIndex).Trim ();  			lsCurrent = lsCurrent.Substring (lnIndex).Trim ();  			mOutputData [lnKey] = lsCurrent;  		}  		else {  			lsFoundLine = lsCurrent;  			mOutputData [lnKey] = "";  			if (lProcess.HasExited)  				mProcesses.Remove (lsWallet);  		}  	}  	if (lsFoundLine.Length > 0) {  		Console.ForegroundColor = ConsoleColor.Yellow;  		Console.Write (lsWallet);  		Console.ResetColor ();  		Console.CursorLeft = mnWalletNameLength + 4;  		Console.Write (lsFoundLine + "\n");  		if (Regex.IsMatch (lsFoundLine' Settings.Default.RegexSpentMatch))  			mAwaitingTransfer [lnKey] = false;  		else {  			Match lRegexMatch = Regex.Match (lsFoundLine' Settings.Default.RegexBalanceMatch' RegexOptions.ExplicitCapture);  			if (lRegexMatch.Success) {  				mBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["Balance"].Value' CultureInfo.InvariantCulture);  				mUnlockedBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["UnlockedBalance"].Value' CultureInfo.InvariantCulture);  				lock (Settings.Default) {  					if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) {  						decimal lToTransfer = mUnlockedBalances [lnKey] - Settings.Default.AutoTransferFee;  						lock (mConsoleLock) {  							lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  							Settings.Default.AutoTransferredSoFar += lToTransfer;  							Settings.Default.Save ();  							Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  							mAwaitingTransfer [lnKey] = true;  							Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  							lProcess.StandardInput.WriteLine ("refresh");  							lProcess.StandardInput.WriteLine ("save");  							lProcess.StandardInput.WriteLine ("balance");  						}  					}  				}  				Decimal lTotalBalance = mBalances.Values.Sum ();  				Decimal lTotalUnlockedBalance = mUnlockedBalances.Values.Sum ();  				lock (mConsoleLock) {  					Console.ForegroundColor = ConsoleColor.Green;  					Console.WriteLine ("Total balance:                             " + lTotalBalance.ToString (CultureInfo.CurrentCulture));  					Console.WriteLine ("Total unlocked balance:                    " + lTotalUnlockedBalance.ToString (CultureInfo.CurrentCulture));  					Console.WriteLine ("Total auto-transferred:                    " + Settings.Default.AutoTransferredSoFar.ToString (CultureInfo.CurrentCulture));  					Console.WriteLine ("Total balance' including auto-transferred: " + (lTotalBalance + Settings.Default.AutoTransferredSoFar).ToString (CultureInfo.CurrentCulture));  					Console.ResetColor ();  				}  			}  		}  	}  	Thread.Sleep (0);  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: if (lsFoundLine.Length > 0) {  	Console.ForegroundColor = ConsoleColor.Yellow;  	Console.Write (lsWallet);  	Console.ResetColor ();  	Console.CursorLeft = mnWalletNameLength + 4;  	Console.Write (lsFoundLine + "\n");  	if (Regex.IsMatch (lsFoundLine' Settings.Default.RegexSpentMatch))  		mAwaitingTransfer [lnKey] = false;  	else {  		Match lRegexMatch = Regex.Match (lsFoundLine' Settings.Default.RegexBalanceMatch' RegexOptions.ExplicitCapture);  		if (lRegexMatch.Success) {  			mBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["Balance"].Value' CultureInfo.InvariantCulture);  			mUnlockedBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["UnlockedBalance"].Value' CultureInfo.InvariantCulture);  			lock (Settings.Default) {  				if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) {  					decimal lToTransfer = mUnlockedBalances [lnKey] - Settings.Default.AutoTransferFee;  					lock (mConsoleLock) {  						lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  						Settings.Default.AutoTransferredSoFar += lToTransfer;  						Settings.Default.Save ();  						Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  						mAwaitingTransfer [lnKey] = true;  						Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  						lProcess.StandardInput.WriteLine ("refresh");  						lProcess.StandardInput.WriteLine ("save");  						lProcess.StandardInput.WriteLine ("balance");  					}  				}  			}  			Decimal lTotalBalance = mBalances.Values.Sum ();  			Decimal lTotalUnlockedBalance = mUnlockedBalances.Values.Sum ();  			lock (mConsoleLock) {  				Console.ForegroundColor = ConsoleColor.Green;  				Console.WriteLine ("Total balance:                             " + lTotalBalance.ToString (CultureInfo.CurrentCulture));  				Console.WriteLine ("Total unlocked balance:                    " + lTotalUnlockedBalance.ToString (CultureInfo.CurrentCulture));  				Console.WriteLine ("Total auto-transferred:                    " + Settings.Default.AutoTransferredSoFar.ToString (CultureInfo.CurrentCulture));  				Console.WriteLine ("Total balance' including auto-transferred: " + (lTotalBalance + Settings.Default.AutoTransferredSoFar).ToString (CultureInfo.CurrentCulture));  				Console.ResetColor ();  			}  		}  	}  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: if (lsFoundLine.Length > 0) {  	Console.ForegroundColor = ConsoleColor.Yellow;  	Console.Write (lsWallet);  	Console.ResetColor ();  	Console.CursorLeft = mnWalletNameLength + 4;  	Console.Write (lsFoundLine + "\n");  	if (Regex.IsMatch (lsFoundLine' Settings.Default.RegexSpentMatch))  		mAwaitingTransfer [lnKey] = false;  	else {  		Match lRegexMatch = Regex.Match (lsFoundLine' Settings.Default.RegexBalanceMatch' RegexOptions.ExplicitCapture);  		if (lRegexMatch.Success) {  			mBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["Balance"].Value' CultureInfo.InvariantCulture);  			mUnlockedBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["UnlockedBalance"].Value' CultureInfo.InvariantCulture);  			lock (Settings.Default) {  				if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) {  					decimal lToTransfer = mUnlockedBalances [lnKey] - Settings.Default.AutoTransferFee;  					lock (mConsoleLock) {  						lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  						Settings.Default.AutoTransferredSoFar += lToTransfer;  						Settings.Default.Save ();  						Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  						mAwaitingTransfer [lnKey] = true;  						Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  						lProcess.StandardInput.WriteLine ("refresh");  						lProcess.StandardInput.WriteLine ("save");  						lProcess.StandardInput.WriteLine ("balance");  					}  				}  			}  			Decimal lTotalBalance = mBalances.Values.Sum ();  			Decimal lTotalUnlockedBalance = mUnlockedBalances.Values.Sum ();  			lock (mConsoleLock) {  				Console.ForegroundColor = ConsoleColor.Green;  				Console.WriteLine ("Total balance:                             " + lTotalBalance.ToString (CultureInfo.CurrentCulture));  				Console.WriteLine ("Total unlocked balance:                    " + lTotalUnlockedBalance.ToString (CultureInfo.CurrentCulture));  				Console.WriteLine ("Total auto-transferred:                    " + Settings.Default.AutoTransferredSoFar.ToString (CultureInfo.CurrentCulture));  				Console.WriteLine ("Total balance' including auto-transferred: " + (lTotalBalance + Settings.Default.AutoTransferredSoFar).ToString (CultureInfo.CurrentCulture));  				Console.ResetColor ();  			}  		}  	}  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: Console.CursorLeft = mnWalletNameLength + 4;  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: if (Regex.IsMatch (lsFoundLine' Settings.Default.RegexSpentMatch))  	mAwaitingTransfer [lnKey] = false;  else {  	Match lRegexMatch = Regex.Match (lsFoundLine' Settings.Default.RegexBalanceMatch' RegexOptions.ExplicitCapture);  	if (lRegexMatch.Success) {  		mBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["Balance"].Value' CultureInfo.InvariantCulture);  		mUnlockedBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["UnlockedBalance"].Value' CultureInfo.InvariantCulture);  		lock (Settings.Default) {  			if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) {  				decimal lToTransfer = mUnlockedBalances [lnKey] - Settings.Default.AutoTransferFee;  				lock (mConsoleLock) {  					lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  					Settings.Default.AutoTransferredSoFar += lToTransfer;  					Settings.Default.Save ();  					Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  					mAwaitingTransfer [lnKey] = true;  					Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  					lProcess.StandardInput.WriteLine ("refresh");  					lProcess.StandardInput.WriteLine ("save");  					lProcess.StandardInput.WriteLine ("balance");  				}  			}  		}  		Decimal lTotalBalance = mBalances.Values.Sum ();  		Decimal lTotalUnlockedBalance = mUnlockedBalances.Values.Sum ();  		lock (mConsoleLock) {  			Console.ForegroundColor = ConsoleColor.Green;  			Console.WriteLine ("Total balance:                             " + lTotalBalance.ToString (CultureInfo.CurrentCulture));  			Console.WriteLine ("Total unlocked balance:                    " + lTotalUnlockedBalance.ToString (CultureInfo.CurrentCulture));  			Console.WriteLine ("Total auto-transferred:                    " + Settings.Default.AutoTransferredSoFar.ToString (CultureInfo.CurrentCulture));  			Console.WriteLine ("Total balance' including auto-transferred: " + (lTotalBalance + Settings.Default.AutoTransferredSoFar).ToString (CultureInfo.CurrentCulture));  			Console.ResetColor ();  		}  	}  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: if (lRegexMatch.Success) {  	mBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["Balance"].Value' CultureInfo.InvariantCulture);  	mUnlockedBalances [lnKey] = Convert.ToDecimal (lRegexMatch.Groups ["UnlockedBalance"].Value' CultureInfo.InvariantCulture);  	lock (Settings.Default) {  		if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) {  			decimal lToTransfer = mUnlockedBalances [lnKey] - Settings.Default.AutoTransferFee;  			lock (mConsoleLock) {  				lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  				Settings.Default.AutoTransferredSoFar += lToTransfer;  				Settings.Default.Save ();  				Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  				mAwaitingTransfer [lnKey] = true;  				Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  				lProcess.StandardInput.WriteLine ("refresh");  				lProcess.StandardInput.WriteLine ("save");  				lProcess.StandardInput.WriteLine ("balance");  			}  		}  	}  	Decimal lTotalBalance = mBalances.Values.Sum ();  	Decimal lTotalUnlockedBalance = mUnlockedBalances.Values.Sum ();  	lock (mConsoleLock) {  		Console.ForegroundColor = ConsoleColor.Green;  		Console.WriteLine ("Total balance:                             " + lTotalBalance.ToString (CultureInfo.CurrentCulture));  		Console.WriteLine ("Total unlocked balance:                    " + lTotalUnlockedBalance.ToString (CultureInfo.CurrentCulture));  		Console.WriteLine ("Total auto-transferred:                    " + Settings.Default.AutoTransferredSoFar.ToString (CultureInfo.CurrentCulture));  		Console.WriteLine ("Total balance' including auto-transferred: " + (lTotalBalance + Settings.Default.AutoTransferredSoFar).ToString (CultureInfo.CurrentCulture));  		Console.ResetColor ();  	}  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: lock (Settings.Default) {  	if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) {  		decimal lToTransfer = mUnlockedBalances [lnKey] - Settings.Default.AutoTransferFee;  		lock (mConsoleLock) {  			lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  			Settings.Default.AutoTransferredSoFar += lToTransfer;  			Settings.Default.Save ();  			Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  			mAwaitingTransfer [lnKey] = true;  			Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  			lProcess.StandardInput.WriteLine ("refresh");  			lProcess.StandardInput.WriteLine ("save");  			lProcess.StandardInput.WriteLine ("balance");  		}  	}  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: if ((!mAwaitingTransfer [lnKey]) && Settings.Default.AutoTransferEnabled && Settings.Default.AutoTransferAddress.Length > 0 && mUnlockedBalances [lnKey] > Settings.Default.AutoTransferMinimum + Settings.Default.AutoTransferFee) {  	decimal lToTransfer = mUnlockedBalances [lnKey] - Settings.Default.AutoTransferFee;  	lock (mConsoleLock) {  		lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  		Settings.Default.AutoTransferredSoFar += lToTransfer;  		Settings.Default.Save ();  		Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  		mAwaitingTransfer [lnKey] = true;  		Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  		lProcess.StandardInput.WriteLine ("refresh");  		lProcess.StandardInput.WriteLine ("save");  		lProcess.StandardInput.WriteLine ("balance");  	}  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: lock (mConsoleLock) {  	lProcess.StandardInput.WriteLine (("transfer " + Settings.Default.AutoTransferMixInCount + " " + Settings.Default.AutoTransferAddress + " " + lToTransfer.ToString (CultureInfo.InvariantCulture) + " " + Settings.Default.AutoTransferPaymentID).TrimEnd ());  	Settings.Default.AutoTransferredSoFar += lToTransfer;  	Settings.Default.Save ();  	Console.WriteLine ("Pausing all operations for " + Settings.Default.AutoTransferPauseTimeSeconds.ToString (CultureInfo.CurrentCulture) + " seconds. Please be patient.");  	mAwaitingTransfer [lnKey] = true;  	Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  	lProcess.StandardInput.WriteLine ("refresh");  	lProcess.StandardInput.WriteLine ("save");  	lProcess.StandardInput.WriteLine ("balance");  }  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: Thread.Sleep ((int)Math.Min (Int32.MaxValue' Settings.Default.AutoTransferPauseTimeSeconds * 1000));  
Magic Number,CryptoNoteMultiWalletMonitor,Program,C:\repos\xdo-soft_CryptoNoteMultiWalletMonitor\CryptoNoteMultiWalletMonitor\Program.cs,MonitorOutput,The following statement contains a magic number: Thread.Sleep (100);  
