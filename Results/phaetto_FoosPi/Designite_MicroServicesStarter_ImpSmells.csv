Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MicroServicesStarter.Deploy.FileCopy,FileCopier,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\FileCopy\FileCopier.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,Cyclomatic complexity of the method is 17
Complex Method,MicroServicesStarter.ServiceManagement.Action,CloseServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\CloseServices.cs,Act,Cyclomatic complexity of the method is 8
Complex Method,MicroServicesStarter.ServiceManagement.Action,InstallAndStartServicesForIntegrationTest,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallAndStartServicesForIntegrationTest.cs,Act,Cyclomatic complexity of the method is 9
Complex Method,MicroServicesStarter.ServiceManagement.Action,InstallProjects,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallProjects.cs,Act,Cyclomatic complexity of the method is 8
Complex Method,MicroServicesStarter.ServiceManagement.Action,StartServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\StartServices.cs,Act,Cyclomatic complexity of the method is 10
Complex Method,MicroServicesStarter.Debug,InitForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Debug\InitForm.cs,Starter_Shown,Cyclomatic complexity of the method is 15
Long Parameter List,MicroServicesStarter.Deploy,DeployForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\DeployForm.cs,doDeployBackgroundWorker_DoWork,The method has 7 parameters.
Long Parameter List,MicroServicesStarter.ServiceManagement.Action,InstallAndStartServicesForIntegrationTest,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallAndStartServicesForIntegrationTest.cs,Act,The method has 5 parameters.
Long Statement,MicroServicesStarter.Deploy.Actions,FillOutNuspecFiles,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\Actions\FillOutNuspecFiles.cs,Act,The length of the statement  "				var nugetPackageNode = packagesXmlDocument.SelectSingleNode (string.Format ("/package/metadata/dependencies/dependency[@id='{0}']"' id)); " is 137.
Long Statement,MicroServicesStarter.Deploy.Actions,DeployToUpdate,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\Actions\DeployToUpdate.cs,Act,The length of the statement  "			using (var updateServer = new Client (packageUploadData.UpdateServerHostname' packageUploadData.UpdateServerPort).Do (new OpenConnection ())) { " is 143.
Long Statement,MicroServicesStarter.Deploy.Actions,DeployToUpdate,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\Actions\DeployToUpdate.cs,Act,The length of the statement  "				context.LogToUi (string.Format ("Package {0}' {1} has been successfully uploaded to tcp://{2}:{3}"' packageUploadData.PackageName' packageUploadData.PackageVersionLabel' packageUploadData.UpdateServerHostname' packageUploadData.UpdateServerPort)); " is 247.
Long Statement,MicroServicesStarter.Deploy.FileCopy,FileCopier,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\FileCopy\FileCopier.cs,Execute,The length of the statement  "			var targetFile = directiveNode.Attributes ["to"] == null ? directiveNode.Attributes ["name"].Value : directiveNode.Attributes ["to"].Value; " is 139.
Long Statement,MicroServicesStarter.Deploy.FileCopy,FileCopier,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\FileCopy\FileCopier.cs,Execute,The length of the statement  "			var searchOption = directiveNode.Attributes ["recursive"] == null || directiveNode.Attributes ["recursive"].Value != "true" ? SearchOption.TopDirectoryOnly : SearchOption.AllDirectories; " is 186.
Long Statement,MicroServicesStarter.Deploy.FileCopy,FileCopier,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\FileCopy\FileCopier.cs,Execute,The length of the statement  "			var results = Directory.GetFiles (searchPath' Path.GetFileName (directiveNode.Attributes ["search"].Value)' searchOption); " is 122.
Long Statement,MicroServicesStarter.Deploy.FileCopy,FileCopier,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\FileCopy\FileCopier.cs,Execute,The length of the statement  "			var changedFolderToCopy = directiveNode.Attributes ["to"] != null ? Path.GetFullPath (toFolder + directiveNode.Attributes ["to"].Value) : toFolder; " is 147.
Long Statement,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The length of the statement  "		throw new InvalidDataException ("The version is not of the form x.x.x.x' where x numbers! Correct that in the version file"); " is 125.
Long Statement,MicroServicesStarter.Deploy,DeployForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\DeployForm.cs,DeployForm_Load,The length of the statement  "	updatingToLabel.Text = "To: " + PreparedDeploySetupContext.GetNextVersion (releaseType' deploySetupContext.CurrentVersion); " is 123.
Long Statement,MicroServicesStarter.Deploy,DeployForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\DeployForm.cs,debugRadioButton_CheckedChanged,The length of the statement  "	updatingToLabel.Text = "To: " + PreparedDeploySetupContext.GetNextVersion (releaseType' deploySetupContext.CurrentVersion); " is 123.
Long Statement,MicroServicesStarter.Deploy,DeployForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\DeployForm.cs,releaseRadioButton_CheckedChanged,The length of the statement  "	updatingToLabel.Text = "To: " + PreparedDeploySetupContext.GetNextVersion (releaseType' deploySetupContext.CurrentVersion); " is 123.
Long Statement,MicroServicesStarter.Deploy,DeployForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\DeployForm.cs,minorRadioButton_CheckedChanged,The length of the statement  "	updatingToLabel.Text = "To: " + PreparedDeploySetupContext.GetNextVersion (releaseType' deploySetupContext.CurrentVersion); " is 123.
Long Statement,MicroServicesStarter.Deploy,DeployForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\DeployForm.cs,majorRadioButton_CheckedChanged,The length of the statement  "	updatingToLabel.Text = "To: " + PreparedDeploySetupContext.GetNextVersion (releaseType' deploySetupContext.CurrentVersion); " is 123.
Long Statement,MicroServicesStarter.Deploy,DeployForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\DeployForm.cs,doDeployBackgroundWorker_DoWork,The length of the statement  "	var preparedDeployContext = deploySetupContext.Do (new ToPreparedDeployContext (releaseType' releaseCommentsTextBox.Text)); " is 123.
Long Statement,MicroServicesStarter.Deploy,DeployForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\DeployForm.cs,doDeployBackgroundWorker_DoWork,The length of the statement  "	preparedDeployContext.LogToUi ("Deploying to update...").DoIf (x => hasAnyUpdatePackage' new PrepareUpdateFiles ()).DoIfNotNull (new DeployToUpdate ()); " is 152.
Long Statement,MicroServicesStarter.Deploy,DeployForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\DeployForm.cs,doDeployBackgroundWorker_DoWork,The length of the statement  "	preparedDeployContext.DoIf (x => hasAnyNugetPackage' new PrepareNugetFiles ()).DoIfNotNull (new FillOutNuspecFiles ()).DoIfNotNull (new DeployToNuget ()); " is 154.
Long Statement,MicroServicesStarter.Deploy,DeployForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\DeployForm.cs,doDeployBackgroundWorker_DoWork,The length of the statement  "	preparedDeployContext.Do (new SaveVersion ()).LogToUi (string.Format ("Version {0} has been published."' preparedDeployContext.UpdateToVersion)); " is 145.
Long Statement,MicroServicesStarter.ServiceManagement.Action,PrepareFiles,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\PrepareFiles.cs,Act,The length of the statement  "	var filesToCopyToAdmin = string.Format ("{0}{1}-admin-files.xml"' microServicesStarterDirectory' context.SetupType.ToString ()); " is 128.
Long Statement,MicroServicesStarter.ServiceManagement.Action,CloseServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\CloseServices.cs,Act,The length of the statement  "	using (var adminConnection = new Client (StartAdmin.LocalAdminHost' StartAdmin.LocalAdminPort).Do (new WaitUntilClientConnects ())) { " is 133.
Long Statement,MicroServicesStarter.ServiceManagement.Action,CloseServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\CloseServices.cs,Act,The length of the statement  "				context.LogToUi (string.Format ("Stopping running service {0} with id {1}"' report.Value.StartData.ServiceName' report.Key)); " is 125.
Long Statement,MicroServicesStarter.ServiceManagement.Action,CloseServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\CloseServices.cs,Act,The length of the statement  "			context.LogToUi (string.Format ("Deleting service repo {0} with id {1}"' report.Value.StartData.ServiceName' report.Key)); " is 122.
Long Statement,MicroServicesStarter.ServiceManagement.Action,InstallAndStartServicesForIntegrationTest,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallAndStartServicesForIntegrationTest.cs,Act,The length of the statement  "	jsonFileWithStartingServices = jsonFileWithStartingServices ?? string.Format ("services-{0}.json"' context.SetupType.ToString ()); " is 130.
Long Statement,MicroServicesStarter.ServiceManagement.Action,InstallAndStartServicesForIntegrationTest,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallAndStartServicesForIntegrationTest.cs,Act,The length of the statement  "					reports.Where (x => x.Value.StartData.ServiceName == project.Name && x.Value.WorkerState == WorkUnitState.Running).Select (x => adminConnection.Do (new Send (new StopWorkerProcess (x.Key))).Do (new WaitUntilServiceIsDown (x.Key)).Do (new Send (new DeleteWorkerProcessEntry (x.Key)))).ToList (); " is 294.
Long Statement,MicroServicesStarter.ServiceManagement.Action,InstallAndStartServicesForIntegrationTest,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallAndStartServicesForIntegrationTest.cs,Act,The length of the statement  "				adminConnection.Do (new Send (new UninstallService (project.Name))).Do (new WaitUntilServiceIsUninstalled (project.Name)); " is 122.
Long Statement,MicroServicesStarter.ServiceManagement.Action,InstallProjects,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallProjects.cs,Act,The length of the statement  "					reports.Where (x => x.Value.StartData.ServiceName == project.Name && x.Value.WorkerState == WorkUnitState.Running).Select (x => adminConnection.Do (new Send (new StopWorkerProcess (x.Key))).Do (new WaitUntilServiceIsDown (x.Key)).Do (new Send (new DeleteWorkerProcessEntry (x.Key)))).ToList (); " is 294.
Long Statement,MicroServicesStarter.ServiceManagement.Action,InstallProjects,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallProjects.cs,Act,The length of the statement  "				adminConnection.Do (new Send (new UninstallService (project.Name))).Do (new WaitUntilServiceIsUninstalled (project.Name)); " is 122.
Long Statement,MicroServicesStarter.ServiceManagement.Action,StartServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\StartServices.cs,Act,The length of the statement  "	jsonFileWithStartingServices = jsonFileWithStartingServices ?? string.Format ("services-{0}.json"' context.SetupType.ToString ()); " is 130.
Long Statement,MicroServicesStarter.ServiceManagement.Debugger,VisualStudioAttacher,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\VisualStudioAttacher.cs,AttachVisualStudioToProcess,The length of the statement  "				EnvDTE.Process processToAttachTo = visualStudioInstance.Debugger.LocalProcesses.Cast<EnvDTE.Process> ().FirstOrDefault (process => process.ProcessID == applicationProcess.Id); " is 175.
Long Statement,MicroServicesStarter.ServiceManagement.Debugger,VisualStudioAttacher,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\VisualStudioAttacher.cs,AttachVisualStudioToProcess,The length of the statement  "					throw new InvalidOperationException ("Visual Studio process cannot find specified application '" + applicationProcess.Id + "'"); " is 128.
Long Statement,MicroServicesStarter.Debug,InitForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Debug\InitForm.cs,integrationTestBackgroundWorker_DoWork,The length of the statement  "	adminSetupContext.LogToUi (string.Format ("Installing assemblies on their respective servers...")).Do (new GatherProjectInfo ()).Do (new InstallAndStartServicesForIntegrationTest (jsonFileWithStartingServices)).LogToUi ("All services deployed and starting."); " is 259.
Long Statement,MicroServicesStarter.Debug,InitForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Debug\InitForm.cs,setupLocalEnvironmentBackgroundWorker_DoWork,The length of the statement  "	adminSetupContext.LogToUi ("Checking projects...").Do (new GatherProjectInfo ()).LogToUi ("Moving necessary files...").Do (new PrepareFiles ()).LogToUi ("Starting admin process...").Do (new StartAdmin ()).LogToUi ("Installing assemblies...").Do (new InstallProjects ()).LogToUi ("Starting services...").Do (new StartServices ()).LogToUi ("Environment is ready. Close this form to shutdown."); " is 392.
Long Statement,MicroServicesStarter.Debug,StopServicesForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Debug\StopServicesForm.cs,stopServicesBackgroundWorker_DoWork,The length of the statement  "			using (var adminConnection = new Client (StartAdmin.LocalAdminHost' StartAdmin.LocalAdminPort).Do (new OpenConnection ())) { " is 124.
Empty Catch Block,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The method has an empty catch block.
Empty Catch Block,MicroServicesStarter.ServiceManagement.Action,CloseServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\CloseServices.cs,Act,The method has an empty catch block.
Empty Catch Block,MicroServicesStarter.ServiceManagement.Debugger,VisualStudioAttacher,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\VisualStudioAttacher.cs,GetSolutionForVisualStudio,The method has an empty catch block.
Empty Catch Block,MicroServicesStarter.ServiceManagement.Debugger,VisualStudioAttacher,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\VisualStudioAttacher.cs,GetAttachedVisualStudio,The method has an empty catch block.
Empty Catch Block,MicroServicesStarter.ServiceManagement.Debugger,VisualStudioAttacher,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\VisualStudioAttacher.cs,AttachVisualStudioToProcess,The method has an empty catch block.
Empty Catch Block,MicroServicesStarter.ServiceManagement.Debugger,VisualStudioAttacher,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\VisualStudioAttacher.cs,GetVisualStudioForSolution,The method has an empty catch block.
Empty Catch Block,MicroServicesStarter.Debug,StopServicesForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Debug\StopServicesForm.cs,stopServicesBackgroundWorker_DoWork,The method has an empty catch block.
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: if (versionNumbers.Length != 4) {  	throw new InvalidDataException ("The version is not of the form x.x.x.x' where x numbers! Correct that in the version file");  }  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: switch (releaseType) {  case ReleaseType.Debug:  	++versionNumbers [3];  	break;  case ReleaseType.Release:  	++versionNumbers [2];  	versionNumbers [3] = 0;  	break;  case ReleaseType.Minor:  	++versionNumbers [1];  	versionNumbers [2] = versionNumbers [3] = 0;  	break;  case ReleaseType.Major:  	++versionNumbers [0];  	versionNumbers [1] = versionNumbers [2] = versionNumbers [3] = 0;  	break;  }  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: switch (releaseType) {  case ReleaseType.Debug:  	++versionNumbers [3];  	break;  case ReleaseType.Release:  	++versionNumbers [2];  	versionNumbers [3] = 0;  	break;  case ReleaseType.Minor:  	++versionNumbers [1];  	versionNumbers [2] = versionNumbers [3] = 0;  	break;  case ReleaseType.Major:  	++versionNumbers [0];  	versionNumbers [1] = versionNumbers [2] = versionNumbers [3] = 0;  	break;  }  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: switch (releaseType) {  case ReleaseType.Debug:  	++versionNumbers [3];  	break;  case ReleaseType.Release:  	++versionNumbers [2];  	versionNumbers [3] = 0;  	break;  case ReleaseType.Minor:  	++versionNumbers [1];  	versionNumbers [2] = versionNumbers [3] = 0;  	break;  case ReleaseType.Major:  	++versionNumbers [0];  	versionNumbers [1] = versionNumbers [2] = versionNumbers [3] = 0;  	break;  }  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: switch (releaseType) {  case ReleaseType.Debug:  	++versionNumbers [3];  	break;  case ReleaseType.Release:  	++versionNumbers [2];  	versionNumbers [3] = 0;  	break;  case ReleaseType.Minor:  	++versionNumbers [1];  	versionNumbers [2] = versionNumbers [3] = 0;  	break;  case ReleaseType.Major:  	++versionNumbers [0];  	versionNumbers [1] = versionNumbers [2] = versionNumbers [3] = 0;  	break;  }  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: switch (releaseType) {  case ReleaseType.Debug:  	++versionNumbers [3];  	break;  case ReleaseType.Release:  	++versionNumbers [2];  	versionNumbers [3] = 0;  	break;  case ReleaseType.Minor:  	++versionNumbers [1];  	versionNumbers [2] = versionNumbers [3] = 0;  	break;  case ReleaseType.Major:  	++versionNumbers [0];  	versionNumbers [1] = versionNumbers [2] = versionNumbers [3] = 0;  	break;  }  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: switch (releaseType) {  case ReleaseType.Debug:  	++versionNumbers [3];  	break;  case ReleaseType.Release:  	++versionNumbers [2];  	versionNumbers [3] = 0;  	break;  case ReleaseType.Minor:  	++versionNumbers [1];  	versionNumbers [2] = versionNumbers [3] = 0;  	break;  case ReleaseType.Major:  	++versionNumbers [0];  	versionNumbers [1] = versionNumbers [2] = versionNumbers [3] = 0;  	break;  }  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: switch (releaseType) {  case ReleaseType.Debug:  	++versionNumbers [3];  	break;  case ReleaseType.Release:  	++versionNumbers [2];  	versionNumbers [3] = 0;  	break;  case ReleaseType.Minor:  	++versionNumbers [1];  	versionNumbers [2] = versionNumbers [3] = 0;  	break;  case ReleaseType.Major:  	++versionNumbers [0];  	versionNumbers [1] = versionNumbers [2] = versionNumbers [3] = 0;  	break;  }  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: ++versionNumbers [3];  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: ++versionNumbers [2];  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: versionNumbers [3] = 0;  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: versionNumbers [2] = versionNumbers [3] = 0;  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: versionNumbers [2] = versionNumbers [3] = 0;  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: versionNumbers [1] = versionNumbers [2] = versionNumbers [3] = 0;  
Magic Number,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following statement contains a magic number: versionNumbers [1] = versionNumbers [2] = versionNumbers [3] = 0;  
Magic Number,MicroServicesStarter,Program,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Program.cs,Main,The following statement contains a magic number: Thread.Sleep (100);  
Magic Number,MicroServicesStarter,Program,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Program.cs,UpdateOnPath,The following statement contains a magic number: applicationRepository.Do (new UpdateClientApplication ("update.msd.am"' 12345' fullPath));  
Magic Number,MicroServicesStarter.ServiceManagement.Action,InstallAndStartServicesForIntegrationTest,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallAndStartServicesForIntegrationTest.cs,Act,The following statement contains a magic number: foreach (var workerData in servicesToStart) {  	using (var adminConnection = new Client (workerData.AdminHost' workerData.AdminPort).Do (new OpenConnection ())) {  		var reports = adminConnection.Do (new Send<GetReportedDataReturnData> (new GetReportedData ())).Reports;  		var repository = adminConnection.Do (new Send<GetAllRepoServicesReturnData> (new GetAllRepoServices ())).RepoServices;  		var project = context.Projects.First (p => p.Name == workerData.ServiceName);  		if (repository.ContainsKey (project.Name)) {  			context.LogToUi (string.Format ("Housekeeping on service {0}..."' project.Name));  			if (reports.Any (x => x.Value.StartData.ServiceName == project.Name && x.Value.WorkerState == WorkUnitState.Running)) {  				// Stop the services  				context.LogToUi (string.Format ("Stopping instances of service {0}"' project.Name));  				reports.Where (x => x.Value.StartData.ServiceName == project.Name && x.Value.WorkerState == WorkUnitState.Running).Select (x => adminConnection.Do (new Send (new StopWorkerProcess (x.Key))).Do (new WaitUntilServiceIsDown (x.Key)).Do (new Send (new DeleteWorkerProcessEntry (x.Key)))).ToList ();  			}  			context.LogToUi (string.Format ("Uninstalling service {0}"' project.Name));  			adminConnection.Do (new Send (new UninstallService (project.Name))).Do (new WaitUntilServiceIsUninstalled (project.Name));  		}  		context.LogToUi (string.Format ("Zipping file for {0}..."' project.Name));  		// Install the service  		var zipName = string.Format ("{0}.archive.zip"' project.Name);  		using (var zip = new ZipFile ()) {  			zip.AddDirectory (project.BinDirectory);  			zip.Save (zipName);  		}  		var fileUploadToAdminData = new FileUploadToAdminData {  			FileData = File.ReadAllBytes (zipName)'  			ServiceName = project.Name  		};  		File.Delete (zipName);  		context.LogToUi (string.Format ("Uploading and installing service {0}..."' project.Name));  		adminConnection.Do (new Send (new UploadZipAndApplyServiceVersionUpdateFromIt (fileUploadToAdminData)));  		try {  			context.LogToUi (string.Format ("Starting service {0}:{1}"' workerData.ServiceName' workerData.Id));  			adminConnection.Do (new Send (new StartWorkerProcess (workerData)));  		}  		catch (Exception exception) {  			context.LogToUi (string.Format ("Error while starting {0}: {1}"' workerData.Id' exception.Message));  			Thread.Sleep (4000);  		}  	}  }  
Magic Number,MicroServicesStarter.ServiceManagement.Action,InstallAndStartServicesForIntegrationTest,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallAndStartServicesForIntegrationTest.cs,Act,The following statement contains a magic number: using (var adminConnection = new Client (workerData.AdminHost' workerData.AdminPort).Do (new OpenConnection ())) {  	var reports = adminConnection.Do (new Send<GetReportedDataReturnData> (new GetReportedData ())).Reports;  	var repository = adminConnection.Do (new Send<GetAllRepoServicesReturnData> (new GetAllRepoServices ())).RepoServices;  	var project = context.Projects.First (p => p.Name == workerData.ServiceName);  	if (repository.ContainsKey (project.Name)) {  		context.LogToUi (string.Format ("Housekeeping on service {0}..."' project.Name));  		if (reports.Any (x => x.Value.StartData.ServiceName == project.Name && x.Value.WorkerState == WorkUnitState.Running)) {  			// Stop the services  			context.LogToUi (string.Format ("Stopping instances of service {0}"' project.Name));  			reports.Where (x => x.Value.StartData.ServiceName == project.Name && x.Value.WorkerState == WorkUnitState.Running).Select (x => adminConnection.Do (new Send (new StopWorkerProcess (x.Key))).Do (new WaitUntilServiceIsDown (x.Key)).Do (new Send (new DeleteWorkerProcessEntry (x.Key)))).ToList ();  		}  		context.LogToUi (string.Format ("Uninstalling service {0}"' project.Name));  		adminConnection.Do (new Send (new UninstallService (project.Name))).Do (new WaitUntilServiceIsUninstalled (project.Name));  	}  	context.LogToUi (string.Format ("Zipping file for {0}..."' project.Name));  	// Install the service  	var zipName = string.Format ("{0}.archive.zip"' project.Name);  	using (var zip = new ZipFile ()) {  		zip.AddDirectory (project.BinDirectory);  		zip.Save (zipName);  	}  	var fileUploadToAdminData = new FileUploadToAdminData {  		FileData = File.ReadAllBytes (zipName)'  		ServiceName = project.Name  	};  	File.Delete (zipName);  	context.LogToUi (string.Format ("Uploading and installing service {0}..."' project.Name));  	adminConnection.Do (new Send (new UploadZipAndApplyServiceVersionUpdateFromIt (fileUploadToAdminData)));  	try {  		context.LogToUi (string.Format ("Starting service {0}:{1}"' workerData.ServiceName' workerData.Id));  		adminConnection.Do (new Send (new StartWorkerProcess (workerData)));  	}  	catch (Exception exception) {  		context.LogToUi (string.Format ("Error while starting {0}: {1}"' workerData.Id' exception.Message));  		Thread.Sleep (4000);  	}  }  
Magic Number,MicroServicesStarter.ServiceManagement.Action,InstallAndStartServicesForIntegrationTest,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallAndStartServicesForIntegrationTest.cs,Act,The following statement contains a magic number: try {  	context.LogToUi (string.Format ("Starting service {0}:{1}"' workerData.ServiceName' workerData.Id));  	adminConnection.Do (new Send (new StartWorkerProcess (workerData)));  }  catch (Exception exception) {  	context.LogToUi (string.Format ("Error while starting {0}: {1}"' workerData.Id' exception.Message));  	Thread.Sleep (4000);  }  
Magic Number,MicroServicesStarter.ServiceManagement.Action,InstallAndStartServicesForIntegrationTest,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\InstallAndStartServicesForIntegrationTest.cs,Act,The following statement contains a magic number: Thread.Sleep (4000);  
Magic Number,MicroServicesStarter.ServiceManagement.Action,StartServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\StartServices.cs,Act,The following statement contains a magic number: using (var adminConnection = new Client (adminHost' adminPort).Do (new WaitUntilClientConnects ())) {  	foreach (var workerData in servicesToStart) {  		try {  			context.LogToUi (string.Format ("Starting service {0}:{1}"' workerData.ServiceName' workerData.Id));  			if (context.SetupType == SetupType.Debug || context.SetupType == SetupType.Release) {  				// Force all applications to be in one server for testing  				workerData.AdminHost = adminHost;  				workerData.AdminPort = adminPort;  			}  			adminConnection.Do (new Send (new StartWorkerProcess (workerData)));  			if (context.SetupType == SetupType.Debug) {  				context.LogToUi (string.Format ("Attaching to service {0}:{1}"' workerData.ServiceName' workerData.Id));  				var serviceProcess = Process.GetProcessesByName ("Services.Executioner").OrderByDescending (x => x.StartTime).First ();  				context.Do (new AttachDebuggerToProcess (serviceProcess));  			}  			successfulServices.Add (workerData.Id' true);  		}  		catch (Exception exception) {  			context.LogToUi (string.Format ("Error while starting {0}: {1}"' workerData.Id' exception.Message));  			Thread.Sleep (4000);  		}  	}  	foreach (var workerData in servicesToStart) {  		try {  			if (successfulServices.ContainsKey (workerData.Id)) {  				context.LogToUi (string.Format ("Waiting service {0}:{1} to warm up"' workerData.ServiceName' workerData.Id));  				adminConnection.Do (new WaitUntilServiceIsUp (workerData.Id));  			}  		}  		catch (Exception exception) {  			context.LogToUi (string.Format ("Error while starting {0}: {1}"' workerData.Id' exception.Message));  			Thread.Sleep (4000);  		}  	}  }  
Magic Number,MicroServicesStarter.ServiceManagement.Action,StartServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\StartServices.cs,Act,The following statement contains a magic number: using (var adminConnection = new Client (adminHost' adminPort).Do (new WaitUntilClientConnects ())) {  	foreach (var workerData in servicesToStart) {  		try {  			context.LogToUi (string.Format ("Starting service {0}:{1}"' workerData.ServiceName' workerData.Id));  			if (context.SetupType == SetupType.Debug || context.SetupType == SetupType.Release) {  				// Force all applications to be in one server for testing  				workerData.AdminHost = adminHost;  				workerData.AdminPort = adminPort;  			}  			adminConnection.Do (new Send (new StartWorkerProcess (workerData)));  			if (context.SetupType == SetupType.Debug) {  				context.LogToUi (string.Format ("Attaching to service {0}:{1}"' workerData.ServiceName' workerData.Id));  				var serviceProcess = Process.GetProcessesByName ("Services.Executioner").OrderByDescending (x => x.StartTime).First ();  				context.Do (new AttachDebuggerToProcess (serviceProcess));  			}  			successfulServices.Add (workerData.Id' true);  		}  		catch (Exception exception) {  			context.LogToUi (string.Format ("Error while starting {0}: {1}"' workerData.Id' exception.Message));  			Thread.Sleep (4000);  		}  	}  	foreach (var workerData in servicesToStart) {  		try {  			if (successfulServices.ContainsKey (workerData.Id)) {  				context.LogToUi (string.Format ("Waiting service {0}:{1} to warm up"' workerData.ServiceName' workerData.Id));  				adminConnection.Do (new WaitUntilServiceIsUp (workerData.Id));  			}  		}  		catch (Exception exception) {  			context.LogToUi (string.Format ("Error while starting {0}: {1}"' workerData.Id' exception.Message));  			Thread.Sleep (4000);  		}  	}  }  
Magic Number,MicroServicesStarter.ServiceManagement.Action,StartServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\StartServices.cs,Act,The following statement contains a magic number: foreach (var workerData in servicesToStart) {  	try {  		context.LogToUi (string.Format ("Starting service {0}:{1}"' workerData.ServiceName' workerData.Id));  		if (context.SetupType == SetupType.Debug || context.SetupType == SetupType.Release) {  			// Force all applications to be in one server for testing  			workerData.AdminHost = adminHost;  			workerData.AdminPort = adminPort;  		}  		adminConnection.Do (new Send (new StartWorkerProcess (workerData)));  		if (context.SetupType == SetupType.Debug) {  			context.LogToUi (string.Format ("Attaching to service {0}:{1}"' workerData.ServiceName' workerData.Id));  			var serviceProcess = Process.GetProcessesByName ("Services.Executioner").OrderByDescending (x => x.StartTime).First ();  			context.Do (new AttachDebuggerToProcess (serviceProcess));  		}  		successfulServices.Add (workerData.Id' true);  	}  	catch (Exception exception) {  		context.LogToUi (string.Format ("Error while starting {0}: {1}"' workerData.Id' exception.Message));  		Thread.Sleep (4000);  	}  }  
Magic Number,MicroServicesStarter.ServiceManagement.Action,StartServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\StartServices.cs,Act,The following statement contains a magic number: try {  	context.LogToUi (string.Format ("Starting service {0}:{1}"' workerData.ServiceName' workerData.Id));  	if (context.SetupType == SetupType.Debug || context.SetupType == SetupType.Release) {  		// Force all applications to be in one server for testing  		workerData.AdminHost = adminHost;  		workerData.AdminPort = adminPort;  	}  	adminConnection.Do (new Send (new StartWorkerProcess (workerData)));  	if (context.SetupType == SetupType.Debug) {  		context.LogToUi (string.Format ("Attaching to service {0}:{1}"' workerData.ServiceName' workerData.Id));  		var serviceProcess = Process.GetProcessesByName ("Services.Executioner").OrderByDescending (x => x.StartTime).First ();  		context.Do (new AttachDebuggerToProcess (serviceProcess));  	}  	successfulServices.Add (workerData.Id' true);  }  catch (Exception exception) {  	context.LogToUi (string.Format ("Error while starting {0}: {1}"' workerData.Id' exception.Message));  	Thread.Sleep (4000);  }  
Magic Number,MicroServicesStarter.ServiceManagement.Action,StartServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\StartServices.cs,Act,The following statement contains a magic number: Thread.Sleep (4000);  
Magic Number,MicroServicesStarter.ServiceManagement.Action,StartServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\StartServices.cs,Act,The following statement contains a magic number: foreach (var workerData in servicesToStart) {  	try {  		if (successfulServices.ContainsKey (workerData.Id)) {  			context.LogToUi (string.Format ("Waiting service {0}:{1} to warm up"' workerData.ServiceName' workerData.Id));  			adminConnection.Do (new WaitUntilServiceIsUp (workerData.Id));  		}  	}  	catch (Exception exception) {  		context.LogToUi (string.Format ("Error while starting {0}: {1}"' workerData.Id' exception.Message));  		Thread.Sleep (4000);  	}  }  
Magic Number,MicroServicesStarter.ServiceManagement.Action,StartServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\StartServices.cs,Act,The following statement contains a magic number: try {  	if (successfulServices.ContainsKey (workerData.Id)) {  		context.LogToUi (string.Format ("Waiting service {0}:{1} to warm up"' workerData.ServiceName' workerData.Id));  		adminConnection.Do (new WaitUntilServiceIsUp (workerData.Id));  	}  }  catch (Exception exception) {  	context.LogToUi (string.Format ("Error while starting {0}: {1}"' workerData.Id' exception.Message));  	Thread.Sleep (4000);  }  
Magic Number,MicroServicesStarter.ServiceManagement.Action,StartServices,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Action\StartServices.cs,Act,The following statement contains a magic number: Thread.Sleep (4000);  
Magic Number,MicroServicesStarter.ServiceManagement.Debugger,MessageFilter,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\ComFilters.cs,RetryRejectedCall,The following statement contains a magic number: if (dwRejectType == 2)// flag = SERVERCALL_RETRYLATER.   {  	// Retry the thread call immediately if return >=0 &   	// <100.  	return 99;  }  
Magic Number,MicroServicesStarter.ServiceManagement.Debugger,MessageFilter,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\ComFilters.cs,RetryRejectedCall,The following statement contains a magic number: if (dwRejectType == 2)// flag = SERVERCALL_RETRYLATER.   {  	// Retry the thread call immediately if return >=0 &   	// <100.  	return 99;  }  
Magic Number,MicroServicesStarter.ServiceManagement.Debugger,MessageFilter,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\ComFilters.cs,RetryRejectedCall,The following statement contains a magic number: return 99;  
Magic Number,MicroServicesStarter.ServiceManagement.Debugger,MessageFilter,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\ComFilters.cs,MessagePending,The following statement contains a magic number: return 2;  
Magic Number,MicroServicesStarter.ServiceManagement.Debugger,VisualStudioAttacher,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\VisualStudioAttacher.cs,AttachVisualStudioToProcess,The following statement contains a magic number: if (TryGetVsInstance (visualStudioProcess.Id' out visualStudioInstance)) {  	while (true) {  		try {  			//Find the process you want the VS instance to attach to...  			EnvDTE.Process processToAttachTo = visualStudioInstance.Debugger.LocalProcesses.Cast<EnvDTE.Process> ().FirstOrDefault (process => process.ProcessID == applicationProcess.Id);  			//Attach to the process.  			if (processToAttachTo != null) {  				processToAttachTo.Attach ();  				ShowWindow ((int)visualStudioProcess.MainWindowHandle' 3);  				SetForegroundWindow (visualStudioProcess.MainWindowHandle);  			}  			else {  				throw new InvalidOperationException ("Visual Studio process cannot find specified application '" + applicationProcess.Id + "'");  			}  			break;  		}  		catch (COMException) {  		}  	}  }  
Magic Number,MicroServicesStarter.ServiceManagement.Debugger,VisualStudioAttacher,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\VisualStudioAttacher.cs,AttachVisualStudioToProcess,The following statement contains a magic number: while (true) {  	try {  		//Find the process you want the VS instance to attach to...  		EnvDTE.Process processToAttachTo = visualStudioInstance.Debugger.LocalProcesses.Cast<EnvDTE.Process> ().FirstOrDefault (process => process.ProcessID == applicationProcess.Id);  		//Attach to the process.  		if (processToAttachTo != null) {  			processToAttachTo.Attach ();  			ShowWindow ((int)visualStudioProcess.MainWindowHandle' 3);  			SetForegroundWindow (visualStudioProcess.MainWindowHandle);  		}  		else {  			throw new InvalidOperationException ("Visual Studio process cannot find specified application '" + applicationProcess.Id + "'");  		}  		break;  	}  	catch (COMException) {  	}  }  
Magic Number,MicroServicesStarter.ServiceManagement.Debugger,VisualStudioAttacher,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\VisualStudioAttacher.cs,AttachVisualStudioToProcess,The following statement contains a magic number: try {  	//Find the process you want the VS instance to attach to...  	EnvDTE.Process processToAttachTo = visualStudioInstance.Debugger.LocalProcesses.Cast<EnvDTE.Process> ().FirstOrDefault (process => process.ProcessID == applicationProcess.Id);  	//Attach to the process.  	if (processToAttachTo != null) {  		processToAttachTo.Attach ();  		ShowWindow ((int)visualStudioProcess.MainWindowHandle' 3);  		SetForegroundWindow (visualStudioProcess.MainWindowHandle);  	}  	else {  		throw new InvalidOperationException ("Visual Studio process cannot find specified application '" + applicationProcess.Id + "'");  	}  	break;  }  catch (COMException) {  }  
Magic Number,MicroServicesStarter.ServiceManagement.Debugger,VisualStudioAttacher,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\VisualStudioAttacher.cs,AttachVisualStudioToProcess,The following statement contains a magic number: if (processToAttachTo != null) {  	processToAttachTo.Attach ();  	ShowWindow ((int)visualStudioProcess.MainWindowHandle' 3);  	SetForegroundWindow (visualStudioProcess.MainWindowHandle);  }  else {  	throw new InvalidOperationException ("Visual Studio process cannot find specified application '" + applicationProcess.Id + "'");  }  
Magic Number,MicroServicesStarter.ServiceManagement.Debugger,VisualStudioAttacher,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\ServiceManagement\Debugger\VisualStudioAttacher.cs,AttachVisualStudioToProcess,The following statement contains a magic number: ShowWindow ((int)visualStudioProcess.MainWindowHandle' 3);  
Magic Number,MicroServicesStarter.Debug,InitForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Debug\InitForm.cs,integrationTestBackgroundWorker_DoWork,The following statement contains a magic number: Thread.Sleep (6000);  
Magic Number,MicroServicesStarter.Debug,InitForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Debug\InitForm.cs,debugCheckerBackgroundWorker_DoWork,The following statement contains a magic number: while (true) {  	if (hasInitialized && !Debugger.IsAttached) {  		CloseDialog ();  		break;  	}  	Thread.Sleep (100);  }  
Magic Number,MicroServicesStarter.Debug,InitForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Debug\InitForm.cs,debugCheckerBackgroundWorker_DoWork,The following statement contains a magic number: Thread.Sleep (100);  
Missing Default,MicroServicesStarter.Deploy,PreparedDeploySetupContext,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Deploy\PreparedDeploySetupContext.cs,GetNextVersion,The following switch statement is missing a default case: switch (releaseType) {  case ReleaseType.Debug:  	++versionNumbers [3];  	break;  case ReleaseType.Release:  	++versionNumbers [2];  	versionNumbers [3] = 0;  	break;  case ReleaseType.Minor:  	++versionNumbers [1];  	versionNumbers [2] = versionNumbers [3] = 0;  	break;  case ReleaseType.Major:  	++versionNumbers [0];  	versionNumbers [1] = versionNumbers [2] = versionNumbers [3] = 0;  	break;  }  
Missing Default,MicroServicesStarter.Debug,InitForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Debug\InitForm.cs,Starter_FormClosing,The following switch statement is missing a default case: switch (setupType) {  case SetupType.Debug:  case SetupType.Release:  	new StopServicesForm (adminSetupContext).ShowDialog ();  	break;  }  
Missing Default,MicroServicesStarter.Debug,InitForm,C:\repos\phaetto_FoosPi\RaspberryPi.Gpio\MicroServicesStarter\Debug\InitForm.cs,Starter_Shown,The following switch statement is missing a default case: switch (setupType) {  case SetupType.Debug:  	debugCheckerBackgroundWorker.RunWorkerAsync ();  	setupLocalEnvironmentBackgroundWorker.RunWorkerAsync ();  	break;  case SetupType.Release:  	setupLocalEnvironmentBackgroundWorker.RunWorkerAsync ();  	break;  case SetupType.IntegrationTest:  	integrationTestBackgroundWorker.RunWorkerAsync ();  	break;  case SetupType.Deploy:  	hasInitialized = true;  	new DeployForm (adminSetupContext).ShowDialog ();  	Close ();  	break;  }  
