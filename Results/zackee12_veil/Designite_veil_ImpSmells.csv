Implementation smell,Namespace,Class,File,Method,Description
Long Method,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The method has 142 lines of code.
Long Method,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The method has 117 lines of code.
Long Method,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The method has 1046 lines of code.
Long Method,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The method has 1044 lines of code.
Long Method,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The method has 137 lines of code.
Long Method,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The method has 137 lines of code.
Complex Method,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,DecryptionType,Cyclomatic complexity of the method is 20
Complex Method,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,EncryptionType,Cyclomatic complexity of the method is 20
Complex Method,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,EncryptBytes,Cyclomatic complexity of the method is 9
Complex Method,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,DecryptBytes,Cyclomatic complexity of the method is 9
Complex Method,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,encryptBytesToBytes_AES,Cyclomatic complexity of the method is 10
Complex Method,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,decryptBytesToBytes_AES,Cyclomatic complexity of the method is 10
Complex Method,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,buttonGo_Click,Cyclomatic complexity of the method is 15
Complex Method,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,button_CryptoGo_Click,Cyclomatic complexity of the method is 13
Complex Method,veil,FormPasswordGenerator,C:\repos\zackee12_veil\veil\veil\FormPasswordGenerator.cs,GeneratePasswords,Cyclomatic complexity of the method is 17
Complex Method,veil,FormPasswordGenerator,C:\repos\zackee12_veil\veil\veil\FormPasswordGenerator.cs,LEET,Cyclomatic complexity of the method is 83
Complex Method,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,Cyclomatic complexity of the method is 8
Complex Method,veil,StegHelper,C:\repos\zackee12_veil\veil\veil\StegHelper.cs,Decoding,Cyclomatic complexity of the method is 10
Complex Method,veil,StegHelper,C:\repos\zackee12_veil\veil\veil\StegHelper.cs,Encoding,Cyclomatic complexity of the method is 23
Complex Method,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,Dispose,Cyclomatic complexity of the method is 11
Complex Method,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,Cyclomatic complexity of the method is 9
Complex Method,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,Cyclomatic complexity of the method is 9
Complex Method,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,Cyclomatic complexity of the method is 14
Complex Method,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,Cyclomatic complexity of the method is 9
Complex Method,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,Cyclomatic complexity of the method is 9
Complex Method,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,Cyclomatic complexity of the method is 10
Complex Method,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,Cyclomatic complexity of the method is 9
Complex Method,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,Cyclomatic complexity of the method is 18
Complex Method,CryptoNet,SymmetricTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Utilities\SymmetricTransform.cs,Transform,Cyclomatic complexity of the method is 17
Complex Method,CryptoNet,SymmetricTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Utilities\SymmetricTransform.cs,CFB,Cyclomatic complexity of the method is 8
Complex Method,CryptoNet,SymmetricTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Utilities\SymmetricTransform.cs,TransformBlock,Cyclomatic complexity of the method is 9
Complex Method,CryptoNet,SymmetricTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Utilities\SymmetricTransform.cs,FinalEncrypt,Cyclomatic complexity of the method is 32
Complex Method,CryptoNet,SymmetricTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Utilities\SymmetricTransform.cs,FinalDecrypt,Cyclomatic complexity of the method is 28
Long Parameter List,veil,StegHelper,C:\repos\zackee12_veil\veil\veil\StegHelper.cs,Decoding,The method has 5 parameters.
Long Parameter List,veil,StegHelper,C:\repos\zackee12_veil\veil\veil\StegHelper.cs,Encoding,The method has 6 parameters.
Long Parameter List,CryptoNet,SymmetricTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Utilities\SymmetricTransform.cs,TransformBlock,The method has 5 parameters.
Long Parameter List,CryptoNet,SymmetricTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Utilities\SymmetricTransform.cs,InternalTransformBlock,The method has 5 parameters.
Long Statement,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,DecryptionSetup,The length of the statement  "	//System.Windows.Forms.MessageBox.Show("Key " + BitConverter.ToString(alg.Key) + "  IV " + BitConverter.ToString(alg.IV) + "  salt " + BitConverter.ToString(salt)); " is 164.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,buttonGo_Click,The length of the statement  "			sh.Encoding (filenames' textBoxConceal.Text' textBoxOutPath.Text' checkBoxPassword.Checked' maskedTextBoxPassword.Text' alg); " is 125.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,buttonCarrierBrowse_Click,The length of the statement  "	//string[] carriers = openFiles("Image File (*.bmp' *.png' *.tif' *.tiff)|*.bmp;*.png;*.tif;*.tiff"' Directory.GetCurrentDirectory()); " is 134.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,buttonCarrierBrowse_Click,The length of the statement  "	string[] carriers = openFiles ("Image File (*.png' *.tif' *.tiff)|*.png;*.tif;*.tiff"' Directory.GetCurrentDirectory ()); " is 121.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,textBox_DragDrop,The length of the statement  "				MessageBox.Show ("Please only input one folder to the text box"' "Input Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 128.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,textBox_DragDrop,The length of the statement  "			//else if (!canHideInfo(files[0])) MessageBox.Show(files[0] + " is currently not supported for steganography"' "Input Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 174.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,textBox_DragDrop,The length of the statement  "				MessageBox.Show ("Please enter a valid directory to store the output files"' "Input Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 140.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,textBox_DragDrop,The length of the statement  "				MessageBox.Show ("Please only input one file to the text box"' "Input Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 126.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,textBox_DragDrop,The length of the statement  "			//else if (!canHideInfo(files[0])) MessageBox.Show(files[0] + " is currently not supported for steganography"' "Input Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 174.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,updateAndCheckFileSizes,The length of the statement  "			MessageBox.Show ("The file <" + item.Text + "> no longer exists"' "Input Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 129.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,updateAndCheckFileSizes,The length of the statement  "			MessageBox.Show ("The concealed file is too large for the carrier file(s)"' "Input Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 139.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,listView_DragDrop,The length of the statement  "				MessageBox.Show ("This file is not currently supported for Steganography"' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 130.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,FormMainWindow_Load,The length of the statement  "	ttAddFiles.SetToolTip (this.listViewCarrier' "The order of files must be conserved when decoding.  The encoding output will be numbered"); " is 138.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,FormMainWindow_Load,The length of the statement  "	ttAddFiles.SetToolTip (this.buttonCarrierBrowse' "The order of files must be conserved when decoding.  The encoding output will be numbered"); " is 142.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,checkEncodeDecodeButtonEnable,The length of the statement  "		if (listviewItemsAreValid () && passwordItemIsValid () && Directory.Exists (textBoxOutPath.Text) && File.Exists (textBoxConceal.Text)) { " is 136.
Long Statement,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,check_Crypto_Go_Button,The length of the statement  "	if (File.Exists (textBox_CryptoFile.Text) && Directory.Exists (textBox_CryptoOut.Text) && maskedTextBox_CryptoPass.TextLength > 0) " is 130.
Long Statement,veil,StegBase,C:\repos\zackee12_veil\veil\veil\StegBase.cs,byteArrayToInteger,The length of the statement  "		throw new ArgumentException (String.Format ("The byte array size was not correct for type integer.  Passed {0} bytes"' b.Length)); " is 130.
Long Statement,veil,StegBase,C:\repos\zackee12_veil\veil\veil\StegBase.cs,correctFilePath,The length of the statement  "		MessageBox.Show (String.Format ("The directory <{0}> doesn't exist.  The current directory <{1}> will be used"' filepath' Directory.GetCurrentDirectory ())' "Argument Error"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 225.
Long Statement,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,The length of the statement  "	System.Drawing.Imaging.BitmapData bmpData = bmp.LockBits (rect' System.Drawing.Imaging.ImageLockMode.ReadWrite' bmp.PixelFormat); " is 129.
Long Statement,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The length of the statement  "	System.Drawing.Imaging.BitmapData bmpData = bmp.LockBits (rect' System.Drawing.Imaging.ImageLockMode.ReadWrite' bmp.PixelFormat); " is 129.
Long Statement,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The length of the statement  "		user = Process.GetCurrentProcess ().ProcessName + Process.GetCurrentProcess ().MachineName + System.Environment.UserName + System.Environment.MachineName + System.Environment.OSVersion.ToString () + System.Environment.StackTrace + System.Environment.Version.ToString () + System.Environment.UserDomainName + System.Environment.WorkingSet.ToString (); " is 350.
Long Statement,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The length of the statement  "			rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]); " is 130.
Long Statement,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The length of the statement  "			rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]); " is 130.
Long Statement,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The length of the statement  "	/* m1_i = AND (m2_i...m2_{i+9})  *//* m1_i = 1 iff k_i belongs to a sequence of ten 0's or ten 1's *//* we turn off the two lowest bits of M' and also every bit " is 160.
Long Statement,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The length of the statement  "		sesKey [i] = (uint)(key [offset--] & 0xFF) | (uint)((key [offset--] & 0xFF)) << 8 | (uint)((key [offset--] & 0xFF)) << 16 | (uint)((key [offset--] & 0xFF)) << 24; " is 162.
Long Statement,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The length of the statement  "	uint x0 = (uint)((input [15] & 0xFF)) | (uint)((input [14] & 0xFF)) << 8 | (uint)((input [13] & 0xFF)) << 16 | (uint)((input [12] & 0xFF)) << 24; " is 145.
Long Statement,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The length of the statement  "	uint x1 = (uint)((input [11] & 0xFF)) | (uint)((input [10] & 0xFF)) << 8 | (uint)((input [9] & 0xFF)) << 16 | (uint)((input [8] & 0xFF)) << 24; " is 143.
Long Statement,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The length of the statement  "	uint x2 = (uint)((input [7] & 0xFF)) | (uint)((input [6] & 0xFF)) << 8 | (uint)((input [5] & 0xFF)) << 16 | (uint)((input [4] & 0xFF)) << 24; " is 141.
Long Statement,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The length of the statement  "	uint x3 = (uint)((input [3] & 0xFF)) | (uint)((input [2] & 0xFF)) << 8 | (uint)((input [1] & 0xFF)) << 16 | (uint)((input [0] & 0xFF)) << 24; " is 141.
Long Statement,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The length of the statement  "	uint x0 = (uint)((input [15] & 0xFF)) | (uint)((input [14] & 0xFF)) << 8 | (uint)((input [13] & 0xFF)) << 16 | (uint)((input [12] & 0xFF)) << 24; " is 145.
Long Statement,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The length of the statement  "	uint x1 = (uint)((input [11] & 0xFF)) | (uint)((input [10] & 0xFF)) << 8 | (uint)((input [9] & 0xFF)) << 16 | (uint)((input [8] & 0xFF)) << 24; " is 143.
Long Statement,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The length of the statement  "	uint x2 = (uint)((input [7] & 0xFF)) | (uint)((input [6] & 0xFF)) << 8 | (uint)((input [5] & 0xFF)) << 16 | (uint)((input [4] & 0xFF)) << 24; " is 141.
Long Statement,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The length of the statement  "	uint x3 = (uint)((input [3] & 0xFF)) | (uint)((input [2] & 0xFF)) << 8 | (uint)((input [1] & 0xFF)) << 16 | (uint)((input [0] & 0xFF)) << 24; " is 141.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The length of the statement  "		k32e [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24; " is 162.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The length of the statement  "		k32o [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24; " is 162.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The length of the statement  "			sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)]; " is 120.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The length of the statement  "			sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)]; " is 124.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The length of the statement  "		result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)]; " is 226.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The length of the statement  "		result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)]; " is 385.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b0,The length of the statement  "	return sBox [2 * (x & 0xFF)] ^ sBox [2 * ((x >> 8) & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 16) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 24) & 0xFF)]; " is 144.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b3,The length of the statement  "	return sBox [2 * ((x >> 24) & 0xFF)] ^ sBox [2 * (x & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 8) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 16) & 0xFF)]; " is 144.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	uint x0 = (uint)((input [0] & 0xFF)) | (uint)((input [1] & 0xFF) << 8) | (uint)((input [2] & 0xFF) << 16) | (uint)((input [3] & 0xFF) << 24); " is 141.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	uint x1 = (uint)((input [4] & 0xFF)) | (uint)((input [5] & 0xFF) << 8) | (uint)((input [6] & 0xFF) << 16) | (uint)((input [7] & 0xFF) << 24); " is 141.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	uint x2 = (uint)((input [8] & 0xFF)) | (uint)((input [9] & 0xFF) << 8) | (uint)((input [10] & 0xFF) << 16) | (uint)((input [11] & 0xFF) << 24); " is 143.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	uint x3 = (uint)((input [12] & 0xFF)) | (uint)((input [13] & 0xFF) << 8) | (uint)((input [14] & 0xFF) << 16) | (uint)((input [15] & 0xFF) << 24); " is 145.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	uint x2 = (uint)((input [0] & 0xFF)) | (uint)((input [1] & 0xFF) << 8) | (uint)((input [2] & 0xFF) << 16) | (uint)((input [3] & 0xFF) << 24); " is 141.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	uint x3 = (uint)((input [4] & 0xFF)) | (uint)((input [5] & 0xFF) << 8) | (uint)((input [6] & 0xFF) << 16) | (uint)((input [7] & 0xFF) << 24); " is 141.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	uint x0 = (uint)((input [8] & 0xFF)) | (uint)((input [9] & 0xFF) << 8) | (uint)((input [10] & 0xFF) << 16) | (uint)((input [11] & 0xFF) << 24); " is 143.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	uint x1 = (uint)((input [12] & 0xFF)) | (uint)((input [13] & 0xFF) << 8) | (uint)((input [14] & 0xFF) << 16) | (uint)((input [15] & 0xFF) << 24); " is 145.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)]; " is 156.
Long Statement,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The length of the statement  "	t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)]; " is 156.
Complex Conditional,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,checkEncodeDecodeButtonEnable,The conditional expression  "listviewItemsAreValid () && passwordItemIsValid () && Directory.Exists (textBoxOutPath.Text) && File.Exists (textBoxConceal.Text)"  is complex.
Complex Conditional,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The conditional expression  "(isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)"  is complex.
Complex Conditional,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MarsTransform,The conditional expression  "key != null && key.Length != 16 && key.Length != 24 && key.Length != 32"  is complex.
Complex Conditional,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,SerpentTransform,The conditional expression  "key != null && key.Length != 16 && key.Length != 24 && key.Length != 32"  is complex.
Complex Conditional,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,TwofishTransform,The conditional expression  "key != null && key.Length != 16 && key.Length != 24 && key.Length != 32"  is complex.
Complex Conditional,CryptoNet,SymmetricTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Utilities\SymmetricTransform.cs,TransformBlock,The conditional expression  "!encrypt && (0 > len) && ((algo.Padding == PaddingMode.None) || (algo.Padding == PaddingMode.Zeros))"  is complex.
Virtual Method Call from Constructor,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,BlowfishTransform,The constructor "BlowfishTransform" calls a virtual method "KeySetup".
Empty Catch Block,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The method has an empty catch block.
Empty Catch Block,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The method has an empty catch block.
Empty Catch Block,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The method has an empty catch block.
Empty Catch Block,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The method has an empty catch block.
Empty Catch Block,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The method has an empty catch block.
Empty Catch Block,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The method has an empty catch block.
Magic Number,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,DecryptionSetup,The following statement contains a magic number: this.iv = new byte[alg.LegalBlockSizes [0].MinSize / 8];  
Magic Number,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,GenerateKey,The following statement contains a magic number: if (iterations < 1000) {  	iterations = 1000;  }  
Magic Number,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,GenerateKey,The following statement contains a magic number: if (iterations < 1000) {  	iterations = 1000;  }  
Magic Number,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,GenerateKey,The following statement contains a magic number: iterations = 1000;  
Magic Number,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,GenerateKey,The following statement contains a magic number: return key.GetBytes (keySize / 8);  
Magic Number,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,GenerateRandomByteArray,The following statement contains a magic number: if (size < 8) {  	size = 8;  }  
Magic Number,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,GenerateRandomByteArray,The following statement contains a magic number: if (size < 8) {  	size = 8;  }  
Magic Number,veil,ByteEncryption,C:\repos\zackee12_veil\veil\veil\ByteEncryption.cs,GenerateRandomByteArray,The following statement contains a magic number: size = 8;  
Magic Number,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,updateAndCheckFileSizes,The following statement contains a magic number: toolStripStatusLabelConcealSize.Text = String.Format ("|  Max Concealed Size:  {0:0.000} kB"' maxConcealSize / 1024.0);  
Magic Number,veil,FormMainWindow,C:\repos\zackee12_veil\veil\veil\FormMainWindow.cs,updateAndCheckFileSizes,The following statement contains a magic number: toolStripStatusLabelCarrierSize.Text = String.Format ("|  Total Carrier Size:  {0:0.000} kB"' carrierSize / 1024.0);  
Magic Number,veil,FormPasswordGenerator,C:\repos\zackee12_veil\veil\veil\FormPasswordGenerator.cs,GeneratePasswords,The following statement contains a magic number: for (int i = 0; i < NUM_PASSWORDS; i++) {  	int strLen = 0;  	string mes = "";  	if (genWords) {  		// generate [word] [filler] [word] [filler] ...  		bool filler = false;  		while (strLen < len) {  			if (filler) {  				// give 1 to len - strLen characters  				int loop = cr.Next (1' Math.Min (3' len - strLen));  				for (int j = 0; j < loop; j++) {  					mes += validChar [cr.Next (validChar.Count)];  					strLen++;  				}  			}  			else {  				// must meet minimum word size  				if (len - strLen > MIN_WORD_SIZE) {  					string add = RandomNLengthWord (cr.Next (MIN_WORD_SIZE' (int)Math.Min (MAX_WORD_SIZE' len - strLen)));  					mes += add;  					strLen += add.Length;  				}  			}  			filler = !filler;  		}  	}  	else {  		// generate character by character  		while (strLen < len) {  			mes += validChar [cr.Next (validChar.Count)];  			strLen++;  		}  	}  	passwords.Add (mes);  }  
Magic Number,veil,FormPasswordGenerator,C:\repos\zackee12_veil\veil\veil\FormPasswordGenerator.cs,GeneratePasswords,The following statement contains a magic number: if (genWords) {  	// generate [word] [filler] [word] [filler] ...  	bool filler = false;  	while (strLen < len) {  		if (filler) {  			// give 1 to len - strLen characters  			int loop = cr.Next (1' Math.Min (3' len - strLen));  			for (int j = 0; j < loop; j++) {  				mes += validChar [cr.Next (validChar.Count)];  				strLen++;  			}  		}  		else {  			// must meet minimum word size  			if (len - strLen > MIN_WORD_SIZE) {  				string add = RandomNLengthWord (cr.Next (MIN_WORD_SIZE' (int)Math.Min (MAX_WORD_SIZE' len - strLen)));  				mes += add;  				strLen += add.Length;  			}  		}  		filler = !filler;  	}  }  else {  	// generate character by character  	while (strLen < len) {  		mes += validChar [cr.Next (validChar.Count)];  		strLen++;  	}  }  
Magic Number,veil,FormPasswordGenerator,C:\repos\zackee12_veil\veil\veil\FormPasswordGenerator.cs,GeneratePasswords,The following statement contains a magic number: while (strLen < len) {  	if (filler) {  		// give 1 to len - strLen characters  		int loop = cr.Next (1' Math.Min (3' len - strLen));  		for (int j = 0; j < loop; j++) {  			mes += validChar [cr.Next (validChar.Count)];  			strLen++;  		}  	}  	else {  		// must meet minimum word size  		if (len - strLen > MIN_WORD_SIZE) {  			string add = RandomNLengthWord (cr.Next (MIN_WORD_SIZE' (int)Math.Min (MAX_WORD_SIZE' len - strLen)));  			mes += add;  			strLen += add.Length;  		}  	}  	filler = !filler;  }  
Magic Number,veil,FormPasswordGenerator,C:\repos\zackee12_veil\veil\veil\FormPasswordGenerator.cs,GeneratePasswords,The following statement contains a magic number: if (filler) {  	// give 1 to len - strLen characters  	int loop = cr.Next (1' Math.Min (3' len - strLen));  	for (int j = 0; j < loop; j++) {  		mes += validChar [cr.Next (validChar.Count)];  		strLen++;  	}  }  else {  	// must meet minimum word size  	if (len - strLen > MIN_WORD_SIZE) {  		string add = RandomNLengthWord (cr.Next (MIN_WORD_SIZE' (int)Math.Min (MAX_WORD_SIZE' len - strLen)));  		mes += add;  		strLen += add.Length;  	}  }  
Magic Number,veil,FormPasswordGenerator,C:\repos\zackee12_veil\veil\veil\FormPasswordGenerator.cs,RandomNLengthWord,The following statement contains a magic number: while (iterations < 10000) {  	string word = file [cr.Next (lineCount)];  	if (word.Length == word_length) {  		return word;  	}  }  
Magic Number,veil,StegBase,C:\repos\zackee12_veil\veil\veil\StegBase.cs,isByteOdd,The following statement contains a magic number: if (b % 2 == 1)  	return true;  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,The following statement contains a magic number: for (int i = 0; i < sizeof(int); i++) {  	// get one byte of data utilizing the mask  	for (int j = 0; j < 8; j++) {  		// if the byte is odd then the respective bit is set to 1  		if (isByteOdd (rgbValues [8 * i + j]))  			header [i] |= MASK [j];  	}  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,The following statement contains a magic number: for (int i = 0; i < sizeof(int); i++) {  	// get one byte of data utilizing the mask  	for (int j = 0; j < 8; j++) {  		// if the byte is odd then the respective bit is set to 1  		if (isByteOdd (rgbValues [8 * i + j]))  			header [i] |= MASK [j];  	}  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	// if the byte is odd then the respective bit is set to 1  	if (isByteOdd (rgbValues [8 * i + j]))  		header [i] |= MASK [j];  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	// if the byte is odd then the respective bit is set to 1  	if (isByteOdd (rgbValues [8 * i + j]))  		header [i] |= MASK [j];  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,The following statement contains a magic number: if (isByteOdd (rgbValues [8 * i + j]))  	header [i] |= MASK [j];  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,The following statement contains a magic number: for (int i = sizeof(int); i < dataLength + sizeof(int); i++) {  	// get one byte of data utilizing the mask  	for (int j = 0; j < 8; j++) {  		// if the byte is odd then the respective bit is set to 1  		if (isByteOdd (rgbValues [8 * i + j]))  			data [i - sizeof(int)] |= MASK [j];  	}  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,The following statement contains a magic number: for (int i = sizeof(int); i < dataLength + sizeof(int); i++) {  	// get one byte of data utilizing the mask  	for (int j = 0; j < 8; j++) {  		// if the byte is odd then the respective bit is set to 1  		if (isByteOdd (rgbValues [8 * i + j]))  			data [i - sizeof(int)] |= MASK [j];  	}  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	// if the byte is odd then the respective bit is set to 1  	if (isByteOdd (rgbValues [8 * i + j]))  		data [i - sizeof(int)] |= MASK [j];  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	// if the byte is odd then the respective bit is set to 1  	if (isByteOdd (rgbValues [8 * i + j]))  		data [i - sizeof(int)] |= MASK [j];  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,DecodeBytes,The following statement contains a magic number: if (isByteOdd (rgbValues [8 * i + j]))  	data [i - sizeof(int)] |= MASK [j];  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: foreach (byte b in hiddenBytes) {  	bool bit = false;  	for (int j = 0; j < 8; j++) {  		// for each bit find if it is set to one  		bit = (b & (1 << j)) != 0;  		// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  		if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  			if (rgbValues [8 * i + j] < 255) {  				rgbValues [8 * i + j]++;  			}  			//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  			else {  				rgbValues [8 * i + j]--;  			}  		}  		// else: the color pixel is already set correctly  	}  	i++;  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: foreach (byte b in hiddenBytes) {  	bool bit = false;  	for (int j = 0; j < 8; j++) {  		// for each bit find if it is set to one  		bit = (b & (1 << j)) != 0;  		// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  		if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  			if (rgbValues [8 * i + j] < 255) {  				rgbValues [8 * i + j]++;  			}  			//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  			else {  				rgbValues [8 * i + j]--;  			}  		}  		// else: the color pixel is already set correctly  	}  	i++;  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: foreach (byte b in hiddenBytes) {  	bool bit = false;  	for (int j = 0; j < 8; j++) {  		// for each bit find if it is set to one  		bit = (b & (1 << j)) != 0;  		// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  		if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  			if (rgbValues [8 * i + j] < 255) {  				rgbValues [8 * i + j]++;  			}  			//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  			else {  				rgbValues [8 * i + j]--;  			}  		}  		// else: the color pixel is already set correctly  	}  	i++;  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: foreach (byte b in hiddenBytes) {  	bool bit = false;  	for (int j = 0; j < 8; j++) {  		// for each bit find if it is set to one  		bit = (b & (1 << j)) != 0;  		// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  		if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  			if (rgbValues [8 * i + j] < 255) {  				rgbValues [8 * i + j]++;  			}  			//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  			else {  				rgbValues [8 * i + j]--;  			}  		}  		// else: the color pixel is already set correctly  	}  	i++;  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: foreach (byte b in hiddenBytes) {  	bool bit = false;  	for (int j = 0; j < 8; j++) {  		// for each bit find if it is set to one  		bit = (b & (1 << j)) != 0;  		// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  		if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  			if (rgbValues [8 * i + j] < 255) {  				rgbValues [8 * i + j]++;  			}  			//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  			else {  				rgbValues [8 * i + j]--;  			}  		}  		// else: the color pixel is already set correctly  	}  	i++;  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: foreach (byte b in hiddenBytes) {  	bool bit = false;  	for (int j = 0; j < 8; j++) {  		// for each bit find if it is set to one  		bit = (b & (1 << j)) != 0;  		// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  		if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  			if (rgbValues [8 * i + j] < 255) {  				rgbValues [8 * i + j]++;  			}  			//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  			else {  				rgbValues [8 * i + j]--;  			}  		}  		// else: the color pixel is already set correctly  	}  	i++;  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: foreach (byte b in hiddenBytes) {  	bool bit = false;  	for (int j = 0; j < 8; j++) {  		// for each bit find if it is set to one  		bit = (b & (1 << j)) != 0;  		// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  		if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  			if (rgbValues [8 * i + j] < 255) {  				rgbValues [8 * i + j]++;  			}  			//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  			else {  				rgbValues [8 * i + j]--;  			}  		}  		// else: the color pixel is already set correctly  	}  	i++;  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	// for each bit find if it is set to one  	bit = (b & (1 << j)) != 0;  	// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  	if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  		if (rgbValues [8 * i + j] < 255) {  			rgbValues [8 * i + j]++;  		}  		//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  		else {  			rgbValues [8 * i + j]--;  		}  	}  	// else: the color pixel is already set correctly  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	// for each bit find if it is set to one  	bit = (b & (1 << j)) != 0;  	// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  	if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  		if (rgbValues [8 * i + j] < 255) {  			rgbValues [8 * i + j]++;  		}  		//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  		else {  			rgbValues [8 * i + j]--;  		}  	}  	// else: the color pixel is already set correctly  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	// for each bit find if it is set to one  	bit = (b & (1 << j)) != 0;  	// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  	if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  		if (rgbValues [8 * i + j] < 255) {  			rgbValues [8 * i + j]++;  		}  		//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  		else {  			rgbValues [8 * i + j]--;  		}  	}  	// else: the color pixel is already set correctly  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	// for each bit find if it is set to one  	bit = (b & (1 << j)) != 0;  	// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  	if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  		if (rgbValues [8 * i + j] < 255) {  			rgbValues [8 * i + j]++;  		}  		//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  		else {  			rgbValues [8 * i + j]--;  		}  	}  	// else: the color pixel is already set correctly  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	// for each bit find if it is set to one  	bit = (b & (1 << j)) != 0;  	// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  	if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  		if (rgbValues [8 * i + j] < 255) {  			rgbValues [8 * i + j]++;  		}  		//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  		else {  			rgbValues [8 * i + j]--;  		}  	}  	// else: the color pixel is already set correctly  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	// for each bit find if it is set to one  	bit = (b & (1 << j)) != 0;  	// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  	if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  		if (rgbValues [8 * i + j] < 255) {  			rgbValues [8 * i + j]++;  		}  		//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  		else {  			rgbValues [8 * i + j]--;  		}  	}  	// else: the color pixel is already set correctly  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	// for each bit find if it is set to one  	bit = (b & (1 << j)) != 0;  	// if the color byte is odd and the bit is zero' make the color pixel even or if the opposite is true  	if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  		if (rgbValues [8 * i + j] < 255) {  			rgbValues [8 * i + j]++;  		}  		//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  		else {  			rgbValues [8 * i + j]--;  		}  	}  	// else: the color pixel is already set correctly  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  	if (rgbValues [8 * i + j] < 255) {  		rgbValues [8 * i + j]++;  	}  	//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  	else {  		rgbValues [8 * i + j]--;  	}  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  	if (rgbValues [8 * i + j] < 255) {  		rgbValues [8 * i + j]++;  	}  	//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  	else {  		rgbValues [8 * i + j]--;  	}  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  	if (rgbValues [8 * i + j] < 255) {  		rgbValues [8 * i + j]++;  	}  	//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  	else {  		rgbValues [8 * i + j]--;  	}  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  	if (rgbValues [8 * i + j] < 255) {  		rgbValues [8 * i + j]++;  	}  	//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  	else {  		rgbValues [8 * i + j]--;  	}  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  	if (rgbValues [8 * i + j] < 255) {  		rgbValues [8 * i + j]++;  	}  	//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  	else {  		rgbValues [8 * i + j]--;  	}  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: if ((isByteOdd (rgbValues [8 * i + j]) && !bit) || (!isByteOdd (rgbValues [8 * i + j]) && bit)) {  	if (rgbValues [8 * i + j] < 255) {  		rgbValues [8 * i + j]++;  	}  	//We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  	else {  		rgbValues [8 * i + j]--;  	}  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: if (rgbValues [8 * i + j] < 255) {  	rgbValues [8 * i + j]++;  }  //We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  else {  	rgbValues [8 * i + j]--;  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: if (rgbValues [8 * i + j] < 255) {  	rgbValues [8 * i + j]++;  }  //We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  else {  	rgbValues [8 * i + j]--;  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: if (rgbValues [8 * i + j] < 255) {  	rgbValues [8 * i + j]++;  }  //We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  else {  	rgbValues [8 * i + j]--;  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: if (rgbValues [8 * i + j] < 255) {  	rgbValues [8 * i + j]++;  }  //We don't want to loop 255 into 0 since the color will be noticeable so decrement instead  else {  	rgbValues [8 * i + j]--;  }  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: rgbValues [8 * i + j]++;  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,EncodeBytes,The following statement contains a magic number: rgbValues [8 * i + j]--;  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,getNumBytes,The following statement contains a magic number: return (bmp.Size.Width * bmp.Size.Height * (Image.GetPixelFormatSize (bmp.PixelFormat) / 8));  
Magic Number,veil,StegBitmap,C:\repos\zackee12_veil\veil\veil\StegBitmap.cs,maxHiddenFileSize,The following statement contains a magic number: return (getNumBytes () - HEADER_SIZE) / 8;  
Magic Number,veil,StegHelper,C:\repos\zackee12_veil\veil\veil\StegHelper.cs,Decoding,The following statement contains a magic number: for (int i = 0; i < filenames.Count; i++) {  	// object to retrieve info  	StegBase sb = GetStegObject (filenames [i]);  	// [extension (16 bytes)] [data]  	List<byte> readBytes = new List<byte> (sb.DecodeBytes ());  	if (isEncrypted) {  		ByteEncryption be = new ByteEncryption ();  		byte[] temp = be.Decrypt (alg' password' readBytes.ToArray ());  		readBytes.Clear ();  		readBytes = new List<byte> (temp);  	}  	byte[] fileTypeByte = readBytes.GetRange (0' 16).ToArray ();  	// delete the null bytes that might exist in the file type array  	var list = new List<byte> ();  	for (int j = 0; j < fileTypeByte.Length; j++) {  		if (fileTypeByte [j] != 0)  			list.Add (fileTypeByte [j]);  	}  	fileTypeByte = new byte[list.Count];  	// convert the list into an ascii string  	fileTypeByte = list.ToArray ();  	fileType = System.Text.Encoding.ASCII.GetString (fileTypeByte);  	// if the extension is not valid then there is most likely not a file hidden in the image  	if (!StegBase.isValidFileExtension (fileType))  		throw new InvalidDataException ("If data has been stored in this file' it has been corrupted and cannot be recovered");  	outBytes.AddRange (readBytes.GetRange (16' readBytes.Count - 16));  	sb.Dispose ();  }  
Magic Number,veil,StegHelper,C:\repos\zackee12_veil\veil\veil\StegHelper.cs,Decoding,The following statement contains a magic number: for (int i = 0; i < filenames.Count; i++) {  	// object to retrieve info  	StegBase sb = GetStegObject (filenames [i]);  	// [extension (16 bytes)] [data]  	List<byte> readBytes = new List<byte> (sb.DecodeBytes ());  	if (isEncrypted) {  		ByteEncryption be = new ByteEncryption ();  		byte[] temp = be.Decrypt (alg' password' readBytes.ToArray ());  		readBytes.Clear ();  		readBytes = new List<byte> (temp);  	}  	byte[] fileTypeByte = readBytes.GetRange (0' 16).ToArray ();  	// delete the null bytes that might exist in the file type array  	var list = new List<byte> ();  	for (int j = 0; j < fileTypeByte.Length; j++) {  		if (fileTypeByte [j] != 0)  			list.Add (fileTypeByte [j]);  	}  	fileTypeByte = new byte[list.Count];  	// convert the list into an ascii string  	fileTypeByte = list.ToArray ();  	fileType = System.Text.Encoding.ASCII.GetString (fileTypeByte);  	// if the extension is not valid then there is most likely not a file hidden in the image  	if (!StegBase.isValidFileExtension (fileType))  		throw new InvalidDataException ("If data has been stored in this file' it has been corrupted and cannot be recovered");  	outBytes.AddRange (readBytes.GetRange (16' readBytes.Count - 16));  	sb.Dispose ();  }  
Magic Number,veil,StegHelper,C:\repos\zackee12_veil\veil\veil\StegHelper.cs,Decoding,The following statement contains a magic number: for (int i = 0; i < filenames.Count; i++) {  	// object to retrieve info  	StegBase sb = GetStegObject (filenames [i]);  	// [extension (16 bytes)] [data]  	List<byte> readBytes = new List<byte> (sb.DecodeBytes ());  	if (isEncrypted) {  		ByteEncryption be = new ByteEncryption ();  		byte[] temp = be.Decrypt (alg' password' readBytes.ToArray ());  		readBytes.Clear ();  		readBytes = new List<byte> (temp);  	}  	byte[] fileTypeByte = readBytes.GetRange (0' 16).ToArray ();  	// delete the null bytes that might exist in the file type array  	var list = new List<byte> ();  	for (int j = 0; j < fileTypeByte.Length; j++) {  		if (fileTypeByte [j] != 0)  			list.Add (fileTypeByte [j]);  	}  	fileTypeByte = new byte[list.Count];  	// convert the list into an ascii string  	fileTypeByte = list.ToArray ();  	fileType = System.Text.Encoding.ASCII.GetString (fileTypeByte);  	// if the extension is not valid then there is most likely not a file hidden in the image  	if (!StegBase.isValidFileExtension (fileType))  		throw new InvalidDataException ("If data has been stored in this file' it has been corrupted and cannot be recovered");  	outBytes.AddRange (readBytes.GetRange (16' readBytes.Count - 16));  	sb.Dispose ();  }  
Magic Number,veil,StegHelper,C:\repos\zackee12_veil\veil\veil\StegHelper.cs,Decoding,The following statement contains a magic number: outBytes.AddRange (readBytes.GetRange (16' readBytes.Count - 16));  
Magic Number,veil,StegHelper,C:\repos\zackee12_veil\veil\veil\StegHelper.cs,Decoding,The following statement contains a magic number: outBytes.AddRange (readBytes.GetRange (16' readBytes.Count - 16));  
Magic Number,veil,StegHelper,C:\repos\zackee12_veil\veil\veil\StegHelper.cs,Encoding,The following statement contains a magic number: for (int i = 0; i < filenames.Count; i++) {  	// object to hide info  	StegBase sb = GetStegObject (filenames [i]);  	// get the starting index for the conceal byte array  	long startIndex = 0;  	for (int j = 0; j < i; j++)  		startIndex += fileStegUsage [j];  	// setup the header  	// [(int) size of bytes hidden] [(16 bytes) extension of hidden file]  	byte[] write;  	byte[] byteLen = StegBase.integerToByteArray ((int)fileStegUsage [i] + 16);  	string extension = Path.GetExtension (concealFile);  	if (string.IsNullOrEmpty (extension))  		throw new ArgumentException ("Failed to find the extension for file:  " + filenames [i]);  	byte[] extAscii = System.Text.Encoding.ASCII.GetBytes (extension);  	// combine all three arrays [data length' extension' data]  	var list = new List<byte> ();  	list.AddRange (byteLen);  	list.AddRange (extAscii);  	// null pad the header to the HEADER_SIZE  	while (list.Count < StegBase.HEADER_SIZE)  		list.Add (0);  	// ensure the header hasn't exceeded the set size  	if (list.Count > StegBase.HEADER_SIZE)  		throw new ArgumentException ("Failed to convert file extension to byte array");  	// get the full plaintext array to write  	list.AddRange (GetRangeOfByteArray (concealBytes' (int)startIndex' (int)(startIndex + fileStegUsage [i])));  	// encrypt the plaintext if a password is provided  	if (isEncrypted) {  		ByteEncryption be = new ByteEncryption ();  		// don't need to duplicate the size data  		list.RemoveRange (0' sizeof(int));  		write = be.Encrypt (alg' password' list.ToArray ());  		byteLen = StegBase.integerToByteArray (write.Length);  		list.Clear ();  		list.AddRange (byteLen);  		list.AddRange (write);  	}  	write = list.ToArray ();  	// create the output path  	outputPath = StegBase.correctFilePath (outputPath);  	string ext = Path.GetExtension (filenames [i]);  	if (string.IsNullOrEmpty (ext))  		throw new ArgumentException ("Failed to find the extension for file:  " + filenames [i]);  	string finOutputPath = outputPath + @"\veil" + i + ext;  	// hide the bytes inside the file  	sb.EncodeBytes (write' finOutputPath);  	// clean up the object  	sb.Dispose ();  }  
Magic Number,CryptoNet,Blowfish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,Blowfish,The following statement contains a magic number: BlockSizeValue = 64;  
Magic Number,CryptoNet,Blowfish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,Blowfish,The following statement contains a magic number: KeySizeValue = 128;  
Magic Number,CryptoNet,Blowfish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,Blowfish,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (64' 64' 64);  
Magic Number,CryptoNet,Blowfish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,Blowfish,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (64' 64' 64);  
Magic Number,CryptoNet,Blowfish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,Blowfish,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (64' 64' 64);  
Magic Number,CryptoNet,Blowfish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,Blowfish,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (32' 448' 8);  
Magic Number,CryptoNet,Blowfish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,Blowfish,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (32' 448' 8);  
Magic Number,CryptoNet,Blowfish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,Blowfish,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (32' 448' 8);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [0] = (byte)((l >> 24) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [1] = (byte)((l >> 16) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [2] = (byte)((l >> 8) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [2] = (byte)((l >> 8) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [3] = (byte)((l) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [4] = (byte)((r >> 24) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [4] = (byte)((r >> 24) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [5] = (byte)((r >> 16) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [5] = (byte)((r >> 16) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [6] = (byte)((r >> 8) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [6] = (byte)((r >> 8) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,ECB,The following statement contains a magic number: output [7] = (byte)((r) & 0xFF);  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: for (int i = 0; i < pbox.Length; i++) {  	dword = 0;  	for (int j = 0; j < 4; j++) {  		dword = (dword << 8) | key [keyPos];  		if ((++keyPos) >= key.Length)  			keyPos = 0;  	}  	pbox [i] ^= dword;  }  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: for (int i = 0; i < pbox.Length; i++) {  	dword = 0;  	for (int j = 0; j < 4; j++) {  		dword = (dword << 8) | key [keyPos];  		if ((++keyPos) >= key.Length)  			keyPos = 0;  	}  	pbox [i] ^= dword;  }  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	dword = (dword << 8) | key [keyPos];  	if ((++keyPos) >= key.Length)  		keyPos = 0;  }  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: for (int j = 0; j < 4; j++) {  	dword = (dword << 8) | key [keyPos];  	if ((++keyPos) >= key.Length)  		keyPos = 0;  }  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: dword = (dword << 8) | key [keyPos];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: for (int i = 0; i < pbox.Length; i += 2) {  	EncryptBlock (ref l' ref r);  	pbox [i] = l;  	pbox [i + 1] = r;  }  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: i += 2
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: for (int i = 0; i < sbox1.Length; i += 2) {  	EncryptBlock (ref l' ref r);  	sbox1 [i] = l;  	sbox1 [i + 1] = r;  }  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: i += 2
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: for (int i = 0; i < sbox2.Length; i += 2) {  	EncryptBlock (ref l' ref r);  	sbox2 [i] = l;  	sbox2 [i + 1] = r;  }  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: i += 2
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: for (int i = 0; i < sbox3.Length; i += 2) {  	EncryptBlock (ref l' ref r);  	sbox3 [i] = l;  	sbox3 [i + 1] = r;  }  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: i += 2
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: for (int i = 0; i < sbox4.Length; i += 2) {  	EncryptBlock (ref l' ref r);  	sbox4 [i] = l;  	sbox4 [i + 1] = r;  }  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,KeySetup,The following statement contains a magic number: i += 2
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= pbox [2];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= pbox [3];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= pbox [4];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= pbox [5];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= pbox [6];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= pbox [7];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= pbox [8];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= pbox [9];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= pbox [10];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= pbox [11];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= pbox [12];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= pbox [13];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= pbox [14];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r ^= pbox [15];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: r = l ^ pbox [16];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,EncryptBlock,The following statement contains a magic number: l = tmp ^ pbox [17];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= pbox [17];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= pbox [16];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= pbox [15];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= pbox [14];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= pbox [13];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= pbox [12];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= pbox [11];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= pbox [10];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= pbox [9];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= pbox [8];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= pbox [7];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= pbox [6];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= pbox [5];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= pbox [4];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= pbox [3];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= ((sbox1 [(l >> 24) & 0xFF] + sbox2 [(l >> 16) & 0xFF]) ^ sbox3 [(l >> 8) & 0xFF]) + sbox4 [l & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: r ^= pbox [2];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,BlowfishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Blowfish.cs,DecryptBlock,The following statement contains a magic number: l ^= ((sbox1 [(r >> 24) & 0xFF] + sbox2 [(r >> 16) & 0xFF]) ^ sbox3 [(r >> 8) & 0xFF]) + sbox4 [r & 0xFF];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: unchecked {  	rsl [0] = tid;  	rsl [1] = mTid;  	rsl [2] = pid;  	rsl [3] = osStart;  	rsl [4] = pCount;  	rsl [5] = sid;  	rsl [6] = (int)(query & 0xFFFFFFFF);  	rsl [7] = (int)(query >> 32);  	rsl [8] = (int)(ticks & 0xFFFFFFFF);  	rsl [9] = (int)(ticks >> 32);  	rsl [10] = (int)(pStart & 0xFFFFFFFF);  	rsl [11] = (int)(pStart >> 32);  	rsl [12] = (int)(mem1 & 0xFFFFFFFF);  	rsl [13] = (int)(mem1 >> 32);  	rsl [14] = (int)(mem2 & 0xFFFFFFFF);  	rsl [15] = (int)(mem2 >> 32);  	rsl [16] = (int)(mem3 & 0xFFFFFFFF);  	rsl [17] = (int)(mem3 >> 32);  	rsl [18] = (int)(mem4 & 0xFFFFFFFF);  	rsl [19] = (int)(mem4 >> 32);  	rsl [20] = (int)(mem5 & 0xFFFFFFFF);  	rsl [21] = (int)(mem5 >> 32);  	rsl [22] = (int)(mem6 & 0xFFFFFFFF);  	rsl [23] = (int)(mem6 >> 32);  	byte[] hash = sha.ComputeHash (Encoding.UTF8.GetBytes (user));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	//Delete hashvalue  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	hash = sha.ComputeHash (Encoding.UTF8.GetBytes (processInfos.ToString ()));  	for (int i = 0; i < (hash.Length / 4); i++)  		rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  	int startPos = 40 + (hash.Length / 4);  	byte[] rand = new byte[(rsl.Length - startPos) * 4];  	RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider ();  	rng.GetBytes (rand);  	for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  		rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  	//Delete secret data  	for (int i = 0; i < rand.Length; i++)  		rand [i] = 0x00;  	for (int i = 0; i < hash.Length; i++)  		hash [i] = 0x00;  	tid = mTid = pid = osStart = pCount = sid = 0;  	query = ticks = pStart = mem1 = mem2 = mem3 = mem4 = mem5 = mem6 = 0;  	user = null;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [2] = pid;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [3] = osStart;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [4] = pCount;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [5] = sid;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [6] = (int)(query & 0xFFFFFFFF);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [7] = (int)(query >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [7] = (int)(query >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [8] = (int)(ticks & 0xFFFFFFFF);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [9] = (int)(ticks >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [9] = (int)(ticks >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [10] = (int)(pStart & 0xFFFFFFFF);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [11] = (int)(pStart >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [11] = (int)(pStart >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [12] = (int)(mem1 & 0xFFFFFFFF);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [13] = (int)(mem1 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [13] = (int)(mem1 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [14] = (int)(mem2 & 0xFFFFFFFF);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [15] = (int)(mem2 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [15] = (int)(mem2 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [16] = (int)(mem3 & 0xFFFFFFFF);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [17] = (int)(mem3 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [17] = (int)(mem3 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [18] = (int)(mem4 & 0xFFFFFFFF);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [19] = (int)(mem4 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [19] = (int)(mem4 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [20] = (int)(mem5 & 0xFFFFFFFF);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [21] = (int)(mem5 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [21] = (int)(mem5 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [22] = (int)(mem6 & 0xFFFFFFFF);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [23] = (int)(mem6 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [23] = (int)(mem6 >> 32);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [24 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = 0; i < (hash.Length / 4); i++)  	rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [40 + i] = ((int)hash [4 * i]) << 24 | ((int)hash [4 * i + 1]) << 16 | ((int)hash [4 * i + 2]) << 8 | ((int)hash [4 * i + 3]);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  	rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  	rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  	rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  	rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: for (int i = startPos' j = 0; i < rsl.Length; i++' j += 4)  	rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: j += 4
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,GenerateSeed,The following statement contains a magic number: rsl [i] = (rand [j] << 24 | rand [j + 1] << 16 | rand [j + 2] << 8 | rand [j]) ^ rsl [i % startPos];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (i = 0' j = (SIZE >> 1); i < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: a ^= a << 13;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: mem [i] = y = mem [(x & MASK) >> 2] + a + b;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: a ^= (int)((uint)a >> 6);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: mem [i] = y = mem [(x & MASK) >> 2] + a + b;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: a ^= a << 2;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: mem [i] = y = mem [(x & MASK) >> 2] + a + b;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: a ^= (int)((uint)a >> 16);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: mem [i] = y = mem [(x & MASK) >> 2] + a + b;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: for (j = 0; j < (SIZE >> 1);) {  	x = mem [i];  	a ^= a << 13;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 6);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= a << 2;  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  	x = mem [i];  	a ^= (int)((uint)a >> 16);  	a += mem [j++];  	mem [i] = y = mem [(x & MASK) >> 2] + a + b;  	rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: a ^= a << 13;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: mem [i] = y = mem [(x & MASK) >> 2] + a + b;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: a ^= (int)((uint)a >> 6);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: mem [i] = y = mem [(x & MASK) >> 2] + a + b;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: a ^= a << 2;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: mem [i] = y = mem [(x & MASK) >> 2] + a + b;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: a ^= (int)((uint)a >> 16);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: mem [i] = y = mem [(x & MASK) >> 2] + a + b;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The following statement contains a magic number: rsl [i++] = b = mem [((y >> SIZEL) & MASK) >> 2] + x;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < 4; ++i) {  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < 4; ++i) {  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < 4; ++i) {  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < 4; ++i) {  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < 4; ++i) {  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < 4; ++i) {  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < 4; ++i) {  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < 4; ++i) {  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < 4; ++i) {  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: a ^= b << 11;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: b ^= (int)((uint)c >> 2);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: c ^= d << 8;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: d ^= (int)((uint)e >> 16);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: e ^= f << 10;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: f ^= (int)((uint)g >> 4);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: g ^= h << 8;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: h ^= (int)((uint)a >> 9);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += rsl [i];  	b += rsl [i + 1];  	c += rsl [i + 2];  	d += rsl [i + 3];  	e += rsl [i + 4];  	f += rsl [i + 5];  	g += rsl [i + 6];  	h += rsl [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: i += 8
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: c += rsl [i + 2];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: d += rsl [i + 3];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: e += rsl [i + 4];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: f += rsl [i + 5];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: g += rsl [i + 6];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: h += rsl [i + 7];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: a ^= b << 11;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: b ^= (int)((uint)c >> 2);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: c ^= d << 8;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: d ^= (int)((uint)e >> 16);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: e ^= f << 10;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: f ^= (int)((uint)g >> 4);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: g ^= h << 8;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: h ^= (int)((uint)a >> 9);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 2] = c;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 3] = d;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 4] = e;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 5] = f;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 6] = g;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 7] = h;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: for (i = 0; i < SIZE; i += 8) {  	a += mem [i];  	b += mem [i + 1];  	c += mem [i + 2];  	d += mem [i + 3];  	e += mem [i + 4];  	f += mem [i + 5];  	g += mem [i + 6];  	h += mem [i + 7];  	a ^= b << 11;  	d += a;  	b += c;  	b ^= (int)((uint)c >> 2);  	e += b;  	c += d;  	c ^= d << 8;  	f += c;  	d += e;  	d ^= (int)((uint)e >> 16);  	g += d;  	e += f;  	e ^= f << 10;  	h += e;  	f += g;  	f ^= (int)((uint)g >> 4);  	a += f;  	g += h;  	g ^= h << 8;  	b += g;  	h += a;  	h ^= (int)((uint)a >> 9);  	c += h;  	a += b;  	mem [i] = a;  	mem [i + 1] = b;  	mem [i + 2] = c;  	mem [i + 3] = d;  	mem [i + 4] = e;  	mem [i + 5] = f;  	mem [i + 6] = g;  	mem [i + 7] = h;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: i += 8
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: c += mem [i + 2];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: d += mem [i + 3];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: e += mem [i + 4];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: f += mem [i + 5];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: g += mem [i + 6];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: h += mem [i + 7];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: a ^= b << 11;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: b ^= (int)((uint)c >> 2);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: c ^= d << 8;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: d ^= (int)((uint)e >> 16);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: e ^= f << 10;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: f ^= (int)((uint)g >> 4);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: g ^= h << 8;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: h ^= (int)((uint)a >> 9);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 2] = c;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 3] = d;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 4] = e;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 5] = f;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 6] = g;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The following statement contains a magic number: mem [i + 7] = h;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,CheckCount,The following statement contains a magic number: if (count > ((SIZE << 2) - 1)) {  	Isaac ();  	count = 0;  }  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Next,The following statement contains a magic number: if ((count & 3) != 0)  	count += 4 - (count & 3);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Next,The following statement contains a magic number: if ((count & 3) != 0)  	count += 4 - (count & 3);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Next,The following statement contains a magic number: if ((count & 3) != 0)  	count += 4 - (count & 3);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Next,The following statement contains a magic number: count += 4 - (count & 3);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Next,The following statement contains a magic number: count += 4 - (count & 3);  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Next,The following statement contains a magic number: count += 4;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Next,The following statement contains a magic number: return rsl [(count - 4) >> 2];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Next,The following statement contains a magic number: return rsl [(count - 4) >> 2];  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,NextByte,The following statement contains a magic number: return (byte)((val & (0xFF000000 >> index)) >> (24 - index));  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,PrepareUnitTesting2,The following statement contains a magic number: rsl [2] = 0x6e3e693c;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,PrepareUnitTesting2,The following statement contains a magic number: rsl [3] = 0x2f3c746f;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,PrepareUnitTesting2,The following statement contains a magic number: rsl [4] = 0x74203e69;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,PrepareUnitTesting2,The following statement contains a magic number: rsl [5] = 0x72206568;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,PrepareUnitTesting2,The following statement contains a magic number: rsl [6] = 0x74686769;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,PrepareUnitTesting2,The following statement contains a magic number: rsl [7] = 0x74796d20;  
Magic Number,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,PrepareUnitTesting2,The following statement contains a magic number: rsl [8] = 0x2e747865;  
Magic Number,CryptoNet,Mars,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,Mars,The following statement contains a magic number: BlockSizeValue = 128;  
Magic Number,CryptoNet,Mars,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,Mars,The following statement contains a magic number: KeySizeValue = 256;  
Magic Number,CryptoNet,Mars,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,Mars,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (128' 128' 128);  
Magic Number,CryptoNet,Mars,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,Mars,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (128' 128' 128);  
Magic Number,CryptoNet,Mars,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,Mars,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (128' 128' 128);  
Magic Number,CryptoNet,Mars,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,Mars,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (128' 256' 64);  
Magic Number,CryptoNet,Mars,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,Mars,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (128' 256' 64);  
Magic Number,CryptoNet,Mars,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,Mars,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (128' 256' 64);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MarsTransform,The following statement contains a magic number: if ((iv != null) && (iv.Length != (algo.BlockSize >> 3)))  	throw new CryptographicException ("IV length is invalid (" + iv.Length + " bytes)' it should be " + (algo.BlockSize >> 3) + "bytes long.");  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MarsTransform,The following statement contains a magic number: if ((iv != null) && (iv.Length != (algo.BlockSize >> 3)))  	throw new CryptographicException ("IV length is invalid (" + iv.Length + " bytes)' it should be " + (algo.BlockSize >> 3) + "bytes long.");  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MarsTransform,The following statement contains a magic number: throw new CryptographicException ("IV length is invalid (" + iv.Length + " bytes)' it should be " + (algo.BlockSize >> 3) + "bytes long.");  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MarsTransform,The following statement contains a magic number: if (key != null && key.Length != 16 && key.Length != 24 && key.Length != 32)  	throw new CryptographicException ("key has an invalid length. Valid lengths are 16' 24 and 32 byte");  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MarsTransform,The following statement contains a magic number: if (key != null && key.Length != 16 && key.Length != 24 && key.Length != 32)  	throw new CryptographicException ("key has an invalid length. Valid lengths are 16' 24 and 32 byte");  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MarsTransform,The following statement contains a magic number: if (key != null && key.Length != 16 && key.Length != 24 && key.Length != 32)  	throw new CryptographicException ("key has an invalid length. Valid lengths are 16' 24 and 32 byte");  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < n; i++) {  	K [i] = 0;  	for (j = 3; j >= 0; j--)  		K [i] = (uint)((K [i] << 8) ^ (key [offset + j] & 0xFF));  	offset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < n; i++) {  	K [i] = 0;  	for (j = 3; j >= 0; j--)  		K [i] = (uint)((K [i] << 8) ^ (key [offset + j] & 0xFF));  	offset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < n; i++) {  	K [i] = 0;  	for (j = 3; j >= 0; j--)  		K [i] = (uint)((K [i] << 8) ^ (key [offset + j] & 0xFF));  	offset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MakeKey,The following statement contains a magic number: for (j = 3; j >= 0; j--)  	K [i] = (uint)((K [i] << 8) ^ (key [offset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MakeKey,The following statement contains a magic number: for (j = 3; j >= 0; j--)  	K [i] = (uint)((K [i] << 8) ^ (key [offset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MakeKey,The following statement contains a magic number: j = 3
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MakeKey,The following statement contains a magic number: K [i] = (uint)((K [i] << 8) ^ (key [offset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,MakeKey,The following statement contains a magic number: offset += 4;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = n + 1; i < 15; i++)  	buf [i] = 0;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	/* Linear transformation */w = buf [8] ^ buf [13];  	buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  	w = buf [9] ^ buf [14];  	buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  	for (i = 2; i < 7; i++) {  		w = buf [i + 8] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	for (i = 7; i < 15; i++) {  		w = buf [i - 7] ^ buf [i - 2];  		buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  	}  	/* Four stirring rounds */for (t = 0; t < 4; t++) {  		/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  		buf [0] = (w >> 23) | (w << 9);  		for (i = 1; i < 15; i++) {  			w = buf [i] + S [buf [i - 1] & 511];  			buf [i] = (w >> 23) | (w << 9);  		}  	}  	/* copy subkeys to mars_ctx' with swapping around */i = 10 * j;  	Key [i] = buf [0];  	Key [i + 1] = buf [4];  	Key [i + 2] = buf [8];  	Key [i + 3] = buf [12];  	Key [i + 4] = buf [1];  	Key [i + 5] = buf [5];  	Key [i + 6] = buf [9];  	Key [i + 7] = buf [13];  	Key [i + 8] = buf [2];  	Key [i + 9] = buf [6];  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: w = buf [8] ^ buf [13];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: w = buf [8] ^ buf [13];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [0] ^= (uint)(((w >> 29) | (w << 3)) ^ j);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: w = buf [9] ^ buf [14];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: w = buf [9] ^ buf [14];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [1] ^= (uint)(((w >> 29) | (w << 3)) ^ 4 ^ j);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 2; i < 7; i++) {  	w = buf [i + 8] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 2; i < 7; i++) {  	w = buf [i + 8] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 2; i < 7; i++) {  	w = buf [i + 8] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 2; i < 7; i++) {  	w = buf [i + 8] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 2; i < 7; i++) {  	w = buf [i + 8] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 2; i < 7; i++) {  	w = buf [i + 8] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 2; i < 7; i++) {  	w = buf [i + 8] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: i = 2
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: w = buf [i + 8] ^ buf [i - 2];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: w = buf [i + 8] ^ buf [i - 2];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 7; i < 15; i++) {  	w = buf [i - 7] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 7; i < 15; i++) {  	w = buf [i - 7] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 7; i < 15; i++) {  	w = buf [i - 7] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 7; i < 15; i++) {  	w = buf [i - 7] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 7; i < 15; i++) {  	w = buf [i - 7] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 7; i < 15; i++) {  	w = buf [i - 7] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 7; i < 15; i++) {  	w = buf [i - 7] ^ buf [i - 2];  	buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: i = 7
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: w = buf [i - 7] ^ buf [i - 2];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: w = buf [i - 7] ^ buf [i - 2];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [i] ^= (uint)(((w >> 29) | (w << 3)) ^ (i << 2) ^ j);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (t = 0; t < 4; t++) {  	/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  	buf [0] = (w >> 23) | (w << 9);  	for (i = 1; i < 15; i++) {  		w = buf [i] + S [buf [i - 1] & 511];  		buf [i] = (w >> 23) | (w << 9);  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (t = 0; t < 4; t++) {  	/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  	buf [0] = (w >> 23) | (w << 9);  	for (i = 1; i < 15; i++) {  		w = buf [i] + S [buf [i - 1] & 511];  		buf [i] = (w >> 23) | (w << 9);  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (t = 0; t < 4; t++) {  	/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  	buf [0] = (w >> 23) | (w << 9);  	for (i = 1; i < 15; i++) {  		w = buf [i] + S [buf [i - 1] & 511];  		buf [i] = (w >> 23) | (w << 9);  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (t = 0; t < 4; t++) {  	/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  	buf [0] = (w >> 23) | (w << 9);  	for (i = 1; i < 15; i++) {  		w = buf [i] + S [buf [i - 1] & 511];  		buf [i] = (w >> 23) | (w << 9);  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (t = 0; t < 4; t++) {  	/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  	buf [0] = (w >> 23) | (w << 9);  	for (i = 1; i < 15; i++) {  		w = buf [i] + S [buf [i - 1] & 511];  		buf [i] = (w >> 23) | (w << 9);  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (t = 0; t < 4; t++) {  	/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  	buf [0] = (w >> 23) | (w << 9);  	for (i = 1; i < 15; i++) {  		w = buf [i] + S [buf [i - 1] & 511];  		buf [i] = (w >> 23) | (w << 9);  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (t = 0; t < 4; t++) {  	/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  	buf [0] = (w >> 23) | (w << 9);  	for (i = 1; i < 15; i++) {  		w = buf [i] + S [buf [i - 1] & 511];  		buf [i] = (w >> 23) | (w << 9);  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (t = 0; t < 4; t++) {  	/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  	buf [0] = (w >> 23) | (w << 9);  	for (i = 1; i < 15; i++) {  		w = buf [i] + S [buf [i - 1] & 511];  		buf [i] = (w >> 23) | (w << 9);  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (t = 0; t < 4; t++) {  	/* stir with full type-1 s-box rounds */w = buf [0] + S [buf [14] & 511];  	buf [0] = (w >> 23) | (w << 9);  	for (i = 1; i < 15; i++) {  		w = buf [i] + S [buf [i - 1] & 511];  		buf [i] = (w >> 23) | (w << 9);  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: w = buf [0] + S [buf [14] & 511];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: w = buf [0] + S [buf [14] & 511];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [0] = (w >> 23) | (w << 9);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [0] = (w >> 23) | (w << 9);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 1; i < 15; i++) {  	w = buf [i] + S [buf [i - 1] & 511];  	buf [i] = (w >> 23) | (w << 9);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 1; i < 15; i++) {  	w = buf [i] + S [buf [i - 1] & 511];  	buf [i] = (w >> 23) | (w << 9);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 1; i < 15; i++) {  	w = buf [i] + S [buf [i - 1] & 511];  	buf [i] = (w >> 23) | (w << 9);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = 1; i < 15; i++) {  	w = buf [i] + S [buf [i - 1] & 511];  	buf [i] = (w >> 23) | (w << 9);  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: w = buf [i] + S [buf [i - 1] & 511];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [i] = (w >> 23) | (w << 9);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: buf [i] = (w >> 23) | (w << 9);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: i = 10 * j;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 1] = buf [4];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 2] = buf [8];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 2] = buf [8];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 3] = buf [12];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 3] = buf [12];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 4] = buf [1];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 5] = buf [5];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 5] = buf [5];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 6] = buf [9];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 6] = buf [9];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 7] = buf [13];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 7] = buf [13];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 8] = buf [2];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 8] = buf [2];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 9] = buf [6];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: Key [i + 9] = buf [6];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: for (i = NUM_DATA + 1; i < (EKEY_WORDS - NUM_DATA); i += 2)  	Key [i] = fix_subkey (Key [i]' Key [i - 1]);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordKeySetup,The following statement contains a magic number: i += 2
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	outp [i] = 0;  	for (j = 3; j >= 0; j--)  		outp [i] = (uint)((outp [i] << 8) ^ (input [inOffset + j] & 0xFF));  	inOffset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	outp [i] = 0;  	for (j = 3; j >= 0; j--)  		outp [i] = (uint)((outp [i] << 8) ^ (input [inOffset + j] & 0xFF));  	inOffset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	outp [i] = 0;  	for (j = 3; j >= 0; j--)  		outp [i] = (uint)((outp [i] << 8) ^ (input [inOffset + j] & 0xFF));  	inOffset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	outp [i] = 0;  	for (j = 3; j >= 0; j--)  		outp [i] = (uint)((outp [i] << 8) ^ (input [inOffset + j] & 0xFF));  	inOffset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (j = 3; j >= 0; j--)  	outp [i] = (uint)((outp [i] << 8) ^ (input [inOffset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (j = 3; j >= 0; j--)  	outp [i] = (uint)((outp [i] << 8) ^ (input [inOffset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: j = 3
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: outp [i] = (uint)((outp [i] << 8) ^ (input [inOffset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: inOffset += 4;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	for (j = 0; j < 4; j++) {  		output [(i << 2) + j] = (byte)(outp [i] & 0xFF);  		outp [i] >>= 8;  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	for (j = 0; j < 4; j++) {  		output [(i << 2) + j] = (byte)(outp [i] & 0xFF);  		outp [i] >>= 8;  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	for (j = 0; j < 4; j++) {  		output [(i << 2) + j] = (byte)(outp [i] & 0xFF);  		outp [i] >>= 8;  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	for (j = 0; j < 4; j++) {  		output [(i << 2) + j] = (byte)(outp [i] & 0xFF);  		outp [i] >>= 8;  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	output [(i << 2) + j] = (byte)(outp [i] & 0xFF);  	outp [i] >>= 8;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	output [(i << 2) + j] = (byte)(outp [i] & 0xFF);  	outp [i] >>= 8;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	output [(i << 2) + j] = (byte)(outp [i] & 0xFF);  	outp [i] >>= 8;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: output [(i << 2) + j] = (byte)(outp [i] & 0xFF);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockEncrypt,The following statement contains a magic number: outp [i] >>= 8;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: c = output [2] + sesKey [2];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: c = output [2] + sesKey [2];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: d = output [3] + sesKey [3];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: d = output [3] + sesKey [3];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp3 = ((a >> 24) | (a << 8));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp3 = ((a >> 24) | (a << 8));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: b = c + S [(tmp3 >> 24) & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: b = c + S [(tmp3 >> 24) & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: c = d ^ S [(tmp3 & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: c = d ^ S [(tmp3 & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if ((i == 0) | (i == 4))  	d = d + c;  else if ((i == 1) | (i == 5))  	d = d + a;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if ((i == 0) | (i == 4))  	d = d + c;  else if ((i == 1) | (i == 5))  	d = d + a;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if ((i == 1) | (i == 5))  	d = d + a;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: j = 4;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp2 = a + sesKey [j];  	d = (a >> 19) | (a << 13);  	tmp3 = d * sesKey [j + 1];  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  	tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b + tmp1;  		b = c + tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c + tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d + tmp1;  	}  	j += 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: d = (a >> 19) | (a << 13);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: d = (a >> 19) | (a << 13);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp1 = S [tmp2 & 511] ^ tmp3;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp2 = ((tmp2 >> (32 - (int)r)) | (tmp2 << (int)r));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp3 = (tmp3 << 5) | (r = tmp3 >> 27);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if (i < 8) {  	// first 8 rounds in forward mode  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	a = b + tmp1;  	b = c + tmp2;  	c = sav_d ^ tmp3;  }  else {  	// last 8 rounds in backwards mode  	a = b ^ tmp3;  	b = c + tmp2;  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	c = sav_d + tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if (i < 8) {  	// first 8 rounds in forward mode  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	a = b + tmp1;  	b = c + tmp2;  	c = sav_d ^ tmp3;  }  else {  	// last 8 rounds in backwards mode  	a = b ^ tmp3;  	b = c + tmp2;  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	c = sav_d + tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if (i < 8) {  	// first 8 rounds in forward mode  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	a = b + tmp1;  	b = c + tmp2;  	c = sav_d ^ tmp3;  }  else {  	// last 8 rounds in backwards mode  	a = b ^ tmp3;  	b = c + tmp2;  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	c = sav_d + tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: j += 2;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if ((i == 2) | (i == 6))  	a -= d;  else if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if ((i == 2) | (i == 6))  	a -= d;  else if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if ((i == 2) | (i == 6))  	a -= d;  else if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if ((i == 2) | (i == 6))  	a -= d;  else if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp1 = ((a >> 8) | (a << 24));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: tmp1 = ((a >> 8) | (a << 24));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: a = b ^ S [(a & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: a = b ^ S [(a & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: b = c - S [(tmp1 >> 16) & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: b = c - S [(tmp1 >> 16) & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: output [0] = a - sesKey [2 * NUM_ROUNDS + 4];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: output [0] = a - sesKey [2 * NUM_ROUNDS + 4];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: output [1] = b - sesKey [2 * NUM_ROUNDS + 5];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: output [1] = b - sesKey [2 * NUM_ROUNDS + 5];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: output [2] = c - sesKey [2 * NUM_ROUNDS + 6];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: output [2] = c - sesKey [2 * NUM_ROUNDS + 6];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: output [2] = c - sesKey [2 * NUM_ROUNDS + 6];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: output [3] = d - sesKey [2 * NUM_ROUNDS + 7];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: output [3] = d - sesKey [2 * NUM_ROUNDS + 7];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordEncrypt,The following statement contains a magic number: output [3] = d - sesKey [2 * NUM_ROUNDS + 7];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	outp [3 - i] = 0;  	for (j = 3; j >= 0; j--)  		outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  	inOffset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	outp [3 - i] = 0;  	for (j = 3; j >= 0; j--)  		outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  	inOffset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	outp [3 - i] = 0;  	for (j = 3; j >= 0; j--)  		outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  	inOffset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	outp [3 - i] = 0;  	for (j = 3; j >= 0; j--)  		outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  	inOffset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	outp [3 - i] = 0;  	for (j = 3; j >= 0; j--)  		outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  	inOffset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	outp [3 - i] = 0;  	for (j = 3; j >= 0; j--)  		outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  	inOffset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	outp [3 - i] = 0;  	for (j = 3; j >= 0; j--)  		outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  	inOffset += 4;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: outp [3 - i] = 0;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (j = 3; j >= 0; j--)  	outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (j = 3; j >= 0; j--)  	outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (j = 3; j >= 0; j--)  	outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (j = 3; j >= 0; j--)  	outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: j = 3
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: outp [3 - i] = (uint)((outp [3 - i] << 8) ^ (input [inOffset + j] & 0xFF));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: inOffset += 4;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	for (j = 0; j < 4; j++) {  		output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  		outp [3 - i] >>= 8;  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	for (j = 0; j < 4; j++) {  		output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  		outp [3 - i] >>= 8;  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	for (j = 0; j < 4; j++) {  		output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  		outp [3 - i] >>= 8;  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	for (j = 0; j < 4; j++) {  		output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  		outp [3 - i] >>= 8;  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	for (j = 0; j < 4; j++) {  		output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  		outp [3 - i] >>= 8;  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (i = 0; i < 4; i++) {  	for (j = 0; j < 4; j++) {  		output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  		outp [3 - i] >>= 8;  	}  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  	outp [3 - i] >>= 8;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  	outp [3 - i] >>= 8;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  	outp [3 - i] >>= 8;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  	outp [3 - i] >>= 8;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: for (j = 0; j < 4; j++) {  	output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  	outp [3 - i] >>= 8;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: output [(i << 2) + j] = (byte)(outp [3 - i] & 0xFF);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: outp [3 - i] >>= 8;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,BlockDecrypt,The following statement contains a magic number: outp [3 - i] >>= 8;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: a = output [0] + sesKey [2 * NUM_ROUNDS + 7];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: a = output [0] + sesKey [2 * NUM_ROUNDS + 7];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: b = output [1] + sesKey [2 * NUM_ROUNDS + 6];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: b = output [1] + sesKey [2 * NUM_ROUNDS + 6];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: c = output [2] + sesKey [2 * NUM_ROUNDS + 5];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: c = output [2] + sesKey [2 * NUM_ROUNDS + 5];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: c = output [2] + sesKey [2 * NUM_ROUNDS + 5];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: d = output [3] + sesKey [2 * NUM_ROUNDS + 4];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: d = output [3] + sesKey [2 * NUM_ROUNDS + 4];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: d = output [3] + sesKey [2 * NUM_ROUNDS + 4];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	tmp3 = ((a >> 24) | (a << 8));  	// mix_subround(out'0'1'2'3);   	a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  	b = c + S [(tmp3 >> 24) & 255];  	c = d ^ S [(tmp3 & 255) + 256];  	d = tmp3;  	if ((i == 0) | (i == 4))  		d = d + c;  	else if ((i == 1) | (i == 5))  		d = d + a;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp3 = ((a >> 24) | (a << 8));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp3 = ((a >> 24) | (a << 8));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: a = (b ^ S [a & 255]) + S [((a >> 8) & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: b = c + S [(tmp3 >> 24) & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: b = c + S [(tmp3 >> 24) & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: c = d ^ S [(tmp3 & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: c = d ^ S [(tmp3 & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if ((i == 0) | (i == 4))  	d = d + c;  else if ((i == 1) | (i == 5))  	d = d + a;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if ((i == 0) | (i == 4))  	d = d + c;  else if ((i == 1) | (i == 5))  	d = d + a;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if ((i == 1) | (i == 5))  	d = d + a;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: j = 35;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 16; i++) {  	uint sav_d = d;  	// Compute the E-function  	tmp3 = a * sesKey [j];  	d = (a >> 13) | (a << 19);  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp2 = d + sesKey [j - 1];  	tmp1 = S [tmp2 & 511] ^ tmp3;  	tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  	tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  	tmp1 ^= tmp3;  	if (i < 8) {  		// first 8 rounds in forward mode  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		a = b - tmp1;  		b = c - tmp2;  		c = sav_d ^ tmp3;  	}  	else {  		// last 8 rounds in backwards mode  		a = b ^ tmp3;  		b = c - tmp2;  		tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  		c = sav_d - tmp1;  	}  	j -= 2;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: d = (a >> 13) | (a << 19);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: d = (a >> 13) | (a << 19);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp1 = S [tmp2 & 511] ^ tmp3;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp2 = ((tmp2 << (int)r) | (tmp2 >> (32 - (int)r)));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp3 = (r = tmp3 >> 27) | (tmp3 << 5);  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if (i < 8) {  	// first 8 rounds in forward mode  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	a = b - tmp1;  	b = c - tmp2;  	c = sav_d ^ tmp3;  }  else {  	// last 8 rounds in backwards mode  	a = b ^ tmp3;  	b = c - tmp2;  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	c = sav_d - tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if (i < 8) {  	// first 8 rounds in forward mode  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	a = b - tmp1;  	b = c - tmp2;  	c = sav_d ^ tmp3;  }  else {  	// last 8 rounds in backwards mode  	a = b ^ tmp3;  	b = c - tmp2;  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	c = sav_d - tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if (i < 8) {  	// first 8 rounds in forward mode  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	a = b - tmp1;  	b = c - tmp2;  	c = sav_d ^ tmp3;  }  else {  	// last 8 rounds in backwards mode  	a = b ^ tmp3;  	b = c - tmp2;  	tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  	c = sav_d - tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp1 = ((tmp1 >> (32 - (int)r)) | (tmp1 << (int)r));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: j -= 2;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: for (i = 0; i < 8; i++) {  	if ((i == 2) | (i == 6))  		a -= d;  	else if ((i == 3) | (i == 7))  		a -= b;  	tmp1 = ((a >> 8) | (a << 24));  	// imix_subround(out'0'1'2'3);  	a = b ^ S [(a & 255) + 256];  	b = c - S [(tmp1 >> 16) & 255];  	c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  	d = tmp1;  }  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if ((i == 2) | (i == 6))  	a -= d;  else if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if ((i == 2) | (i == 6))  	a -= d;  else if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if ((i == 2) | (i == 6))  	a -= d;  else if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if ((i == 2) | (i == 6))  	a -= d;  else if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: if ((i == 3) | (i == 7))  	a -= b;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp1 = ((a >> 8) | (a << 24));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: tmp1 = ((a >> 8) | (a << 24));  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: a = b ^ S [(a & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: a = b ^ S [(a & 255) + 256];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: b = c - S [(tmp1 >> 16) & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: b = c - S [(tmp1 >> 16) & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: c = (d - S [((tmp1 >> 8) & 255) + 256]) ^ S [tmp1 & 255];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: output [0] = a - sesKey [3];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: output [1] = b - sesKey [2];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: output [2] = c - sesKey [1];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,wordDecrypt,The following statement contains a magic number: output [3] = d - sesKey [0];  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: i = k & 3;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: k |= 3;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: m2 &= m2 << 2;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: m2 &= m2 << 4;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: m2 &= m1 << 8;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: m1 |= m1 >> 2;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: m1 |= m2 >> 4;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: m1 |= m1 >> 5;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: k ^= ((S [265 + i] << (int)(r & 31)) | (S [265 + i] >> (int)(32 - (r & 31)))) & m1;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: k ^= ((S [265 + i] << (int)(r & 31)) | (S [265 + i] >> (int)(32 - (r & 31)))) & m1;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: k ^= ((S [265 + i] << (int)(r & 31)) | (S [265 + i] >> (int)(32 - (r & 31)))) & m1;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: k ^= ((S [265 + i] << (int)(r & 31)) | (S [265 + i] >> (int)(32 - (r & 31)))) & m1;  
Magic Number,CryptoNet,MarsTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Mars.cs,fix_subkey,The following statement contains a magic number: k ^= ((S [265 + i] << (int)(r & 31)) | (S [265 + i] >> (int)(32 - (r & 31)))) & m1;  
Magic Number,CryptoNet,Serpent,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,Serpent,The following statement contains a magic number: BlockSizeValue = 128;  
Magic Number,CryptoNet,Serpent,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,Serpent,The following statement contains a magic number: KeySizeValue = 256;  
Magic Number,CryptoNet,Serpent,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,Serpent,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (128' 128' 128);  
Magic Number,CryptoNet,Serpent,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,Serpent,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (128' 128' 128);  
Magic Number,CryptoNet,Serpent,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,Serpent,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (128' 128' 128);  
Magic Number,CryptoNet,Serpent,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,Serpent,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (128' 256' 64);  
Magic Number,CryptoNet,Serpent,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,Serpent,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (128' 256' 64);  
Magic Number,CryptoNet,Serpent,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,Serpent,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (128' 256' 64);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,SerpentTransform,The following statement contains a magic number: if ((iv != null) && (iv.Length != (algo.BlockSize >> 3)))  	throw new CryptographicException ("IV length is invalid (" + iv.Length + " bytes)' it should be " + (algo.BlockSize >> 3) + "bytes long.");  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,SerpentTransform,The following statement contains a magic number: if ((iv != null) && (iv.Length != (algo.BlockSize >> 3)))  	throw new CryptographicException ("IV length is invalid (" + iv.Length + " bytes)' it should be " + (algo.BlockSize >> 3) + "bytes long.");  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,SerpentTransform,The following statement contains a magic number: throw new CryptographicException ("IV length is invalid (" + iv.Length + " bytes)' it should be " + (algo.BlockSize >> 3) + "bytes long.");  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,SerpentTransform,The following statement contains a magic number: if (key != null && key.Length != 16 && key.Length != 24 && key.Length != 32)  	throw new CryptographicException ("key has an invalid length. Valid lengths are 16' 24 and 32 byte");  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,SerpentTransform,The following statement contains a magic number: if (key != null && key.Length != 16 && key.Length != 24 && key.Length != 32)  	throw new CryptographicException ("key has an invalid length. Valid lengths are 16' 24 and 32 byte");  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,SerpentTransform,The following statement contains a magic number: if (key != null && key.Length != 16 && key.Length != 24 && key.Length != 32)  	throw new CryptographicException ("key has an invalid length. Valid lengths are 16' 24 and 32 byte");  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey = new uint[4 * (ROUNDS + 1)];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < limit; i++)  	sesKey [i] = (uint)(key [offset--] & 0xFF) | (uint)((key [offset--] & 0xFF)) << 8 | (uint)((key [offset--] & 0xFF)) << 16 | (uint)((key [offset--] & 0xFF)) << 24;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < limit; i++)  	sesKey [i] = (uint)(key [offset--] & 0xFF) | (uint)((key [offset--] & 0xFF)) << 8 | (uint)((key [offset--] & 0xFF)) << 16 | (uint)((key [offset--] & 0xFF)) << 24;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < limit; i++)  	sesKey [i] = (uint)(key [offset--] & 0xFF) | (uint)((key [offset--] & 0xFF)) << 8 | (uint)((key [offset--] & 0xFF)) << 16 | (uint)((key [offset--] & 0xFF)) << 24;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [i] = (uint)(key [offset--] & 0xFF) | (uint)((key [offset--] & 0xFF)) << 8 | (uint)((key [offset--] & 0xFF)) << 16 | (uint)((key [offset--] & 0xFF)) << 24;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [i] = (uint)(key [offset--] & 0xFF) | (uint)((key [offset--] & 0xFF)) << 8 | (uint)((key [offset--] & 0xFF)) << 16 | (uint)((key [offset--] & 0xFF)) << 24;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [i] = (uint)(key [offset--] & 0xFF) | (uint)((key [offset--] & 0xFF)) << 8 | (uint)((key [offset--] & 0xFF)) << 16 | (uint)((key [offset--] & 0xFF)) << 24;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: if (i < 8)  	sesKey [i++] = 1;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 8' j = 0; i < 16; i++) {  	t = (uint)(sesKey [j] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ j++);  	sesKey [i] = t << 11 | t >> 21;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 8' j = 0; i < 16; i++) {  	t = (uint)(sesKey [j] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ j++);  	sesKey [i] = t << 11 | t >> 21;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 8' j = 0; i < 16; i++) {  	t = (uint)(sesKey [j] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ j++);  	sesKey [i] = t << 11 | t >> 21;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 8' j = 0; i < 16; i++) {  	t = (uint)(sesKey [j] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ j++);  	sesKey [i] = t << 11 | t >> 21;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 8' j = 0; i < 16; i++) {  	t = (uint)(sesKey [j] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ j++);  	sesKey [i] = t << 11 | t >> 21;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 8' j = 0; i < 16; i++) {  	t = (uint)(sesKey [j] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ j++);  	sesKey [i] = t << 11 | t >> 21;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: i = 8
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: t = (uint)(sesKey [j] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ j++);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: t = (uint)(sesKey [j] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ j++);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [i] = t << 11 | t >> 21;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [i] = t << 11 | t >> 21;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 8; i++)  	sesKey [i] = sesKey [i + 8];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 8; i++)  	sesKey [i] = sesKey [i + 8];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [i] = sesKey [i + 8];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: limit = 132;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (; i < limit; i++) {  	t = (uint)(sesKey [i - 8] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ i);  	sesKey [i] = t << 11 | t >> 21;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (; i < limit; i++) {  	t = (uint)(sesKey [i - 8] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ i);  	sesKey [i] = t << 11 | t >> 21;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (; i < limit; i++) {  	t = (uint)(sesKey [i - 8] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ i);  	sesKey [i] = t << 11 | t >> 21;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (; i < limit; i++) {  	t = (uint)(sesKey [i - 8] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ i);  	sesKey [i] = t << 11 | t >> 21;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (; i < limit; i++) {  	t = (uint)(sesKey [i - 8] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ i);  	sesKey [i] = t << 11 | t >> 21;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: t = (uint)(sesKey [i - 8] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ i);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: t = (uint)(sesKey [i - 8] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ i);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: t = (uint)(sesKey [i - 8] ^ sesKey [i - 5] ^ sesKey [i - 3] ^ sesKey [i - 1] ^ PHI ^ i);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [i] = t << 11 | t >> 21;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [i] = t << 11 | t >> 21;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < ROUNDS + 1; i++) {  	x0 = sesKey [4 * i];  	x1 = sesKey [4 * i + 1];  	x2 = sesKey [4 * i + 2];  	x3 = sesKey [4 * i + 3];  	y0 = y1 = y2 = y3 = 0;  	sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  	for (j = 0; j < 32; j++) {  		z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  		y0 |= (z & 0x01) << j;  		y1 |= ((z >> 1) & 0x01) << j;  		y2 |= ((z >> 2) & 0x01) << j;  		y3 |= ((z >> 3) & 0x01) << j;  	}  	sesKey [4 * i] = y0;  	sesKey [4 * i + 1] = y1;  	sesKey [4 * i + 2] = y2;  	sesKey [4 * i + 3] = y3;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: x0 = sesKey [4 * i];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: x1 = sesKey [4 * i + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: x2 = sesKey [4 * i + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: x2 = sesKey [4 * i + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: x3 = sesKey [4 * i + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: x3 = sesKey [4 * i + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sb = Sbox [(ROUNDS + 3 - i) % ROUNDS];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (j = 0; j < 32; j++) {  	z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  	y0 |= (z & 0x01) << j;  	y1 |= ((z >> 1) & 0x01) << j;  	y2 |= ((z >> 2) & 0x01) << j;  	y3 |= ((z >> 3) & 0x01) << j;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (j = 0; j < 32; j++) {  	z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  	y0 |= (z & 0x01) << j;  	y1 |= ((z >> 1) & 0x01) << j;  	y2 |= ((z >> 2) & 0x01) << j;  	y3 |= ((z >> 3) & 0x01) << j;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (j = 0; j < 32; j++) {  	z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  	y0 |= (z & 0x01) << j;  	y1 |= ((z >> 1) & 0x01) << j;  	y2 |= ((z >> 2) & 0x01) << j;  	y3 |= ((z >> 3) & 0x01) << j;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (j = 0; j < 32; j++) {  	z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  	y0 |= (z & 0x01) << j;  	y1 |= ((z >> 1) & 0x01) << j;  	y2 |= ((z >> 2) & 0x01) << j;  	y3 |= ((z >> 3) & 0x01) << j;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: for (j = 0; j < 32; j++) {  	z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  	y0 |= (z & 0x01) << j;  	y1 |= ((z >> 1) & 0x01) << j;  	y2 |= ((z >> 2) & 0x01) << j;  	y3 |= ((z >> 3) & 0x01) << j;  }  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: z = sb [((x0 >> j) & 0x01) | ((x1 >> j) & 0x01) << 1 | ((x2 >> j) & 0x01) << 2 | ((x3 >> j) & 0x01) << 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: y2 |= ((z >> 2) & 0x01) << j;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: y3 |= ((z >> 3) & 0x01) << j;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [4 * i] = y0;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [4 * i + 1] = y1;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [4 * i + 2] = y2;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [4 * i + 2] = y2;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [4 * i + 3] = y3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,MakeKey,The following statement contains a magic number: sesKey [4 * i + 3] = y3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [1 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [1 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [1 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [1 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [1 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [1 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [2 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [2 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [2 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [2 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [2 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [2 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [2 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [2 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [2 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [2 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [3 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [3 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [3 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [3 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [3 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [3 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [3 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [3 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [3 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [3 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [4 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [4 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [4 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [4 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [4 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [4 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [4 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [4 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [4 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [4 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [5 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [5 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [5 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [5 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [5 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [5 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [5 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [5 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [5 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [5 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [6 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [6 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [6 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [6 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [6 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [6 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [6 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [6 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [6 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [6 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [7 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [7 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [7 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [7 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [7 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [7 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [7 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [7 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [7 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [7 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [8 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [8 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [8 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [8 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [8 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [8 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [8 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [8 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [8 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [8 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [9 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [9 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [9 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [9 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [9 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [9 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [9 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [9 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [9 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [9 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [10 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [10 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [10 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [10 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [10 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [10 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [10 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [10 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [10 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [10 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [11 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [11 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [11 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [11 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [11 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [11 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [11 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [11 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [11 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [11 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [12 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [12 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [12 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [12 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [12 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [12 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [12 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [12 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [12 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [12 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [13 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [13 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [13 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [13 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [13 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [13 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [13 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [13 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [13 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [13 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [14 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [14 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [14 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [14 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [14 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [14 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [14 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [14 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [14 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [14 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [15 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [15 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [15 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [15 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [15 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [15 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [15 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [15 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [15 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [15 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [16 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [16 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [16 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [16 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [16 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [16 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [16 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [16 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [16 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [16 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [17 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [17 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [17 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [17 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [17 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [17 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [17 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [17 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [17 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [17 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [18 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [18 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [18 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [18 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [18 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [18 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [18 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [18 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [18 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [18 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [19 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [19 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [19 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [19 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [19 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [19 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [19 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [19 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [19 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [19 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [20 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [20 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [20 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [20 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [20 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [20 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [20 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [20 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [20 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [20 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [21 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [21 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [21 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [21 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [21 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [21 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [21 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [21 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [21 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [21 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [22 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [22 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [22 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [22 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [22 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [22 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [22 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [22 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [22 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [22 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [23 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [23 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [23 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [23 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [23 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [23 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [23 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [23 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [23 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [23 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [24 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [24 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [24 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [24 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [24 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [24 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [24 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [24 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [24 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [24 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [25 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [25 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [25 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [25 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [25 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [25 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [25 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [25 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [25 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [25 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [26 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [26 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [26 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [26 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [26 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [26 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [26 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [26 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [26 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [26 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [27 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [27 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [27 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [27 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [27 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [27 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [27 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [27 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [27 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [27 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [28 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [28 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [28 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [28 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [28 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [28 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [28 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [28 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [28 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [28 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [29 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [29 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [29 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [29 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [29 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [29 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [29 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [29 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [29 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [29 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [30 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [30 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [30 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [30 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [30 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [30 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [30 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [30 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [30 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [30 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((y0)) << (13)) | (((y0)) >> (32 - (13))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((y2)) << (3)) | (((y2)) >> (32 - (3))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = y3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 = ((((x1)) << (1)) | (((x1)) >> (32 - (1))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 = ((((x3)) << (7)) | (((x3)) >> (32 - (7))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 ^ x3 ^ (x1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 = ((((x0)) << (5)) | (((x0)) >> (32 - (5))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 = ((((x2)) << (22)) | (((x2)) >> (32 - (22))));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [31 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [31 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [31 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [31 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [31 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [31 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [31 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [31 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [31 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [31 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [32 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= sesKey [32 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [32 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= sesKey [32 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [32 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [32 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= sesKey [32 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [32 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [32 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= sesKey [32 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [15] = (byte)(x0 & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [14] = (byte)((x0 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [14] = (byte)((x0 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [13] = (byte)((x0 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [13] = (byte)((x0 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [12] = (byte)((x0 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [12] = (byte)((x0 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [11] = (byte)(x1 & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [10] = (byte)((x1 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [10] = (byte)((x1 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [9] = (byte)((x1 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [9] = (byte)((x1 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [8] = (byte)((x1 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [8] = (byte)((x1 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [7] = (byte)(x2 & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [6] = (byte)((x2 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [6] = (byte)((x2 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [5] = (byte)((x2 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [5] = (byte)((x2 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [4] = (byte)((x2 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [4] = (byte)((x2 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [3] = (byte)(x3 & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [2] = (byte)((x3 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [2] = (byte)((x3 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [1] = (byte)((x3 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The following statement contains a magic number: output [0] = (byte)((x3 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 ^= K [32 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 ^= K [32 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 ^= K [32 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 ^= K [32 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 ^= K [32 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 ^= K [32 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 ^= K [32 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 ^= K [32 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 ^= K [32 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 ^= K [32 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [31 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [31 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [31 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [31 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [31 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [31 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [31 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [31 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [31 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [31 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [30 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [30 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [30 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [30 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [30 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [30 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [30 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [30 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [30 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [30 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [29 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [29 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [29 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [29 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [29 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [29 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [29 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [29 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [29 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [29 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [28 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [28 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [28 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [28 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [28 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [28 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [28 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [28 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [28 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [28 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [27 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [27 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [27 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [27 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [27 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [27 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [27 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [27 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [27 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [27 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [26 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [26 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [26 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [26 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [26 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [26 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [26 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [26 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [26 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [26 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [25 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [25 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [25 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [25 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [25 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [25 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [25 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [25 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [25 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [25 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [24 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [24 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [24 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [24 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [24 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [24 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [24 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [24 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [24 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [24 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [23 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [23 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [23 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [23 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [23 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [23 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [23 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [23 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [23 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [23 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [22 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [22 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [22 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [22 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [22 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [22 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [22 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [22 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [22 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [22 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [21 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [21 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [21 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [21 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [21 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [21 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [21 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [21 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [21 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [21 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [20 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [20 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [20 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [20 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [20 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [20 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [20 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [20 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [20 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [20 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [19 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [19 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [19 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [19 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [19 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [19 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [19 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [19 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [19 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [19 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [18 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [18 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [18 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [18 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [18 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [18 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [18 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [18 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [18 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [18 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [17 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [17 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [17 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [17 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [17 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [17 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [17 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [17 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [17 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [17 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [16 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [16 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [16 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [16 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [16 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [16 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [16 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [16 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [16 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [16 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [15 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [15 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [15 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [15 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [15 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [15 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [15 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [15 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [15 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [15 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [14 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [14 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [14 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [14 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [14 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [14 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [14 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [14 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [14 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [14 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [13 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [13 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [13 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [13 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [13 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [13 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [13 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [13 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [13 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [13 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [12 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [12 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [12 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [12 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [12 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [12 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [12 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [12 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [12 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [12 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [11 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [11 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [11 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [11 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [11 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [11 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [11 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [11 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [11 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [11 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [10 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [10 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [10 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [10 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [10 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [10 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [10 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [10 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [10 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [10 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [9 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [9 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [9 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [9 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [9 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [9 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [9 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [9 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [9 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [9 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [8 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [8 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [8 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [8 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [8 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [8 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [8 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [8 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [8 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [8 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [7 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [7 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [7 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [7 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [7 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [7 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [7 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [7 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [7 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [7 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [6 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [6 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [6 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [6 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [6 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [6 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [6 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [6 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [6 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [6 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [5 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [5 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [5 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [5 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [5 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [5 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [5 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [5 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [5 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [5 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [4 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [4 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [4 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [4 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [4 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [4 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [4 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [4 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [4 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [4 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [3 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [3 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [3 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [3 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [3 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [3 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [3 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [3 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [3 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [3 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [2 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [2 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [2 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [2 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [2 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [2 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [2 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [2 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [2 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [2 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y0 ^= K [1 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y1 ^= K [1 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [1 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y2 ^= K [1 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [1 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: y3 ^= K [1 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((y2)) << (32 - (22))) | (((y2)) >> (22)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((y0)) << (32 - (5))) | (((y0)) >> (5)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = x2 ^ y3 ^ (y1 << 7);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = ((((y3)) << (32 - (7))) | (((y3)) >> (7)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 = ((((y1)) << (32 - (1))) | (((y1)) >> (1)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 = x3 ^ x2 ^ (x0) << 3;  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 = ((((x2)) << (32 - (3))) | (((x2)) >> (3)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 = ((((x0)) << (32 - (13))) | (((x0)) >> (13)));  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x0 ^= K [0 * 4 + 0];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x1 ^= K [0 * 4 + 1];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 ^= K [0 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x2 ^= K [0 * 4 + 2];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 ^= K [0 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: x3 ^= K [0 * 4 + 3];  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [15] = (byte)(x0 & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [14] = (byte)((x0 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [14] = (byte)((x0 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [13] = (byte)((x0 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [13] = (byte)((x0 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [12] = (byte)((x0 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [12] = (byte)((x0 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [11] = (byte)(x1 & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [10] = (byte)((x1 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [10] = (byte)((x1 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [9] = (byte)((x1 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [9] = (byte)((x1 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [8] = (byte)((x1 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [8] = (byte)((x1 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [7] = (byte)(x2 & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [6] = (byte)((x2 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [6] = (byte)((x2 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [5] = (byte)((x2 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [5] = (byte)((x2 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [4] = (byte)((x2 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [4] = (byte)((x2 >> 24) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [3] = (byte)(x3 & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [2] = (byte)((x3 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [2] = (byte)((x3 >> 8) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [1] = (byte)((x3 >> 16) & 0xFF);  
Magic Number,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The following statement contains a magic number: output [0] = (byte)((x3 >> 24) & 0xFF);  
Magic Number,CryptoNet,Twofish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Twofish,The following statement contains a magic number: BlockSizeValue = 128;  
Magic Number,CryptoNet,Twofish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Twofish,The following statement contains a magic number: KeySizeValue = 256;  
Magic Number,CryptoNet,Twofish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Twofish,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (128' 128' 128);  
Magic Number,CryptoNet,Twofish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Twofish,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (128' 128' 128);  
Magic Number,CryptoNet,Twofish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Twofish,The following statement contains a magic number: base.LegalBlockSizesValue [0] = new KeySizes (128' 128' 128);  
Magic Number,CryptoNet,Twofish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Twofish,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (128' 256' 64);  
Magic Number,CryptoNet,Twofish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Twofish,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (128' 256' 64);  
Magic Number,CryptoNet,Twofish,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Twofish,The following statement contains a magic number: LegalKeySizesValue [0] = new KeySizes (128' 256' 64);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,TwofishTransform,The following statement contains a magic number: if ((iv != null) && (iv.Length != (algo.BlockSize >> 3)))  	throw new CryptographicException ("IV length is invalid (" + iv.Length + " bytes)' it should be " + (algo.BlockSize >> 3) + " bytes long.");  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,TwofishTransform,The following statement contains a magic number: if ((iv != null) && (iv.Length != (algo.BlockSize >> 3)))  	throw new CryptographicException ("IV length is invalid (" + iv.Length + " bytes)' it should be " + (algo.BlockSize >> 3) + " bytes long.");  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,TwofishTransform,The following statement contains a magic number: throw new CryptographicException ("IV length is invalid (" + iv.Length + " bytes)' it should be " + (algo.BlockSize >> 3) + " bytes long.");  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,TwofishTransform,The following statement contains a magic number: if (key != null && key.Length != 16 && key.Length != 24 && key.Length != 32)  	throw new CryptographicException ("key has an invalid length. Valid lengths are 16' 24 and 32 byte");  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,TwofishTransform,The following statement contains a magic number: if (key != null && key.Length != 16 && key.Length != 24 && key.Length != 32)  	throw new CryptographicException ("key has an invalid length. Valid lengths are 16' 24 and 32 byte");  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,TwofishTransform,The following statement contains a magic number: if (key != null && key.Length != 16 && key.Length != 24 && key.Length != 32)  	throw new CryptographicException ("key has an invalid length. Valid lengths are 16' 24 and 32 byte");  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS = new uint[4' 256];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS = new uint[4' 256];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: for (uint i = 0; i < 256; i++) {  	j = (uint)(P [0] [i] & 0xFF);  	// compute all the matrix elements  	m1 [0] = j;  	mX [0] = Mx_X (j) & 0xFF;  	mY [0] = Mx_Y (j) & 0xFF;  	j = (uint)(P [1] [i] & 0xFF);  	m1 [1] = j;  	mX [1] = Mx_X (j) & 0xFF;  	mY [1] = Mx_Y (j) & 0xFF;  	MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  	mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  	MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  	MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  	MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [0' i] = m1 [P_00] << 0 | // fill matrix w/ above elements  mX [P_00] << 8 | mY [P_00] << 16 | mY [P_00] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [1' i] = mY [P_10] << 0 | mY [P_10] << 8 | mX [P_10] << 16 | m1 [P_10] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [2' i] = mX [P_20] << 0 | mY [P_20] << 8 | m1 [P_20] << 16 | mY [P_20] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,PrecomputeMDS,The following statement contains a magic number: MDS [3' i] = mX [P_30] << 0 | m1 [P_30] << 8 | mY [P_30] << 16 | mX [P_30] << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,LFSR2,The following statement contains a magic number: return (x >> 2) ^ ((x & 0x02) != 0 ? GF256_FDBK_2 : 0) ^ ((x & 0x01) != 0 ? GF256_FDBK_4 : 0);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' j = k64Cnt - 1; i < 4 && offset < length; i++' j--) {  	k32e [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	k32o [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	sBoxKey [j] = RS_MDS_Encode (k32e [i]' k32o [i]);  	// reverse order  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' j = k64Cnt - 1; i < 4 && offset < length; i++' j--) {  	k32e [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	k32o [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	sBoxKey [j] = RS_MDS_Encode (k32e [i]' k32o [i]);  	// reverse order  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' j = k64Cnt - 1; i < 4 && offset < length; i++' j--) {  	k32e [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	k32o [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	sBoxKey [j] = RS_MDS_Encode (k32e [i]' k32o [i]);  	// reverse order  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' j = k64Cnt - 1; i < 4 && offset < length; i++' j--) {  	k32e [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	k32o [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	sBoxKey [j] = RS_MDS_Encode (k32e [i]' k32o [i]);  	// reverse order  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' j = k64Cnt - 1; i < 4 && offset < length; i++' j--) {  	k32e [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	k32o [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	sBoxKey [j] = RS_MDS_Encode (k32e [i]' k32o [i]);  	// reverse order  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' j = k64Cnt - 1; i < 4 && offset < length; i++' j--) {  	k32e [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	k32o [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	sBoxKey [j] = RS_MDS_Encode (k32e [i]' k32o [i]);  	// reverse order  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' j = k64Cnt - 1; i < 4 && offset < length; i++' j--) {  	k32e [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	k32o [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  	sBoxKey [j] = RS_MDS_Encode (k32e [i]' k32o [i]);  	// reverse order  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: k32e [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: k32e [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: k32e [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: k32o [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: k32o [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: k32o [i] = (uint)((key [offset++] & 0xFF)) | (uint)((key [offset++] & 0xFF)) << 8 | (uint)((key [offset++] & 0xFF)) << 16 | (uint)((key [offset++] & 0xFF)) << 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' q = 0; i < subkeyCnt / 2; i++' q += SK_STEP) {  	A = F32 (k64Cnt' q' k32e);  	// A uses even key entities  	B = F32 (k64Cnt' q + SK_BUMP' k32o);  	// B uses odd  key entities  	B = B << 8 | B >> 24;  	A += B;  	subKeys [2 * i] = A;  	// combine with a PHT  	A += B;  	subKeys [2 * i + 1] = A << SK_ROTL | A >> (32 - SK_ROTL);  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' q = 0; i < subkeyCnt / 2; i++' q += SK_STEP) {  	A = F32 (k64Cnt' q' k32e);  	// A uses even key entities  	B = F32 (k64Cnt' q + SK_BUMP' k32o);  	// B uses odd  key entities  	B = B << 8 | B >> 24;  	A += B;  	subKeys [2 * i] = A;  	// combine with a PHT  	A += B;  	subKeys [2 * i + 1] = A << SK_ROTL | A >> (32 - SK_ROTL);  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' q = 0; i < subkeyCnt / 2; i++' q += SK_STEP) {  	A = F32 (k64Cnt' q' k32e);  	// A uses even key entities  	B = F32 (k64Cnt' q + SK_BUMP' k32o);  	// B uses odd  key entities  	B = B << 8 | B >> 24;  	A += B;  	subKeys [2 * i] = A;  	// combine with a PHT  	A += B;  	subKeys [2 * i + 1] = A << SK_ROTL | A >> (32 - SK_ROTL);  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' q = 0; i < subkeyCnt / 2; i++' q += SK_STEP) {  	A = F32 (k64Cnt' q' k32e);  	// A uses even key entities  	B = F32 (k64Cnt' q + SK_BUMP' k32o);  	// B uses odd  key entities  	B = B << 8 | B >> 24;  	A += B;  	subKeys [2 * i] = A;  	// combine with a PHT  	A += B;  	subKeys [2 * i + 1] = A << SK_ROTL | A >> (32 - SK_ROTL);  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' q = 0; i < subkeyCnt / 2; i++' q += SK_STEP) {  	A = F32 (k64Cnt' q' k32e);  	// A uses even key entities  	B = F32 (k64Cnt' q + SK_BUMP' k32o);  	// B uses odd  key entities  	B = B << 8 | B >> 24;  	A += B;  	subKeys [2 * i] = A;  	// combine with a PHT  	A += B;  	subKeys [2 * i + 1] = A << SK_ROTL | A >> (32 - SK_ROTL);  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0' q = 0; i < subkeyCnt / 2; i++' q += SK_STEP) {  	A = F32 (k64Cnt' q' k32e);  	// A uses even key entities  	B = F32 (k64Cnt' q + SK_BUMP' k32o);  	// B uses odd  key entities  	B = B << 8 | B >> 24;  	A += B;  	subKeys [2 * i] = A;  	// combine with a PHT  	A += B;  	subKeys [2 * i + 1] = A << SK_ROTL | A >> (32 - SK_ROTL);  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: B = B << 8 | B >> 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: B = B << 8 | B >> 24;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: subKeys [2 * i] = A;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: subKeys [2 * i + 1] = A << SK_ROTL | A >> (32 - SK_ROTL);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: subKeys [2 * i + 1] = A << SK_ROTL | A >> (32 - SK_ROTL);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox = new uint[4 * 256];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox = new uint[4 * 256];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: for (i = 0; i < 256; i++) {  	b0x = b1x = b2x = b3x = i;  	next = false;  	if ((k64Cnt & 3) == 1) {  		sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  	if ((k64Cnt & 3) == 0) {  		b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  		b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  		b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  		b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 3 || next) {  		b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  		b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  		b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  		b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  		next = true;  	}  	if ((k64Cnt & 3) == 2 || next) {  		// 128-bit keys  		sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  		sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  		sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  		sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	}  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 1) {  	sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 1) {  	sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 1) {  	sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 1) {  	sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 1) {  	sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 1) {  	sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 1) {  	sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 1) {  	sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 1) {  	sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 1) {  	sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [2 * i] = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [2 * i + 1] = MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 0) {  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	next = true;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 0) {  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	next = true;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 0) {  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	next = true;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 0) {  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	next = true;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 3 || next) {  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	next = true;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 3 || next) {  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	next = true;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 3 || next) {  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	next = true;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 3 || next) {  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	next = true;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 3 || next) {  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	next = true;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: if ((k64Cnt & 3) == 2 || next) {  	// 128-bit keys  	sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  	sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  	sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  	sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [2 * i] = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [2 * i + 1] = MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i] = MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,MakeKey,The following statement contains a magic number: sBox [0x200 + 2 * i + 1] = MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,RS_MDS_Encode,The following statement contains a magic number: for (uint i = 0; i < 4; i++)  	// shift 1 byte at a time  	r = RS_rem (r);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,RS_MDS_Encode,The following statement contains a magic number: for (uint i = 0; i < 4; i++)  	r = RS_rem (r);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: goto case 3;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: goto case 2;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following statement contains a magic number: result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b0,The following statement contains a magic number: return sBox [2 * (x & 0xFF)] ^ sBox [2 * ((x >> 8) & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 16) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b0,The following statement contains a magic number: return sBox [2 * (x & 0xFF)] ^ sBox [2 * ((x >> 8) & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 16) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b0,The following statement contains a magic number: return sBox [2 * (x & 0xFF)] ^ sBox [2 * ((x >> 8) & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 16) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b0,The following statement contains a magic number: return sBox [2 * (x & 0xFF)] ^ sBox [2 * ((x >> 8) & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 16) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b0,The following statement contains a magic number: return sBox [2 * (x & 0xFF)] ^ sBox [2 * ((x >> 8) & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 16) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b0,The following statement contains a magic number: return sBox [2 * (x & 0xFF)] ^ sBox [2 * ((x >> 8) & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 16) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b0,The following statement contains a magic number: return sBox [2 * (x & 0xFF)] ^ sBox [2 * ((x >> 8) & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 16) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 24) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b3,The following statement contains a magic number: return sBox [2 * ((x >> 24) & 0xFF)] ^ sBox [2 * (x & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 8) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b3,The following statement contains a magic number: return sBox [2 * ((x >> 24) & 0xFF)] ^ sBox [2 * (x & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 8) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b3,The following statement contains a magic number: return sBox [2 * ((x >> 24) & 0xFF)] ^ sBox [2 * (x & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 8) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b3,The following statement contains a magic number: return sBox [2 * ((x >> 24) & 0xFF)] ^ sBox [2 * (x & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 8) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b3,The following statement contains a magic number: return sBox [2 * ((x >> 24) & 0xFF)] ^ sBox [2 * (x & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 8) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b3,The following statement contains a magic number: return sBox [2 * ((x >> 24) & 0xFF)] ^ sBox [2 * (x & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 8) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,Fe32_b3,The following statement contains a magic number: return sBox [2 * ((x >> 24) & 0xFF)] ^ sBox [2 * (x & 0xFF) + 1] ^ sBox [0x200 + 2 * ((x >> 8) & 0xFF)] ^ sBox [0x201 + 2 * ((x >> 16) & 0xFF)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= subKeys [2];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= subKeys [3];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [8];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 >> 1 | x2 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 = x3 << 1 | x3 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [9];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [10];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 = x0 >> 1 | x0 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 = x1 << 1 | x1 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [11];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [12];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 >> 1 | x2 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 = x3 << 1 | x3 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [13];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [14];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 = x0 >> 1 | x0 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 = x1 << 1 | x1 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [15];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [16];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 >> 1 | x2 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 = x3 << 1 | x3 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [17];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [18];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 = x0 >> 1 | x0 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 = x1 << 1 | x1 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [19];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [20];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 >> 1 | x2 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 = x3 << 1 | x3 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [21];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [22];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 = x0 >> 1 | x0 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 = x1 << 1 | x1 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [23];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [24];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 >> 1 | x2 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 = x3 << 1 | x3 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [25];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [26];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 = x0 >> 1 | x0 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 = x1 << 1 | x1 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [27];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [28];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 >> 1 | x2 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 = x3 << 1 | x3 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [29];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [30];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 = x0 >> 1 | x0 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 = x1 << 1 | x1 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [31];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [32];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 >> 1 | x2 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 = x3 << 1 | x3 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [33];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [34];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 = x0 >> 1 | x0 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 = x1 << 1 | x1 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [35];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [36];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 = x2 >> 1 | x2 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 = x3 << 1 | x3 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [37];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [38];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 = x0 >> 1 | x0 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 = x1 << 1 | x1 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [39];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x2 ^= subKeys [4];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x3 ^= subKeys [5];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x0 ^= subKeys [6];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: x1 ^= subKeys [7];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [1] = (byte)((x2 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [2] = (byte)((x2 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [2] = (byte)((x2 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [3] = (byte)((x2 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [3] = (byte)((x2 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [4] = (byte)(x3 & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [5] = (byte)((x3 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [5] = (byte)((x3 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [6] = (byte)((x3 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [6] = (byte)((x3 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [7] = (byte)((x3 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [7] = (byte)((x3 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [8] = (byte)(x0 & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [9] = (byte)((x0 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [9] = (byte)((x0 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [10] = (byte)((x0 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [10] = (byte)((x0 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [11] = (byte)((x0 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [11] = (byte)((x0 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [12] = (byte)(x1 & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [13] = (byte)((x1 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [13] = (byte)((x1 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [14] = (byte)((x1 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [14] = (byte)((x1 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [15] = (byte)((x1 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockEncrypt,The following statement contains a magic number: output [15] = (byte)((x1 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 ^= subKeys [4];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 ^= subKeys [5];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 ^= subKeys [6];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 ^= subKeys [7];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [39];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 = x1 >> 1 | x1 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 = x0 << 1 | x0 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [38];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [37];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 = x3 >> 1 | x3 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 = x2 << 1 | x2 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [36];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [35];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 = x1 >> 1 | x1 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 = x0 << 1 | x0 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [34];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [33];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 = x3 >> 1 | x3 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 = x2 << 1 | x2 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [32];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [31];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 = x1 >> 1 | x1 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 = x0 << 1 | x0 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [30];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [29];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 = x3 >> 1 | x3 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 = x2 << 1 | x2 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [28];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [27];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 = x1 >> 1 | x1 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 = x0 << 1 | x0 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [26];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [25];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 = x3 >> 1 | x3 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 = x2 << 1 | x2 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [24];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [23];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 = x1 >> 1 | x1 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 = x0 << 1 | x0 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [22];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [21];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 = x3 >> 1 | x3 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 = x2 << 1 | x2 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [20];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [19];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 = x1 >> 1 | x1 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 = x0 << 1 | x0 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [18];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [17];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 = x3 >> 1 | x3 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 = x2 << 1 | x2 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [16];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [15];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 = x1 >> 1 | x1 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 = x0 << 1 | x0 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [14];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [13];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 = x3 >> 1 | x3 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 = x2 << 1 | x2 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [12];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x2 & 0xFF) << 1] ^ sBox [(((x2 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x2 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x2 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x3 >> 24) & 0xFF) << 1] ^ sBox [((x3 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x3 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x3 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 ^= t0 + (t1 << 1) + subKeys [11];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x1 = x1 >> 1 | x1 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 = x0 << 1 | x0 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x0 ^= t0 + t1 + subKeys [10];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t0 = sBox [(x0 & 0xFF) << 1] ^ sBox [(((x0 >> 8) & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x0 >> 16) & 0xFF) << 1)] ^ sBox [0x201 | (((x0 >> 24) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: t1 = sBox [((x1 >> 24) & 0xFF) << 1] ^ sBox [((x1 & 0xFF) << 1) | 1] ^ sBox [0x200 | (((x1 >> 8) & 0xFF) << 1)] ^ sBox [0x201 | (((x1 >> 16) & 0xFF) << 1)];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 ^= t0 + (t1 << 1) + subKeys [9];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 = x3 >> 1 | x3 << 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 = x2 << 1 | x2 >> 31;  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 ^= t0 + t1 + subKeys [8];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x2 ^= subKeys [2];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: x3 ^= subKeys [3];  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [1] = (byte)((x0 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [2] = (byte)((x0 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [2] = (byte)((x0 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [3] = (byte)((x0 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [3] = (byte)((x0 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [4] = (byte)(x1 & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [5] = (byte)((x1 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [5] = (byte)((x1 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [6] = (byte)((x1 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [6] = (byte)((x1 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [7] = (byte)((x1 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [7] = (byte)((x1 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [8] = (byte)(x2 & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [9] = (byte)((x2 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [9] = (byte)((x2 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [10] = (byte)((x2 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [10] = (byte)((x2 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [11] = (byte)((x2 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [11] = (byte)((x2 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [12] = (byte)(x3 & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [13] = (byte)((x3 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [13] = (byte)((x3 >> 8) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [14] = (byte)((x3 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [14] = (byte)((x3 >> 16) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [15] = (byte)((x3 >> 24) & 0xFF);  
Magic Number,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,BlockDecrypt,The following statement contains a magic number: output [15] = (byte)((x3 >> 24) & 0xFF);  
Magic Number,CryptoNet,SymmetricTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Utilities\SymmetricTransform.cs,SymmetricTransform,The following statement contains a magic number: BlockSizeByte = (algo.BlockSize >> 3);  
Magic Number,CryptoNet,SymmetricTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Utilities\SymmetricTransform.cs,SymmetricTransform,The following statement contains a magic number: FeedBackByte = (algo.FeedbackSize >> 3);  
Duplicate Code,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,Isaac,The method contains a code clone-set at the following line numbers (starting from the method definition): ((5' 25)' (27' 47))
Duplicate Code,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 29)' (40' 63)' (82' 105))
Duplicate Code,CryptoNet,CryptRand,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\CryptRand.cs,RandInit,The method contains a code clone-set at the following line numbers (starting from the method definition): ((40' 72)' (82' 114))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((12' 39)' (268' 295)' (524' 551)' (780' 807))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((44' 71)' (300' 327)' (556' 583)' (812' 839))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((76' 101)' (332' 357)' (588' 613)' (844' 869))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((106' 133)' (362' 389)' (618' 645)' (874' 901))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((138' 166)' (394' 422)' (650' 678)' (906' 934))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((171' 197)' (427' 453)' (683' 709)' (939' 965))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((202' 230)' (458' 486)' (714' 742)' (970' 998))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockEncrypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((235' 263)' (491' 519)' (747' 775))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((36' 64)' (291' 319)' (546' 574)' (801' 829))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((69' 95)' (324' 350)' (579' 605)' (834' 860))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((100' 126)' (355' 381)' (610' 636)' (865' 891))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((131' 157)' (386' 412)' (641' 667)' (896' 922))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((162' 189)' (417' 444)' (672' 699)' (927' 954))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((194' 221)' (449' 476)' (704' 731)' (959' 986))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((226' 254)' (481' 509)' (736' 764)' (991' 1019))
Duplicate Code,CryptoNet,SerpentTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Serpent.cs,BlockDecypt,The method contains a code clone-set at the following line numbers (starting from the method definition): ((259' 286)' (514' 541)' (769' 796))
Missing Default,CryptoNet,TwofishTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Twofish.cs,F32,The following switch statement is missing a default case: switch (k64Cnt & 3) {  case 1:  	result = MDS [0' (P [P_01] [b0x] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [b1x] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [b2x] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [b3x] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  case 0:  	// same as 4  	b0x = (uint)((P [P_04] [b0x] & 0xFF) ^ (k3 & 0xFF));  	b1x = (uint)((P [P_14] [b1x] & 0xFF) ^ ((k3 >> 8) & 0xFF));  	b2x = (uint)((P [P_24] [b2x] & 0xFF) ^ ((k3 >> 16) & 0xFF));  	b3x = (uint)((P [P_34] [b3x] & 0xFF) ^ ((k3 >> 24) & 0xFF));  	goto case 3;  case 3:  	b0x = (uint)((P [P_03] [b0x] & 0xFF) ^ (k2 & 0xFF));  	b1x = (uint)((P [P_13] [b1x] & 0xFF) ^ ((k2 >> 8) & 0xFF));  	b2x = (uint)((P [P_23] [b2x] & 0xFF) ^ ((k2 >> 16) & 0xFF));  	b3x = (uint)((P [P_33] [b3x] & 0xFF) ^ ((k2 >> 24) & 0xFF));  	goto case 2;  case 2:  	// 128-bit keys (optimize for this case)  	result = MDS [0' (P [P_01] [(P [P_02] [b0x] & 0xFF) ^ (k1 & 0xFF)] & 0xFF) ^ (k0 & 0xFF)] ^ MDS [1' (P [P_11] [(P [P_12] [b1x] & 0xFF) ^ ((k1 >> 8) & 0xFF)] & 0xFF) ^ ((k0 >> 8) & 0xFF)] ^ MDS [2' (P [P_21] [(P [P_22] [b2x] & 0xFF) ^ ((k1 >> 16) & 0xFF)] & 0xFF) ^ ((k0 >> 16) & 0xFF)] ^ MDS [3' (P [P_31] [(P [P_32] [b3x] & 0xFF) ^ ((k1 >> 24) & 0xFF)] & 0xFF) ^ ((k0 >> 24) & 0xFF)];  	break;  }  
Missing Default,CryptoNet,SymmetricTransform,C:\repos\zackee12_veil\veil\veil\SymmetricAlgorithm\Utilities\SymmetricTransform.cs,FinalDecrypt,The following switch statement is missing a default case: switch (algo.Padding) {  case PaddingMode.ANSIX923:  	if ((padding == 0) || (padding > BlockSizeByte))  		ThrowBadPaddingException (algo.Padding' padding' -1);  	for (int i = padding; i > 0; i--) {  		if (res [total - 1 - i] != 0x00)  			ThrowBadPaddingException (algo.Padding' -1' i);  	}  	total -= padding;  	break;  case PaddingMode.ISO10126:  	if ((padding == 0) || (padding > BlockSizeByte))  		ThrowBadPaddingException (algo.Padding' padding' -1);  	total -= padding;  	break;  case PaddingMode.PKCS7:  	if ((padding == 0) || (padding > BlockSizeByte))  		ThrowBadPaddingException (algo.Padding' padding' -1);  	for (int i = padding - 1; i > 0; i--) {  		if (res [total - 1 - i] != padding)  			ThrowBadPaddingException (algo.Padding' -1' i);  	}  	total -= padding;  	break;  case PaddingMode.None:  // nothing to do - it's a multiple of block size  case PaddingMode.Zeros:  	// nothing to do - user must unpad himself  	break;  }  
