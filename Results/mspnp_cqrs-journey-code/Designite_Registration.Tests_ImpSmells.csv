Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,when_passing_invalid_seat_types_then_throws,The length of the statement  "            Assert.Throws<InvalidDataException>(() => sut.CalculateTotal(ConferenceId' new[] { new SeatQuantity(Guid.NewGuid()' 3) })); " is 123.
Long Statement,Registration.Tests,RegistrationProcessManagerRouterFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessManagerRouterFixture.cs,when_order_placed_then_routes_and_saves,The length of the statement  "            router.Handle(new OrderPlaced { SourceId = Guid.NewGuid()' ConferenceId = Guid.NewGuid()' Seats = new SeatQuantity[0] }); " is 121.
Long Statement,Registration.Tests,RegistrationProcessManagerRouterFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessManagerRouterFixture.cs,when_reservation_accepted_then_routes_and_saves,The length of the statement  "                    new SeatsReserved { SourceId = pm.ConferenceId' ReservationId = pm.ReservationId' ReservationDetails = new SeatQuantity[0] }) " is 125.
Long Statement,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_creating_order_then_is_placed_with_specified_id,The length of the statement  "            this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 5) } }); " is 142.
Long Statement,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_placing_order_then_has_full_details,The length of the statement  "            this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 5) } }); " is 142.
Long Statement,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_placing_order_then_has_access_code,The length of the statement  "            this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 5) } }); " is 142.
Long Statement,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_placing_order_then_defines_expected_expiration_time_in_15_minutes,The length of the statement  "            this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 5) } }); " is 142.
Long Statement,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_creating_order_then_calculates_totals,The length of the statement  "            this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 5) } }); " is 142.
Long Statement,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_updating_seats_then_updates_order_with_new_seats,The length of the statement  "            this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 20) }}); " is 142.
Long Statement,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_a_subset_of_seats_as_reserved_then_order_is_partially_reserved,The length of the statement  "            this.sut.When(new MarkSeatsAsReserved { OrderId = OrderId' Expiration = expiration' Seats = new List<SeatQuantity> { new SeatQuantity(SeatTypeId' 3) } }); " is 154.
Long Statement,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_a_subset_of_seats_as_reserved_then_totals_are_calculated,The length of the statement  "            this.sut.When(new MarkSeatsAsReserved { OrderId = OrderId' Expiration = expiration' Seats = new List<SeatQuantity> { new SeatQuantity(SeatTypeId' 3) } }); " is 154.
Long Statement,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_a_subset_of_seats_as_reserved_then_totals_are_calculated,The length of the statement  "            pricingService.Verify(s => s.CalculateTotal(ConferenceId' It.Is<ICollection<SeatQuantity>>(x => x.Single().SeatType == SeatTypeId && x.Single().Quantity == 3))); " is 161.
Long Statement,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_all_seats_as_reserved_then_order_is_reserved,The length of the statement  "            this.sut.When(new MarkSeatsAsReserved { OrderId = OrderId' Expiration = expiration' Seats = new List<SeatQuantity> { new SeatQuantity(SeatTypeId' 5) } }); " is 154.
Long Statement,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_all_as_reserved_then_totals_are_not_recalculated,The length of the statement  "            this.sut.When(new MarkSeatsAsReserved { OrderId = OrderId' Expiration = expiration' Seats = new List<SeatQuantity> { new SeatQuantity(SeatTypeId' 5) } }); " is 154.
Long Statement,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_assigning_registrant_information_then_raises_integration_event,The length of the statement  "            this.sut.When(new AssignRegistrantDetails { OrderId = OrderId' FirstName = "foo"' LastName = "bar"' Email = "foo@bar.com" }); " is 125.
Long Statement,Registration.Tests.ReadModel,OrderDaoFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\ReadModel\OrderDaoFixture.cs,when_finding_non_existing_assignment_then_returns_null,The length of the statement  "            var dao = new OrderDao(() => new ConferenceRegistrationDbContext("OrderDaoFixture")' storage.Object' Mock.Of<ITextSerializer>()); " is 129.
Long Statement,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_different_seats_then_unreserves_the_previous_ones_and_reserves_new_ones,The length of the statement  "            Assert.Equal(-3' sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.Single(x => x.SeatType == OtherSeatTypeId).Quantity); " is 125.
Long Statement,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_regenerating_from_memento_then_can_continue,The length of the statement  "            Assert.Equal(-3' sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.Single(x => x.SeatType == OtherSeatTypeId).Quantity); " is 125.
Magic Number,Registration.Tests,HandleGeneratorFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\HandleGeneratorFixture.cs,when_generating_handle_then_generates_requested_length,The following statement contains a magic number: var handle = HandleGenerator.Generate(5);
Magic Number,Registration.Tests,HandleGeneratorFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\HandleGeneratorFixture.cs,when_generating_handle_then_generates_requested_length,The following statement contains a magic number: Assert.Equal(5' handle.Length);
Magic Number,Registration.Tests,HandleGeneratorFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\HandleGeneratorFixture.cs,when_generating_handles_then_generates_different_values,The following statement contains a magic number: Assert.NotEqual(HandleGenerator.Generate(5)' HandleGenerator.Generate(5));
Magic Number,Registration.Tests,HandleGeneratorFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\HandleGeneratorFixture.cs,when_generating_handles_then_generates_different_values,The following statement contains a magic number: Assert.NotEqual(HandleGenerator.Generate(5)' HandleGenerator.Generate(5));
Magic Number,Registration.Tests,HandleGeneratorFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\HandleGeneratorFixture.cs,is_thread_safe,The following statement contains a magic number: Parallel.For(0' 10000' i => list.Add(HandleGenerator.Generate(6)));
Magic Number,Registration.Tests,HandleGeneratorFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\HandleGeneratorFixture.cs,is_thread_safe,The following statement contains a magic number: Parallel.For(0' 10000' i => list.Add(HandleGenerator.Generate(6)));
Magic Number,Registration.Tests,HandleGeneratorFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\HandleGeneratorFixture.cs,is_thread_safe,The following statement contains a magic number: Assert.Equal(10000' list.Count);
Magic Number,Registration.Tests,HandleGeneratorFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\HandleGeneratorFixture.cs,should_generate_distinct_handles,The following statement contains a magic number: Parallel.For(0' 10000' i => list.Add(HandleGenerator.Generate(100)));
Magic Number,Registration.Tests,HandleGeneratorFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\HandleGeneratorFixture.cs,should_generate_distinct_handles,The following statement contains a magic number: Parallel.For(0' 10000' i => list.Add(HandleGenerator.Generate(100)));
Magic Number,Registration.Tests,HandleGeneratorFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\HandleGeneratorFixture.cs,should_generate_distinct_handles,The following statement contains a magic number: Assert.Equal(10000' list.Distinct().Count());
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,PricingServiceFixture,The following statement contains a magic number: this.seatTypes = new[]                                  {                                      new SeatType(Guid.NewGuid()' ConferenceId' "Name1"' "Desc1"' 15.10m' 999)'                                      new SeatType(Guid.NewGuid()' ConferenceId' "Name2"' "Desc2"' 9.987m' 600)'                                  };
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,PricingServiceFixture,The following statement contains a magic number: this.seatTypes = new[]                                  {                                      new SeatType(Guid.NewGuid()' ConferenceId' "Name1"' "Desc1"' 15.10m' 999)'                                      new SeatType(Guid.NewGuid()' ConferenceId' "Name2"' "Desc2"' 9.987m' 600)'                                  };
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,PricingServiceFixture,The following statement contains a magic number: this.seatTypes = new[]                                  {                                      new SeatType(Guid.NewGuid()' ConferenceId' "Name1"' "Desc1"' 15.10m' 999)'                                      new SeatType(Guid.NewGuid()' ConferenceId' "Name2"' "Desc2"' 9.987m' 600)'                                  };
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,PricingServiceFixture,The following statement contains a magic number: this.seatTypes = new[]                                  {                                      new SeatType(Guid.NewGuid()' ConferenceId' "Name1"' "Desc1"' 15.10m' 999)'                                      new SeatType(Guid.NewGuid()' ConferenceId' "Name2"' "Desc2"' 9.987m' 600)'                                  };
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,when_passing_valid_seat_types_then_sums_individual_prices,The following statement contains a magic number: var actual = sut.CalculateTotal(ConferenceId' new[] { new SeatQuantity(seatTypes[0].Id' 3) });
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,when_passing_valid_seat_types_then_sums_individual_prices,The following statement contains a magic number: Assert.Equal(45.3m' actual.Total);
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,when_passing_valid_seat_types_then_sums_individual_prices,The following statement contains a magic number: Assert.Equal(45.3m' actual.Lines.ElementAt(0).LineTotal);
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,when_passing_valid_seat_types_then_sums_individual_prices,The following statement contains a magic number: Assert.Equal(15.1m' ((SeatOrderLine)actual.Lines.ElementAt(0)).UnitPrice);
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,when_passing_valid_seat_types_then_sums_individual_prices,The following statement contains a magic number: Assert.Equal(3' ((SeatOrderLine)actual.Lines.ElementAt(0)).Quantity);
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,when_passing_invalid_seat_types_then_throws,The following statement contains a magic number: Assert.Throws<InvalidDataException>(() => sut.CalculateTotal(ConferenceId' new[] { new SeatQuantity(Guid.NewGuid()' 3) }));
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,rounds_to_near_2_digit_decimal,The following statement contains a magic number: Assert.Equal(9.99m' actual.Total);
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,rounds_to_near_2_digit_decimal,The following statement contains a magic number: Assert.Equal(9.99m' actual.Lines.ElementAt(0).LineTotal);
Magic Number,Registration.Tests,PricingServiceFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\PricingServiceFixture.cs,rounds_to_near_2_digit_decimal,The following statement contains a magic number: Assert.Equal(9.987m' ((SeatOrderLine)actual.Lines.ElementAt(0)).UnitPrice);
Magic Number,Registration.Tests,RegistrationProcessManagerRouterFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessManagerRouterFixture.cs,when_order_placed_is_is_reprocessed_then_routes_and_saves,The following statement contains a magic number: var pm = new RegistrationProcessManager              {                  State = RegistrationProcessManager.ProcessState.AwaitingReservationConfirmation'                  OrderId = Guid.NewGuid()'                  ReservationId = Guid.NewGuid()'                  ConferenceId = Guid.NewGuid()'                  ReservationAutoExpiration = DateTime.UtcNow.AddMinutes(10)              };
Magic Number,Registration.Tests,RegistrationProcessManagerRouterFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessManagerRouterFixture.cs,when_order_updated_then_routes_and_saves,The following statement contains a magic number: var pm = new RegistrationProcessManager              {                  State = RegistrationProcessManager.ProcessState.AwaitingReservationConfirmation'                  ReservationId = Guid.NewGuid()'                  ConferenceId = Guid.NewGuid()'                  ReservationAutoExpiration = DateTime.UtcNow.AddMinutes(10)              };
Magic Number,Registration.Tests,RegistrationProcessManagerRouterFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessManagerRouterFixture.cs,when_reservation_accepted_then_routes_and_saves,The following statement contains a magic number: var pm = new RegistrationProcessManager              {                  State = RegistrationProcessManager.ProcessState.AwaitingReservationConfirmation'                  ReservationId = Guid.NewGuid()'                  ConferenceId = Guid.NewGuid()'                  SeatReservationCommandId = Guid.NewGuid()'                  ReservationAutoExpiration = DateTime.UtcNow.AddMinutes(10)              };
Magic Number,Registration.Tests,RegistrationProcessManagerRouterFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessManagerRouterFixture.cs,when_payment_received_then_routes_and_saves,The following statement contains a magic number: var pm = new RegistrationProcessManager              {                  State = RegistrationProcessManager.ProcessState.ReservationConfirmationReceived'                  OrderId = Guid.NewGuid()'                  ReservationAutoExpiration = DateTime.UtcNow.AddMinutes(10)'              };
Magic Number,Registration.Tests,RegistrationProcessManagerRouterFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessManagerRouterFixture.cs,when_order_confirmed_received_then_routes_and_saves,The following statement contains a magic number: var pm = new RegistrationProcessManager              {                  State = RegistrationProcessManager.ProcessState.PaymentConfirmationReceived'                  OrderId = Guid.NewGuid()'                  ReservationAutoExpiration = DateTime.UtcNow.AddMinutes(10)'              };
Magic Number,Registration.Tests,RegistrationProcessManagerRouterFixture,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessManagerRouterFixture.cs,when_order_expired_then_routes_and_saves,The following statement contains a magic number: var pm = new RegistrationProcessManager              {                  State = RegistrationProcessManager.ProcessState.AwaitingReservationConfirmation'                  ReservationId = Guid.NewGuid()'                  OrderId = Guid.NewGuid()'                  ReservationAutoExpiration = DateTime.UtcNow.AddMinutes(10)              };
Magic Number,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_creating_order_then_is_placed_with_specified_id,The following statement contains a magic number: this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 5) } });
Magic Number,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_placing_order_then_has_full_details,The following statement contains a magic number: this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 5) } });
Magic Number,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_placing_order_then_has_full_details,The following statement contains a magic number: Assert.Equal(5' @event.Seats.ElementAt(0).Quantity);
Magic Number,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_placing_order_then_has_access_code,The following statement contains a magic number: this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 5) } });
Magic Number,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_placing_order_then_defines_expected_expiration_time_in_15_minutes,The following statement contains a magic number: this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 5) } });
Magic Number,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_placing_order_then_defines_expected_expiration_time_in_15_minutes,The following statement contains a magic number: Assert.True(relativeExpiration.Minutes <= 16);
Magic Number,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_placing_order_then_defines_expected_expiration_time_in_15_minutes,The following statement contains a magic number: Assert.True(relativeExpiration.Minutes >= 14);
Magic Number,Registration.Tests.OrderFixture,given_no_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_creating_order_then_calculates_totals,The following statement contains a magic number: this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 5) } });
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,given_placed_order,The following statement contains a magic number: this.sut.Given(                      new OrderPlaced                       {                           SourceId = OrderId'                          ConferenceId = ConferenceId'                          Seats = new[] { new SeatQuantity(SeatTypeId' 5) }'                          ReservationAutoExpiration = DateTime.UtcNow                      });
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_updating_seats_then_updates_order_with_new_seats,The following statement contains a magic number: this.sut.When(new RegisterToConference { ConferenceId = ConferenceId' OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 20) }});
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_updating_seats_then_updates_order_with_new_seats,The following statement contains a magic number: Assert.Equal(20' @event.Seats.ElementAt(0).Quantity);
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_a_subset_of_seats_as_reserved_then_order_is_partially_reserved,The following statement contains a magic number: var expiration = DateTime.UtcNow.AddMinutes(15);
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_a_subset_of_seats_as_reserved_then_order_is_partially_reserved,The following statement contains a magic number: this.sut.When(new MarkSeatsAsReserved { OrderId = OrderId' Expiration = expiration' Seats = new List<SeatQuantity> { new SeatQuantity(SeatTypeId' 3) } });
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_a_subset_of_seats_as_reserved_then_order_is_partially_reserved,The following statement contains a magic number: Assert.Equal(3' @event.Seats.ElementAt(0).Quantity);
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_a_subset_of_seats_as_reserved_then_totals_are_calculated,The following statement contains a magic number: var expiration = DateTime.UtcNow.AddMinutes(15);
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_a_subset_of_seats_as_reserved_then_totals_are_calculated,The following statement contains a magic number: this.sut.When(new MarkSeatsAsReserved { OrderId = OrderId' Expiration = expiration' Seats = new List<SeatQuantity> { new SeatQuantity(SeatTypeId' 3) } });
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_a_subset_of_seats_as_reserved_then_totals_are_calculated,The following statement contains a magic number: Assert.Equal(33' @event.Total);
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_a_subset_of_seats_as_reserved_then_totals_are_calculated,The following statement contains a magic number: pricingService.Verify(s => s.CalculateTotal(ConferenceId' It.Is<ICollection<SeatQuantity>>(x => x.Single().SeatType == SeatTypeId && x.Single().Quantity == 3)));
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_all_seats_as_reserved_then_order_is_reserved,The following statement contains a magic number: var expiration = DateTime.UtcNow.AddMinutes(15);
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_all_seats_as_reserved_then_order_is_reserved,The following statement contains a magic number: this.sut.When(new MarkSeatsAsReserved { OrderId = OrderId' Expiration = expiration' Seats = new List<SeatQuantity> { new SeatQuantity(SeatTypeId' 5) } });
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_all_seats_as_reserved_then_order_is_reserved,The following statement contains a magic number: Assert.Equal(5' @event.Seats.ElementAt(0).Quantity);
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_all_as_reserved_then_totals_are_not_recalculated,The following statement contains a magic number: var expiration = DateTime.UtcNow.AddMinutes(15);
Magic Number,Registration.Tests.OrderFixture,given_placed_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_marking_all_as_reserved_then_totals_are_not_recalculated,The following statement contains a magic number: this.sut.When(new MarkSeatsAsReserved { OrderId = OrderId' Expiration = expiration' Seats = new List<SeatQuantity> { new SeatQuantity(SeatTypeId' 5) } });
Magic Number,Registration.Tests.OrderFixture,given_fully_reserved_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,given_fully_reserved_order,The following statement contains a magic number: this.sut.Given(                  new OrderPlaced                      {                          SourceId = OrderId'                          ConferenceId = ConferenceId'                          Seats = new[] { new SeatQuantity(SeatTypeId' 5) }'                          ReservationAutoExpiration = DateTime.UtcNow                      }'                  new OrderReservationCompleted                      {                          SourceId = OrderId'                          ReservationExpiration = DateTime.UtcNow.AddMinutes(5)'                          Seats = new[] { new SeatQuantity(SeatTypeId' 5) }                      });
Magic Number,Registration.Tests.OrderFixture,given_fully_reserved_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,given_fully_reserved_order,The following statement contains a magic number: this.sut.Given(                  new OrderPlaced                      {                          SourceId = OrderId'                          ConferenceId = ConferenceId'                          Seats = new[] { new SeatQuantity(SeatTypeId' 5) }'                          ReservationAutoExpiration = DateTime.UtcNow                      }'                  new OrderReservationCompleted                      {                          SourceId = OrderId'                          ReservationExpiration = DateTime.UtcNow.AddMinutes(5)'                          Seats = new[] { new SeatQuantity(SeatTypeId' 5) }                      });
Magic Number,Registration.Tests.OrderFixture,given_fully_reserved_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,given_fully_reserved_order,The following statement contains a magic number: this.sut.Given(                  new OrderPlaced                      {                          SourceId = OrderId'                          ConferenceId = ConferenceId'                          Seats = new[] { new SeatQuantity(SeatTypeId' 5) }'                          ReservationAutoExpiration = DateTime.UtcNow                      }'                  new OrderReservationCompleted                      {                          SourceId = OrderId'                          ReservationExpiration = DateTime.UtcNow.AddMinutes(5)'                          Seats = new[] { new SeatQuantity(SeatTypeId' 5) }                      });
Magic Number,Registration.Tests.OrderFixture,given_fully_reserved_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_updating_an_order_then_updates_seats,The following statement contains a magic number: this.sut.When(new RegisterToConference { OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 4) } });
Magic Number,Registration.Tests.OrderFixture,given_fully_reserved_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_updating_an_order_then_updates_seats,The following statement contains a magic number: Assert.Equal(4' updated.Seats.First().Quantity);
Magic Number,Registration.Tests.OrderFixture,given_fully_reserved_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_updating_an_order_then_recalculates,The following statement contains a magic number: this.sut.When(new RegisterToConference { OrderId = OrderId' Seats = new[] { new SeatQuantity(SeatTypeId' 4) } });
Magic Number,Registration.Tests.OrderFixture,given_fully_reserved_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\OrderFixture.cs,when_updating_an_order_then_recalculates,The following statement contains a magic number: Assert.Equal(33' @event.Total);
Magic Number,Registration.Tests.SeatAssignmentsFixture,given_a_paid_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatAssignmentsFixture.cs,given_a_paid_order,The following statement contains a magic number: this.orderHelper.Given(                  new OrderPlaced                  {                      SourceId = orderId'                      ConferenceId = Guid.NewGuid()'                      Seats = new[]                       {                          new SeatQuantity(Guid.NewGuid()' 5)'                           new SeatQuantity(Guid.NewGuid()' 10)'                      }'                      ReservationAutoExpiration = DateTime.UtcNow.AddDays(1)'                      AccessCode = HandleGenerator.Generate(6)'                  }'                  new OrderPaymentConfirmed { SourceId = orderId });
Magic Number,Registration.Tests.SeatAssignmentsFixture,given_a_paid_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatAssignmentsFixture.cs,given_a_paid_order,The following statement contains a magic number: this.orderHelper.Given(                  new OrderPlaced                  {                      SourceId = orderId'                      ConferenceId = Guid.NewGuid()'                      Seats = new[]                       {                          new SeatQuantity(Guid.NewGuid()' 5)'                           new SeatQuantity(Guid.NewGuid()' 10)'                      }'                      ReservationAutoExpiration = DateTime.UtcNow.AddDays(1)'                      AccessCode = HandleGenerator.Generate(6)'                  }'                  new OrderPaymentConfirmed { SourceId = orderId });
Magic Number,Registration.Tests.SeatAssignmentsFixture,given_a_paid_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatAssignmentsFixture.cs,given_a_paid_order,The following statement contains a magic number: this.orderHelper.Given(                  new OrderPlaced                  {                      SourceId = orderId'                      ConferenceId = Guid.NewGuid()'                      Seats = new[]                       {                          new SeatQuantity(Guid.NewGuid()' 5)'                           new SeatQuantity(Guid.NewGuid()' 10)'                      }'                      ReservationAutoExpiration = DateTime.UtcNow.AddDays(1)'                      AccessCode = HandleGenerator.Generate(6)'                  }'                  new OrderPaymentConfirmed { SourceId = orderId });
Magic Number,Registration.Tests.SeatAssignmentsFixture,given_a_paid_order,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatAssignmentsFixture.cs,when_order_confirmed_then_seats_assignments_created,The following statement contains a magic number: Assert.Equal(15' @event.Seats.Count());
Magic Number,Registration.Tests.SeatAssignmentsFixture,given_seat_assignments,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatAssignmentsFixture.cs,given_seat_assignments,The following statement contains a magic number: this.sut.Given(new SeatAssignmentsCreated              {                  SourceId = assignmentsId'                  OrderId = orderId'                  Seats = Enumerable.Range(0' 5).Select(i =>                      new SeatAssignmentsCreated.SeatAssignmentInfo                      {                          Position = i'                          SeatType = seatType'                      })              }'              new SeatAssigned(assignmentsId)              {                  Position = 0'                  SeatType = seatType'                  Attendee = new PersonalInfo                  {                      Email = "a@a.com"'                      FirstName = "A"'                      LastName = "Z"'                  }              });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_adding_seat_type_then_changes_availability,The following statement contains a magic number: sut.AddSeats(seatType' 50);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_adding_seat_type_then_changes_availability,The following statement contains a magic number: Assert.Equal(50' sut.SingleEvent<AvailableSeatsChanged>().Seats.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,given_available_seats,The following statement contains a magic number: this.sut = new SeatsAvailability(ConferenceId' new[] { new AvailableSeatsChanged { Seats = new[] { new SeatQuantity(SeatTypeId' 10) } } });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_adding_non_existing_seat_type_then_adds_availability,The following statement contains a magic number: sut.AddSeats(seatType' 50);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_adding_non_existing_seat_type_then_adds_availability,The following statement contains a magic number: Assert.Equal(50' sut.SingleEvent<AvailableSeatsChanged>().Seats.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_adding_seats_to_existing_seat_type_then_adds_remaining_seats,The following statement contains a magic number: this.sut.AddSeats(SeatTypeId' 10);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_adding_seats_to_existing_seat_type_then_adds_remaining_seats,The following statement contains a magic number: Assert.Equal(10' ((AvailableSeatsChanged)sut.Events.Single()).Seats.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_removing_seats_to_existing_seat_type_then_removes_remaining_seats,The following statement contains a magic number: this.sut.RemoveSeats(SeatTypeId' 5);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_removing_seats_to_existing_seat_type_then_removes_remaining_seats,The following statement contains a magic number: this.sut.MakeReservation(Guid.NewGuid()' new[] { new SeatQuantity(SeatTypeId' 10) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_removing_seats_to_existing_seat_type_then_removes_remaining_seats,The following statement contains a magic number: Assert.Equal(-5' sut.Events.OfType<AvailableSeatsChanged>().Last().Seats.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_removing_seats_to_existing_seat_type_then_removes_remaining_seats,The following statement contains a magic number: Assert.Equal(5' this.sut.Events.OfType<SeatsReserved>().Single().ReservationDetails.ElementAt(0).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_less_seats_than_total_then_reserves_all_requested_seats,The following statement contains a magic number: this.sut.MakeReservation(Guid.NewGuid()' new[] { new SeatQuantity(SeatTypeId' 4) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_less_seats_than_total_then_reserves_all_requested_seats,The following statement contains a magic number: Assert.Equal(4' this.sut.SingleEvent<SeatsReserved>().ReservationDetails.ElementAt(0).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_less_seats_than_total_then_reduces_remaining_seats,The following statement contains a magic number: this.sut.MakeReservation(Guid.NewGuid()' new[] { new SeatQuantity(SeatTypeId' 4) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_less_seats_than_total_then_reduces_remaining_seats,The following statement contains a magic number: Assert.Equal(-4' this.sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.ElementAt(0).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_more_seats_than_total_then_reserves_total,The following statement contains a magic number: sut.MakeReservation(id' new[] { new SeatQuantity(SeatTypeId' 11) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_more_seats_than_total_then_reserves_total,The following statement contains a magic number: Assert.Equal(10' this.sut.SingleEvent<SeatsReserved>().ReservationDetails.ElementAt(0).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_more_seats_than_total_then_reduces_remaining_seats,The following statement contains a magic number: sut.MakeReservation(id' new[] { new SeatQuantity(SeatTypeId' 11) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_more_seats_than_total_then_reduces_remaining_seats,The following statement contains a magic number: Assert.Equal(-10' this.sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.ElementAt(0).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_non_existing_seat_type_then_throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() =>                  sut.MakeReservation(id' new[]                   {                       new SeatQuantity(SeatTypeId' 11)'                      new SeatQuantity(Guid.NewGuid()' 3)'                  }));
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_available_seats,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_non_existing_seat_type_then_throws,The following statement contains a magic number: Assert.Throws<ArgumentOutOfRangeException>(() =>                  sut.MakeReservation(id' new[]                   {                       new SeatQuantity(SeatTypeId' 11)'                      new SeatQuantity(Guid.NewGuid()' 3)'                  }));
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_some_avilable_seats_and_some_taken,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,given_some_avilable_seats_and_some_taken,The following statement contains a magic number: this.sut = new SeatsAvailability(ConferenceId'                   new IVersionedEvent[]                      {                          new AvailableSeatsChanged                              {                                  Seats = new[] { new SeatQuantity(SeatTypeId' 10) ' new SeatQuantity(OtherSeatTypeId' 12) }                              }'                          new SeatsReserved                           {                               ReservationId = ReservationId'                               ReservationDetails = new[] { new SeatQuantity(SeatTypeId' 6) }'                               AvailableSeatsChanged = new[] { new SeatQuantity(SeatTypeId' -6) }                          }                      });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_some_avilable_seats_and_some_taken,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,given_some_avilable_seats_and_some_taken,The following statement contains a magic number: this.sut = new SeatsAvailability(ConferenceId'                   new IVersionedEvent[]                      {                          new AvailableSeatsChanged                              {                                  Seats = new[] { new SeatQuantity(SeatTypeId' 10) ' new SeatQuantity(OtherSeatTypeId' 12) }                              }'                          new SeatsReserved                           {                               ReservationId = ReservationId'                               ReservationDetails = new[] { new SeatQuantity(SeatTypeId' 6) }'                               AvailableSeatsChanged = new[] { new SeatQuantity(SeatTypeId' -6) }                          }                      });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_some_avilable_seats_and_some_taken,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,given_some_avilable_seats_and_some_taken,The following statement contains a magic number: this.sut = new SeatsAvailability(ConferenceId'                   new IVersionedEvent[]                      {                          new AvailableSeatsChanged                              {                                  Seats = new[] { new SeatQuantity(SeatTypeId' 10) ' new SeatQuantity(OtherSeatTypeId' 12) }                              }'                          new SeatsReserved                           {                               ReservationId = ReservationId'                               ReservationDetails = new[] { new SeatQuantity(SeatTypeId' 6) }'                               AvailableSeatsChanged = new[] { new SeatQuantity(SeatTypeId' -6) }                          }                      });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_some_avilable_seats_and_some_taken,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,given_some_avilable_seats_and_some_taken,The following statement contains a magic number: this.sut = new SeatsAvailability(ConferenceId'                   new IVersionedEvent[]                      {                          new AvailableSeatsChanged                              {                                  Seats = new[] { new SeatQuantity(SeatTypeId' 10) ' new SeatQuantity(OtherSeatTypeId' 12) }                              }'                          new SeatsReserved                           {                               ReservationId = ReservationId'                               ReservationDetails = new[] { new SeatQuantity(SeatTypeId' 6) }'                               AvailableSeatsChanged = new[] { new SeatQuantity(SeatTypeId' -6) }                          }                      });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_some_avilable_seats_and_some_taken,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_less_seats_than_remaining_then_seats_are_reserved,The following statement contains a magic number: sut.MakeReservation(Guid.NewGuid()' new[] { new SeatQuantity(SeatTypeId' 4) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_some_avilable_seats_and_some_taken,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_less_seats_than_remaining_then_seats_are_reserved,The following statement contains a magic number: Assert.Equal(4' this.sut.SingleEvent<SeatsReserved>().ReservationDetails.ElementAt(0).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_some_avilable_seats_and_some_taken,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_less_seats_than_remaining_then_seats_are_reserved,The following statement contains a magic number: Assert.Equal(-4' this.sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.ElementAt(0).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_some_avilable_seats_and_some_taken,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_more_seats_than_remaining_then_reserves_all_remaining,The following statement contains a magic number: sut.MakeReservation(Guid.NewGuid()' new[] { new SeatQuantity(SeatTypeId' 5) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_some_avilable_seats_and_some_taken,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_more_seats_than_remaining_then_reserves_all_remaining,The following statement contains a magic number: Assert.Equal(4' this.sut.SingleEvent<SeatsReserved>().ReservationDetails.ElementAt(0).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_some_avilable_seats_and_some_taken,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_reserving_more_seats_than_remaining_then_reserves_all_remaining,The following statement contains a magic number: Assert.Equal(-4' this.sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.ElementAt(0).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,given_an_existing_reservation,The following statement contains a magic number: this.sut = new SeatsAvailability(                  ConferenceId'                  new IVersionedEvent[]                      {                          new AvailableSeatsChanged                              {                                  Seats = new[] { new SeatQuantity(SeatTypeId' 10) ' new SeatQuantity(OtherSeatTypeId' 12) }'                                  Version = 1'                              }'                          new SeatsReserved                           {                               ReservationId = ReservationId'                               ReservationDetails = new[] { new SeatQuantity(SeatTypeId' 6) }'                               AvailableSeatsChanged = new[] { new SeatQuantity(SeatTypeId' -6) }'                              Version = 2'                          }                      });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,given_an_existing_reservation,The following statement contains a magic number: this.sut = new SeatsAvailability(                  ConferenceId'                  new IVersionedEvent[]                      {                          new AvailableSeatsChanged                              {                                  Seats = new[] { new SeatQuantity(SeatTypeId' 10) ' new SeatQuantity(OtherSeatTypeId' 12) }'                                  Version = 1'                              }'                          new SeatsReserved                           {                               ReservationId = ReservationId'                               ReservationDetails = new[] { new SeatQuantity(SeatTypeId' 6) }'                               AvailableSeatsChanged = new[] { new SeatQuantity(SeatTypeId' -6) }'                              Version = 2'                          }                      });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,given_an_existing_reservation,The following statement contains a magic number: this.sut = new SeatsAvailability(                  ConferenceId'                  new IVersionedEvent[]                      {                          new AvailableSeatsChanged                              {                                  Seats = new[] { new SeatQuantity(SeatTypeId' 10) ' new SeatQuantity(OtherSeatTypeId' 12) }'                                  Version = 1'                              }'                          new SeatsReserved                           {                               ReservationId = ReservationId'                               ReservationDetails = new[] { new SeatQuantity(SeatTypeId' 6) }'                               AvailableSeatsChanged = new[] { new SeatQuantity(SeatTypeId' -6) }'                              Version = 2'                          }                      });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,given_an_existing_reservation,The following statement contains a magic number: this.sut = new SeatsAvailability(                  ConferenceId'                  new IVersionedEvent[]                      {                          new AvailableSeatsChanged                              {                                  Seats = new[] { new SeatQuantity(SeatTypeId' 10) ' new SeatQuantity(OtherSeatTypeId' 12) }'                                  Version = 1'                              }'                          new SeatsReserved                           {                               ReservationId = ReservationId'                               ReservationDetails = new[] { new SeatQuantity(SeatTypeId' 6) }'                               AvailableSeatsChanged = new[] { new SeatQuantity(SeatTypeId' -6) }'                              Version = 2'                          }                      });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,given_an_existing_reservation,The following statement contains a magic number: this.sut = new SeatsAvailability(                  ConferenceId'                  new IVersionedEvent[]                      {                          new AvailableSeatsChanged                              {                                  Seats = new[] { new SeatQuantity(SeatTypeId' 10) ' new SeatQuantity(OtherSeatTypeId' 12) }'                                  Version = 1'                              }'                          new SeatsReserved                           {                               ReservationId = ReservationId'                               ReservationDetails = new[] { new SeatQuantity(SeatTypeId' 6) }'                               AvailableSeatsChanged = new[] { new SeatQuantity(SeatTypeId' -6) }'                              Version = 2'                          }                      });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_cancelled_then_seats_become_available,The following statement contains a magic number: Assert.Equal(6' sut.SingleEvent<SeatsReservationCancelled>().AvailableSeatsChanged.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_more_seats_then_reserves_all_requested,The following statement contains a magic number: sut.MakeReservation(ReservationId' new[] { new SeatQuantity(SeatTypeId' 8) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_more_seats_then_reserves_all_requested,The following statement contains a magic number: Assert.Equal(8' sut.SingleEvent<SeatsReserved>().ReservationDetails.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_more_seats_then_changes_available_seats,The following statement contains a magic number: sut.MakeReservation(ReservationId' new[] { new SeatQuantity(SeatTypeId' 8) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_more_seats_then_changes_available_seats,The following statement contains a magic number: Assert.Equal(-2' sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_less_seats_then_reserves_all_requested,The following statement contains a magic number: sut.MakeReservation(ReservationId' new[] { new SeatQuantity(SeatTypeId' 2) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_less_seats_then_reserves_all_requested,The following statement contains a magic number: Assert.Equal(2' sut.SingleEvent<SeatsReserved>().ReservationDetails.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_less_seats_then_changes_available_seats,The following statement contains a magic number: sut.MakeReservation(ReservationId' new[] { new SeatQuantity(SeatTypeId' 2) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_less_seats_then_changes_available_seats,The following statement contains a magic number: Assert.Equal(4' sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_more_seats_than_available_then_reserves_as_much_as_possible,The following statement contains a magic number: sut.MakeReservation(ReservationId' new[] { new SeatQuantity(SeatTypeId' 12) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_more_seats_than_available_then_reserves_as_much_as_possible,The following statement contains a magic number: Assert.Equal(10' sut.SingleEvent<SeatsReserved>().ReservationDetails.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_more_seats_than_available_then_reserves_as_much_as_possible,The following statement contains a magic number: Assert.Equal(-4' sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_different_seats_then_reserves_them,The following statement contains a magic number: sut.MakeReservation(ReservationId' new[] { new SeatQuantity(OtherSeatTypeId' 3) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_different_seats_then_reserves_them,The following statement contains a magic number: Assert.Equal(3' sut.SingleEvent<SeatsReserved>().ReservationDetails.Single().Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_different_seats_then_unreserves_the_previous_ones_and_reserves_new_ones,The following statement contains a magic number: sut.MakeReservation(ReservationId' new[] { new SeatQuantity(OtherSeatTypeId' 3) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_different_seats_then_unreserves_the_previous_ones_and_reserves_new_ones,The following statement contains a magic number: Assert.Equal(2' sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.Count());
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_different_seats_then_unreserves_the_previous_ones_and_reserves_new_ones,The following statement contains a magic number: Assert.Equal(-3' sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.Single(x => x.SeatType == OtherSeatTypeId).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_updating_reservation_with_different_seats_then_unreserves_the_previous_ones_and_reserves_new_ones,The following statement contains a magic number: Assert.Equal(6' sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.Single(x => x.SeatType == SeatTypeId).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_regenerating_from_memento_then_can_continue,The following statement contains a magic number: Assert.Equal(2' sut.Version);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_regenerating_from_memento_then_can_continue,The following statement contains a magic number: sut.MakeReservation(ReservationId' new[] { new SeatQuantity(OtherSeatTypeId' 3) });
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_regenerating_from_memento_then_can_continue,The following statement contains a magic number: Assert.Equal(2' sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.Count());
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_regenerating_from_memento_then_can_continue,The following statement contains a magic number: Assert.Equal(-3' sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.Single(x => x.SeatType == OtherSeatTypeId).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_regenerating_from_memento_then_can_continue,The following statement contains a magic number: Assert.Equal(6' sut.SingleEvent<SeatsReserved>().AvailableSeatsChanged.Single(x => x.SeatType == SeatTypeId).Quantity);
Magic Number,Registration.Tests.ConferenceSeatsAvailabilityFixture,given_an_existing_reservation,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\SeatsAvailabilityFixture.cs,when_regenerating_from_memento_then_can_continue,The following statement contains a magic number: Assert.Equal(3' sut.SingleEvent<SeatsReserved>().Version);
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new Envelope<SeatsReserved>(                      new SeatsReserved                      {                          SourceId = this.conferenceId'                          ReservationId = makeReservationCommand.ReservationId'                          ReservationDetails = new[] { new SeatQuantity(seatType' 2) }                      })                      {                          CorrelationId = makeReservationCommand.Id.ToString()                      });
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new Envelope<SeatsReserved>(                      new SeatsReserved                      {                          SourceId = this.conferenceId'                          ReservationId = makeReservationCommand.ReservationId'                          ReservationDetails = new[] { new SeatQuantity(seatType' 2) }                      })                      {                          CorrelationId = makeReservationCommand.Id.ToString()                      });
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,when_order_is_placed,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,when_order_is_placed,The following statement contains a magic number: this.orderPlaced = new OrderPlaced                                     {                                         SourceId = Guid.NewGuid()'                                         ConferenceId = Guid.NewGuid()'                                         Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                                         ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                                     };
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,when_order_is_placed,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,when_order_is_placed,The following statement contains a magic number: this.orderPlaced = new OrderPlaced                                     {                                         SourceId = Guid.NewGuid()'                                         ConferenceId = Guid.NewGuid()'                                         Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                                         ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                                     };
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,when_order_is_placed,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,then_sends_two_commands,The following statement contains a magic number: Assert.Equal(2' sut.Commands.Count());
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,when_order_is_placed,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,then_reservation_is_requested_for_specific_conference,The following statement contains a magic number: Assert.Equal(2' reservation.Seats[0].Quantity);
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,when_order_is_placed,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,then_posts_delayed_expiration_command,The following statement contains a magic number: Assert.True(expirationCommandEnvelope.Delay > TimeSpan.FromMinutes(32));
Magic Number,Registration.Tests.RegistrationProcessManagerFixture.given_uninitialized_process,when_order_is_placed_but_already_expired,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,when_order_is_placed_but_already_expired,The following statement contains a magic number: this.orderPlaced = new OrderPlaced              {                  SourceId = Guid.NewGuid()'                  ConferenceId = Guid.NewGuid()'                  Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                  ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(-1))              };
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new Envelope<SeatsReserved>(                      new SeatsReserved                      {                          SourceId = this.conferenceId'                          ReservationId = makeReservationCommand.ReservationId'                          ReservationDetails = new[] { new SeatQuantity(seatType' 2) }                      })                      {                          CorrelationId = makeReservationCommand.Id.ToString()                      });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new Envelope<SeatsReserved>(                      new SeatsReserved                      {                          SourceId = this.conferenceId'                          ReservationId = makeReservationCommand.ReservationId'                          ReservationDetails = new[] { new SeatQuantity(seatType' 2) }                      })                      {                          CorrelationId = makeReservationCommand.Id.ToString()                      });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,when_order_update_is_received,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,when_order_update_is_received,The following statement contains a magic number: this.orderUpdated = new OrderUpdated              {                  SourceId = Guid.NewGuid()'                  Seats = new[] { new SeatQuantity(Guid.NewGuid()' 3) }              };
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,when_order_update_is_received,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,then_sends_new_reservation_command,The following statement contains a magic number: Assert.Equal(2' sut.Commands.Select(x => x.Body).OfType<MakeSeatReservation>().Count());
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,when_order_update_is_received,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,then_reservation_is_requested_for_specific_conference,The following statement contains a magic number: Assert.Equal(3' newReservation.Seats[0].Quantity);
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,when_order_update_is_received,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,when_order_update_is_received,The following statement contains a magic number: this.orderUpdated = new OrderUpdated              {                  SourceId = this.orderId'                  Seats = new[] { new SeatQuantity(Guid.NewGuid()' 3) }              };
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,when_order_update_is_received,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,then_sends_new_reservation_command,The following statement contains a magic number: Assert.Equal(2' sut.Commands.Select(x => x.Body).OfType<MakeSeatReservation>().Count());
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_awaiting_for_reservation_confirmation,when_order_update_is_received,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,then_reservation_is_requested_for_specific_conference,The following statement contains a magic number: Assert.Equal(3' newReservation.Seats[0].Quantity);
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_reservation_confirmation_received,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_reservation_confirmation_received,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_reservation_confirmation_received,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new Envelope<SeatsReserved>(                      new SeatsReserved                      {                          SourceId = this.conferenceId'                          ReservationId = makeReservationCommand.ReservationId'                          ReservationDetails = new[] { new SeatQuantity(seatType' 2) }                      })                      {                          CorrelationId = makeReservationCommand.Id.ToString()                      });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_reservation_confirmation_received,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_reservation_confirmation_received,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_reservation_confirmation_received,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new Envelope<SeatsReserved>(                      new SeatsReserved                      {                          SourceId = this.conferenceId'                          ReservationId = makeReservationCommand.ReservationId'                          ReservationDetails = new[] { new SeatQuantity(seatType' 2) }                      })                      {                          CorrelationId = makeReservationCommand.Id.ToString()                      });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_reservation_confirmation_received,when_order_update_is_received,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,when_order_update_is_received,The following statement contains a magic number: this.orderUpdated = new OrderUpdated              {                  SourceId = this.orderId'                  Seats = new[] { new SeatQuantity(Guid.NewGuid()' 3) }              };
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_reservation_confirmation_received,when_order_update_is_received,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,then_sends_new_reservation_command,The following statement contains a magic number: Assert.Equal(2' sut.Commands.Select(x => x.Body).OfType<MakeSeatReservation>().Count());
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_reservation_confirmation_received,when_order_update_is_received,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,then_reservation_is_requested_for_specific_conference,The following statement contains a magic number: Assert.Equal(3' newReservation.Seats[0].Quantity);
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_payment_confirmation_received,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_payment_confirmation_received,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new OrderPlaced                  {                      SourceId = this.orderId'                      ConferenceId = this.conferenceId'                      Seats = new[] { new SeatQuantity(Guid.NewGuid()' 2) }'                      ReservationAutoExpiration = DateTime.UtcNow.Add(TimeSpan.FromMinutes(22))                  });
Magic Number,Registration.Tests.RegistrationProcessFixture.given_process_with_payment_confirmation_received,Context,C:\research\architectureSmells\repos\mspnp_cqrs-journey-code\source\Conference\Registration.Tests\RegistrationProcessFixture.cs,Context,The following statement contains a magic number: this.sut.Handle(                  new Envelope<SeatsReserved>(                      new SeatsReserved                      {                          SourceId = this.conferenceId'                          ReservationId = makeReservationCommand.ReservationId'                          ReservationDetails = new[] { new SeatQuantity(seatType' 2) }                      })                      {                          CorrelationId = makeReservationCommand.Id.ToString()                      });
