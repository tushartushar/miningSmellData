Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Infrastructure.Messaging.Handling,EventDispatcher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Messaging\Handling\EventDispatcher.cs,BuildHandlerInvocations,The length of the parameter envelopedEventHandlerInvocations is 32.
Long Statement,Infrastructure,StandardMetadataProvider,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\StandardMetadataProvider.cs,GetMetadata,The length of the statement  "            metadata[StandardMetadata.AssemblyName] = Path.GetFileNameWithoutExtension(type.Assembly.ManifestModule.FullyQualifiedName); " is 124.
Long Statement,Infrastructure.Messaging.Handling,EventDispatcher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Messaging\Handling\EventDispatcher.cs,DoDispatchMessage,The length of the statement  "                    // Trace.WriteLine(string.Format(CultureInfo.InvariantCulture' "Event{0} handled by {1}."' traceIdentifier' handler.Item1.FullName)); " is 133.
Long Statement,Infrastructure.Messaging.Handling,EventDispatcher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Messaging\Handling\EventDispatcher.cs,BuildHandlerInvocations,The length of the statement  "                    .Select(e => new Tuple<Type' Action<Envelope>>(e.EventType' this.BuildHandlerInvocation(handler' e.HandlerInterface' e.EventType))); " is 132.
Long Statement,Infrastructure.Messaging.Handling,EventDispatcher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Messaging\Handling\EventDispatcher.cs,BuildHandlerInvocations,The length of the statement  "                    .Select(e => new Tuple<Type' Action<Envelope>>(e.EventType' this.BuildEnvelopeHandlerInvocation(handler' e.HandlerInterface' e.EventType))); " is 140.
Long Statement,Infrastructure.Messaging.Handling,EventDispatcher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Messaging\Handling\EventDispatcher.cs,BuildDispatchInvocation,The length of the statement  "                            this.GetType().GetMethod("DoDispatchMessage"' BindingFlags.Instance | BindingFlags.NonPublic).MakeGenericMethod(eventType)' " is 123.
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
Magic Number,Infrastructure.Utils,GuidUtil,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Infrastructure\Utils\GuidUtil.cs,NewSequentialId,The following statement contains a magic number: if (BitConverter.IsLittleEndian)              {                  guidBytes[10] = sequential[5];                  guidBytes[11] = sequential[4];                  guidBytes[12] = sequential[3];                  guidBytes[13] = sequential[2];                  guidBytes[14] = sequential[1];                  guidBytes[15] = sequential[0];              }              else              {                  Buffer.BlockCopy(sequential' 2' guidBytes' 10' 6);              }
