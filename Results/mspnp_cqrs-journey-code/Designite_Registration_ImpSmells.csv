Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Registration.Handlers,DraftOrderViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\DraftOrderViewModelGenerator.cs,UpdateReserved,The method has 5 parameters. Parameters: orderId' reservationExpiration' state' orderVersion' seats
Long Parameter List,Registration.ReadModel,Conference,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Conference.cs,Conference,The method has 9 parameters. Parameters: id' code' name' description' location' tagline' twitterSearch' startDate' seats
Long Parameter List,Registration.ReadModel,SeatType,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\SeatType.cs,SeatType,The method has 6 parameters. Parameters: id' conferenceId' name' description' price' quantity
Long Identifier,Registration,RegistrationProcessManager,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\RegistrationProcessManager.cs,,The length of the parameter BufferTimeBeforeReleasingSeatsAfterExpiration is 45.
Long Statement,Registration.Database,RegistrationProcessManagerDbContextInitializer,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Database\RegistrationProcessManagerDbContextInitializer.cs,CreateIndexes,The length of the statement  "CREATE NONCLUSTERED INDEX IX_RegistrationProcessManager_Completed ON [" + RegistrationProcessManagerDbContext.SchemaName + @"].[RegistrationProcess]( Completed ) " is 161.
Long Statement,Registration.Database,RegistrationProcessManagerDbContextInitializer,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Database\RegistrationProcessManagerDbContextInitializer.cs,CreateIndexes,The length of the statement  "CREATE NONCLUSTERED INDEX IX_RegistrationProcessManager_OrderId ON [" + RegistrationProcessManagerDbContext.SchemaName + @"].[RegistrationProcess]( OrderId )"); " is 160.
Long Statement,Registration.Database,RegistrationProcessManagerDbContextInitializer,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Database\RegistrationProcessManagerDbContextInitializer.cs,CreateIndexes,The length of the statement  "//CREATE NONCLUSTERED INDEX IX_RegistrationProcessManager_ReservationId ON [" + RegistrationProcessDbContext.SchemaName + @"].[RegistrationProcess]( ReservationId ) " is 164.
Long Statement,Registration.Handlers,ConferenceViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\ConferenceViewModelGenerator.cs,Handle,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture' "Failed to locate Conference read model for updated conference with id {0}."' @event.SourceId)); " is 174.
Long Statement,Registration.Handlers,ConferenceViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\ConferenceViewModelGenerator.cs,Handle,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture' "Failed to locate Conference read model for published conference with id {0}."' @event.SourceId)); " is 176.
Long Statement,Registration.Handlers,ConferenceViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\ConferenceViewModelGenerator.cs,Handle,The length of the statement  "                    throw new InvalidOperationException(string.Format(CultureInfo.CurrentCulture' "Failed to locate Conference read model for unpublished conference with id {0}."' @event.SourceId)); " is 178.
Long Statement,Registration.Handlers,DraftOrderViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\DraftOrderViewModelGenerator.cs,Handle,The length of the statement  "            this.UpdateReserved(@event.SourceId' @event.ReservationExpiration' DraftOrder.States.PartiallyReserved' @event.Version' @event.Seats); " is 134.
Long Statement,Registration.Handlers,DraftOrderViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\DraftOrderViewModelGenerator.cs,Handle,The length of the statement  "            this.UpdateReserved(@event.SourceId' @event.ReservationExpiration' DraftOrder.States.ReservationCompleted' @event.Version' @event.Seats); " is 137.
Long Statement,Registration.Handlers,SeatAssignmentsViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\SeatAssignmentsViewModelGenerator.cs,Save,The length of the statement  "                this.storage.Save(GetSeatAssignmentsBlobId(dto.AssignmentsId)' "text/plain"' Encoding.UTF8.GetBytes(writer.ToString())); " is 120.
Long Statement,Registration.Handlers,PricedOrderViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\PricedOrderViewModelGenerator.cs,Handle,The length of the statement  "                        "Ignoring OrderPlaced message with version {1} for order id {0}. This could be caused because the message was already handled and the PricedOrder entity was already created."' " is 175.
Long Statement,Registration.Handlers,PricedOrderViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\PricedOrderViewModelGenerator.cs,Handle,The length of the statement  "                        line.Description = seatTypeDescriptions.Where(x => x.SeatTypeId == seatOrderLine.SeatType).Select(x => x.Name).FirstOrDefault(); " is 128.
Long Statement,Registration.Handlers,PricedOrderViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\PricedOrderViewModelGenerator.cs,Handle,The length of the statement  "                        "Ignoring priced order expiration message with version {1} for order id {0}. This could be caused because the message was already handled and the entity was already deleted."' " is 175.
Long Statement,Registration.Handlers,PricedOrderViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\PricedOrderViewModelGenerator.cs,Handle,The length of the statement  "                this.seatDescriptionsCache.Set("SeatDescription_" + dto.SeatTypeId.ToString()' dto' new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes(5) }); " is 166.
Long Statement,Registration.Handlers,PricedOrderViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\PricedOrderViewModelGenerator.cs,WasNotAlreadyHandled,The length of the statement  "This read model generator has an expectation that the EventBus will deliver messages for the same source in order. Nevertheless' this warning can be expected in a migration scenario."' " is 184.
Long Statement,Registration.Handlers,PricedOrderViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\PricedOrderViewModelGenerator.cs,GetSeatTypeDescriptions,The length of the statement  "                    // even though we went got a fresh version we don't want to overwrite a fresher version set by the event handler for seat descriptions " is 134.
Long Statement,Registration,PricingService,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\PricingService.cs,CalculateTotal,The length of the statement  "                    throw new InvalidDataException(string.Format(CultureInfo.InvariantCulture' "Invalid seat type ID '{0}' for conference with ID '{1}'"' item.SeatType' conferenceId)); " is 164.
Long Statement,Registration,PricingService,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\PricingService.cs,CalculateTotal,The length of the statement  "                lineItems.Add(new SeatOrderLine { SeatType = item.SeatType' Quantity = item.Quantity' UnitPrice = seatType.Price' LineTotal = Math.Round(seatType.Price * item.Quantity' 2) }); " is 175.
Long Statement,Registration,RegistrationProcessManagerRouter,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\RegistrationProcessManagerRouter.cs,Handle,The length of the statement  "                    Trace.TraceError("Failed to locate the registration process manager handling the seat reservation with id {0}. TODO: should Cancel seat reservation!"' envelope.Body.ReservationId); " is 180.
Long Statement,Registration,RegistrationProcessManagerRouter,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\RegistrationProcessManagerRouter.cs,Handle,The length of the statement  "                    Trace.TraceError("Failed to locate the registration process manager handling the paid order with id {0}."' @event.PaymentSourceId); " is 131.
Long Statement,Registration,Order,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Order.cs,UpdateSeats,The length of the statement  "            this.Update(new OrderTotalsCalculated { Total = totals.Total' Lines = totals.Lines != null ? totals.Lines.ToArray() : null' IsFreeOfCharge = totals.Total == 0m }); " is 163.
Long Statement,Registration,Order,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Order.cs,MarkAsReserved,The length of the statement  "            if (this.seats.Any(item => item.Quantity != 0 && !reserved.Any(seat => seat.SeatType == item.SeatType && seat.Quantity == item.Quantity))) " is 138.
Long Statement,Registration,Order,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Order.cs,MarkAsReserved,The length of the statement  "                this.Update(new OrderTotalsCalculated { Total = totals.Total' Lines = totals.Lines != null ? totals.Lines.ToArray() : null' IsFreeOfCharge = totals.Total == 0m }); " is 163.
Long Statement,Registration,RegistrationProcessManager,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\RegistrationProcessManager.cs,Handle,The length of the statement  "                        Trace.TraceWarning("Seat reservation response for reservation id {0} does not match the expected correlation id."' envelope.Body.ReservationId); " is 144.
Long Statement,Registration,RegistrationProcessManager,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\RegistrationProcessManager.cs,Handle,The length of the statement  "                Trace.TraceInformation("Seat reservation response for request {1} for reservation id {0} was already handled. Skipping event."' envelope.Body.ReservationId' envelope.CorrelationId); " is 181.
Long Statement,Registration,RegistrationProcessManager,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\RegistrationProcessManager.cs,Handle,The length of the statement  "            if (this.State == ProcessState.ReservationConfirmationReceived || this.State == ProcessState.PaymentConfirmationReceived) " is 121.
Long Statement,Registration,SeatAssignments,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\SeatAssignments.cs,OnCreated,The length of the statement  "            this.seats = e.Seats.ToDictionary(x => x.Position' x => new SeatAssignment { Position = x.Position' SeatType = x.SeatType }); " is 125.
Long Statement,Registration,SeatsAvailability,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\SeatsAvailability.cs,MakeReservation,The length of the statement  "                ReservationDetails = difference.Select(x => new SeatQuantity(x.Key' x.Value.Actual)).Where(x => x.Quantity != 0).ToList()' " is 122.
Long Statement,Registration,SeatsAvailability,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\SeatsAvailability.cs,MakeReservation,The length of the statement  "                AvailableSeatsChanged = difference.Select(x => new SeatQuantity(x.Key' -x.Value.DeltaSinceLast)).Where(x => x.Quantity != 0).ToList() " is 133.
Long Statement,Registration.ReadModel.Implementation,ConferenceRegistrationDbContextInitializer,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Implementation\ConferenceRegistrationDbContextInitializer.cs,CreateIndexes,The length of the statement  "CREATE NONCLUSTERED INDEX IX_SeatTypesView_ConferenceId ON [" + ConferenceRegistrationDbContext.SchemaName + "].[ConferenceSeatTypesView]( ConferenceId )"); " is 156.
Magic Number,Registration.Handlers,PricedOrderViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\PricedOrderViewModelGenerator.cs,Handle,The following statement contains a magic number: using (var context = this.contextFactory.Invoke())              {                  var dto = context.Find<PricedOrderLineSeatTypeDescription>(@event.SourceId);                  if (dto == null)                  {                      dto = new PricedOrderLineSeatTypeDescription { SeatTypeId = @event.SourceId };                      context.Set<PricedOrderLineSeatTypeDescription>().Add(dto);                  }                    dto.Name = @event.Name;                  context.SaveChanges();                  this.seatDescriptionsCache.Set("SeatDescription_" + dto.SeatTypeId.ToString()' dto' new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes(5) });              }
Magic Number,Registration.Handlers,PricedOrderViewModelGenerator,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Handlers\PricedOrderViewModelGenerator.cs,GetSeatTypeDescriptions,The following statement contains a magic number: if (notCached.Count > 0)              {                  var notCachedArray = notCached.ToArray();                  var seatTypeDescriptions = context.Query<PricedOrderLineSeatTypeDescription>()                      .Where(x => notCachedArray.Contains(x.SeatTypeId))                      .ToList();                    foreach (var seatType in seatTypeDescriptions)                  {                      // even though we went got a fresh version we don't want to overwrite a fresher version set by the event handler for seat descriptions                      var desc = (PricedOrderLineSeatTypeDescription)this.seatDescriptionsCache                          .AddOrGetExisting(                              "SeatDescription_" + seatType.SeatTypeId.ToString()'                              seatType'                              new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes(5) })                          ?? seatType;                        result.Add(desc);                  }              }
Magic Number,Registration,PricingService,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\PricingService.cs,CalculateTotal,The following statement contains a magic number: foreach (var item in seatItems)              {                  var seatType = seatTypes.FirstOrDefault(x => x.Id == item.SeatType);                  if (seatType == null)                  {                      throw new InvalidDataException(string.Format(CultureInfo.InvariantCulture' "Invalid seat type ID '{0}' for conference with ID '{1}'"' item.SeatType' conferenceId));                  }                    lineItems.Add(new SeatOrderLine { SeatType = item.SeatType' Quantity = item.Quantity' UnitPrice = seatType.Price' LineTotal = Math.Round(seatType.Price * item.Quantity' 2) });              }
Magic Number,Registration,Order,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\Order.cs,Order,The following statement contains a magic number: this.Update(new OrderPlaced              {                  ConferenceId = conferenceId'                  Seats = all'                  ReservationAutoExpiration = DateTime.UtcNow.Add(ReservationAutoExpiration)'                  AccessCode = HandleGenerator.Generate(6)              });
Magic Number,Registration.ReadModel.Implementation,CachingConferenceDao,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Implementation\CachingConferenceDao.cs,GetConferenceDetails,The following statement contains a magic number: if (conference == null)              {                  conference = this.decoratedDao.GetConferenceDetails(conferenceCode);                  if (conference != null)                  {                      this.cache.Set(key' conference' new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes(10) });                  }              }
Magic Number,Registration.ReadModel.Implementation,CachingConferenceDao,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Implementation\CachingConferenceDao.cs,GetConferenceAlias,The following statement contains a magic number: if (conference == null)              {                  conference = this.decoratedDao.GetConferenceAlias(conferenceCode);                  if (conference != null)                  {                      this.cache.Set(key' conference' new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes(20) });                  }              }
Magic Number,Registration.ReadModel.Implementation,CachingConferenceDao,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Implementation\CachingConferenceDao.cs,GetPublishedConferences,The following statement contains a magic number: if (cached == null)              {                  cached = this.decoratedDao.GetPublishedConferences();                  if (cached != null)                  {                      this.cache.Set(key' cached' new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddSeconds(10) });                  }              }
Magic Number,Registration.ReadModel.Implementation,CachingConferenceDao,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Implementation\CachingConferenceDao.cs,GetPublishedSeatTypes,The following statement contains a magic number: if (seatTypes == null)              {                  seatTypes = this.decoratedDao.GetPublishedSeatTypes(conferenceId);                  if (seatTypes != null)                  {                      // determine how long to cache depending on criticality of using stale data.                      TimeSpan timeToCache;                      if (seatTypes.All(x => x.AvailableQuantity > 200 || x.AvailableQuantity <= 0))                      {                          timeToCache = TimeSpan.FromMinutes(5);                      }                      else if (seatTypes.Any(x => x.AvailableQuantity < 30 && x.AvailableQuantity > 0))                      {                          // there are just a few seats remaining. Do not cache.                          timeToCache = TimeSpan.Zero;                      }                      else if (seatTypes.Any(x => x.AvailableQuantity < 100 && x.AvailableQuantity > 0))                      {                          timeToCache = TimeSpan.FromSeconds(20);                      }                      else                      {                          timeToCache = TimeSpan.FromMinutes(1);                      }                        if (timeToCache > TimeSpan.Zero)                      {                          this.cache.Set(key' seatTypes' new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.Add(timeToCache) });                      }                  }              }
Magic Number,Registration.ReadModel.Implementation,CachingConferenceDao,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Implementation\CachingConferenceDao.cs,GetPublishedSeatTypes,The following statement contains a magic number: if (seatTypes == null)              {                  seatTypes = this.decoratedDao.GetPublishedSeatTypes(conferenceId);                  if (seatTypes != null)                  {                      // determine how long to cache depending on criticality of using stale data.                      TimeSpan timeToCache;                      if (seatTypes.All(x => x.AvailableQuantity > 200 || x.AvailableQuantity <= 0))                      {                          timeToCache = TimeSpan.FromMinutes(5);                      }                      else if (seatTypes.Any(x => x.AvailableQuantity < 30 && x.AvailableQuantity > 0))                      {                          // there are just a few seats remaining. Do not cache.                          timeToCache = TimeSpan.Zero;                      }                      else if (seatTypes.Any(x => x.AvailableQuantity < 100 && x.AvailableQuantity > 0))                      {                          timeToCache = TimeSpan.FromSeconds(20);                      }                      else                      {                          timeToCache = TimeSpan.FromMinutes(1);                      }                        if (timeToCache > TimeSpan.Zero)                      {                          this.cache.Set(key' seatTypes' new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.Add(timeToCache) });                      }                  }              }
Magic Number,Registration.ReadModel.Implementation,CachingConferenceDao,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Implementation\CachingConferenceDao.cs,GetPublishedSeatTypes,The following statement contains a magic number: if (seatTypes == null)              {                  seatTypes = this.decoratedDao.GetPublishedSeatTypes(conferenceId);                  if (seatTypes != null)                  {                      // determine how long to cache depending on criticality of using stale data.                      TimeSpan timeToCache;                      if (seatTypes.All(x => x.AvailableQuantity > 200 || x.AvailableQuantity <= 0))                      {                          timeToCache = TimeSpan.FromMinutes(5);                      }                      else if (seatTypes.Any(x => x.AvailableQuantity < 30 && x.AvailableQuantity > 0))                      {                          // there are just a few seats remaining. Do not cache.                          timeToCache = TimeSpan.Zero;                      }                      else if (seatTypes.Any(x => x.AvailableQuantity < 100 && x.AvailableQuantity > 0))                      {                          timeToCache = TimeSpan.FromSeconds(20);                      }                      else                      {                          timeToCache = TimeSpan.FromMinutes(1);                      }                        if (timeToCache > TimeSpan.Zero)                      {                          this.cache.Set(key' seatTypes' new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.Add(timeToCache) });                      }                  }              }
Magic Number,Registration.ReadModel.Implementation,CachingConferenceDao,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Implementation\CachingConferenceDao.cs,GetPublishedSeatTypes,The following statement contains a magic number: if (seatTypes == null)              {                  seatTypes = this.decoratedDao.GetPublishedSeatTypes(conferenceId);                  if (seatTypes != null)                  {                      // determine how long to cache depending on criticality of using stale data.                      TimeSpan timeToCache;                      if (seatTypes.All(x => x.AvailableQuantity > 200 || x.AvailableQuantity <= 0))                      {                          timeToCache = TimeSpan.FromMinutes(5);                      }                      else if (seatTypes.Any(x => x.AvailableQuantity < 30 && x.AvailableQuantity > 0))                      {                          // there are just a few seats remaining. Do not cache.                          timeToCache = TimeSpan.Zero;                      }                      else if (seatTypes.Any(x => x.AvailableQuantity < 100 && x.AvailableQuantity > 0))                      {                          timeToCache = TimeSpan.FromSeconds(20);                      }                      else                      {                          timeToCache = TimeSpan.FromMinutes(1);                      }                        if (timeToCache > TimeSpan.Zero)                      {                          this.cache.Set(key' seatTypes' new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.Add(timeToCache) });                      }                  }              }
Magic Number,Registration.ReadModel.Implementation,CachingConferenceDao,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Implementation\CachingConferenceDao.cs,GetPublishedSeatTypes,The following statement contains a magic number: if (seatTypes == null)              {                  seatTypes = this.decoratedDao.GetPublishedSeatTypes(conferenceId);                  if (seatTypes != null)                  {                      // determine how long to cache depending on criticality of using stale data.                      TimeSpan timeToCache;                      if (seatTypes.All(x => x.AvailableQuantity > 200 || x.AvailableQuantity <= 0))                      {                          timeToCache = TimeSpan.FromMinutes(5);                      }                      else if (seatTypes.Any(x => x.AvailableQuantity < 30 && x.AvailableQuantity > 0))                      {                          // there are just a few seats remaining. Do not cache.                          timeToCache = TimeSpan.Zero;                      }                      else if (seatTypes.Any(x => x.AvailableQuantity < 100 && x.AvailableQuantity > 0))                      {                          timeToCache = TimeSpan.FromSeconds(20);                      }                      else                      {                          timeToCache = TimeSpan.FromMinutes(1);                      }                        if (timeToCache > TimeSpan.Zero)                      {                          this.cache.Set(key' seatTypes' new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.Add(timeToCache) });                      }                  }              }
Magic Number,Registration.ReadModel.Implementation,ConferenceRegistrationDbContext,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Implementation\ConferenceRegistrationDbContext.cs,ConferenceRegistrationDbContext,The following statement contains a magic number: this.retryPolicy = new RetryPolicy<SqlAzureTransientErrorDetectionStrategy>(new Incremental(3' TimeSpan.FromSeconds(0)' TimeSpan.FromSeconds(1.5)) { FastFirstRetry = true });
Magic Number,Registration.ReadModel.Implementation,ConferenceRegistrationDbContext,C:\repos\mspnp_cqrs-journey-code\source\Conference\Registration\ReadModel\Implementation\ConferenceRegistrationDbContext.cs,ConferenceRegistrationDbContext,The following statement contains a magic number: this.retryPolicy = new RetryPolicy<SqlAzureTransientErrorDetectionStrategy>(new Incremental(3' TimeSpan.FromSeconds(0)' TimeSpan.FromSeconds(1.5)) { FastFirstRetry = true });
