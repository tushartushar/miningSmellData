Implementation smell,Namespace,Class,File,Method,Description
Long Method,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The method has 169 lines of code.
Long Method,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The method has 133 lines of code.
Complex Method,Infrastructure.Azure.MessageLog,QueryCriteriaExtensions,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\MessageLog\QueryCriteriaExtensions.cs,ToExpression,Cyclomatic complexity of the method is 19
Complex Method,Infrastructure.Azure.Messaging,CommandBus,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\CommandBus.cs,BuildMessage,Cyclomatic complexity of the method is 8
Long Parameter List,Infrastructure.Azure,DynamicThrottling,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\DynamicThrottling.cs,DynamicThrottling,The method has 6 parameters. Parameters: maxDegreeOfParallelism' minDegreeOfParallelism' penaltyAmount' workFailedPenaltyAmount' workCompletedParallelismGain' intervalForRestoringDegreeOfParallelism
Long Parameter List,Infrastructure.Azure.EventSourcing,AzureEventSourcedRepository<T>,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\AzureEventSourcedRepository.cs,AzureEventSourcedRepository,The method has 5 parameters. Parameters: eventStore' publisher' serializer' metadataProvider' cache
Long Parameter List,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The method has 5 parameters. Parameters: settings' topic' subscription' requiresSequentialProcessing' instrumentation
Long Parameter List,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The method has 6 parameters. Parameters: settings' topic' subscription' requiresSequentialProcessing' instrumentation' backgroundRetryStrategy
Long Parameter List,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReleaseMessage,The method has 8 parameters. Parameters: msg' releaseAction' completeReceive' onReleaseError' countdown' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch
Long Parameter List,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The method has 5 parameters. Parameters: settings' topic' subscription' processInParallel' instrumentation
Long Parameter List,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The method has 6 parameters. Parameters: settings' topic' subscription' processInParallel' instrumentation' backgroundRetryStrategy
Long Parameter List,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReleaseMessage,The method has 5 parameters. Parameters: msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch
Long Parameter List,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeCompleteAsync,The method has 6 parameters. Parameters: message' subscription' callback' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch
Long Parameter List,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeAbandonAsync,The method has 6 parameters. Parameters: message' subscription' callback' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch
Long Parameter List,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeDeadLetterAsync,The method has 8 parameters. Parameters: message' subscription' reason' description' callback' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch
Long Parameter List,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeMessagingActionAsync,The method has 10 parameters. Parameters: begin' end' message' callback' actionErrorDescription' messageId' subscription' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch
Long Identifier,Infrastructure.Azure,DynamicThrottling,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\DynamicThrottling.cs,DynamicThrottling,The length of the parameter intervalForRestoringDegreeOfParallelism is 39.
Long Identifier,Infrastructure.Azure,DynamicThrottling,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\DynamicThrottling.cs,,The length of the parameter intervalForRestoringDegreeOfParallelism is 39.
Long Identifier,Infrastructure.Azure.Instrumentation,Constants,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\Constants.cs,,The length of the parameter ReceiversPerformanceCountersCategory is 36.
Long Identifier,Infrastructure.Azure.Instrumentation,Constants,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\Constants.cs,,The length of the parameter EventPublishersPerformanceCountersCategory is 42.
Long Identifier,Infrastructure.Azure.Instrumentation,EventStoreBusPublisherInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\EventStoreBusPublisherInstrumentation.cs,,The length of the parameter CurrentEventPublishersCounterName is 33.
Long Identifier,Infrastructure.Azure.Instrumentation,EventStoreBusPublisherInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\EventStoreBusPublisherInstrumentation.cs,,The length of the parameter TotalEventsPublishingRequestsCounterName is 40.
Long Identifier,Infrastructure.Azure.Instrumentation,EventStoreBusPublisherInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\EventStoreBusPublisherInstrumentation.cs,,The length of the parameter EventPublishingRequestsPerSecondCounterName is 43.
Long Identifier,Infrastructure.Azure.Instrumentation,EventStoreBusPublisherInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\EventStoreBusPublisherInstrumentation.cs,,The length of the parameter TotalEventsPublishedCounterName is 31.
Long Identifier,Infrastructure.Azure.Instrumentation,EventStoreBusPublisherInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\EventStoreBusPublisherInstrumentation.cs,,The length of the parameter EventsPublishedPerSecondCounterName is 35.
Long Identifier,Infrastructure.Azure.Instrumentation,EventStoreBusPublisherInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\EventStoreBusPublisherInstrumentation.cs,,The length of the parameter totalEventsPublishingRequestedCounter is 37.
Long Identifier,Infrastructure.Azure.Instrumentation,EventStoreBusPublisherInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\EventStoreBusPublisherInstrumentation.cs,,The length of the parameter eventPublishingRequestsPerSecondCounter is 39.
Long Identifier,Infrastructure.Azure.Instrumentation,EventStoreBusPublisherInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\EventStoreBusPublisherInstrumentation.cs,,The length of the parameter eventsPublishedPerSecondCounter is 31.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter TotalMessagesSuccessfullyProcessedCounterName is 45.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter TotalMessagesUnsuccessfullyProcessedCounterName is 47.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter TotalMessagesCompletedCounterName is 33.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter TotalMessagesNotCompletedCounterName is 36.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter MessagesReceivedPerSecondCounterName is 36.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter AverageMessageProcessingTimeCounterName is 39.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter AverageMessageProcessingTimeBaseCounterName is 43.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter CurrentMessagesInProcessCounterName is 35.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter totalMessagesSuccessfullyProcessedCounter is 41.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter totalMessagesUnsuccessfullyProcessedCounter is 43.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter totalMessagesNotCompletedCounter is 32.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter messagesReceivedPerSecondCounter is 32.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter averageMessageProcessingTimeCounter is 35.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter averageMessageProcessingTimeBaseCounter is 39.
Long Identifier,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,,The length of the parameter currentMessagesInProcessCounter is 31.
Long Identifier,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,,The length of the parameter UnpublishedRowKeyPrefixUpperLimit is 33.
Long Identifier,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,,The length of the parameter AcceptSessionLongPollingTimeout is 31.
Long Statement,Infrastructure.Azure.BlobStorage,CloudBlobStorage,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\BlobStorage\CloudBlobStorage.cs,Find,The length of the statement  "                        if (e.ErrorCode == StorageErrorCode.ResourceNotFound || e.ErrorCode == StorageErrorCode.BlobNotFound || e.ErrorCode == StorageErrorCode.ContainerNotFound) " is 154.
Long Statement,Infrastructure.Azure,DynamicThrottling,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\DynamicThrottling.cs,WaitUntilAllowedParallelism,The length of the statement  "                // Trace.WriteLine("Waiting for available degrees of parallelism. Available: " + this.availableDegreesOfParallelism + ". In use: " + this.currentParallelJobs); " is 159.
Long Statement,Infrastructure.Azure,DynamicThrottling,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\DynamicThrottling.cs,Start,The length of the statement  "            this.parallelismRestoringTimer.Change(intervalForRestoringDegreeOfParallelism' intervalForRestoringDegreeOfParallelism); " is 120.
Long Statement,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,GetPartitionsWithPendingEvents,The length of the statement  "                            // TODO: is there a better way to get the correct exception message instead of an OperationCancelledException in the consuming thread? " is 134.
Long Statement,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,Start,The length of the statement  "                        foreach (var key in GetThrottlingEnumerable(this.enqueuedKeys.GetConsumingEnumerable(cancellationToken)' cancellationToken)) " is 124.
Long Statement,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,ProcessPartition,The length of the statement  "                    Trace.TraceError("An error occurred while getting the events pending for publishing for partition {0}:\r\n{1}"' key' ex); " is 121.
Long Statement,Infrastructure.Azure.Messaging,MessageReleaseAction,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\MessageReleaseAction.cs,DeadLetterMessage,The length of the statement  "            return new MessageReleaseAction(MessageReleaseActionKind.DeadLetter) { DeadLetterReason = reason' DeadLetterDescription = description }; " is 136.
Long Statement,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,Initialize,The length of the statement  "            var serviceUri = ServiceBusEnvironment.CreateServiceUri(settings.ServiceUriScheme' settings.ServiceNamespace' settings.ServicePath); " is 132.
Long Statement,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateEventProcessor,The length of the statement  "                    receiver = (IMessageReceiver)new SessionSubscriptionReceiver(this.settings' topicSettings.Path' subscription' true' instrumentation); " is 133.
Long Statement,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateEventProcessor,The length of the statement  "                    receiver = (IMessageReceiver)new SubscriptionReceiver(this.settings' topicSettings.Path' subscription' true' instrumentation); " is 126.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,AcceptSession,The length of the statement  "                    Trace.TraceError("An unrecoverable error occurred while trying to accept a session in subscription {1}:\r\n{0}"' ex' this.subscription); " is 136.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "                                Trace.TraceWarning("Waited for pending unreleased messages before closing session in subscription {0} but they did not complete in time"' this.subscription); " is 157.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "                                Trace.TraceError("An unrecoverable error occurred while trying to close a session in subscription {1}:\r\n{0}"' ex' this.subscription); " is 135.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "                    // Allow some time for releasing the messages before closing. Also' continue in a non I/O completion thread in order to block. " is 126.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "            // Declare an action acting as a callback whenever a non-transient exception occurs while receiving or processing messages. " is 123.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "                                                    this.instrumentation.MessageProcessed(releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds); " is 126.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "                                            this.ReleaseMessage(msg' releaseAction' () => { receiveNext(); }' () => { closeSession(false); }' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch); " is 200.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "                                            this.ReleaseMessage(msg' releaseAction' () => { }' () => { this.dynamicThrottling.Penalize(); }' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch); " is 199.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "            // Initialize a custom action acting as a callback whenever a non-transient exception occurs while receiving or processing messages. " is 132.
Long Statement,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The length of the statement  "                Trace.TraceError("An unrecoverable error occurred while trying to receive a new message from subscription {1}:\r\n{0}"' ex' this.subscription); " is 143.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "            // Declare an action acting as a callback whenever a non-transient exception occurs while receiving or processing messages. " is 123.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "                                                    this.instrumentation.MessageProcessed(releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds); " is 126.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "                                        this.ReleaseMessage(msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch); " is 122.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "            // Initialize a custom action acting as a callback whenever a non-transient exception occurs while receiving or processing messages. " is 132.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The length of the statement  "                Trace.TraceError("An unrecoverable error occurred while trying to receive a new message from subscription {1}:\r\n{0}"' ex' this.subscription); " is 143.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReleaseMessage,The length of the statement  "                        success => { msg.Dispose(); this.instrumentation.MessageCompleted(false); this.dynamicThrottling.NotifyWorkCompletedWithError(); }' " is 131.
Long Statement,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReleaseMessage,The length of the statement  "                        success => { msg.Dispose(); this.instrumentation.MessageCompleted(false); this.dynamicThrottling.NotifyWorkCompletedWithError(); }' " is 131.
Long Statement,Infrastructure.Azure.Messaging,SynchronousCommandBusDecorator,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SynchronousCommandBusDecorator.cs,Send,The length of the statement  "                // Trace.TraceInformation("Command with id {0} was not handled locally. Sending it and all remaining commands through the bus."' pending[0].Body.Id); " is 149.
Long Statement,Infrastructure.Azure.Messaging,SynchronousCommandBusDecorator,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SynchronousCommandBusDecorator.cs,DoSend,The length of the statement  "                var traceIdentifier = string.Format(CultureInfo.CurrentCulture' " (local handling of command with id {0})"' command.Body.Id); " is 125.
Long Statement,Infrastructure.Azure.Messaging,SynchronousCommandBusDecorator,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SynchronousCommandBusDecorator.cs,DoSend,The length of the statement  "                handled = this.commandDispatcher.ProcessMessage(traceIdentifier' command.Body' command.MessageId' command.CorrelationId); " is 121.
Long Statement,Infrastructure.Azure.Messaging,SynchronousCommandBusDecorator,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SynchronousCommandBusDecorator.cs,DoSend,The length of the statement  "                Trace.TraceWarning("Exception handling command with id {0} synchronously: {1}. Command will be sent through the bus."' command.Body.Id' e.Message); " is 147.
Long Statement,Infrastructure.Azure.Messaging.Handling,CommandDispatcher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\Handling\CommandDispatcher.cs,ProcessMessage,The length of the statement  "                // Trace.WriteLine(string.Format(CultureInfo.InvariantCulture' "Command{0} handled by {1}."' traceIdentifier' handler.GetType().FullName)); " is 139.
Long Statement,Infrastructure.Azure.Messaging.Handling,MessageProcessor,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\Handling\MessageProcessor.cs,HandleProcessingException,The length of the statement  "                Trace.TraceError("An error occurred while processing the message" + traceIdentifier + " and will be dead-lettered:\r\n{0}"' e); " is 127.
Long Statement,Infrastructure.Azure.Messaging.Handling,MessageProcessor,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\Handling\MessageProcessor.cs,HandleProcessingException,The length of the statement  "                Trace.TraceWarning("An error occurred while processing the message" + traceIdentifier + " and will be abandoned:\r\n{0}"' e); " is 125.
Long Statement,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeCompleteAsync,The length of the statement  "                "An error occurred while completing message {0} in subscription {1} with processing time {3} (scheduling {4} request {5} roundtrip {6}). Error message: {2}"' " is 157.
Long Statement,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeAbandonAsync,The length of the statement  "                "An error occurred while abandoning message {0} in subscription {1} with processing time {3} (scheduling {4} request {5} roundtrip {6}). Error message: {2}"' " is 157.
Long Statement,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeDeadLetterAsync,The length of the statement  "                "An error occurred while dead-lettering message {0} in subscription {1} with processing time {3} (scheduling {4} request {5} roundtrip {6}). Error message: {2}"' " is 161.
Long Statement,Infrastructure.Azure.Utils,BrokeredMessageExtensions,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Utils\BrokeredMessageExtensions.cs,SafeMessagingActionAsync,The length of the statement  "                        Trace.TraceWarning(actionErrorDescription' messageId' subscription' e.GetType().Name + " - " + e.Message' processingElapsedMilliseconds' schedulingElapsedMilliseconds' messagingActionStart' roundtripStopwatch.ElapsedMilliseconds); " is 230.
Empty Catch Block,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,MessageReceived,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,MessageProcessed,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,MessageCompleted,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Instrumentation,SessionSubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SessionSubscriptionReceiverInstrumentation.cs,SessionStarted,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Instrumentation,SessionSubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SessionSubscriptionReceiverInstrumentation.cs,SessionEnded,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateTopicIfNotExists,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateSubscriptionIfNotExists,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,TryAddRule,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,TryRemoveRule,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,OnMessageCompleted,The method has an empty catch block.
Empty Catch Block,Infrastructure.Azure.Messaging.Handling,MessageProcessor,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\Handling\MessageProcessor.cs,BuildTraceIdentifier,The method has an empty catch block.
Magic Number,Infrastructure.Azure.BlobStorage,CloudBlobStorage,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\BlobStorage\CloudBlobStorage.cs,CloudBlobStorage,The following statement contains a magic number: this.readRetryPolicy = new RetryPolicy<StorageTransientErrorDetectionStrategy>(new Incremental(1' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(1)));
Magic Number,Infrastructure.Azure.BlobStorage,CloudBlobStorage,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\BlobStorage\CloudBlobStorage.cs,CloudBlobStorage,The following statement contains a magic number: this.writeRetryPolicy = new RetryPolicy<StorageTransientErrorDetectionStrategy>(new FixedInterval(1' TimeSpan.FromSeconds(10)) { FastFirstRetry = false });
Magic Number,Infrastructure.Azure.Instrumentation,SubscriptionReceiverInstrumentation,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Instrumentation\SubscriptionReceiverInstrumentation.cs,MessageProcessed,The following statement contains a magic number: if (this.InstrumentationEnabled)              {                  try                  {                      if (success)                      {                          this.totalMessagesSuccessfullyProcessedCounter.Increment();                      }                      else                      {                          this.totalMessagesUnsuccessfullyProcessedCounter.Increment();                      }                        this.averageMessageProcessingTimeCounter.IncrementBy(elapsedMilliseconds / 100);                      this.averageMessageProcessingTimeBaseCounter.Increment();                  }                  catch (ObjectDisposedException)                  {                  }              }
Magic Number,Infrastructure.Azure.MessageLog,AzureMessageLogWriter,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\MessageLog\AzureMessageLogWriter.cs,AzureMessageLogWriter,The following statement contains a magic number: var retryStrategy = new ExponentialBackoff(10' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(15)' TimeSpan.FromSeconds(1));
Magic Number,Infrastructure.Azure.MessageLog,AzureMessageLogWriter,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\MessageLog\AzureMessageLogWriter.cs,AzureMessageLogWriter,The following statement contains a magic number: var retryStrategy = new ExponentialBackoff(10' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(15)' TimeSpan.FromSeconds(1));
Magic Number,Infrastructure.Azure.MessageLog,AzureMessageLogWriter,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\MessageLog\AzureMessageLogWriter.cs,AzureMessageLogWriter,The following statement contains a magic number: var retryStrategy = new ExponentialBackoff(10' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(15)' TimeSpan.FromSeconds(1));
Magic Number,Infrastructure.Azure.EventSourcing,AzureEventSourcedRepository<T>,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\AzureEventSourcedRepository.cs,AzureEventSourcedRepository,The following statement contains a magic number: if (typeof(IMementoOriginator).IsAssignableFrom(typeof(T)) && this.cache != null)              {                  // TODO: could be replaced with a compiled lambda to make it more performant                  var mementoConstructor = typeof(T).GetConstructor(new[] { typeof(Guid)' typeof(IMemento)' typeof(IEnumerable<IVersionedEvent>) });                  if (mementoConstructor == null)                  {                      throw new InvalidCastException(                          "Type T must have a constructor with the following signature: .ctor(Guid' IMemento' IEnumerable<IVersionedEvent>)");                  }                  this.originatorEntityFactory = (id' memento' events) => (T)mementoConstructor.Invoke(new object[] { id' memento' events });                  this.cacheMementoIfApplicable = (T originator) =>                      {                          string key = GetPartitionKey(originator.Id);                          var memento = ((IMementoOriginator)originator).SaveToMemento();                          this.cache.Set(                              key'                              new Tuple<IMemento' DateTime?>(memento' DateTime.UtcNow)'                              new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes(30) });                      };                  this.getMementoFromCache = id => (Tuple<IMemento' DateTime?>)this.cache.Get(GetPartitionKey(id));                  this.markCacheAsStale = id =>                  {                      var key = GetPartitionKey(id);                      var item = (Tuple<IMemento' DateTime?>)this.cache.Get(key);                      if (item != null && item.Item2.HasValue)                      {                          item = new Tuple<IMemento' DateTime?>(item.Item1' null);                          this.cache.Set(                              key'                              item'                              new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes(30) });                      }                  };              }              else              {                  // if no cache object or is not a cache originator' then no-op                  this.cacheMementoIfApplicable = o => { };                  this.getMementoFromCache = id => { return null; };                  this.markCacheAsStale = id => { };              }
Magic Number,Infrastructure.Azure.EventSourcing,AzureEventSourcedRepository<T>,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\AzureEventSourcedRepository.cs,AzureEventSourcedRepository,The following statement contains a magic number: if (typeof(IMementoOriginator).IsAssignableFrom(typeof(T)) && this.cache != null)              {                  // TODO: could be replaced with a compiled lambda to make it more performant                  var mementoConstructor = typeof(T).GetConstructor(new[] { typeof(Guid)' typeof(IMemento)' typeof(IEnumerable<IVersionedEvent>) });                  if (mementoConstructor == null)                  {                      throw new InvalidCastException(                          "Type T must have a constructor with the following signature: .ctor(Guid' IMemento' IEnumerable<IVersionedEvent>)");                  }                  this.originatorEntityFactory = (id' memento' events) => (T)mementoConstructor.Invoke(new object[] { id' memento' events });                  this.cacheMementoIfApplicable = (T originator) =>                      {                          string key = GetPartitionKey(originator.Id);                          var memento = ((IMementoOriginator)originator).SaveToMemento();                          this.cache.Set(                              key'                              new Tuple<IMemento' DateTime?>(memento' DateTime.UtcNow)'                              new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes(30) });                      };                  this.getMementoFromCache = id => (Tuple<IMemento' DateTime?>)this.cache.Get(GetPartitionKey(id));                  this.markCacheAsStale = id =>                  {                      var key = GetPartitionKey(id);                      var item = (Tuple<IMemento' DateTime?>)this.cache.Get(key);                      if (item != null && item.Item2.HasValue)                      {                          item = new Tuple<IMemento' DateTime?>(item.Item1' null);                          this.cache.Set(                              key'                              item'                              new CacheItemPolicy { AbsoluteExpiration = DateTimeOffset.UtcNow.AddMinutes(30) });                      }                  };              }              else              {                  // if no cache object or is not a cache originator' then no-op                  this.cacheMementoIfApplicable = o => { };                  this.getMementoFromCache = id => { return null; };                  this.markCacheAsStale = id => { };              }
Magic Number,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,EventStore,The following statement contains a magic number: var backgroundRetryStrategy = new ExponentialBackoff(10' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(15)' TimeSpan.FromSeconds(1));
Magic Number,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,EventStore,The following statement contains a magic number: var backgroundRetryStrategy = new ExponentialBackoff(10' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(15)' TimeSpan.FromSeconds(1));
Magic Number,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,EventStore,The following statement contains a magic number: var backgroundRetryStrategy = new ExponentialBackoff(10' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(15)' TimeSpan.FromSeconds(1));
Magic Number,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,EventStore,The following statement contains a magic number: var blockingRetryStrategy = new Incremental(3' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(1));
Magic Number,Infrastructure.Azure.EventSourcing,EventStore,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStore.cs,EventStore,The following statement contains a magic number: var blockingRetryStrategy = new Incremental(3' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(1));
Magic Number,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,EventStoreBusPublisher,The following statement contains a magic number: this.dynamicThrottling =                   new DynamicThrottling(                      maxDegreeOfParallelism: 230'                      minDegreeOfParallelism: 30'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 10'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 8000);
Magic Number,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,EventStoreBusPublisher,The following statement contains a magic number: this.dynamicThrottling =                   new DynamicThrottling(                      maxDegreeOfParallelism: 230'                      minDegreeOfParallelism: 30'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 10'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 8000);
Magic Number,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,EventStoreBusPublisher,The following statement contains a magic number: this.dynamicThrottling =                   new DynamicThrottling(                      maxDegreeOfParallelism: 230'                      minDegreeOfParallelism: 30'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 10'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 8000);
Magic Number,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,EventStoreBusPublisher,The following statement contains a magic number: this.dynamicThrottling =                   new DynamicThrottling(                      maxDegreeOfParallelism: 230'                      minDegreeOfParallelism: 30'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 10'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 8000);
Magic Number,Infrastructure.Azure.EventSourcing,EventStoreBusPublisher,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\EventSourcing\EventStoreBusPublisher.cs,EventStoreBusPublisher,The following statement contains a magic number: this.dynamicThrottling =                   new DynamicThrottling(                      maxDegreeOfParallelism: 230'                      minDegreeOfParallelism: 30'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 10'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 8000);
Magic Number,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,Initialize,The following statement contains a magic number: var retryStrategy = new Incremental(3' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(1));
Magic Number,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,Initialize,The following statement contains a magic number: var retryStrategy = new Incremental(3' TimeSpan.FromMilliseconds(100)' TimeSpan.FromSeconds(1));
Magic Number,Infrastructure.Azure.Messaging,ServiceBusConfig,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\ServiceBusConfig.cs,CreateSubscriptionIfNotExists,The following statement contains a magic number: var subscriptionDescription =                  new SubscriptionDescription(topic.Path' subscription.Name)                  {                      RequiresSession = subscription.RequiresSession'                      LockDuration = TimeSpan.FromSeconds(150)'                  };
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: if (this.requiresSequentialProcessing)              {                  this.client.PrefetchCount = 10;              }              else              {                  this.client.PrefetchCount = 15;              }
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: if (this.requiresSequentialProcessing)              {                  this.client.PrefetchCount = 10;              }              else              {                  this.client.PrefetchCount = 15;              }
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling =                  new DynamicThrottling(                      maxDegreeOfParallelism: 160'                      minDegreeOfParallelism: 30'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 5'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 10000);
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling =                  new DynamicThrottling(                      maxDegreeOfParallelism: 160'                      minDegreeOfParallelism: 30'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 5'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 10000);
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling =                  new DynamicThrottling(                      maxDegreeOfParallelism: 160'                      minDegreeOfParallelism: 30'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 5'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 10000);
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling =                  new DynamicThrottling(                      maxDegreeOfParallelism: 160'                      minDegreeOfParallelism: 30'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 5'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 10000);
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,SessionSubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling =                  new DynamicThrottling(                      maxDegreeOfParallelism: 160'                      minDegreeOfParallelism: 30'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 5'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 10000);
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,AcceptSession,The following statement contains a magic number: if (!cancellationToken.IsCancellationRequested)              {                  // Initialize a custom action acting as a callback whenever a non-transient exception occurs while accepting a session.                  Action<Exception> recoverAcceptSession = ex =>                  {                      // Just log an exception. Do not allow an unhandled exception to terminate the message receive loop abnormally.                      Trace.TraceError("An unrecoverable error occurred while trying to accept a session in subscription {1}:\r\n{0}"' ex' this.subscription);                      this.dynamicThrottling.Penalize();                        if (!cancellationToken.IsCancellationRequested)                      {                          // Continue accepting new sessions until told to stop regardless of any exceptions.                          TaskEx.Delay(10000).ContinueWith(t => AcceptSession(cancellationToken));                      }                  };                    this.receiveRetryPolicy.ExecuteAction(                      cb => this.client.BeginAcceptMessageSession(AcceptSessionLongPollingTimeout' cb' null)'                      ar =>                      {                          // Complete the asynchronous operation. This may throw an exception that will be handled internally by retry policy.                          try                          {                              return this.client.EndAcceptMessageSession(ar);                          }                          catch (TimeoutException)                          {                              // TimeoutException is not just transient but completely expected in this case' so not relying on Topaz to retry                              return null;                          }                      }'                      session =>                      {                          if (session != null)                          {                              this.instrumentation.SessionStarted();                              this.dynamicThrottling.NotifyWorkStarted();                              // starts a new task to process new sessions in parallel when enough threads are available                              Task.Factory.StartNew(() => this.AcceptSession(cancellationToken)' cancellationToken);                              this.ReceiveMessagesAndCloseSession(session' cancellationToken);                          }                          else                          {                              this.AcceptSession(cancellationToken);                          }                      }'                      recoverAcceptSession);              }
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: Action<bool> closeSession = (bool success) =>              {                  Action doClose = () =>                      {                          try                          {                              unreleasedMessages.Signal();                              if (!unreleasedMessages.Wait(15000' cancellationToken))                              {                                  Trace.TraceWarning("Waited for pending unreleased messages before closing session in subscription {0} but they did not complete in time"' this.subscription);                              }                          }                          catch (OperationCanceledException)                          {                          }                          finally                          {                              unreleasedMessages.Dispose();                          }                            this.receiveRetryPolicy.ExecuteAction(                              cb => session.BeginClose(cb' null)'                              session.EndClose'                              () =>                              {                                  this.instrumentation.SessionEnded();                                  if (success)                                  {                                      this.dynamicThrottling.NotifyWorkCompleted();                                  }                                  else                                  {                                      this.dynamicThrottling.NotifyWorkCompletedWithError();                                  }                              }'                              ex =>                              {                                  this.instrumentation.SessionEnded();                                  Trace.TraceError("An unrecoverable error occurred while trying to close a session in subscription {1}:\r\n{0}"' ex' this.subscription);                                  this.dynamicThrottling.NotifyWorkCompletedWithError();                              });                      };                    if (this.requiresSequentialProcessing)                  {                      doClose.Invoke();                  }                  else                  {                      // Allow some time for releasing the messages before closing. Also' continue in a non I/O completion thread in order to block.                      TaskEx.Delay(200).ContinueWith(t => doClose());                  }              };
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: Action<bool> closeSession = (bool success) =>              {                  Action doClose = () =>                      {                          try                          {                              unreleasedMessages.Signal();                              if (!unreleasedMessages.Wait(15000' cancellationToken))                              {                                  Trace.TraceWarning("Waited for pending unreleased messages before closing session in subscription {0} but they did not complete in time"' this.subscription);                              }                          }                          catch (OperationCanceledException)                          {                          }                          finally                          {                              unreleasedMessages.Dispose();                          }                            this.receiveRetryPolicy.ExecuteAction(                              cb => session.BeginClose(cb' null)'                              session.EndClose'                              () =>                              {                                  this.instrumentation.SessionEnded();                                  if (success)                                  {                                      this.dynamicThrottling.NotifyWorkCompleted();                                  }                                  else                                  {                                      this.dynamicThrottling.NotifyWorkCompletedWithError();                                  }                              }'                              ex =>                              {                                  this.instrumentation.SessionEnded();                                  Trace.TraceError("An unrecoverable error occurred while trying to close a session in subscription {1}:\r\n{0}"' ex' this.subscription);                                  this.dynamicThrottling.NotifyWorkCompletedWithError();                              });                      };                    if (this.requiresSequentialProcessing)                  {                      doClose.Invoke();                  }                  else                  {                      // Allow some time for releasing the messages before closing. Also' continue in a non I/O completion thread in order to block.                      TaskEx.Delay(200).ContinueWith(t => doClose());                  }              };
Magic Number,Infrastructure.Azure.Messaging,SessionSubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SessionSubscriptionReceiver.cs,ReceiveMessagesAndCloseSession,The following statement contains a magic number: Action receiveMessage = (() =>              {                  // Use a retry policy to execute the Receive action in an asynchronous and reliable fashion.                  this.receiveRetryPolicy.ExecuteAction                  (                      cb =>                      {                          // Start receiving a new message asynchronously.                          // Does not wait for new messages to arrive in a session. If no further messages we will just close the session.                          session.BeginReceive(TimeSpan.Zero' cb' null);                      }'                      // Complete the asynchronous operation. This may throw an exception that will be handled internally by retry policy.                      session.EndReceive'                      msg =>                      {                          // Process the message once it was successfully received                          // Check if we actually received any messages.                          if (msg != null)                          {                              var roundtripStopwatch = Stopwatch.StartNew();                              long schedulingElapsedMilliseconds = 0;                              long processingElapsedMilliseconds = 0;                                unreleasedMessages.AddCount();                                Task.Factory.StartNew(() =>                                  {                                      var releaseAction = MessageReleaseAction.AbandonMessage;                                        try                                      {                                          this.instrumentation.MessageReceived();                                            schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;                                            // Make sure the process was told to stop receiving while it was waiting for a new message.                                          if (!cancellationToken.IsCancellationRequested)                                          {                                              try                                              {                                                  try                                                  {                                                      // Process the received message.                                                      releaseAction = this.InvokeMessageHandler(msg);                                                        processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;                                                      this.instrumentation.MessageProcessed(releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);                                                  }                                                  catch                                                  {                                                      processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;                                                      this.instrumentation.MessageProcessed(false' processingElapsedMilliseconds);                                                        throw;                                                  }                                              }                                              finally                                              {                                                  if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds(45))                                                  {                                                      this.dynamicThrottling.Penalize();                                                  }                                              }                                          }                                      }                                      finally                                      {                                          // Ensure that any resources allocated by a BrokeredMessage instance are released.                                          if (this.requiresSequentialProcessing)                                          {                                              this.ReleaseMessage(msg' releaseAction' () => { receiveNext(); }' () => { closeSession(false); }' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);                                          }                                          else                                          {                                              // Receives next without waiting for the message to be released.                                              this.ReleaseMessage(msg' releaseAction' () => { }' () => { this.dynamicThrottling.Penalize(); }' unreleasedMessages' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);                                              receiveNext.Invoke();                                          }                                      }                                  });                          }                          else                          {                              // no more messages in the session' close it and do not continue receiving                              closeSession(true);                          }                      }'                      ex =>                      {                          // Invoke a custom action to indicate that we have encountered an exception and                          // need further decision as to whether to continue receiving messages.                          recoverReceive.Invoke(ex);                      });              });
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: if (this.processInParallel)              {                  this.client.PrefetchCount = 18;              }              else              {                  this.client.PrefetchCount = 14;              }
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: if (this.processInParallel)              {                  this.client.PrefetchCount = 18;              }              else              {                  this.client.PrefetchCount = 14;              }
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling =                  new DynamicThrottling(                      maxDegreeOfParallelism: 100'                      minDegreeOfParallelism: 50'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 5'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 8000);
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling =                  new DynamicThrottling(                      maxDegreeOfParallelism: 100'                      minDegreeOfParallelism: 50'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 5'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 8000);
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling =                  new DynamicThrottling(                      maxDegreeOfParallelism: 100'                      minDegreeOfParallelism: 50'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 5'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 8000);
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling =                  new DynamicThrottling(                      maxDegreeOfParallelism: 100'                      minDegreeOfParallelism: 50'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 5'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 8000);
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,SubscriptionReceiver,The following statement contains a magic number: this.dynamicThrottling =                  new DynamicThrottling(                      maxDegreeOfParallelism: 100'                      minDegreeOfParallelism: 50'                      penaltyAmount: 3'                      workFailedPenaltyAmount: 5'                      workCompletedParallelismGain: 1'                      intervalForRestoringDegreeOfParallelism: 8000);
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: Action receiveMessage = (() =>              {                  // Use a retry policy to execute the Receive action in an asynchronous and reliable fashion.                  this.receiveRetryPolicy.ExecuteAction                  (                      cb =>                      {                          // Start receiving a new message asynchronously.                          this.client.BeginReceive(ReceiveLongPollingTimeout' cb' null);                      }'                      ar =>                      {                          // Complete the asynchronous operation. This may throw an exception that will be handled internally by retry policy.                          try                          {                              return this.client.EndReceive(ar);                          }                          catch (TimeoutException)                          {                              // TimeoutException is not just transient but completely expected in this case' so not relying on Topaz to retry                              return null;                          }                      }'                      msg =>                      {                          // Process the message once it was successfully received                          if (this.processInParallel)                          {                              // Continue receiving and processing new messages asynchronously                              Task.Factory.StartNew(receiveNext);                          }                            // Check if we actually received any messages.                          if (msg != null)                          {                              var roundtripStopwatch = Stopwatch.StartNew();                              long schedulingElapsedMilliseconds = 0;                              long processingElapsedMilliseconds = 0;                                Task.Factory.StartNew(() =>                                  {                                      var releaseAction = MessageReleaseAction.AbandonMessage;                                        try                                      {                                          this.instrumentation.MessageReceived();                                            schedulingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds;                                            // Make sure the process was told to stop receiving while it was waiting for a new message.                                          if (!cancellationToken.IsCancellationRequested)                                          {                                              try                                              {                                                  try                                                  {                                                      // Process the received message.                                                      releaseAction = this.InvokeMessageHandler(msg);                                                        processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;                                                      this.instrumentation.MessageProcessed(releaseAction.Kind == MessageReleaseActionKind.Complete' processingElapsedMilliseconds);                                                  }                                                  catch                                                  {                                                      processingElapsedMilliseconds = roundtripStopwatch.ElapsedMilliseconds - schedulingElapsedMilliseconds;                                                      this.instrumentation.MessageProcessed(false' processingElapsedMilliseconds);                                                        throw;                                                  }                                              }                                              finally                                              {                                                  if (roundtripStopwatch.Elapsed > TimeSpan.FromSeconds(45))                                                  {                                                      this.dynamicThrottling.Penalize();                                                  }                                              }                                          }                                      }                                      finally                                      {                                          // Ensure that any resources allocated by a BrokeredMessage instance are released.                                          this.ReleaseMessage(msg' releaseAction' processingElapsedMilliseconds' schedulingElapsedMilliseconds' roundtripStopwatch);                                      }                                        if (!this.processInParallel)                                      {                                          // Continue receiving and processing new messages until told to stop.                                          receiveNext.Invoke();                                      }                                  });                          }                          else                          {                              this.dynamicThrottling.NotifyWorkCompleted();                              if (!this.processInParallel)                              {                                  // Continue receiving and processing new messages until told to stop.                                  receiveNext.Invoke();                              }                          }                      }'                      ex =>                      {                          // Invoke a custom action to indicate that we have encountered an exception and                          // need further decision as to whether to continue receiving messages.                          recoverReceive.Invoke(ex);                      });              });
Magic Number,Infrastructure.Azure.Messaging,SubscriptionReceiver,C:\repos\mspnp_cqrs-journey-code\source\Infrastructure\Azure\Infrastructure.Azure\Messaging\SubscriptionReceiver.cs,ReceiveMessages,The following statement contains a magic number: recoverReceive = ex =>              {                  // Just log an exception. Do not allow an unhandled exception to terminate the message receive loop abnormally.                  Trace.TraceError("An unrecoverable error occurred while trying to receive a new message from subscription {1}:\r\n{0}"' ex' this.subscription);                  this.dynamicThrottling.NotifyWorkCompletedWithError();                    if (!cancellationToken.IsCancellationRequested)                  {                      // Continue receiving and processing new messages until told to stop regardless of any exceptions.                      TaskEx.Delay(10000).ContinueWith(t => receiveMessage.Invoke());                  }              };
