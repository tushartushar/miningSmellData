Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.PowerShell.Commands,GetDateCommand,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\GetDateCommand.cs,ProcessRecord,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.PowerShell.Commands,GetMemberCommand,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\GetMemberCommand.cs,ProcessRecord,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.PowerShell.Commands,ImportCsvCommand,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\ImportCsvCommand.cs,ProcessRecord,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.PowerShell.Commands,ImportCsvCommand,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\ImportCsvCommand.cs,ParseRowValuesFromStream,Cyclomatic complexity of the method is 10
Complex Method,Microsoft.PowerShell.Commands.Utility,FormatManager,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Format\FormatManager.cs,ProcessObject,Cyclomatic complexity of the method is 9
Long Parameter List,Microsoft.PowerShell.Commands,MatchInfo,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\MatchInfo.cs,MatchInfo,The method has 6 parameters. Parameters: path' pattern' matches' line' lineNumber' ignoreCase
Long Parameter List,Microsoft.PowerShell.Commands,MatchInfo,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\MatchInfo.cs,MatchInfo,The method has 5 parameters. Parameters: path' pattern' line' lineNumber' ignoreCase
Long Parameter List,Microsoft.PowerShell.Commands.Utility,FileOutputWriter,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Output\FileOutputWriter.cs,FileOutputWriter,The method has 5 parameters. Parameters: filename' append' overwrite' encoding' width
Long Parameter List,Microsoft.PowerShell.Commands.Utility,TableFormatProcessor,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Output\TableFormatProcessor.cs,TrimString,The method has 5 parameters. Parameters: str' width' alignRight' useDotsIfPossible' rest
Long Statement,Microsoft.PowerShell.Commands,ConvertToHtmlCommand,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\ConvertToHtmlCommand.cs,BeginProcessing,The length of the statement  "                ("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n<html>\n<head>"); " is 146.
Long Statement,Microsoft.PowerShell.Commands.Utility,PropertyEqualityComparer,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\PropertyEqualityComparer.cs,Equals,The length of the statement  "                var xPropertyValue = x.BaseObject.GetType().GetProperty(property' BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase).GetValue(x.BaseObject' null); " is 166.
Long Statement,Microsoft.PowerShell.Commands.Utility,PropertyEqualityComparer,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\PropertyEqualityComparer.cs,Equals,The length of the statement  "                var yPropertyValue = y.BaseObject.GetType().GetProperty(property' BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase).GetValue(y.BaseObject' null); " is 166.
Long Statement,Microsoft.PowerShell.Commands.Utility,PropertyEqualityComparer,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\PropertyEqualityComparer.cs,GetHashCode,The length of the statement  "                var propertyValue = obj.BaseObject.GetType().GetProperty(property.ToString()' BindingFlags.Public | BindingFlags.Instance | BindingFlags.IgnoreCase).GetValue(obj.BaseObject' null); " is 180.
Complex Conditional,Microsoft.PowerShell.Commands,SelectObjectCommand,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\SelectObjectCommand.cs,FilterByPosition,The conditional expression  "takenAndSkipped >= count || Last == 0 || (skipEnd && Skip >= (count - takenAndSkipped))"  is complex.
Empty Catch Block,Microsoft.PowerShell.Commands.Utility,HostOutputWriter,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Output\HostOutputWriter.cs,HostOutputWriter,The method has an empty catch block.
Empty Catch Block,Microsoft.PowerShell.Commands.Utility,TableFormatGenerator,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Format\TableFormatGenerator.cs,GenerateObjectFormatEntry,The method has an empty catch block.
Empty Catch Block,Microsoft.PowerShell.Commands.Utility,ListFormatGenerator,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Format\ListFormatGenerator.cs,GenerateObjectFormatEntry,The method has an empty catch block.
Magic Number,Microsoft.PowerShell.Commands,ImportCsvCommand,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\ImportCsvCommand.cs,ProcessRecord,The following statement contains a magic number: foreach (String curPath in Path)              {                  var file = OpenFile(curPath);                  string typename = "";                  if (file.Peek() == '#')                  {                      var typeline = file.ReadLine();                      if (typeline.StartsWith("#TYPE"))                      {                          typename = typeline.Substring(5).Trim();                      }                  }                    string[] useHeader;                  if (Header != null && Header.Length > 0)                  {                      useHeader = Header;                  }                  else                  {                      // first line is property names                      useHeader = ParseRowValuesFromStream(file).ToArray();                      if (useHeader.Length < 1 || file.EndOfStream) // empty file                      {                          file.Close();                          return;                      }                  }                    // validate header                  if (useHeader.Distinct().Count() != useHeader.Count() ||                      useHeader.Contains("") ||                      useHeader.Contains(null)                      )                  {                      file.Close();                      var er = new PSArgumentException("Invalid CSV header with duplicate or empty values!").ErrorRecord;                      ThrowTerminatingError(er);                  }                    while (!file.EndOfStream)                  {                      var values = ParseRowValuesFromStream(file);                      if (values.Count < 1)                      {                          continue;                      }                      PSObject obj = new PSObject();                      if (!String.IsNullOrEmpty(typename))                      {                          obj.TypeNames.Add("CSV:" + typename);                      }                      for (int i = 0; i < useHeader.Length; i++)                      {                          string value = (i < values.Count) ? values[i] : null;                          var psprop = new PSNoteProperty(useHeader[i]' value);                          obj.Properties.Add(psprop);                          obj.Members.Add(psprop);                      }                      WriteObject(obj);                  }                  file.Close();              }
Magic Number,Microsoft.PowerShell.Commands,StartSleepCommand,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\StartSleepCommand.cs,ProcessRecord,The following statement contains a magic number: if (Milliseconds == 0)                  _sleeptime = Seconds * 1000;                else _sleeptime = Milliseconds;
Magic Number,Microsoft.PowerShell.Commands.Utility,ListFormatProcessor,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Output\ListFormatProcessor.cs,ProcessFormatEntry,The following statement contains a magic number: int availableForName = totalWidth - 4;
Magic Number,Microsoft.PowerShell.Commands.Utility,ListFormatProcessor,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Output\ListFormatProcessor.cs,WriteEntry,The following statement contains a magic number: int spaceForValue = totalWidth - maxNameWidth - 3;
Magic Number,Microsoft.PowerShell.Commands.Utility,ListFormatProcessor,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Output\ListFormatProcessor.cs,WriteEntry,The following statement contains a magic number: while (value != "")              {                  if (!nameWritten)                  {                      if (entry.PropertyName.Length > maxNameWidth)                      {                          line.Append(entry.PropertyName.Substring(0' maxNameWidth));                      }                      else                      {                          line.Append(entry.PropertyName.PadRight(maxNameWidth));                      }                      line.Append(" : ");                      nameWritten = true;                  }                  else                  {                      line.Append("".PadLeft(maxNameWidth + 3)); // + space for " : "                  }                  var len = spaceForValue > value.Length ? value.Length : spaceForValue;                  line.Append(value.Substring(0' len));                  value = value.Substring(len);                  OutputWriter.WriteLine(line.ToString());                  line.Clear();              }
Magic Number,Microsoft.PowerShell.Commands.Utility,TableFormatProcessor,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Output\TableFormatProcessor.cs,CalculateColumns,The following statement contains a magic number: if (2 * cols - 1 > _fullWidth)              {                  cols = (_fullWidth + 1) / 2;                  string format = "Warning: {0} columns have to be omitted in this format" +                                  "as they don't fit the available width.";                  OutputWriter.WriteLine(String.Format(format' row.Count - cols));              }
Magic Number,Microsoft.PowerShell.Commands.Utility,TableFormatProcessor,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Output\TableFormatProcessor.cs,CalculateColumns,The following statement contains a magic number: if (2 * cols - 1 > _fullWidth)              {                  cols = (_fullWidth + 1) / 2;                  string format = "Warning: {0} columns have to be omitted in this format" +                                  "as they don't fit the available width.";                  OutputWriter.WriteLine(String.Format(format' row.Count - cols));              }
Magic Number,Microsoft.PowerShell.Commands.Utility,TableFormatProcessor,C:\repos\Pash-Project_Pash\Source\Microsoft.PowerShell.Commands.Utility\Output\TableFormatProcessor.cs,TrimString,The following statement contains a magic number: string dots = useDotsIfPossible && width > 3 ? "..." : "";
