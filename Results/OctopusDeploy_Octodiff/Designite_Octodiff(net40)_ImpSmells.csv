Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Octodiff.CommandLine,DeltaCommand,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\DeltaCommand.cs,Execute,Cyclomatic complexity of the method is 8
Complex Method,Octodiff.CommandLine,Option,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,ParsePrototype,Cyclomatic complexity of the method is 10
Complex Method,Octodiff.CommandLine,Option,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,AddSeparators,Cyclomatic complexity of the method is 8
Complex Method,Octodiff.CommandLine,OptionSet,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Octodiff.CommandLine,OptionSet,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 13
Complex Method,Octodiff.CommandLine,OptionSet,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Complex Method,Octodiff.CommandLine,OptionSet,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,GetDescription,Cyclomatic complexity of the method is 12
Complex Method,Octodiff.Core,DeltaBuilder,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\DeltaBuilder.cs,BuildDelta,Cyclomatic complexity of the method is 13
Long Parameter List,Octodiff.CommandLine,OptionSet,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Statement,Octodiff.CommandLine,DeltaCommand,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\DeltaCommand.cs,Execute,The length of the statement  "                delta.BuildDelta(newFileStream' new SignatureReader(signatureStream' delta.ProgressReporter)' new AggregateCopyOperationsDecorator(new BinaryDeltaWriter(deltaStream))); " is 168.
Long Statement,Octodiff.CommandLine,HelpCommand,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\HelpCommand.cs,Execute,The length of the statement  "            var executable = Path.GetFileNameWithoutExtension(new Uri(typeof(HelpCommand).GetTypeInfo().Assembly.CodeBase).LocalPath); " is 122.
Long Statement,Octodiff.CommandLine,HelpCommand,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\HelpCommand.cs,PrintCommandHelp,The length of the statement  "            Console.WriteLine(executable + " " + commandName + (!string.IsNullOrWhiteSpace(commandMetadata.Usage) ? " " + commandMetadata.Usage : "") + " [<options>]"); " is 156.
Long Statement,Octodiff.Core,ChunkSignature,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\ChunkSignature.cs,ToString,The length of the statement  "            return string.Format("{0'6}:{1'6} |{2'20}| {3}"' StartOffset' Length' RollingChecksum' BitConverter.ToString(Hash).ToLowerInvariant().Replace("-"' "")); " is 152.
Long Statement,Octodiff.Core,DeltaApplier,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\DeltaApplier.cs,Apply,The length of the statement  "                    throw new UsageException("Verification of the patched file failed. The SHA1 hash of the patch result file' and the file that was used as input for the delta' do not match. This can happen if the basis file changed since the signatures were calculated."); " is 254.
Complex Conditional,Octodiff.CommandLine,Option,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,Option,The conditional expression  "Array.IndexOf(names' "<>") >= 0 &&                      ((names.Length == 1 && this.type != OptionValueType.None) ||                       (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Octodiff.CommandLine,OptionSet,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n[n.Length - 1] == '+' || n[n.Length - 1] == '-') &&                      Contains((rn = n.Substring(0' n.Length - 1)))"  is complex.
Magic Number,Octodiff.CommandLine,ExplainDeltaCommand,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\ExplainDeltaCommand.cs,Execute,The following statement contains a magic number: reader.Apply(data =>                  {                      if (data.Length > 20)                      {                          Console.WriteLine("Data: ({0} bytes): {1}..."' data.Length'                              BitConverter.ToString(data.Take(20).ToArray()));                      }                      else                      {                          Console.WriteLine("Data: ({0} bytes): {1}"' data.Length' BitConverter.ToString(data.ToArray()));                                              }                  }'                   (start' offset) => Console.WriteLine("Copy: {0:X} to {1:X}"' start' offset));
Magic Number,Octodiff.CommandLine,ExplainDeltaCommand,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\ExplainDeltaCommand.cs,Execute,The following statement contains a magic number: reader.Apply(data =>                  {                      if (data.Length > 20)                      {                          Console.WriteLine("Data: ({0} bytes): {1}..."' data.Length'                              BitConverter.ToString(data.Take(20).ToArray()));                      }                      else                      {                          Console.WriteLine("Data: ({0} bytes): {1}"' data.Length' BitConverter.ToString(data.ToArray()));                                              }                  }'                   (start' offset) => Console.WriteLine("Copy: {0:X} to {1:X}"' start' offset));
Magic Number,Octodiff.CommandLine,HelpCommand,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\HelpCommand.cs,PrintGeneralHelp,The following statement contains a magic number: Console.WriteLine("  " + possible.Name.PadRight(15' ' '));
Magic Number,Octodiff.CommandLine,OptionSet,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption(prototype' description' 2'                      delegate(OptionValueCollection v) { action(v[0]' v[1]); });
Magic Number,Octodiff.CommandLine,OptionSet,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,GetLines,The following statement contains a magic number: int length = 80 - OptionWidth - 1;
Magic Number,Octodiff.CommandLine,OptionSet,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;
Magic Number,Octodiff.CommandLine,OptionSet,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,GetLines,The following statement contains a magic number: length = 80 - OptionWidth - 2 - 1;
Magic Number,Octodiff.Core,Adler32RollingChecksum,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\Adler32RollingChecksum.cs,Calculate,The following statement contains a magic number: return (UInt32)((b << 16) | a);
Magic Number,Octodiff.Core,Adler32RollingChecksum,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\Adler32RollingChecksum.cs,Rotate,The following statement contains a magic number: var b = (ushort)(checksum >> 16 & 0xffff);
Magic Number,Octodiff.Core,Adler32RollingChecksum,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\Adler32RollingChecksum.cs,Rotate,The following statement contains a magic number: return (UInt32)((b << 16) | a);
Magic Number,Octodiff.Core,Adler32RollingChecksumV2,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\Adler32RollingChecksumV2.cs,Calculate,The following statement contains a magic number: return (uint)((b << 16) | a);
Magic Number,Octodiff.Core,Adler32RollingChecksumV2,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\Adler32RollingChecksumV2.cs,Rotate,The following statement contains a magic number: var b = (ushort)(checksum >> 16 & 0xffff);
Magic Number,Octodiff.Core,Adler32RollingChecksumV2,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\Adler32RollingChecksumV2.cs,Rotate,The following statement contains a magic number: return (uint)((b << 16) | a);
Magic Number,Octodiff.Core,BinaryDeltaWriter,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\BinaryDeltaWriter.cs,WriteDataCommand,The following statement contains a magic number: var buffer = new byte[Math.Min((int)length' 1024 * 1024)];
Magic Number,Octodiff.Core,BinaryDeltaWriter,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\BinaryDeltaWriter.cs,WriteDataCommand,The following statement contains a magic number: var buffer = new byte[Math.Min((int)length' 1024 * 1024)];
Magic Number,Octodiff.Core,DeltaApplier,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\DeltaApplier.cs,Apply,The following statement contains a magic number: delta.Apply(                  writeData: (data) => outputStream.Write(data' 0' data.Length)'                  copy: (startPosition' length) =>                  {                      basisFileStream.Seek(startPosition' SeekOrigin.Begin);                        var buffer = new byte[4*1024*1024];                      int read;                      long soFar = 0;                      while ((read = basisFileStream.Read(buffer' 0' (int)Math.Min(length - soFar' buffer.Length))) > 0)                      {                          soFar += read;                          outputStream.Write(buffer' 0' read);                      }                  });
Magic Number,Octodiff.Core,DeltaApplier,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\DeltaApplier.cs,Apply,The following statement contains a magic number: delta.Apply(                  writeData: (data) => outputStream.Write(data' 0' data.Length)'                  copy: (startPosition' length) =>                  {                      basisFileStream.Seek(startPosition' SeekOrigin.Begin);                        var buffer = new byte[4*1024*1024];                      int read;                      long soFar = 0;                      while ((read = basisFileStream.Read(buffer' 0' (int)Math.Min(length - soFar' buffer.Length))) > 0)                      {                          soFar += read;                          outputStream.Write(buffer' 0' read);                      }                  });
Magic Number,Octodiff.Core,DeltaApplier,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\DeltaApplier.cs,Apply,The following statement contains a magic number: delta.Apply(                  writeData: (data) => outputStream.Write(data' 0' data.Length)'                  copy: (startPosition' length) =>                  {                      basisFileStream.Seek(startPosition' SeekOrigin.Begin);                        var buffer = new byte[4*1024*1024];                      int read;                      long soFar = 0;                      while ((read = basisFileStream.Read(buffer' 0' (int)Math.Min(length - soFar' buffer.Length))) > 0)                      {                          soFar += read;                          outputStream.Write(buffer' 0' read);                      }                  });
Magic Number,Octodiff.Diagnostics,ConsoleProgressReporter,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Diagnostics\ConsoleProgressReporter.cs,ReportProgress,The following statement contains a magic number: var percent = (int)((double)currentPosition/total * 100d + 0.5);
Magic Number,Octodiff.Diagnostics,ConsoleProgressReporter,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Diagnostics\ConsoleProgressReporter.cs,ReportProgress,The following statement contains a magic number: var percent = (int)((double)currentPosition/total * 100d + 0.5);
Magic Number,Octodiff.Diagnostics,ConsoleProgressReporter,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Diagnostics\ConsoleProgressReporter.cs,ReportProgress,The following statement contains a magic number: progressPercentage != percent && percent % 10 == 0
Magic Number,Octodiff,Program,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Program.cs,Main,The following statement contains a magic number: return 4;
Missing Default,Octodiff.CommandLine,OptionSet,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\CommandLine\Support\NDesk.Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType)                  {                      case OptionValueType.None:                          c.OptionValues.Add(n);                          c.Option.Invoke(c);                          break;                      case OptionValueType.Optional:                      case OptionValueType.Required:                          ParseValue(v' c);                          break;                  }
Missing Default,Octodiff.Core,DefaultChecksumSupportedAlgorithm,C:\research\architectureSmells\repos\OctopusDeploy_Octodiff\source\Octodiff\Core\SupportedAlgorithms.cs,Create,The following switch statement is missing a default case: switch (algorithm)              {                  case "Adler32":                      return Adler32Rolling();                  case "Adler32V2":                      return Adler32Rolling(true);              }
