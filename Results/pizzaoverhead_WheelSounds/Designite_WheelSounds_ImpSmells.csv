Implementation smell,Namespace,Class,File,Method,Description
Complex Method,WheelSounds,FSwheelAdapter,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\FSwheelAdapter.cs,InitializeOnce,Cyclomatic complexity of the method is 9
Complex Method,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,Cyclomatic complexity of the method is 10
Long Statement,WheelSounds,FSwheelAdapter,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\FSwheelAdapter.cs,InitializeOnce,The length of the statement  "				WheelClass_wheelColliderField = WheelClassType.GetField (MEMBER_NAME_WHEEL_COLLIDER' BindingFlags.Public | BindingFlags.Instance); " is 130.
Complex Conditional,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The conditional expression  "WheelModule.HasMotor && WheelModule.MotorEnabled && !WheelModule.Damaged && averageRpm > 0.5"  is complex.
Magic Number,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The following statement contains a magic number: if (soundsEnabled) {  	if (WheelSound == null) {  		Debug.LogError ("WheelSounds on update: Component was null");  		return;  	}  	if (WheelModule == null || !WheelModule.IsValid) {  		soundsEnabled = false;  		return;  	}  	if (!soundInVacuum && vessel.atmDensity <= 0) {  		WheelSound.audio.Stop ();  		return;  	}  	double totalRpm = 0d;  	int wheelCount = 0;  	foreach (WheelCollider wheelCollider in WheelModule.Wheels) {  		totalRpm += Math.Abs (wheelCollider.rpm);  		wheelCount++;  	}  	double averageRpm = totalRpm / wheelCount;  	try {  		if (WheelModule.HasMotor && WheelModule.MotorEnabled && !WheelModule.Damaged && averageRpm > 0.5) {  			WheelSound.audio.pitch = (float)(Math.Sqrt (averageRpm)) / 13;  			if (averageRpm < 100) {  				WheelSound.audio.volume = (float)Math.Max (wheelSoundVolume * GameSettings.SHIP_VOLUME * averageRpm / 100f' 0.006f);  			}  			if (!WheelSound.audio.isPlaying)  				WheelSound.audio.Play ();  		}  		else  			WheelSound.audio.Stop ();  	}  	catch (Exception ex) {  		Debug.LogError ("WheelSounds: " + ex.Message);  	}  }  
Magic Number,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The following statement contains a magic number: if (soundsEnabled) {  	if (WheelSound == null) {  		Debug.LogError ("WheelSounds on update: Component was null");  		return;  	}  	if (WheelModule == null || !WheelModule.IsValid) {  		soundsEnabled = false;  		return;  	}  	if (!soundInVacuum && vessel.atmDensity <= 0) {  		WheelSound.audio.Stop ();  		return;  	}  	double totalRpm = 0d;  	int wheelCount = 0;  	foreach (WheelCollider wheelCollider in WheelModule.Wheels) {  		totalRpm += Math.Abs (wheelCollider.rpm);  		wheelCount++;  	}  	double averageRpm = totalRpm / wheelCount;  	try {  		if (WheelModule.HasMotor && WheelModule.MotorEnabled && !WheelModule.Damaged && averageRpm > 0.5) {  			WheelSound.audio.pitch = (float)(Math.Sqrt (averageRpm)) / 13;  			if (averageRpm < 100) {  				WheelSound.audio.volume = (float)Math.Max (wheelSoundVolume * GameSettings.SHIP_VOLUME * averageRpm / 100f' 0.006f);  			}  			if (!WheelSound.audio.isPlaying)  				WheelSound.audio.Play ();  		}  		else  			WheelSound.audio.Stop ();  	}  	catch (Exception ex) {  		Debug.LogError ("WheelSounds: " + ex.Message);  	}  }  
Magic Number,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The following statement contains a magic number: if (soundsEnabled) {  	if (WheelSound == null) {  		Debug.LogError ("WheelSounds on update: Component was null");  		return;  	}  	if (WheelModule == null || !WheelModule.IsValid) {  		soundsEnabled = false;  		return;  	}  	if (!soundInVacuum && vessel.atmDensity <= 0) {  		WheelSound.audio.Stop ();  		return;  	}  	double totalRpm = 0d;  	int wheelCount = 0;  	foreach (WheelCollider wheelCollider in WheelModule.Wheels) {  		totalRpm += Math.Abs (wheelCollider.rpm);  		wheelCount++;  	}  	double averageRpm = totalRpm / wheelCount;  	try {  		if (WheelModule.HasMotor && WheelModule.MotorEnabled && !WheelModule.Damaged && averageRpm > 0.5) {  			WheelSound.audio.pitch = (float)(Math.Sqrt (averageRpm)) / 13;  			if (averageRpm < 100) {  				WheelSound.audio.volume = (float)Math.Max (wheelSoundVolume * GameSettings.SHIP_VOLUME * averageRpm / 100f' 0.006f);  			}  			if (!WheelSound.audio.isPlaying)  				WheelSound.audio.Play ();  		}  		else  			WheelSound.audio.Stop ();  	}  	catch (Exception ex) {  		Debug.LogError ("WheelSounds: " + ex.Message);  	}  }  
Magic Number,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The following statement contains a magic number: try {  	if (WheelModule.HasMotor && WheelModule.MotorEnabled && !WheelModule.Damaged && averageRpm > 0.5) {  		WheelSound.audio.pitch = (float)(Math.Sqrt (averageRpm)) / 13;  		if (averageRpm < 100) {  			WheelSound.audio.volume = (float)Math.Max (wheelSoundVolume * GameSettings.SHIP_VOLUME * averageRpm / 100f' 0.006f);  		}  		if (!WheelSound.audio.isPlaying)  			WheelSound.audio.Play ();  	}  	else  		WheelSound.audio.Stop ();  }  catch (Exception ex) {  	Debug.LogError ("WheelSounds: " + ex.Message);  }  
Magic Number,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The following statement contains a magic number: try {  	if (WheelModule.HasMotor && WheelModule.MotorEnabled && !WheelModule.Damaged && averageRpm > 0.5) {  		WheelSound.audio.pitch = (float)(Math.Sqrt (averageRpm)) / 13;  		if (averageRpm < 100) {  			WheelSound.audio.volume = (float)Math.Max (wheelSoundVolume * GameSettings.SHIP_VOLUME * averageRpm / 100f' 0.006f);  		}  		if (!WheelSound.audio.isPlaying)  			WheelSound.audio.Play ();  	}  	else  		WheelSound.audio.Stop ();  }  catch (Exception ex) {  	Debug.LogError ("WheelSounds: " + ex.Message);  }  
Magic Number,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The following statement contains a magic number: try {  	if (WheelModule.HasMotor && WheelModule.MotorEnabled && !WheelModule.Damaged && averageRpm > 0.5) {  		WheelSound.audio.pitch = (float)(Math.Sqrt (averageRpm)) / 13;  		if (averageRpm < 100) {  			WheelSound.audio.volume = (float)Math.Max (wheelSoundVolume * GameSettings.SHIP_VOLUME * averageRpm / 100f' 0.006f);  		}  		if (!WheelSound.audio.isPlaying)  			WheelSound.audio.Play ();  	}  	else  		WheelSound.audio.Stop ();  }  catch (Exception ex) {  	Debug.LogError ("WheelSounds: " + ex.Message);  }  
Magic Number,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The following statement contains a magic number: if (WheelModule.HasMotor && WheelModule.MotorEnabled && !WheelModule.Damaged && averageRpm > 0.5) {  	WheelSound.audio.pitch = (float)(Math.Sqrt (averageRpm)) / 13;  	if (averageRpm < 100) {  		WheelSound.audio.volume = (float)Math.Max (wheelSoundVolume * GameSettings.SHIP_VOLUME * averageRpm / 100f' 0.006f);  	}  	if (!WheelSound.audio.isPlaying)  		WheelSound.audio.Play ();  }  else  	WheelSound.audio.Stop ();  
Magic Number,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The following statement contains a magic number: if (WheelModule.HasMotor && WheelModule.MotorEnabled && !WheelModule.Damaged && averageRpm > 0.5) {  	WheelSound.audio.pitch = (float)(Math.Sqrt (averageRpm)) / 13;  	if (averageRpm < 100) {  		WheelSound.audio.volume = (float)Math.Max (wheelSoundVolume * GameSettings.SHIP_VOLUME * averageRpm / 100f' 0.006f);  	}  	if (!WheelSound.audio.isPlaying)  		WheelSound.audio.Play ();  }  else  	WheelSound.audio.Stop ();  
Magic Number,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The following statement contains a magic number: if (WheelModule.HasMotor && WheelModule.MotorEnabled && !WheelModule.Damaged && averageRpm > 0.5) {  	WheelSound.audio.pitch = (float)(Math.Sqrt (averageRpm)) / 13;  	if (averageRpm < 100) {  		WheelSound.audio.volume = (float)Math.Max (wheelSoundVolume * GameSettings.SHIP_VOLUME * averageRpm / 100f' 0.006f);  	}  	if (!WheelSound.audio.isPlaying)  		WheelSound.audio.Play ();  }  else  	WheelSound.audio.Stop ();  
Magic Number,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The following statement contains a magic number: WheelSound.audio.pitch = (float)(Math.Sqrt (averageRpm)) / 13;  
Magic Number,WheelSounds,WheelSounds,C:\repos\pizzaoverhead_WheelSounds\WheelSounds\WheelSounds.cs,OnUpdate,The following statement contains a magic number: if (averageRpm < 100) {  	WheelSound.audio.volume = (float)Math.Max (wheelSoundVolume * GameSettings.SHIP_VOLUME * averageRpm / 100f' 0.006f);  }  
