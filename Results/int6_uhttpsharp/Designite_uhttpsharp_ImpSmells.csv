Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,uhttpsharp,HttpRequest,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpRequest.cs,HttpRequest,The method has 7 parameters.
Long Parameter List,uhttpsharp,HttpResponse,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpResponse.cs,HttpResponse,The method has 5 parameters.
Long Statement,uhttpsharp.Handlers,ClassRouter,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\ClassRouter.cs,CreateIndexerFunction,The length of the statement  "		}' Expression.IfThen (Expression.Call (tryParseMethod' inputObject' inputConvertedVar)' Expression.Return (returnTarget' returnValue))' returnLabel); " is 149.
Long Statement,uhttpsharp.Handlers,ClassRouter,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\ClassRouter.cs,CreateIndexerFunction,The length of the statement  "	return Expression.Lambda<Func<IHttpContext' T' string' Task<T>>> (body' httpContext' inputHandler' inputObject).Compile (); " is 123.
Long Statement,uhttpsharp.Handlers,ClassRouter,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\ClassRouter.cs,GetIndexer,The length of the statement  "	var indexer = arg.GetMethods ().SingleOrDefault (m => Attribute.IsDefined (m' typeof(IndexerAttribute)) && m.GetParameters ().Length == 2 && typeof(Task<IHttpRequestHandler>).IsAssignableFrom (m.ReturnType)); " is 208.
Long Statement,uhttpsharp.Handlers,ControllerHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,GenerateRouteFunction,The length of the statement  "	return Expression.Lambda<Func<IController' IController>> (Expression.Call (Expression.Convert (instance' getter.DeclaringType)' getter)' instance).Compile (); " is 158.
Long Statement,uhttpsharp.Handlers,ControllerHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,LoadRoutes,The length of the statement  "				foreach (var prop in controllerType.GetProperties (BindingFlags.Instance | BindingFlags.Public).Where (p => p.PropertyType == typeof(IController))) { " is 149.
Long Statement,uhttpsharp.Handlers,ControllerHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,CreateControllerFunction,The length of the statement  "	var foundMethod = (from method in controllerMethod.ControllerType.GetMethods (BindingFlags.Instance | BindingFlags.Public) " is 122.
Long Statement,uhttpsharp.Handlers,ControllerHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,CreateControllerFunction,The length of the statement  "		body.Add (Expression.Assign (variable' Expression.Call (Expression.Constant (modelBindingAttribute)' modelBindingGetMethod.MakeGenericMethod (parameter.ParameterType)' httpContextArgument' modelBinderArgument))); " is 212.
Long Statement,uhttpsharp.Handlers,ControllerHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,CreateControllerFunction,The length of the statement  "			body.Add (Expression.IfThen (Expression.Equal (variable' Expression.Constant (null))' Expression.Call (errorContainerVariable' "Log"' Type.EmptyTypes' Expression.Constant (parameter.Name + " Is not found (null) and not marked as nullable.")))); " is 244.
Long Statement,uhttpsharp.Handlers,ControllerHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,CreateControllerFunction,The length of the statement  "			body.Add (Expression.IfThen (Expression.NotEqual (variable' Expression.Constant (null))' Expression.Call (variable' "Validate"' Type.EmptyTypes' errorContainerVariable))); " is 171.
Long Statement,uhttpsharp.Handlers,ControllerHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,CreateControllerFunction,The length of the statement  "	var methodCallExp = Expression.Call (Expression.Convert (controllerArgument' controllerMethod.ControllerType)' foundMethod' variables); " is 135.
Long Statement,uhttpsharp.Handlers,ControllerHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,CreateControllerFunction,The length of the statement  "	})' Expression.Assign (errorContainerVariable' Expression.New (typeof(ErrorContainer)))' parameterBindingExpression' Expression.IfThen (Expression.Not (Expression.Property (errorContainerVariable' "Any"))' Expression.Return (labelTarget' methodCallExp))' Expression.Label (labelTarget' Expression.Call (errorContainerVariable' "GetResponse"' Type.EmptyTypes))); " is 361.
Long Statement,uhttpsharp.Handlers,FileHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\FileHandler.cs,Handle,The length of the statement  "	context.Response = new HttpResponse (GetContentType (path)' File.OpenRead (path)' context.Request.Headers.KeepAliveConnection ()); " is 130.
Long Statement,uhttpsharp.Handlers,JsonResponseProvider,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\JsonResponseProvider.cs,Provide,The length of the statement  "	return Task.FromResult<IHttpResponse> (new HttpResponse (responseCode' "application/json; charset=utf-8"' memoryStream' true)); " is 127.
Long Statement,uhttpsharp.Handlers.Compression,CompressionHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Handlers\Compression\CompressionHandler.cs,Handle,The length of the statement  "	var compressor = _compressors.FirstOrDefault (c => encodings.Contains (c.Name' StringComparer.InvariantCultureIgnoreCase)); " is 123.
Long Statement,uhttpsharp.Headers,ListHttpHeaders,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Headers\HttpHeaders.cs,GetByName,The length of the statement  "	return _values.Where (kvp => kvp.Key.Equals (name' StringComparison.InvariantCultureIgnoreCase)).Select (kvp => kvp.Value).First (); " is 132.
Long Statement,uhttpsharp.Headers,ListHttpHeaders,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Headers\HttpHeaders.cs,TryGetByName,The length of the statement  "	value = _values.Where (kvp => kvp.Key.Equals (name' StringComparison.InvariantCultureIgnoreCase)).Select (kvp => kvp.Value).FirstOrDefault (); " is 142.
Long Statement,uhttpsharp.Headers,HttpHeadersExtensions,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Headers\HttpHeadersExtensions.cs,KeepAliveConnection,The length of the statement  "	return headers.TryGetByName ("connection"' out value) && value.Equals ("Keep-Alive"' StringComparison.InvariantCultureIgnoreCase); " is 130.
Long Statement,uhttpsharp,HttpClientHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The length of the statement  "			var limitedStream = new NotFlushingStream (new LimitedStream (_stream' readLimit: 1024 * 1024' writeLimit: 1024 * 1024)); " is 121.
Long Statement,uhttpsharp,HttpClientHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpClient.cs,WriteResponse,The length of the statement  "	await writer.WriteLineAsync (string.Format ("HTTP/1.1 {0} {1}"' (int)response.ResponseCode' response.ResponseCode)).ConfigureAwait (false); " is 139.
Long Statement,uhttpsharp,StringHttpResponse,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpResponse.cs,Create,The length of the statement  "		new KeyValuePair<string' string> ("content-length"' Encoding.UTF8.GetByteCount (body).ToString (CultureInfo.InvariantCulture))' " is 127.
Long Statement,uhttpsharp,HttpResponse,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpResponse.cs,CreateWithMessage,The length of the statement  "	return new HttpResponse (code' string.Format ("<html><head><title>{0}</title></head><body><h1>{0}</h1><hr>{1}</body></html>"' message' body)' keepAliveConnection); " is 163.
Long Statement,uhttpsharp.ModelBinders,ModelBinder,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\ModelBinders\ModelBinder.cs,Get,The length of the statement  "	var settedValues = retVal.GetType ().GetProperties (BindingFlags.Instance | BindingFlags.Public).Where (p => headers.TryGetByName (prefix + "[" + p.Name + "]"' out val)).ToList (); " is 180.
Long Statement,uhttpsharp.ModelBinders,ModelBinder,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\ModelBinders\ModelBinder.cs,Get,The length of the statement  "			object value = prop.PropertyType.IsPrimitive || prop.PropertyType == typeof(string) ? Convert.ChangeType (stringValue' prop.PropertyType) : Get (prop.PropertyType' headers' prefix + "[" + prop.Name + "]"); " is 205.
Long Statement,uhttpsharp.RequestProviders,HttpRequestProvider,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\RequestProviders\HttpRequestProvider.cs,Provide,The length of the statement  "	IHttpHeaders headers = new HttpHeaders (headersRaw.ToDictionary (k => k.Key' k => k.Value' StringComparer.InvariantCultureIgnoreCase)); " is 135.
Long Statement,uhttpsharp.RequestProviders,HttpRequestProvider,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\RequestProviders\HttpRequestProvider.cs,Provide,The length of the statement  "	return new HttpRequest (headers' httpMethod' httpProtocol' uri' uri.OriginalString.Split (Separators' StringSplitOptions.RemoveEmptyEntries)' queryString' post); " is 161.
Magic Number,uhttpsharp.Headers,QueryStringHttpHeaders,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Headers\QueryStringHttpHeaders.cs,QueryStringHttpHeaders,The following statement contains a magic number: for (int i = 0; i < splittedKeyValues.Length; i += 2) {  	var key = Uri.UnescapeDataString (splittedKeyValues [i]);  	string value = null;  	if (splittedKeyValues.Length > i + 1) {  		value = Uri.UnescapeDataString (splittedKeyValues [i + 1]).Replace ('+'' ' ');  	}  	values [key] = value;  }  
Magic Number,uhttpsharp.Headers,QueryStringHttpHeaders,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\Headers\QueryStringHttpHeaders.cs,QueryStringHttpHeaders,The following statement contains a magic number: i += 2
Magic Number,uhttpsharp,HttpClientHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpClient.cs,HttpClientHandler,The following statement contains a magic number: _stream = new BufferedStream (_client.Stream' 8192);  
Magic Number,uhttpsharp,HttpClientHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: try {  	while (_client.Connected) {  		// TODO : Configuration.  		var limitedStream = new NotFlushingStream (new LimitedStream (_stream' readLimit: 1024 * 1024' writeLimit: 1024 * 1024));  		var streamReader = new StreamReader (limitedStream);  		var request = await _requestProvider.Provide (streamReader).ConfigureAwait (false);  		if (request != null) {  			UpdateLastOperationTime ();  			var context = new HttpContext (request' _client.RemoteEndPoint);  			Logger.InfoFormat ("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);  			await _requestHandler (context).ConfigureAwait (false);  			if (context.Response != null) {  				var streamWriter = new StreamWriter (limitedStream) {  					AutoFlush = false  				};  				await WriteResponse (context' streamWriter).ConfigureAwait (false);  				await limitedStream.ExplicitFlushAsync ().ConfigureAwait (false);  				if (!request.Headers.KeepAliveConnection () || context.Response.CloseConnection) {  					_client.Close ();  				}  			}  			UpdateLastOperationTime ();  		} else {  			_client.Close ();  		}  	}  } catch (Exception e) {  	// Hate people who make bad calls.  	Logger.Warn (string.Format ("Error while serving : {0}"' _remoteEndPoint)' e);  	_client.Close ();  }  
Magic Number,uhttpsharp,HttpClientHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: try {  	while (_client.Connected) {  		// TODO : Configuration.  		var limitedStream = new NotFlushingStream (new LimitedStream (_stream' readLimit: 1024 * 1024' writeLimit: 1024 * 1024));  		var streamReader = new StreamReader (limitedStream);  		var request = await _requestProvider.Provide (streamReader).ConfigureAwait (false);  		if (request != null) {  			UpdateLastOperationTime ();  			var context = new HttpContext (request' _client.RemoteEndPoint);  			Logger.InfoFormat ("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);  			await _requestHandler (context).ConfigureAwait (false);  			if (context.Response != null) {  				var streamWriter = new StreamWriter (limitedStream) {  					AutoFlush = false  				};  				await WriteResponse (context' streamWriter).ConfigureAwait (false);  				await limitedStream.ExplicitFlushAsync ().ConfigureAwait (false);  				if (!request.Headers.KeepAliveConnection () || context.Response.CloseConnection) {  					_client.Close ();  				}  			}  			UpdateLastOperationTime ();  		} else {  			_client.Close ();  		}  	}  } catch (Exception e) {  	// Hate people who make bad calls.  	Logger.Warn (string.Format ("Error while serving : {0}"' _remoteEndPoint)' e);  	_client.Close ();  }  
Magic Number,uhttpsharp,HttpClientHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: try {  	while (_client.Connected) {  		// TODO : Configuration.  		var limitedStream = new NotFlushingStream (new LimitedStream (_stream' readLimit: 1024 * 1024' writeLimit: 1024 * 1024));  		var streamReader = new StreamReader (limitedStream);  		var request = await _requestProvider.Provide (streamReader).ConfigureAwait (false);  		if (request != null) {  			UpdateLastOperationTime ();  			var context = new HttpContext (request' _client.RemoteEndPoint);  			Logger.InfoFormat ("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);  			await _requestHandler (context).ConfigureAwait (false);  			if (context.Response != null) {  				var streamWriter = new StreamWriter (limitedStream) {  					AutoFlush = false  				};  				await WriteResponse (context' streamWriter).ConfigureAwait (false);  				await limitedStream.ExplicitFlushAsync ().ConfigureAwait (false);  				if (!request.Headers.KeepAliveConnection () || context.Response.CloseConnection) {  					_client.Close ();  				}  			}  			UpdateLastOperationTime ();  		} else {  			_client.Close ();  		}  	}  } catch (Exception e) {  	// Hate people who make bad calls.  	Logger.Warn (string.Format ("Error while serving : {0}"' _remoteEndPoint)' e);  	_client.Close ();  }  
Magic Number,uhttpsharp,HttpClientHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: try {  	while (_client.Connected) {  		// TODO : Configuration.  		var limitedStream = new NotFlushingStream (new LimitedStream (_stream' readLimit: 1024 * 1024' writeLimit: 1024 * 1024));  		var streamReader = new StreamReader (limitedStream);  		var request = await _requestProvider.Provide (streamReader).ConfigureAwait (false);  		if (request != null) {  			UpdateLastOperationTime ();  			var context = new HttpContext (request' _client.RemoteEndPoint);  			Logger.InfoFormat ("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);  			await _requestHandler (context).ConfigureAwait (false);  			if (context.Response != null) {  				var streamWriter = new StreamWriter (limitedStream) {  					AutoFlush = false  				};  				await WriteResponse (context' streamWriter).ConfigureAwait (false);  				await limitedStream.ExplicitFlushAsync ().ConfigureAwait (false);  				if (!request.Headers.KeepAliveConnection () || context.Response.CloseConnection) {  					_client.Close ();  				}  			}  			UpdateLastOperationTime ();  		} else {  			_client.Close ();  		}  	}  } catch (Exception e) {  	// Hate people who make bad calls.  	Logger.Warn (string.Format ("Error while serving : {0}"' _remoteEndPoint)' e);  	_client.Close ();  }  
Magic Number,uhttpsharp,HttpClientHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: while (_client.Connected) {  	// TODO : Configuration.  	var limitedStream = new NotFlushingStream (new LimitedStream (_stream' readLimit: 1024 * 1024' writeLimit: 1024 * 1024));  	var streamReader = new StreamReader (limitedStream);  	var request = await _requestProvider.Provide (streamReader).ConfigureAwait (false);  	if (request != null) {  		UpdateLastOperationTime ();  		var context = new HttpContext (request' _client.RemoteEndPoint);  		Logger.InfoFormat ("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);  		await _requestHandler (context).ConfigureAwait (false);  		if (context.Response != null) {  			var streamWriter = new StreamWriter (limitedStream) {  				AutoFlush = false  			};  			await WriteResponse (context' streamWriter).ConfigureAwait (false);  			await limitedStream.ExplicitFlushAsync ().ConfigureAwait (false);  			if (!request.Headers.KeepAliveConnection () || context.Response.CloseConnection) {  				_client.Close ();  			}  		}  		UpdateLastOperationTime ();  	} else {  		_client.Close ();  	}  }  
Magic Number,uhttpsharp,HttpClientHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: while (_client.Connected) {  	// TODO : Configuration.  	var limitedStream = new NotFlushingStream (new LimitedStream (_stream' readLimit: 1024 * 1024' writeLimit: 1024 * 1024));  	var streamReader = new StreamReader (limitedStream);  	var request = await _requestProvider.Provide (streamReader).ConfigureAwait (false);  	if (request != null) {  		UpdateLastOperationTime ();  		var context = new HttpContext (request' _client.RemoteEndPoint);  		Logger.InfoFormat ("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);  		await _requestHandler (context).ConfigureAwait (false);  		if (context.Response != null) {  			var streamWriter = new StreamWriter (limitedStream) {  				AutoFlush = false  			};  			await WriteResponse (context' streamWriter).ConfigureAwait (false);  			await limitedStream.ExplicitFlushAsync ().ConfigureAwait (false);  			if (!request.Headers.KeepAliveConnection () || context.Response.CloseConnection) {  				_client.Close ();  			}  		}  		UpdateLastOperationTime ();  	} else {  		_client.Close ();  	}  }  
Magic Number,uhttpsharp,HttpClientHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: while (_client.Connected) {  	// TODO : Configuration.  	var limitedStream = new NotFlushingStream (new LimitedStream (_stream' readLimit: 1024 * 1024' writeLimit: 1024 * 1024));  	var streamReader = new StreamReader (limitedStream);  	var request = await _requestProvider.Provide (streamReader).ConfigureAwait (false);  	if (request != null) {  		UpdateLastOperationTime ();  		var context = new HttpContext (request' _client.RemoteEndPoint);  		Logger.InfoFormat ("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);  		await _requestHandler (context).ConfigureAwait (false);  		if (context.Response != null) {  			var streamWriter = new StreamWriter (limitedStream) {  				AutoFlush = false  			};  			await WriteResponse (context' streamWriter).ConfigureAwait (false);  			await limitedStream.ExplicitFlushAsync ().ConfigureAwait (false);  			if (!request.Headers.KeepAliveConnection () || context.Response.CloseConnection) {  				_client.Close ();  			}  		}  		UpdateLastOperationTime ();  	} else {  		_client.Close ();  	}  }  
Magic Number,uhttpsharp,HttpClientHandler,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: while (_client.Connected) {  	// TODO : Configuration.  	var limitedStream = new NotFlushingStream (new LimitedStream (_stream' readLimit: 1024 * 1024' writeLimit: 1024 * 1024));  	var streamReader = new StreamReader (limitedStream);  	var request = await _requestProvider.Provide (streamReader).ConfigureAwait (false);  	if (request != null) {  		UpdateLastOperationTime ();  		var context = new HttpContext (request' _client.RemoteEndPoint);  		Logger.InfoFormat ("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);  		await _requestHandler (context).ConfigureAwait (false);  		if (context.Response != null) {  			var streamWriter = new StreamWriter (limitedStream) {  				AutoFlush = false  			};  			await WriteResponse (context' streamWriter).ConfigureAwait (false);  			await limitedStream.ExplicitFlushAsync ().ConfigureAwait (false);  			if (!request.Headers.KeepAliveConnection () || context.Response.CloseConnection) {  				_client.Close ();  			}  		}  		UpdateLastOperationTime ();  	} else {  		_client.Close ();  	}  }  
Magic Number,uhttpsharp,CookiesStorage,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\IHttpContext.cs,CookiesStorage,The following statement contains a magic number: for (int i = 0; i < keyValues.Length; i += 2) {  	var key = keyValues [i];  	var value = keyValues [i + 1];  	_values [key] = value;  }  
Magic Number,uhttpsharp,CookiesStorage,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\IHttpContext.cs,CookiesStorage,The following statement contains a magic number: i += 2
Magic Number,uhttpsharp.RequestProviders,HttpRequestProvider,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\RequestProviders\HttpRequestProvider.cs,Provide,The following statement contains a magic number: if (tokens.Length != 3) {  	return null;  }  
Magic Number,uhttpsharp.RequestProviders,HttpRequestProvider,F:\newReposMay17\int6_uhttpsharp\uhttpsharp\RequestProviders\HttpRequestProvider.cs,SplitHeader,The following statement contains a magic number: return new KeyValuePair<string' string> (header.Substring (0' index)' header.Substring (index + 2));  
