Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,uhttpsharp,HttpRequest,C:\repos\int6_uhttpsharp\uhttpsharp\HttpRequest.cs,HttpRequest,The method has 7 parameters. Parameters: headers' method' protocol' uri' requestParameters' queryString' post
Long Parameter List,uhttpsharp,HttpResponse,C:\repos\int6_uhttpsharp\uhttpsharp\HttpResponse.cs,HttpResponse,The method has 5 parameters. Parameters: code' contentType' contentStream' keepAliveConnection' headers
Long Statement,uhttpsharp.Handlers,ClassRouter,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\ClassRouter.cs,CreateRoute,The length of the statement  "            return Expression.Lambda<Func<IHttpRequestHandler' IHttpRequestHandler>>(propertyConverted' new[] { parameter }).Compile(); " is 123.
Long Statement,uhttpsharp.Handlers,ControllerHandler,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,GenerateRouteFunction,The length of the statement  "            return Expression.Lambda<Func<IController' IController>>(Expression.Call(Expression.Convert(instance' getter.DeclaringType)' getter)' instance).Compile(); " is 154.
Long Statement,uhttpsharp.Handlers,ControllerHandler,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,LoadRoutes,The length of the statement  "                        foreach (var prop in controllerType.GetProperties(BindingFlags.Instance | BindingFlags.Public).Where(p => p.PropertyType == typeof(IController))) " is 145.
Long Statement,uhttpsharp.Handlers,ControllerHandler,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,CreateControllerFunction,The length of the statement  "            var methodCallExp = Expression.Call(Expression.Convert(controllerArgument' controllerMethod.ControllerType)' foundMethod' variables); " is 133.
Long Statement,uhttpsharp.Handlers,ControllerHandler,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,MethodNotFoundControllerFunction,The length of the statement  "            return Task.FromResult<IControllerResponse>(new RenderResponse(HttpResponseCode.MethodNotAllowed' new { Message = "Not Allowed" })); " is 132.
Long Statement,uhttpsharp.Handlers,ControllerRoute,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,Equals,The length of the statement  "                return _controllerType == other._controllerType && string.Equals(_propertyName' other._propertyName' StringComparison.InvariantCultureIgnoreCase); " is 146.
Long Statement,uhttpsharp.Handlers,ControllerRoute,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,GetHashCode,The length of the statement  "                    return ((_controllerType != null ? _controllerType.GetHashCode() : 0) * 397) ^ (_propertyName != null ? _propertyName.ToLowerInvariant().GetHashCode() : 0); " is 156.
Long Statement,uhttpsharp.Handlers,FileHandler,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\FileHandler.cs,Handle,The length of the statement  "            context.Response = new HttpResponse(GetContentType(path)' File.OpenRead(path)' context.Request.Headers.KeepAliveConnection()); " is 126.
Long Statement,uhttpsharp.Handlers,JsonResponseProvider,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\JsonResponseProvider.cs,Provide,The length of the statement  "            var serializer = new JsonSerializer() { ReferenceLoopHandling = ReferenceLoopHandling.Ignore' Formatting = Formatting.Indented}; " is 128.
Long Statement,uhttpsharp.Handlers,JsonResponseProvider,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\JsonResponseProvider.cs,Provide,The length of the statement  "            return Task.FromResult<IHttpResponse>(new HttpResponse(responseCode' "application/json; charset=utf-8"' memoryStream' true)); " is 125.
Long Statement,uhttpsharp.Headers,ListHttpHeaders,C:\repos\int6_uhttpsharp\uhttpsharp\Headers\HttpHeaders.cs,GetByName,The length of the statement  "            return _values.Where(kvp => kvp.Key.Equals(name' StringComparison.InvariantCultureIgnoreCase)).Select(kvp => kvp.Value).First(); " is 128.
Long Statement,uhttpsharp.Headers,ListHttpHeaders,C:\repos\int6_uhttpsharp\uhttpsharp\Headers\HttpHeaders.cs,TryGetByName,The length of the statement  "            value = _values.Where(kvp => kvp.Key.Equals(name' StringComparison.InvariantCultureIgnoreCase)).Select(kvp => kvp.Value).FirstOrDefault(); " is 138.
Long Statement,uhttpsharp,StringHttpResponse,C:\repos\int6_uhttpsharp\uhttpsharp\HttpResponse.cs,Create,The length of the statement  "                new KeyValuePair<string' string>("content-length"' Encoding.UTF8.GetByteCount(body).ToString(CultureInfo.InvariantCulture))'  " is 124.
Long Statement,uhttpsharp.RequestProviders,HttpRequestProvider,C:\repos\int6_uhttpsharp\uhttpsharp\RequestProviders\HttpRequestProvider.cs,Provide,The length of the statement  "            IHttpHeaders headers = new HttpHeaders(headersRaw.ToDictionary(k => k.Key' k => k.Value' StringComparer.InvariantCultureIgnoreCase)); " is 133.
Magic Number,uhttpsharp.Handlers,ClassRouter,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\ClassRouter.cs,GetIndexer,The following statement contains a magic number: var indexer =                  arg.GetMethods().SingleOrDefault(m => Attribute.IsDefined(m' typeof(IndexerAttribute))                                               && m.GetParameters().Length == 2                                               && typeof(Task<IHttpRequestHandler>).IsAssignableFrom(m.ReturnType));
Magic Number,uhttpsharp.Handlers,ControllerMethod,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      return (_controllerType.GetHashCode() * 397) ^ (int)_method;                  }
Magic Number,uhttpsharp.Handlers,ControllerRoute,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\ControllerHandler.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      return ((_controllerType != null ? _controllerType.GetHashCode() : 0) * 397) ^ (_propertyName != null ? _propertyName.ToLowerInvariant().GetHashCode() : 0);                  }
Magic Number,uhttpsharp.Handlers,RestCall,C:\repos\int6_uhttpsharp\uhttpsharp\Handlers\RestHandler.cs,GetHashCode,The following statement contains a magic number: unchecked                  {                      return ((int)_method*397) ^ _entryFull.GetHashCode();                  }
Magic Number,uhttpsharp.Headers,QueryStringHttpHeaders,C:\repos\int6_uhttpsharp\uhttpsharp\Headers\QueryStringHttpHeaders.cs,QueryStringHttpHeaders,The following statement contains a magic number: var values = new Dictionary<string' string>(splittedKeyValues.Length / 2' StringComparer.InvariantCultureIgnoreCase);
Magic Number,uhttpsharp.Headers,QueryStringHttpHeaders,C:\repos\int6_uhttpsharp\uhttpsharp\Headers\QueryStringHttpHeaders.cs,QueryStringHttpHeaders,The following statement contains a magic number: for (int i = 0; i < splittedKeyValues.Length; i += 2)              {                  var key = Uri.UnescapeDataString(splittedKeyValues[i]);                  string value = null;                  if (splittedKeyValues.Length > i + 1)                  {                      value = Uri.UnescapeDataString(splittedKeyValues[i + 1]).Replace('+'' ' ');                      }                                    values[key] = value;              }
Magic Number,uhttpsharp,HttpClientHandler,C:\repos\int6_uhttpsharp\uhttpsharp\HttpClient.cs,HttpClientHandler,The following statement contains a magic number: _stream = new BufferedStream(_client.Stream' 8192);
Magic Number,uhttpsharp,HttpClientHandler,C:\repos\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: try              {                  while (_client.Connected)                  {                      // TODO : Configuration.                      var limitedStream = new NotFlushingStream(new LimitedStream(_stream' readLimit: 1024*1024' writeLimit: 1024*1024));                      var streamReader = new StreamReader(limitedStream);                                            var request = await _requestProvider.Provide(streamReader).ConfigureAwait(false);                        if (request != null)                      {                          UpdateLastOperationTime();                            var context = new HttpContext(request' _client.RemoteEndPoint);                            Logger.InfoFormat("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);                            await _requestHandler(context).ConfigureAwait(false);                            if (context.Response != null)                          {                              var streamWriter = new StreamWriter(limitedStream) { AutoFlush = false };                                                            await WriteResponse(context' streamWriter).ConfigureAwait(false);                              await limitedStream.ExplicitFlushAsync().ConfigureAwait(false);                                if (!request.Headers.KeepAliveConnection() || context.Response.CloseConnection)                              {                                  _client.Close();                              }                          }                            UpdateLastOperationTime();                      }                      else                      {                          _client.Close();                      }                  }              }              catch (Exception e)              {                  // Hate people who make bad calls.                  Logger.Warn(string.Format("Error while serving : {0}"' _remoteEndPoint)' e);                  _client.Close();              }
Magic Number,uhttpsharp,HttpClientHandler,C:\repos\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: try              {                  while (_client.Connected)                  {                      // TODO : Configuration.                      var limitedStream = new NotFlushingStream(new LimitedStream(_stream' readLimit: 1024*1024' writeLimit: 1024*1024));                      var streamReader = new StreamReader(limitedStream);                                            var request = await _requestProvider.Provide(streamReader).ConfigureAwait(false);                        if (request != null)                      {                          UpdateLastOperationTime();                            var context = new HttpContext(request' _client.RemoteEndPoint);                            Logger.InfoFormat("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);                            await _requestHandler(context).ConfigureAwait(false);                            if (context.Response != null)                          {                              var streamWriter = new StreamWriter(limitedStream) { AutoFlush = false };                                                            await WriteResponse(context' streamWriter).ConfigureAwait(false);                              await limitedStream.ExplicitFlushAsync().ConfigureAwait(false);                                if (!request.Headers.KeepAliveConnection() || context.Response.CloseConnection)                              {                                  _client.Close();                              }                          }                            UpdateLastOperationTime();                      }                      else                      {                          _client.Close();                      }                  }              }              catch (Exception e)              {                  // Hate people who make bad calls.                  Logger.Warn(string.Format("Error while serving : {0}"' _remoteEndPoint)' e);                  _client.Close();              }
Magic Number,uhttpsharp,HttpClientHandler,C:\repos\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: try              {                  while (_client.Connected)                  {                      // TODO : Configuration.                      var limitedStream = new NotFlushingStream(new LimitedStream(_stream' readLimit: 1024*1024' writeLimit: 1024*1024));                      var streamReader = new StreamReader(limitedStream);                                            var request = await _requestProvider.Provide(streamReader).ConfigureAwait(false);                        if (request != null)                      {                          UpdateLastOperationTime();                            var context = new HttpContext(request' _client.RemoteEndPoint);                            Logger.InfoFormat("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);                            await _requestHandler(context).ConfigureAwait(false);                            if (context.Response != null)                          {                              var streamWriter = new StreamWriter(limitedStream) { AutoFlush = false };                                                            await WriteResponse(context' streamWriter).ConfigureAwait(false);                              await limitedStream.ExplicitFlushAsync().ConfigureAwait(false);                                if (!request.Headers.KeepAliveConnection() || context.Response.CloseConnection)                              {                                  _client.Close();                              }                          }                            UpdateLastOperationTime();                      }                      else                      {                          _client.Close();                      }                  }              }              catch (Exception e)              {                  // Hate people who make bad calls.                  Logger.Warn(string.Format("Error while serving : {0}"' _remoteEndPoint)' e);                  _client.Close();              }
Magic Number,uhttpsharp,HttpClientHandler,C:\repos\int6_uhttpsharp\uhttpsharp\HttpClient.cs,Process,The following statement contains a magic number: try              {                  while (_client.Connected)                  {                      // TODO : Configuration.                      var limitedStream = new NotFlushingStream(new LimitedStream(_stream' readLimit: 1024*1024' writeLimit: 1024*1024));                      var streamReader = new StreamReader(limitedStream);                                            var request = await _requestProvider.Provide(streamReader).ConfigureAwait(false);                        if (request != null)                      {                          UpdateLastOperationTime();                            var context = new HttpContext(request' _client.RemoteEndPoint);                            Logger.InfoFormat("{1} : Got request {0}"' request.Uri' _client.RemoteEndPoint);                            await _requestHandler(context).ConfigureAwait(false);                            if (context.Response != null)                          {                              var streamWriter = new StreamWriter(limitedStream) { AutoFlush = false };                                                            await WriteResponse(context' streamWriter).ConfigureAwait(false);                              await limitedStream.ExplicitFlushAsync().ConfigureAwait(false);                                if (!request.Headers.KeepAliveConnection() || context.Response.CloseConnection)                              {                                  _client.Close();                              }                          }                            UpdateLastOperationTime();                      }                      else                      {                          _client.Close();                      }                  }              }              catch (Exception e)              {                  // Hate people who make bad calls.                  Logger.Warn(string.Format("Error while serving : {0}"' _remoteEndPoint)' e);                  _client.Close();              }
Magic Number,uhttpsharp,CookiesStorage,C:\repos\int6_uhttpsharp\uhttpsharp\IHttpContext.cs,CookiesStorage,The following statement contains a magic number: for (int i = 0; i < keyValues.Length; i += 2)              {                  var key = keyValues[i];                  var value = keyValues[i + 1];                    _values[key] = value;              }
Magic Number,uhttpsharp.RequestProviders,HttpRequestProvider,C:\repos\int6_uhttpsharp\uhttpsharp\RequestProviders\HttpRequestProvider.cs,Provide,The following statement contains a magic number: if (tokens.Length != 3)              {                  return null;              }
Magic Number,uhttpsharp.RequestProviders,HttpRequestProvider,C:\repos\int6_uhttpsharp\uhttpsharp\RequestProviders\HttpRequestProvider.cs,Provide,The following statement contains a magic number: var httpProtocol = tokens[2];
Magic Number,uhttpsharp.RequestProviders,HttpRequestProvider,C:\repos\int6_uhttpsharp\uhttpsharp\RequestProviders\HttpRequestProvider.cs,SplitHeader,The following statement contains a magic number: return new KeyValuePair<string' string>(header.Substring(0' index)' header.Substring(index + 2));
