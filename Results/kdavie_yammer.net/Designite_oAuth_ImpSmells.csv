Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateSignatureBase,Cyclomatic complexity of the method is 8
Long Parameter List,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateSignatureBase,The method has 10 parameters. Parameters: url' consumerKey' token' tokenSecret' httpMethod' timeStamp' nonce' signatureType' normalizedUrl' normalizedRequestParameters
Long Parameter List,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateSignature,The method has 10 parameters. Parameters: url' consumerKey' consumerSecret' token' tokenSecret' httpMethod' timeStamp' nonce' normalizedUrl' normalizedRequestParameters
Long Parameter List,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateSignature,The method has 11 parameters. Parameters: url' consumerKey' consumerSecret' token' tokenSecret' httpMethod' timeStamp' nonce' signatureType' normalizedUrl' normalizedRequestParameters
Long Statement,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateSignature,The length of the statement  "            return GenerateSignature(url' consumerKey' consumerSecret' token' tokenSecret' httpMethod' timeStamp' nonce' SignatureTypes.HMACSHA1' out normalizedUrl' out normalizedRequestParameters); " is 186.
Long Statement,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateSignature,The length of the statement  "                    //return GenerateSignatureBase(url' consumerKey' token' tokenSecret' httpMethod' timeStamp' nonce' PlainTextSignatureType' out normalizedUrl' out normalizedRequestParameters); " is 175.
Long Statement,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateSignature,The length of the statement  "                    string signatureBase = GenerateSignatureBase(url' consumerKey' token' tokenSecret' httpMethod' timeStamp' nonce' HMACSHA1SignatureType' out normalizedUrl' out normalizedRequestParameters); " is 188.
Long Statement,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateSignature,The length of the statement  "                    hmacsha1.Key = Encoding.ASCII.GetBytes(string.Format("{0}&{1}"' UrlEncode(consumerSecret)' string.IsNullOrEmpty(tokenSecret) ? "" : UrlEncode(tokenSecret))); " is 157.
Complex Conditional,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateSignatureBase,The conditional expression  "!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443))"  is complex.
Magic Number,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443)))              {                  normalizedUrl += ":" + url.Port;              }
Magic Number,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateSignatureBase,The following statement contains a magic number: if (!((url.Scheme == "http" && url.Port == 80) || (url.Scheme == "https" && url.Port == 443)))              {                  normalizedUrl += ":" + url.Port;              }
Magic Number,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateTimeStamp,The following statement contains a magic number: TimeSpan ts = DateTime.UtcNow - new DateTime(1970' 1' 1' 0' 0' 0' 0);
Magic Number,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateNonce,The following statement contains a magic number: return random.Next(123400' 9999999).ToString();
Magic Number,OAuth,OAuthBase,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\OAuthBase.cs,GenerateNonce,The following statement contains a magic number: return random.Next(123400' 9999999).ToString();
Magic Number,OAuth,Rfc3986,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\Rfc3986.cs,SplitAndDecode,The following statement contains a magic number: foreach (string pair in input.Split('&'))              {                  string[] parts = pair.Split('=');                    if (parts.Length != 2)                      throw new FormatException("Pair is not a key-value pair");                    string key = Rfc3986.Decode(parts[0]);                  if (string.IsNullOrEmpty(key))                      throw new FormatException("Key cannot be null or empty");                    string value = Rfc3986.Decode(parts[1]);                    parameters.Add(key' value);              }
Magic Number,OAuth,Rfc3986,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\Rfc3986.cs,EncodeToBytes,The following statement contains a magic number: byte[] outbytes = new byte[inbytes.Length + (unsafeChars * 2)];
Magic Number,OAuth,Rfc3986,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\Rfc3986.cs,EncodeToBytes,The following statement contains a magic number: for (int i = 0; i < inbytes.Length; i++)              {                  byte b = inbytes[i];                    if (NeedsEscaping((char)b))                  {                      outbytes[pos++] = (byte)'%';                      outbytes[pos++] = (byte)IntToHex((b >> 4) & 0xf);                      outbytes[pos++] = (byte)IntToHex(b & 0x0f);                  }                  else                      outbytes[pos++] = b;              }
Magic Number,OAuth,Rfc3986,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\Rfc3986.cs,IntToHex,The following statement contains a magic number: if (n < 0 || n >= 16)                  throw new ArgumentOutOfRangeException("n");
Magic Number,OAuth,Rfc3986,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\Rfc3986.cs,IntToHex,The following statement contains a magic number: if (n <= 9)                  return (char)(n + (int)'0');              else                  return (char)(n - 10 + (int)'A');
Magic Number,OAuth,Rfc3986,C:\repos\kdavie_yammer.net\Yammer Framework\oAuth\Rfc3986.cs,IntToHex,The following statement contains a magic number: if (n <= 9)                  return (char)(n + (int)'0');              else                  return (char)(n - 10 + (int)'A');
