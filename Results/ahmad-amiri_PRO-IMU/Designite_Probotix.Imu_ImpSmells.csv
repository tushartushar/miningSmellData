Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,RegisterLength,Cyclomatic complexity of the method is 15
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,RegisterLength,The following statement contains a magic number: switch (reg) {  case Register.FilteredAngleRoll:  case Register.FilteredAnglePitch:  case Register.FilteredAngleYaw:  case Register.FilteredQ0:  case Register.FilteredQ1:  case Register.FilteredQ2:  case Register.FilteredQ3:  case Register.Beta:  	return 4;  case Register.RawAccelX:  case Register.RawAccelY:  case Register.RawAccelZ:  case Register.RawGyroX:  case Register.RawGyroY:  case Register.RawGyroZ:  case Register.ModelNumber:  	return 2;  //case Register.FirmwareVersion:  //case Register.Id:  //case Register.AutoSend:  //case Register.BaudRate:  //case Register.RawTemprature:  //    return 1;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,RegisterLength,The following statement contains a magic number: switch (reg) {  case Register.FilteredAngleRoll:  case Register.FilteredAnglePitch:  case Register.FilteredAngleYaw:  case Register.FilteredQ0:  case Register.FilteredQ1:  case Register.FilteredQ2:  case Register.FilteredQ3:  case Register.Beta:  	return 4;  case Register.RawAccelX:  case Register.RawAccelY:  case Register.RawAccelZ:  case Register.RawGyroX:  case Register.RawGyroY:  case Register.RawGyroZ:  case Register.ModelNumber:  	return 2;  //case Register.FirmwareVersion:  //case Register.Id:  //case Register.AutoSend:  //case Register.BaudRate:  //case Register.RawTemprature:  //    return 1;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,RegisterLength,The following statement contains a magic number: return 4;  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,RegisterLength,The following statement contains a magic number: return 2;  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.RawAccelX' Register.FilteredAngleYaw);  	RawAccelX = (short)((data [0] << 8) + data [1]);  	RawAccelY = (short)((data [2] << 8) + data [3]);  	RawAccelZ = (short)((data [4] << 8) + data [5]);  	//temp = (short)(data[6] << 8 + data[7]);  	RawGyroX = (short)((data [8] << 8) + data [9]);  	RawGyroY = (short)((data [10] << 8) + data [11]);  	RawGyroZ = (short)((data [12] << 8) + data [13]);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [14];  	q0.Byte1 = data [15];  	q0.Byte2 = data [16];  	q0.Byte3 = data [17];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [18];  	q1.Byte1 = data [19];  	q1.Byte2 = data [20];  	q1.Byte3 = data [21];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [22];  	q2.Byte1 = data [23];  	q2.Byte2 = data [24];  	q2.Byte3 = data [25];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [26];  	q3.Byte1 = data [27];  	q3.Byte2 = data [28];  	q3.Byte3 = data [29];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [30];  	roll.Byte1 = data [31];  	roll.Byte2 = data [32];  	roll.Byte3 = data [33];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [34];  	pitch.Byte1 = data [35];  	pitch.Byte2 = data [36];  	pitch.Byte3 = data [37];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [38];  	yaw.Byte1 = data [39];  	yaw.Byte2 = data [40];  	yaw.Byte3 = data [41];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawAccelX = (short)((data [0] << 8) + data [1]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawAccelY = (short)((data [2] << 8) + data [3]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawAccelY = (short)((data [2] << 8) + data [3]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawAccelY = (short)((data [2] << 8) + data [3]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawAccelZ = (short)((data [4] << 8) + data [5]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawAccelZ = (short)((data [4] << 8) + data [5]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawAccelZ = (short)((data [4] << 8) + data [5]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawGyroX = (short)((data [8] << 8) + data [9]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawGyroX = (short)((data [8] << 8) + data [9]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawGyroX = (short)((data [8] << 8) + data [9]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawGyroY = (short)((data [10] << 8) + data [11]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawGyroY = (short)((data [10] << 8) + data [11]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawGyroY = (short)((data [10] << 8) + data [11]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawGyroZ = (short)((data [12] << 8) + data [13]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawGyroZ = (short)((data [12] << 8) + data [13]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: RawGyroZ = (short)((data [12] << 8) + data [13]);  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q0.Byte0 = data [14];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q0.Byte1 = data [15];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q0.Byte2 = data [16];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q0.Byte3 = data [17];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q1.Byte0 = data [18];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q1.Byte1 = data [19];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q1.Byte2 = data [20];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q1.Byte3 = data [21];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q2.Byte0 = data [22];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q2.Byte1 = data [23];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q2.Byte2 = data [24];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q2.Byte3 = data [25];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q3.Byte0 = data [26];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q3.Byte1 = data [27];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q3.Byte2 = data [28];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: q3.Byte3 = data [29];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: roll.Byte0 = data [30];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: roll.Byte1 = data [31];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: roll.Byte2 = data [32];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: roll.Byte3 = data [33];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: pitch.Byte0 = data [34];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: pitch.Byte1 = data [35];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: pitch.Byte2 = data [36];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: pitch.Byte3 = data [37];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: yaw.Byte0 = data [38];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: yaw.Byte1 = data [39];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: yaw.Byte2 = data [40];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: yaw.Byte3 = data [41];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateAll,The following statement contains a magic number: FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.FilteredQ0' Register.FilteredAngleYaw);  	ByteArrayFloat q0 = new ByteArrayFloat ();  	q0.Byte0 = data [0];  	q0.Byte1 = data [1];  	q0.Byte2 = data [2];  	q0.Byte3 = data [3];  	ByteArrayFloat q1 = new ByteArrayFloat ();  	q1.Byte0 = data [4];  	q1.Byte1 = data [5];  	q1.Byte2 = data [6];  	q1.Byte3 = data [7];  	ByteArrayFloat q2 = new ByteArrayFloat ();  	q2.Byte0 = data [8];  	q2.Byte1 = data [9];  	q2.Byte2 = data [10];  	q2.Byte3 = data [11];  	ByteArrayFloat q3 = new ByteArrayFloat ();  	q3.Byte0 = data [12];  	q3.Byte1 = data [13];  	q3.Byte2 = data [14];  	q3.Byte3 = data [15];  	ByteArrayFloat roll = new ByteArrayFloat ();  	roll.Byte0 = data [16];  	roll.Byte1 = data [17];  	roll.Byte2 = data [18];  	roll.Byte3 = data [19];  	ByteArrayFloat pitch = new ByteArrayFloat ();  	pitch.Byte0 = data [20];  	pitch.Byte1 = data [21];  	pitch.Byte2 = data [22];  	pitch.Byte3 = data [23];  	ByteArrayFloat yaw = new ByteArrayFloat ();  	yaw.Byte0 = data [24];  	yaw.Byte1 = data [25];  	yaw.Byte2 = data [26];  	yaw.Byte3 = data [27];  	Q0 = q0.FloatNumber;  	Q1 = q1.FloatNumber;  	Q2 = q2.FloatNumber;  	Q3 = q3.FloatNumber;  	FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  	FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  	FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q0.Byte2 = data [2];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q0.Byte3 = data [3];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q1.Byte0 = data [4];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q1.Byte1 = data [5];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q1.Byte2 = data [6];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q1.Byte3 = data [7];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q2.Byte0 = data [8];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q2.Byte1 = data [9];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q2.Byte2 = data [10];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q2.Byte3 = data [11];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q3.Byte0 = data [12];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q3.Byte1 = data [13];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q3.Byte2 = data [14];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: q3.Byte3 = data [15];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: roll.Byte0 = data [16];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: roll.Byte1 = data [17];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: roll.Byte2 = data [18];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: roll.Byte3 = data [19];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: pitch.Byte0 = data [20];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: pitch.Byte1 = data [21];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: pitch.Byte2 = data [22];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: pitch.Byte3 = data [23];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: yaw.Byte0 = data [24];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: yaw.Byte1 = data [25];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: yaw.Byte2 = data [26];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: yaw.Byte3 = data [27];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: FilteredAngleRoll = roll.FloatNumber * 180 / Math.PI;  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: FilteredAnglePitch = pitch.FloatNumber * 180 / Math.PI;  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,UpdateFilteredAngles,The following statement contains a magic number: FilteredAngleYaw = yaw.FloatNumber * 180 / Math.PI;  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,GetBeta,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.Beta' 4);  	var beta = new ByteArrayFloat ();  	beta.Byte0 = data [0];  	beta.Byte1 = data [1];  	beta.Byte2 = data [2];  	beta.Byte3 = data [3];  	return beta.FloatNumber;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,GetBeta,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.Beta' 4);  	var beta = new ByteArrayFloat ();  	beta.Byte0 = data [0];  	beta.Byte1 = data [1];  	beta.Byte2 = data [2];  	beta.Byte3 = data [3];  	return beta.FloatNumber;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,GetBeta,The following statement contains a magic number: lock (_key) {  	var data = ReadData (id' Register.Beta' 4);  	var beta = new ByteArrayFloat ();  	beta.Byte0 = data [0];  	beta.Byte1 = data [1];  	beta.Byte2 = data [2];  	beta.Byte3 = data [3];  	return beta.FloatNumber;  }  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,GetBeta,The following statement contains a magic number: beta.Byte2 = data [2];  
Magic Number,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,GetBeta,The following statement contains a magic number: beta.Byte3 = data [3];  
Missing Default,Probotix.Imu,Mpu6050,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.Imu\Mpu6050.cs,RegisterLength,The following switch statement is missing a default case: switch (reg) {  case Register.FilteredAngleRoll:  case Register.FilteredAnglePitch:  case Register.FilteredAngleYaw:  case Register.FilteredQ0:  case Register.FilteredQ1:  case Register.FilteredQ2:  case Register.FilteredQ3:  case Register.Beta:  	return 4;  case Register.RawAccelX:  case Register.RawAccelY:  case Register.RawAccelZ:  case Register.RawGyroX:  case Register.RawGyroY:  case Register.RawGyroZ:  case Register.ModelNumber:  	return 2;  //case Register.FirmwareVersion:  //case Register.Id:  //case Register.AutoSend:  //case Register.BaudRate:  //case Register.RawTemprature:  //    return 1;  }  
