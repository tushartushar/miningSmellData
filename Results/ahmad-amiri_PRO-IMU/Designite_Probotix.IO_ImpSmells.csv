Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,DynamixelNetwork,The following statement contains a magic number: Stream = new SerialPort (portName) {  	DataBits = 8'  	Parity = Parity.None'  	StopBits = StopBits.One'  	DtrEnable = true'  	ReadBufferSize = 2048'  	WriteBufferSize = 2048'  	ReadTimeout = 30'  	WriteTimeout = 20  };  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,DynamixelNetwork,The following statement contains a magic number: Stream = new SerialPort (portName) {  	DataBits = 8'  	Parity = Parity.None'  	StopBits = StopBits.One'  	DtrEnable = true'  	ReadBufferSize = 2048'  	WriteBufferSize = 2048'  	ReadTimeout = 30'  	WriteTimeout = 20  };  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,DynamixelNetwork,The following statement contains a magic number: Stream = new SerialPort (portName) {  	DataBits = 8'  	Parity = Parity.None'  	StopBits = StopBits.One'  	DtrEnable = true'  	ReadBufferSize = 2048'  	WriteBufferSize = 2048'  	ReadTimeout = 30'  	WriteTimeout = 20  };  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,DynamixelNetwork,The following statement contains a magic number: Stream = new SerialPort (portName) {  	DataBits = 8'  	Parity = Parity.None'  	StopBits = StopBits.One'  	DtrEnable = true'  	ReadBufferSize = 2048'  	WriteBufferSize = 2048'  	ReadTimeout = 30'  	WriteTimeout = 20  };  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,DynamixelNetwork,The following statement contains a magic number: Stream = new SerialPort (portName) {  	DataBits = 8'  	Parity = Parity.None'  	StopBits = StopBits.One'  	DtrEnable = true'  	ReadBufferSize = 2048'  	WriteBufferSize = 2048'  	ReadTimeout = 30'  	WriteTimeout = 20  };  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,FetchPacket,The following statement contains a magic number: lock (_key) {  	id = Header;  	int length = 0;  	int error = 0;  	int checksum = 0;  	data = null;  	var state = PacketState.FirstHeader;  	while (true) {  		int newByte;  		try {  			newByte = Stream.ReadByte ();  		}  		catch (Exception e) {  			return false;  		}  		switch (state) {  		case PacketState.FirstHeader:  			if (newByte == Header) {  				state = PacketState.SecondHeader;  			}  			break;  		case PacketState.SecondHeader:  			if (newByte == Header) {  				state = PacketState.Id;  			}  			break;  		case PacketState.Id:  			id = newByte;  			state = PacketState.Length;  			break;  		case PacketState.Length:  			length = newByte - 2;  			state = PacketState.Error;  			break;  		case PacketState.Error:  			error = newByte;  			// TODO: Call Some Events on error conditions   			if (length <= 0) {  				data = null;  				state = PacketState.Checksum;  			}  			else {  				state = PacketState.Parameters;  			}  			break;  		case PacketState.Parameters:  			data = new byte[length];  			data [0] = (byte)newByte;  			length--;  			int offset = 1;  			int count;  			while (length > 0) {  				try {  					count = Stream.Read (data' offset' length);  					length -= count;  					offset += count;  				}  				catch (Exception e) {  					return false;  				}  			}  			state = PacketState.Checksum;  			break;  		case PacketState.Checksum:  			checksum = newByte;  			// TODO: Calculate Checksum and return false if is not eqaul to recieved checksum  			return true;  		}  	}  }  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,FetchPacket,The following statement contains a magic number: while (true) {  	int newByte;  	try {  		newByte = Stream.ReadByte ();  	}  	catch (Exception e) {  		return false;  	}  	switch (state) {  	case PacketState.FirstHeader:  		if (newByte == Header) {  			state = PacketState.SecondHeader;  		}  		break;  	case PacketState.SecondHeader:  		if (newByte == Header) {  			state = PacketState.Id;  		}  		break;  	case PacketState.Id:  		id = newByte;  		state = PacketState.Length;  		break;  	case PacketState.Length:  		length = newByte - 2;  		state = PacketState.Error;  		break;  	case PacketState.Error:  		error = newByte;  		// TODO: Call Some Events on error conditions   		if (length <= 0) {  			data = null;  			state = PacketState.Checksum;  		}  		else {  			state = PacketState.Parameters;  		}  		break;  	case PacketState.Parameters:  		data = new byte[length];  		data [0] = (byte)newByte;  		length--;  		int offset = 1;  		int count;  		while (length > 0) {  			try {  				count = Stream.Read (data' offset' length);  				length -= count;  				offset += count;  			}  			catch (Exception e) {  				return false;  			}  		}  		state = PacketState.Checksum;  		break;  	case PacketState.Checksum:  		checksum = newByte;  		// TODO: Calculate Checksum and return false if is not eqaul to recieved checksum  		return true;  	}  }  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,FetchPacket,The following statement contains a magic number: switch (state) {  case PacketState.FirstHeader:  	if (newByte == Header) {  		state = PacketState.SecondHeader;  	}  	break;  case PacketState.SecondHeader:  	if (newByte == Header) {  		state = PacketState.Id;  	}  	break;  case PacketState.Id:  	id = newByte;  	state = PacketState.Length;  	break;  case PacketState.Length:  	length = newByte - 2;  	state = PacketState.Error;  	break;  case PacketState.Error:  	error = newByte;  	// TODO: Call Some Events on error conditions   	if (length <= 0) {  		data = null;  		state = PacketState.Checksum;  	}  	else {  		state = PacketState.Parameters;  	}  	break;  case PacketState.Parameters:  	data = new byte[length];  	data [0] = (byte)newByte;  	length--;  	int offset = 1;  	int count;  	while (length > 0) {  		try {  			count = Stream.Read (data' offset' length);  			length -= count;  			offset += count;  		}  		catch (Exception e) {  			return false;  		}  	}  	state = PacketState.Checksum;  	break;  case PacketState.Checksum:  	checksum = newByte;  	// TODO: Calculate Checksum and return false if is not eqaul to recieved checksum  	return true;  }  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,FetchPacket,The following statement contains a magic number: length = newByte - 2;  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,WriteInstruction,The following statement contains a magic number: lock (_key) {  	// command packet sent to Dynamixel servo:  	// [0xFF] [0xFF] [id] [length] [...data...] [checksum]  	var instructionPacket = new List<byte> {  		0xFF'  		0xFF'  		(byte)id'  		(byte)(((parms != null) ? parms.Count : 0) + 2)'  		// length is the data-length + 2  		(byte)instruction  	};  	if (parms != null && parms.Count != 0)  		instructionPacket.AddRange (parms);  	var cheksum = 0;  	for (var i = 2; i < instructionPacket.Count; i++) {  		cheksum += instructionPacket [i];  	}  	instructionPacket.Add ((byte)(~(cheksum & 0xff)));  	try {  		Stream.Write (instructionPacket.ToArray ()' 0' instructionPacket.Count);  	}  	catch (Exception e) {  		Console.WriteLine (e.Message);  	}  }  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,WriteInstruction,The following statement contains a magic number: lock (_key) {  	// command packet sent to Dynamixel servo:  	// [0xFF] [0xFF] [id] [length] [...data...] [checksum]  	var instructionPacket = new List<byte> {  		0xFF'  		0xFF'  		(byte)id'  		(byte)(((parms != null) ? parms.Count : 0) + 2)'  		// length is the data-length + 2  		(byte)instruction  	};  	if (parms != null && parms.Count != 0)  		instructionPacket.AddRange (parms);  	var cheksum = 0;  	for (var i = 2; i < instructionPacket.Count; i++) {  		cheksum += instructionPacket [i];  	}  	instructionPacket.Add ((byte)(~(cheksum & 0xff)));  	try {  		Stream.Write (instructionPacket.ToArray ()' 0' instructionPacket.Count);  	}  	catch (Exception e) {  		Console.WriteLine (e.Message);  	}  }  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,WriteInstruction,The following statement contains a magic number: for (var i = 2; i < instructionPacket.Count; i++) {  	cheksum += instructionPacket [i];  }  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,ReadWord,The following statement contains a magic number: return (data [1] << 8) + data [0];  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,WriteWord,The following statement contains a magic number: WriteData (id' registerAddress' new List<byte> {  	(byte)(value & 0xFF)'  	(byte)(value >> 8)  }' flush);  
Magic Number,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,ScanIds,The following statement contains a magic number: if (endId > 253 || endId < 0)  	return null;  
Missing Default,Probotix.IO,DynamixelNetwork,C:\repos\ahmad-amiri_PRO-IMU\PRO-IMU Configurator\Probotix.IO\DynamixelNetwork.cs,FetchPacket,The following switch statement is missing a default case: switch (state) {  case PacketState.FirstHeader:  	if (newByte == Header) {  		state = PacketState.SecondHeader;  	}  	break;  case PacketState.SecondHeader:  	if (newByte == Header) {  		state = PacketState.Id;  	}  	break;  case PacketState.Id:  	id = newByte;  	state = PacketState.Length;  	break;  case PacketState.Length:  	length = newByte - 2;  	state = PacketState.Error;  	break;  case PacketState.Error:  	error = newByte;  	// TODO: Call Some Events on error conditions   	if (length <= 0) {  		data = null;  		state = PacketState.Checksum;  	}  	else {  		state = PacketState.Parameters;  	}  	break;  case PacketState.Parameters:  	data = new byte[length];  	data [0] = (byte)newByte;  	length--;  	int offset = 1;  	int count;  	while (length > 0) {  		try {  			count = Stream.Read (data' offset' length);  			length -= count;  			offset += count;  		}  		catch (Exception e) {  			return false;  		}  	}  	state = PacketState.Checksum;  	break;  case PacketState.Checksum:  	checksum = newByte;  	// TODO: Calculate Checksum and return false if is not eqaul to recieved checksum  	return true;  }  
