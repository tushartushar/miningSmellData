Implementation smell,Namespace,Class,File,Method,Description
Magic Number,Transmit,Program,C:\repos\danm-de_pcsc-sharp\Examples\Transmit\Program.cs,Main,The following statement contains a magic number: using (var context = contextFactory.Establish(SCardScope.System)) {                    var readerNames = context.GetReaders();                  if (NoReaderFound(readerNames)) {                      Console.WriteLine("You need at least one reader in order to run this example.");                      Console.ReadKey();                      return;                  }                    var readerName = ChooseRfidReader(readerNames);                  if (readerName == null) {                      return;                  }                    // 'using' statement to make sure the reader will be disposed (disconnected) on exit                  using (var rfidReader = new SCardReader(context)) {                      var sc = rfidReader.Connect(readerName' SCardShareMode.Shared' SCardProtocol.Any);                      if (sc != SCardError.Success) {                          Console.WriteLine("Could not connect to reader {0}:\n{1}"'                              readerName'                              SCardHelper.StringifyError(sc));                          Console.ReadKey();                          return;                      }                        var apdu = new CommandApdu(IsoCase.Case2Short' rfidReader.ActiveProtocol) {                          CLA = 0xFF'                          Instruction = InstructionCode.GetData'                          P1 = 0x00'                          P2 = 0x00'                          Le = 0 // We don't know the ID tag size                      };                        sc = rfidReader.BeginTransaction();                      if (sc != SCardError.Success) {                          Console.WriteLine("Could not begin transaction.");                          Console.ReadKey();                          return;                      }                        Console.WriteLine("Retrieving the UID .... ");                        var receivePci = new SCardPCI(); // IO returned protocol control information.                      var sendPci = SCardPCI.GetPci(rfidReader.ActiveProtocol);                        var receiveBuffer = new byte[256];                      var command = apdu.ToArray();                        sc = rfidReader.Transmit(                          sendPci' // Protocol Control Information (T0' T1 or Raw)                          command' // command APDU                          receivePci' // returning Protocol Control Information                          ref receiveBuffer); // data buffer                        if (sc != SCardError.Success) {                          Console.WriteLine("Error: " + SCardHelper.StringifyError(sc));                      }                        var responseApdu = new ResponseApdu(receiveBuffer' IsoCase.Case2Short' rfidReader.ActiveProtocol);                      Console.Write("SW1: {0:X2}' SW2: {1:X2}\nUid: {2}"'                          responseApdu.SW1'                          responseApdu.SW2'                          responseApdu.HasData ? BitConverter.ToString(responseApdu.GetData()) : "No uid received");                        rfidReader.EndTransaction(SCardReaderDisposition.Leave);                      rfidReader.Disconnect(SCardReaderDisposition.Reset);                        Console.ReadKey();                  }              }
