Implementation smell,Namespace,Class,File,Method,Description
Long Statement,LogVisualizer.Views,CommandView,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\Views\CommandView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/LogVisualizer;component/views/commandview.xaml"' System.UriKind.Relative); " is 120.
Long Statement,LogVisualizer.Views,RawLoggerView,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\Views\RawLoggerView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/LogVisualizer;component/views/rawloggerview.xaml"' System.UriKind.Relative); " is 122.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\obj\x86\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Empty Catch Block,LogVisualizer.Infrastructure,UdpInterceptor,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\Infrastructure\UdpInterceptor.cs,Start,The method has an empty catch block.
Empty Catch Block,LogVisualizer.Infrastructure,UdpInterceptor,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\Infrastructure\UdpInterceptor.cs,Start,The method has an empty catch block.
Magic Number,LogVisualizer.Infrastructure,UdpInterceptor,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\Infrastructure\UdpInterceptor.cs,UdpInterceptor,The following statement contains a magic number: try              {                  _udpClient = new UdpClient(8080);              }              catch (Exception ex)              {                  throw new ApplicationException("Error when opening socked: " + ex.ToString());              }
Magic Number,LogVisualizer.Infrastructure,UdpInterceptor,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\Infrastructure\UdpInterceptor.cs,Start,The following statement contains a magic number: while (true)              {                  if (_stop)                      break;                  try                  {                      byte[] sent = _udpClient.Receive(ref _ipe);                      String stringValue = Encoding.UTF8.GetString(sent);                      XElement element = XElement.Parse(stringValue);                      LogMessage message = new LogMessage();                      message.FullText = stringValue;                      message.Logger = element.Attribute("logger").Value;                      message.Timestamp = DateTime.Parse(element.Attribute("timestamp").Value);                      message.Level = element.Attribute("level").Value;                      switch (message.Level) {                           case "ERROR":                              message.NumericLevel = 4;                              break;                          case "WARN":                              message.NumericLevel = 3;                              break;                          case "INFO":                              message.NumericLevel = 2;                              break;                          case "DEBUG":                              message.NumericLevel = 1;                              break;                        }                      message.ThreadId = element.Attribute("thread").Value;                      message.Message = (String)element.Element("message");                      message.Username = (String)element.Element("username");                      var exceptionNode = element.Element("exception");                      if (exceptionNode != null) {                          message.Exception = (String) exceptionNode;                      }                      foreach (var dataNode in element.Descendants("data"))                      {                          String key = dataNode.Attribute("name").Value;                          String value = dataNode.Attribute("value").Value;                          message.Properties.Add(key' value);                          switch (key)                          {                              case "op_type":                                  message.OpType = value;                              break;                              case "op_type_id":                                  message.OpTypeId = value;                              break;                          }                      }                      OnLogIntercepted(message);                  }                  catch (SocketException e)                  {                    }                  catch (Exception e)                  {                    }              }
Magic Number,LogVisualizer.Infrastructure,UdpInterceptor,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\Infrastructure\UdpInterceptor.cs,Start,The following statement contains a magic number: while (true)              {                  if (_stop)                      break;                  try                  {                      byte[] sent = _udpClient.Receive(ref _ipe);                      String stringValue = Encoding.UTF8.GetString(sent);                      XElement element = XElement.Parse(stringValue);                      LogMessage message = new LogMessage();                      message.FullText = stringValue;                      message.Logger = element.Attribute("logger").Value;                      message.Timestamp = DateTime.Parse(element.Attribute("timestamp").Value);                      message.Level = element.Attribute("level").Value;                      switch (message.Level) {                           case "ERROR":                              message.NumericLevel = 4;                              break;                          case "WARN":                              message.NumericLevel = 3;                              break;                          case "INFO":                              message.NumericLevel = 2;                              break;                          case "DEBUG":                              message.NumericLevel = 1;                              break;                        }                      message.ThreadId = element.Attribute("thread").Value;                      message.Message = (String)element.Element("message");                      message.Username = (String)element.Element("username");                      var exceptionNode = element.Element("exception");                      if (exceptionNode != null) {                          message.Exception = (String) exceptionNode;                      }                      foreach (var dataNode in element.Descendants("data"))                      {                          String key = dataNode.Attribute("name").Value;                          String value = dataNode.Attribute("value").Value;                          message.Properties.Add(key' value);                          switch (key)                          {                              case "op_type":                                  message.OpType = value;                              break;                              case "op_type_id":                                  message.OpTypeId = value;                              break;                          }                      }                      OnLogIntercepted(message);                  }                  catch (SocketException e)                  {                    }                  catch (Exception e)                  {                    }              }
Magic Number,LogVisualizer.Infrastructure,UdpInterceptor,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\Infrastructure\UdpInterceptor.cs,Start,The following statement contains a magic number: while (true)              {                  if (_stop)                      break;                  try                  {                      byte[] sent = _udpClient.Receive(ref _ipe);                      String stringValue = Encoding.UTF8.GetString(sent);                      XElement element = XElement.Parse(stringValue);                      LogMessage message = new LogMessage();                      message.FullText = stringValue;                      message.Logger = element.Attribute("logger").Value;                      message.Timestamp = DateTime.Parse(element.Attribute("timestamp").Value);                      message.Level = element.Attribute("level").Value;                      switch (message.Level) {                           case "ERROR":                              message.NumericLevel = 4;                              break;                          case "WARN":                              message.NumericLevel = 3;                              break;                          case "INFO":                              message.NumericLevel = 2;                              break;                          case "DEBUG":                              message.NumericLevel = 1;                              break;                        }                      message.ThreadId = element.Attribute("thread").Value;                      message.Message = (String)element.Element("message");                      message.Username = (String)element.Element("username");                      var exceptionNode = element.Element("exception");                      if (exceptionNode != null) {                          message.Exception = (String) exceptionNode;                      }                      foreach (var dataNode in element.Descendants("data"))                      {                          String key = dataNode.Attribute("name").Value;                          String value = dataNode.Attribute("value").Value;                          message.Properties.Add(key' value);                          switch (key)                          {                              case "op_type":                                  message.OpType = value;                              break;                              case "op_type_id":                                  message.OpTypeId = value;                              break;                          }                      }                      OnLogIntercepted(message);                  }                  catch (SocketException e)                  {                    }                  catch (Exception e)                  {                    }              }
Missing Default,LogVisualizer.Infrastructure,UdpInterceptor,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\Infrastructure\UdpInterceptor.cs,Start,The following switch statement is missing a default case: switch (message.Level) {                           case "ERROR":                              message.NumericLevel = 4;                              break;                          case "WARN":                              message.NumericLevel = 3;                              break;                          case "INFO":                              message.NumericLevel = 2;                              break;                          case "DEBUG":                              message.NumericLevel = 1;                              break;                        }
Missing Default,LogVisualizer.Infrastructure,UdpInterceptor,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\Infrastructure\UdpInterceptor.cs,Start,The following switch statement is missing a default case: switch (key)                          {                              case "op_type":                                  message.OpType = value;                              break;                              case "op_type_id":                                  message.OpTypeId = value;                              break;                          }
Missing Default,LogVisualizer.Views,RawLoggerView,C:\repos\andreabalducci_Prxm.Cqrs\LogVisualizer\Views\RawLoggerView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.theView = ((LogVisualizer.Views.RawLoggerView)(target));              return;              }
