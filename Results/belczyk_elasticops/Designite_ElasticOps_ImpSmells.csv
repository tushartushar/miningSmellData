Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,ElasticOps.ViewModels.ManagementScreens,ClusterInfoScreenViewModel,C:\repos\belczyk_elasticops\src\ElasticOps\ViewModels\ManagementScreens\ClusterInfoScreenViewModel.cs,ClusterInfoScreenViewModel,The method has 6 parameters. Parameters: basicInfoViewModel' nodesInfoViewModel' indicesInfoViewModel' documentsInfoViewModel' mappingsInfoViewModel' infrastructure
Long Identifier,ElasticOps.Behaviors,AvalonEditBehavior,C:\repos\belczyk_elasticops\src\ElasticOps\Behaviors\AvalonEditBehavior.cs,PropertyChangedCallback,The length of the parameter dependencyPropertyChangedEventArgs is 34.
Long Statement,ElasticOps.Views,ClusterConnectionView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\ClusterConnectionView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ElasticOps;component/views/clusterconnectionview.xaml"' System.UriKind.Relative); " is 127.
Long Statement,ElasticOps.Views,ElasticPropertyView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\ElasticPropertyView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ElasticOps;component/views/elasticpropertyview.xaml"' System.UriKind.Relative); " is 125.
Long Statement,ElasticOps.Views.ManagementScreens,ConsoleView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\ManagementScreens\ConsoleView.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/ElasticOps;component/views/managementscreens/consoleview.xaml"' System.UriKind.Relative); " is 135.
Long Statement,XamlGeneratedNamespace,GeneratedInternalTypeHelper,C:\repos\belczyk_elasticops\src\ElasticOps\obj\Debug\GeneratedInternalTypeHelper.g.cs,CreateInstance,The length of the statement  "            return System.Activator.CreateInstance(type' ((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)  " is 128.
Empty Catch Block,ElasticOps.ViewModels,QueryViewModel,C:\repos\belczyk_elasticops\src\ElasticOps\ViewModels\ManagementScreens\QueryViewModel.cs,TryFormatJson,The method has an empty catch block.
Magic Number,ElasticOps.Behaviors.AutoComplete,UrlAutoCompleteCollection,C:\repos\belczyk_elasticops\src\ElasticOps\Behaviors\Autocomplete\UrlAutocompleteCollection.cs,UpdateSuggestions,The following statement contains a magic number: if (parts.Count() < 2)                  SuggestIndex(parts);
Magic Number,ElasticOps.Behaviors.AutoComplete,UrlAutoCompleteCollection,C:\repos\belczyk_elasticops\src\ElasticOps\Behaviors\Autocomplete\UrlAutocompleteCollection.cs,UpdateSuggestions,The following statement contains a magic number: if (parts.Count() == 2)                  SuggestType(parts);
Magic Number,ElasticOps.Behaviors.AutoComplete,UrlAutoCompleteCollection,C:\repos\belczyk_elasticops\src\ElasticOps\Behaviors\Autocomplete\UrlAutocompleteCollection.cs,UpdateSuggestions,The following statement contains a magic number: if (parts.Count() == 3)                  SuggestTypeEndpoint(parts);
Magic Number,ElasticOps.Behaviors.AutoComplete,UrlAutoCompleteCollection,C:\repos\belczyk_elasticops\src\ElasticOps\Behaviors\Autocomplete\UrlAutocompleteCollection.cs,SuggestTypeEndpoint,The following statement contains a magic number: var prefix = parts[2];
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Extensions,LongExtensions,C:\repos\belczyk_elasticops\src\ElasticOps\Extensions\LongExtensions.cs,Humanize,The following statement contains a magic number: switch ((long) Math.Floor(exponent))              {                  case 0:                  case 1:                  case 2:                      return number.ToString(CultureInfo.InvariantCulture);                  case 3:                  case 4:                  case 5:                      return (number/1e3).ToString("F1"' CultureInfo.InvariantCulture) + "K";                  case 6:                  case 7:                  case 8:                      return (number/1e6).ToString("F1"' CultureInfo.InvariantCulture) + "M";                  case 9:                  case 10:                  case 11:                      return (number/1e9).ToString("F1"' CultureInfo.InvariantCulture) + "G";                  case 12:                  case 13:                  case 14:                      return (number/1e12).ToString("F1"' CultureInfo.InvariantCulture) + "T";                  case 15:                  case 16:                  case 17:                      return (number/1e15).ToString("F1"' CultureInfo.InvariantCulture) + "P";                  case 18:                  case 19:                  case 20:                      return (number/1e18).ToString("F1"' CultureInfo.InvariantCulture) + "E";                  case 21:                  case 22:                  case 23:                      return (number/1e21).ToString("F1"' CultureInfo.InvariantCulture) + "Z";                  default:                      return (number/1e24).ToString("F1"' CultureInfo.InvariantCulture) + "Y";              }
Magic Number,ElasticOps.Services,ClusterDataCache,C:\repos\belczyk_elasticops\src\ElasticOps\Services\ClusterDataCache.cs,UpdateTypes,The following statement contains a magic number: if (_indexData.ContainsKey(index) && DateTime.Now - _indexData[index].LastUpdated < TimeSpan.FromSeconds(5))                  return;
Magic Number,ElasticOps.ViewModels,PaggerViewModel,C:\repos\belczyk_elasticops\src\ElasticOps\ViewModels\PaggerViewModel.cs,PaggerViewModel,The following statement contains a magic number: PageSizes = new List<long> {25' 50' 100' 250' 500' 1000};
Magic Number,ElasticOps.ViewModels,PaggerViewModel,C:\repos\belczyk_elasticops\src\ElasticOps\ViewModels\PaggerViewModel.cs,PaggerViewModel,The following statement contains a magic number: PageSizes = new List<long> {25' 50' 100' 250' 500' 1000};
Magic Number,ElasticOps.ViewModels,PaggerViewModel,C:\repos\belczyk_elasticops\src\ElasticOps\ViewModels\PaggerViewModel.cs,PaggerViewModel,The following statement contains a magic number: PageSizes = new List<long> {25' 50' 100' 250' 500' 1000};
Magic Number,ElasticOps.ViewModels,PaggerViewModel,C:\repos\belczyk_elasticops\src\ElasticOps\ViewModels\PaggerViewModel.cs,PaggerViewModel,The following statement contains a magic number: PageSizes = new List<long> {25' 50' 100' 250' 500' 1000};
Magic Number,ElasticOps.ViewModels,PaggerViewModel,C:\repos\belczyk_elasticops\src\ElasticOps\ViewModels\PaggerViewModel.cs,PaggerViewModel,The following statement contains a magic number: PageSizes = new List<long> {25' 50' 100' 250' 500' 1000};
Magic Number,ElasticOps.ViewModels,PaggerViewModel,C:\repos\belczyk_elasticops\src\ElasticOps\ViewModels\PaggerViewModel.cs,PaggerViewModel,The following statement contains a magic number: PageSizes = new List<long> {25' 50' 100' 250' 500' 1000};
Magic Number,ElasticOps.Views,ClusterConnectionView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\ClusterConnectionView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.ClusterUri = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Version = ((System.Windows.Controls.TextBlock)(target));              return;              }
Magic Number,ElasticOps.Views,FooterView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\FooterView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.CurrentClusterUri = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.ErrorMessage = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,ElasticOps.Views,Pagger,C:\repos\belczyk_elasticops\src\ElasticOps\Views\Pagger.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PreviousPage = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.PageSizes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.Page = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.NextPage = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,ElasticOps.Views,Pagger,C:\repos\belczyk_elasticops\src\ElasticOps\Views\Pagger.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PreviousPage = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.PageSizes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.Page = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.NextPage = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,ElasticOps.Views,Pagger,C:\repos\belczyk_elasticops\src\ElasticOps\Views\Pagger.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.PreviousPage = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.PageSizes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.Page = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.NextPage = ((System.Windows.Controls.Button)(target));              return;              }
Magic Number,ElasticOps.Views,TypesListView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\TypesListView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.AllIndices = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.TypesForSelectedIndex = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.ShowMarvelIndices = ((System.Windows.Controls.CheckBox)(target));              return;              }
Magic Number,ElasticOps.Views,TypesListView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\TypesListView.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.AllIndices = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.TypesForSelectedIndex = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.ShowMarvelIndices = ((System.Windows.Controls.CheckBox)(target));              return;              }
Missing Default,ElasticOps.Views,ClusterConnectionView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\ClusterConnectionView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.ClusterUri = ((System.Windows.Controls.TextBox)(target));              return;              case 2:              this.Version = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,ElasticOps.Views,FooterView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\FooterView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.CurrentClusterUri = ((System.Windows.Controls.Label)(target));              return;              case 2:              this.ErrorMessage = ((System.Windows.Controls.Label)(target));              return;              }
Missing Default,ElasticOps.Views,Pagger,C:\repos\belczyk_elasticops\src\ElasticOps\Views\Pagger.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.PreviousPage = ((System.Windows.Controls.Button)(target));              return;              case 2:              this.PageSizes = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.Page = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.NextPage = ((System.Windows.Controls.Button)(target));              return;              }
Missing Default,ElasticOps.Views,TypesListView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\TypesListView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.AllIndices = ((System.Windows.Controls.ComboBox)(target));              return;              case 2:              this.TypesForSelectedIndex = ((System.Windows.Controls.ComboBox)(target));              return;              case 3:              this.ShowMarvelIndices = ((System.Windows.Controls.CheckBox)(target));              return;              }
Missing Default,ElasticOps.Views,ElasticPropertyView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\ElasticPropertyView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.CopyToCliboard = ((System.Windows.Controls.Button)(target));              return;              }
Missing Default,ElasticOps.Views.ManagementScreens,ConsoleView,C:\repos\belczyk_elasticops\src\ElasticOps\Views\ManagementScreens\ConsoleView.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.LogEntries = ((System.Windows.Controls.ItemsControl)(target));              return;              }
