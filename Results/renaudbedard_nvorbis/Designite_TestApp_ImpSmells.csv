Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Main,Cyclomatic complexity of the method is 25
Complex Method,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,Cyclomatic complexity of the method is 10
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Main,The following statement contains a magic number: Console.WindowHeight = StreamFiles.Length + 12;
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Main,The following statement contains a magic number: logger.Write(" #  FX Buffering"' 0' 8);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Main,The following statement contains a magic number: logger.Write((i + 1).ToString()' 1' 10 + i);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Main,The following statement contains a magic number: logger.Write(">"' 0' 10);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeVolume,The following statement contains a magic number: logger.Write(@in ? "V" : "v"' 4' 10 + sIdx);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeVolume,The following statement contains a magic number: logger.Write(@in ? "V" : "v"' 4' 10 + sIdx);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeVolume,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      float step;                      do                      {                          step = (float)Math.Min(sw.Elapsed.TotalSeconds / (duration * speed)' 1);                          s.Volume = (to - @from) * step + @from;                          Thread.Sleep(1000 / 60);                      } while (step < 1 && !cts.Token.IsCancellationRequested);                      sw.Stop();                        if (!cts.Token.IsCancellationRequested)                      {                          lock (volumeFades) volumeFades.Remove(s);                          logger.Write(" "' 4' 10 + sIdx);                      }                  }' cts.Token);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeVolume,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      float step;                      do                      {                          step = (float)Math.Min(sw.Elapsed.TotalSeconds / (duration * speed)' 1);                          s.Volume = (to - @from) * step + @from;                          Thread.Sleep(1000 / 60);                      } while (step < 1 && !cts.Token.IsCancellationRequested);                      sw.Stop();                        if (!cts.Token.IsCancellationRequested)                      {                          lock (volumeFades) volumeFades.Remove(s);                          logger.Write(" "' 4' 10 + sIdx);                      }                  }' cts.Token);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeVolume,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      float step;                      do                      {                          step = (float)Math.Min(sw.Elapsed.TotalSeconds / (duration * speed)' 1);                          s.Volume = (to - @from) * step + @from;                          Thread.Sleep(1000 / 60);                      } while (step < 1 && !cts.Token.IsCancellationRequested);                      sw.Stop();                        if (!cts.Token.IsCancellationRequested)                      {                          lock (volumeFades) volumeFades.Remove(s);                          logger.Write(" "' 4' 10 + sIdx);                      }                  }' cts.Token);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeVolume,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      float step;                      do                      {                          step = (float)Math.Min(sw.Elapsed.TotalSeconds / (duration * speed)' 1);                          s.Volume = (to - @from) * step + @from;                          Thread.Sleep(1000 / 60);                      } while (step < 1 && !cts.Token.IsCancellationRequested);                      sw.Stop();                        if (!cts.Token.IsCancellationRequested)                      {                          lock (volumeFades) volumeFades.Remove(s);                          logger.Write(" "' 4' 10 + sIdx);                      }                  }' cts.Token);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeFilter,The following statement contains a magic number: logger.Write(@in ? "F" : "f"' 5' 10 + sIdx);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeFilter,The following statement contains a magic number: logger.Write(@in ? "F" : "f"' 5' 10 + sIdx);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeFilter,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      float step;                      do                      {                          step = (float)Math.Min(sw.Elapsed.TotalSeconds / (duration * speed)' 1);                          s.LowPassHFGain = (to - @from) * step + @from;                          Thread.Sleep(1000 / 60);                      } while (step < 1 && !cts.Token.IsCancellationRequested);                      sw.Stop();                        if (!cts.Token.IsCancellationRequested)                      {                          lock (filterFades) filterFades.Remove(s);                          logger.Write(" "' 5' 10 + sIdx);                      }                  }' cts.Token);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeFilter,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      float step;                      do                      {                          step = (float)Math.Min(sw.Elapsed.TotalSeconds / (duration * speed)' 1);                          s.LowPassHFGain = (to - @from) * step + @from;                          Thread.Sleep(1000 / 60);                      } while (step < 1 && !cts.Token.IsCancellationRequested);                      sw.Stop();                        if (!cts.Token.IsCancellationRequested)                      {                          lock (filterFades) filterFades.Remove(s);                          logger.Write(" "' 5' 10 + sIdx);                      }                  }' cts.Token);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeFilter,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      float step;                      do                      {                          step = (float)Math.Min(sw.Elapsed.TotalSeconds / (duration * speed)' 1);                          s.LowPassHFGain = (to - @from) * step + @from;                          Thread.Sleep(1000 / 60);                      } while (step < 1 && !cts.Token.IsCancellationRequested);                      sw.Stop();                        if (!cts.Token.IsCancellationRequested)                      {                          lock (filterFades) filterFades.Remove(s);                          logger.Write(" "' 5' 10 + sIdx);                      }                  }' cts.Token);
Magic Number,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,FadeFilter,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      float step;                      do                      {                          step = (float)Math.Min(sw.Elapsed.TotalSeconds / (duration * speed)' 1);                          s.LowPassHFGain = (to - @from) * step + @from;                          Thread.Sleep(1000 / 60);                      } while (step < 1 && !cts.Token.IsCancellationRequested);                      sw.Stop();                        if (!cts.Token.IsCancellationRequested)                      {                          lock (filterFades) filterFades.Remove(s);                          logger.Write(" "' 5' 10 + sIdx);                      }                  }' cts.Token);
Magic Number,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,SetStreamIndex,The following statement contains a magic number: streamOffset.Add(stream' new Point(6' index + 10));
Magic Number,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,SetStreamIndex,The following statement contains a magic number: streamOffset.Add(stream' new Point(6' index + 10));
Magic Number,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following statement contains a magic number: switch (eventType)              {                  case LogEventBoolean.IsOpenAlSoft:                      Write("OpenAL Soft [" + (context ? "X" : " ") + "]' "' 0' 5);                      break;                  case LogEventBoolean.XRamSupport:                      Write("X-RAM [" + (context ? "X" : " ") + "]' ");                      break;                  case LogEventBoolean.EfxSupport:                      Write("Effect Extensions [" + (context ? "X" : " ") + "]");                      break;              }
Magic Number,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following statement contains a magic number: switch (eventType)              {                  case LogEventSingle.MemoryUsage:                      var usedHeap = context;                        string[] sizes = { "B"' "KB"' "MB"' "GB" };                      int order = 0;                      while (usedHeap >= 1024 && order + 1 < sizes.Length)                      {                          order++;                          usedHeap = usedHeap / 1024;                      }                        Write(string.Format("Total memory : {0:0.###} {1}          "' usedHeap' sizes[order])' 0' 6);                      break;              }
Magic Number,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following statement contains a magic number: switch (eventType)              {                  case LogEventSingle.MemoryUsage:                      var usedHeap = context;                        string[] sizes = { "B"' "KB"' "MB"' "GB" };                      int order = 0;                      while (usedHeap >= 1024 && order + 1 < sizes.Length)                      {                          order++;                          usedHeap = usedHeap / 1024;                      }                        Write(string.Format("Total memory : {0:0.###} {1}          "' usedHeap' sizes[order])' 0' 6);                      break;              }
Magic Number,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following statement contains a magic number: switch (eventType)              {                  case LogEventSingle.MemoryUsage:                      var usedHeap = context;                        string[] sizes = { "B"' "KB"' "MB"' "GB" };                      int order = 0;                      while (usedHeap >= 1024 && order + 1 < sizes.Length)                      {                          order++;                          usedHeap = usedHeap / 1024;                      }                        Write(string.Format("Total memory : {0:0.###} {1}          "' usedHeap' sizes[order])' 0' 6);                      break;              }
Magic Number,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following statement contains a magic number: switch (eventType)              {                  case LogEvent.BeginPrepare:                      Write("(*"' 7' p.Y);                      SetHOffset(stream' 9);                      break;                  case LogEvent.EndPrepare:                      Write(")"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Play:                      Write("{"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Stop:                      Write("}"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Pause:                      Write("["' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Resume:                      Write("]"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Empty:                      Write(new string(Enumerable.Repeat(' '' Console.BufferWidth - 6).ToArray())' 6' p.Y);                      SetHOffset(stream' 7);                      break;                  case LogEvent.NewPacket:                      Write("."' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.LastPacket:                      Write("|"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.BufferUnderrun:                      Write("!"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;              }
Magic Number,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following statement contains a magic number: switch (eventType)              {                  case LogEvent.BeginPrepare:                      Write("(*"' 7' p.Y);                      SetHOffset(stream' 9);                      break;                  case LogEvent.EndPrepare:                      Write(")"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Play:                      Write("{"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Stop:                      Write("}"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Pause:                      Write("["' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Resume:                      Write("]"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Empty:                      Write(new string(Enumerable.Repeat(' '' Console.BufferWidth - 6).ToArray())' 6' p.Y);                      SetHOffset(stream' 7);                      break;                  case LogEvent.NewPacket:                      Write("."' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.LastPacket:                      Write("|"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.BufferUnderrun:                      Write("!"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;              }
Magic Number,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following statement contains a magic number: switch (eventType)              {                  case LogEvent.BeginPrepare:                      Write("(*"' 7' p.Y);                      SetHOffset(stream' 9);                      break;                  case LogEvent.EndPrepare:                      Write(")"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Play:                      Write("{"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Stop:                      Write("}"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Pause:                      Write("["' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Resume:                      Write("]"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Empty:                      Write(new string(Enumerable.Repeat(' '' Console.BufferWidth - 6).ToArray())' 6' p.Y);                      SetHOffset(stream' 7);                      break;                  case LogEvent.NewPacket:                      Write("."' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.LastPacket:                      Write("|"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.BufferUnderrun:                      Write("!"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;              }
Magic Number,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following statement contains a magic number: switch (eventType)              {                  case LogEvent.BeginPrepare:                      Write("(*"' 7' p.Y);                      SetHOffset(stream' 9);                      break;                  case LogEvent.EndPrepare:                      Write(")"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Play:                      Write("{"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Stop:                      Write("}"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Pause:                      Write("["' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Resume:                      Write("]"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Empty:                      Write(new string(Enumerable.Repeat(' '' Console.BufferWidth - 6).ToArray())' 6' p.Y);                      SetHOffset(stream' 7);                      break;                  case LogEvent.NewPacket:                      Write("."' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.LastPacket:                      Write("|"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.BufferUnderrun:                      Write("!"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;              }
Magic Number,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following statement contains a magic number: switch (eventType)              {                  case LogEvent.BeginPrepare:                      Write("(*"' 7' p.Y);                      SetHOffset(stream' 9);                      break;                  case LogEvent.EndPrepare:                      Write(")"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Play:                      Write("{"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Stop:                      Write("}"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Pause:                      Write("["' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Resume:                      Write("]"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Empty:                      Write(new string(Enumerable.Repeat(' '' Console.BufferWidth - 6).ToArray())' 6' p.Y);                      SetHOffset(stream' 7);                      break;                  case LogEvent.NewPacket:                      Write("."' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.LastPacket:                      Write("|"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.BufferUnderrun:                      Write("!"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;              }
Magic Number,TestApp,NAudioDecodingTests,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\NAudioDecodingTests.cs,TestRaw,The following statement contains a magic number: writer.Write(18);
Magic Number,TestApp,NAudioDecodingTests,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\NAudioDecodingTests.cs,TestRaw,The following statement contains a magic number: writer.Write(vorbis.SampleRate * vorbis.Channels * 2);
Magic Number,TestApp,NAudioDecodingTests,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\NAudioDecodingTests.cs,TestRaw,The following statement contains a magic number: writer.Write((short)(2 * vorbis.Channels));
Magic Number,TestApp,NAudioDecodingTests,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\NAudioDecodingTests.cs,TestRaw,The following statement contains a magic number: writer.Write((short)16);
Magic Number,TestApp,NAudioDecodingTests,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\NAudioDecodingTests.cs,TestRaw,The following statement contains a magic number: var buf = new float[vorbis.SampleRate / 10 * vorbis.Channels];
Magic Number,TestApp,NAudioDecodingTests,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\NAudioDecodingTests.cs,TestRaw,The following statement contains a magic number: var temp = (int)(32767f * buf[i]);
Magic Number,TestApp,NAudioDecodingTests,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\NAudioDecodingTests.cs,TestRaw,The following statement contains a magic number: temp = 32767;
Magic Number,TestApp,NAudioDecodingTests,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\NAudioDecodingTests.cs,TestRaw,The following statement contains a magic number: temp > 32767
Magic Number,TestApp,NAudioDecodingTests,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\NAudioDecodingTests.cs,TestRaw,The following statement contains a magic number: writer.Seek(4' System.IO.SeekOrigin.Begin);
Magic Number,TestApp,NAudioDecodingTests,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\NAudioDecodingTests.cs,TestRaw,The following statement contains a magic number: writer.Write((int)(outFile.Length - 8L));
Magic Number,TestApp,NAudioDecodingTests,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\NAudioDecodingTests.cs,TestRaw,The following statement contains a magic number: writer.Write((int)(outFile.Length - dataPos - 4L));
Missing Default,TestApp,OpenTKStreamingTest,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Main,The following switch statement is missing a default case: switch (lower)                      {                          case 'e': activeSet.ForEach(x => x.Prepare()); break;                          case 'p': activeSet.ForEach(x => x.Play()); break;                          case 'u': activeSet.ForEach(x => x.Pause()); break;                          case 's': activeSet.ForEach(x => x.Stop()); break;                          case 'r': activeSet.ForEach(x => x.Resume()); break;                            case 'l':                              int index = 0;                              activeSet.ForEach(s =>                              {                                  s.IsLooped = !s.IsLooped;                                  logger.Write(s.IsLooped ? "L" : " "' 3' 10 + sIdx + index++);                              });                              break;                            case 'v': FadeVolume(activeSet' true' 1' logger); break;                          case 'b': FadeVolume(activeSet' false' 1' logger); break;                            case 'f': FadeFilter(activeSet' true' 1' logger); break;                          case 'g': FadeFilter(activeSet' false' 1' logger); break;                            case '+':                              logger.Write(" "' 0' 10 + sIdx);                              sIdx++;                              if (sIdx > streams.Length - 1) sIdx = 0;                              logger.Write(">"' 0' 10 + sIdx);                              break;                            case '-':                              logger.Write(" "' 0' 10 + sIdx);                              sIdx--;                              if (sIdx < 0) sIdx = streams.Length - 1;                              logger.Write(">"' 0' 10 + sIdx);                              break;                            case 'q':                              quit = true;                              foreach (var cts in filterFades.Values) cts.Cancel();                              foreach (var cts in volumeFades.Values) cts.Cancel();                              foreach (var s in streams) s.Stop(); // nicer and more effective                              foreach (var s in streams) s.Dispose();                              break;                      }
Missing Default,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following switch statement is missing a default case: switch (eventType)              {                  case LogEventBoolean.IsOpenAlSoft:                      Write("OpenAL Soft [" + (context ? "X" : " ") + "]' "' 0' 5);                      break;                  case LogEventBoolean.XRamSupport:                      Write("X-RAM [" + (context ? "X" : " ") + "]' ");                      break;                  case LogEventBoolean.EfxSupport:                      Write("Effect Extensions [" + (context ? "X" : " ") + "]");                      break;              }
Missing Default,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following switch statement is missing a default case: switch (eventType)              {                  case LogEventSingle.MemoryUsage:                      var usedHeap = context;                        string[] sizes = { "B"' "KB"' "MB"' "GB" };                      int order = 0;                      while (usedHeap >= 1024 && order + 1 < sizes.Length)                      {                          order++;                          usedHeap = usedHeap / 1024;                      }                        Write(string.Format("Total memory : {0:0.###} {1}          "' usedHeap' sizes[order])' 0' 6);                      break;              }
Missing Default,TestApp,ConsoleLogger,C:\research\architectureSmells\repos\renaudbedard_nvorbis\TestApp\OpenTKStreamingTest.cs,Log,The following switch statement is missing a default case: switch (eventType)              {                  case LogEvent.BeginPrepare:                      Write("(*"' 7' p.Y);                      SetHOffset(stream' 9);                      break;                  case LogEvent.EndPrepare:                      Write(")"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Play:                      Write("{"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Stop:                      Write("}"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Pause:                      Write("["' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Resume:                      Write("]"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.Empty:                      Write(new string(Enumerable.Repeat(' '' Console.BufferWidth - 6).ToArray())' 6' p.Y);                      SetHOffset(stream' 7);                      break;                  case LogEvent.NewPacket:                      Write("."' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.LastPacket:                      Write("|"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;                  case LogEvent.BufferUnderrun:                      Write("!"' p.X' p.Y);                      SetHOffset(stream' p.X + 1);                      break;              }
