Implementation smell,Namespace,Class,File,Method,Description
Long Method,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The method has 201 lines of code.
Complex Method,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,Cyclomatic complexity of the method is 11
Complex Method,NVorbis,RingBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\RingBuffer.cs,Write,Cyclomatic complexity of the method is 9
Complex Method,NVorbis,StreamReadBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\StreamReadBuffer.cs,EnsureAvailable,Cyclomatic complexity of the method is 8
Complex Method,NVorbis,StreamReadBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\StreamReadBuffer.cs,EnsureBufferSize,Cyclomatic complexity of the method is 9
Complex Method,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,InitTree,Cyclomatic complexity of the method is 8
Complex Method,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,ComputeCodewords,Cyclomatic complexity of the method is 11
Complex Method,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,InitLookupTable,Cyclomatic complexity of the method is 8
Complex Method,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnpackPacket,Cyclomatic complexity of the method is 8
Complex Method,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Apply,Cyclomatic complexity of the method is 8
Complex Method,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,Cyclomatic complexity of the method is 17
Complex Method,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnpackPacket,Cyclomatic complexity of the method is 8
Complex Method,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Apply,Cyclomatic complexity of the method is 8
Complex Method,NVorbis,Mapping0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMapping.cs,Init,Cyclomatic complexity of the method is 13
Complex Method,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,Cyclomatic complexity of the method is 14
Complex Method,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Decode,Cyclomatic complexity of the method is 13
Complex Method,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,ProcessParameterChange,Cyclomatic complexity of the method is 8
Complex Method,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadBooks,Cyclomatic complexity of the method is 10
Complex Method,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,UnpackPacket,Cyclomatic complexity of the method is 12
Complex Method,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,DecodePacket,Cyclomatic complexity of the method is 8
Complex Method,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,DecodeNextPacket,Cyclomatic complexity of the method is 9
Complex Method,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,Cyclomatic complexity of the method is 12
Long Parameter List,NVorbis,Huffman,C:\repos\renaudbedard_nvorbis\NVorbis\Huffman.cs,BuildPrefixedLinkedList,The method has 5 parameters. Parameters: values' lengthList' codeList' tableBits' firstOverflowNode
Long Parameter List,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The method has 5 parameters. Parameters: lim' e' d0' k_off' k1
Long Parameter List,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The method has 7 parameters. Parameters: n' e' i_off' k_off' a' a_off' k0
Long Parameter List,NVorbis,RingBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\RingBuffer.cs,Write,The method has 7 parameters. Parameters: channel' index' start' switchPoint' end' pcm' window
Long Parameter List,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,ComputeCodewords,The method has 7 parameters. Parameters: sparse' sortedEntries' codewords' codewordLengths' len' n' values
Long Parameter List,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,AddEntry,The method has 8 parameters. Parameters: sparse' codewords' codewordLengths' huffCode' symbol' count' len' values
Long Parameter List,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,RenderPoint,The method has 5 parameters. Parameters: x0' y0' x1' y1' X
Long Parameter List,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,RenderLineMulti,The method has 5 parameters. Parameters: x0' y0' x1' y1' v
Long Parameter List,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,WriteVectors,The method has 6 parameters. Parameters: codebook' packet' residue' channel' offset' partitionSize
Long Parameter List,NVorbis,Residue1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,WriteVectors,The method has 6 parameters. Parameters: codebook' packet' residue' channel' offset' partitionSize
Long Parameter List,NVorbis,Residue2,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,WriteVectors,The method has 6 parameters. Parameters: codebook' packet' residue' channel' offset' partitionSize
Long Statement,NVorbis,BufferedReadStream,C:\repos\renaudbedard_nvorbis\NVorbis\BufferedReadStream.cs,Seek,The length of the statement  "                if (offset >= _buffer.BufferEndOffset) throw new InvalidOperationException("Cannot seek to beyond the end of the buffer!  Discard some bytes."); " is 144.
Long Statement,NVorbis,RingBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\RingBuffer.cs,EnsureSize,The length of the statement  "            // because _end == _start signifies no data' and _end is always 1 more than the data we have' we must make the buffer {channels} entries bigger than requested " is 158.
Long Statement,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,ClipValue,The length of the statement  "             *   2) If x is further from 0 than y' the bitwise value of x is greater than the bitwise value of y (ignoring the sign bit) " is 123.
Long Statement,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,ConvertFromVorbisFloat32,The length of the statement  "            var exponent = (double)((int)((bits & 0x7fe00000) >> 21) - 788);  // grab the exponent' remove the bias' store as double (for the call to System.Math.Pow(...)) " is 159.
Long Statement,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,ConvertFromVorbisFloat32,The length of the statement  "            var mantissa = (float)(((bits & 0x1fffff) ^ sign) + (sign & 1));  // grab the mantissa and apply the sign bit.  store as float " is 126.
Long Statement,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,InitTree,The length of the statement  "            if (!ComputeCodewords(sparse' sortedEntries' codewords' codewordLengths' len: Lengths' n: Entries' values: values)) throw new InvalidDataException(); " is 149.
Long Statement,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,InitTree,The length of the statement  "            PrefixList = Huffman.BuildPrefixedLinkedList(values ?? Enumerable.Range(0' codewords.Length).ToArray()' codewordLengths ?? Lengths' codewords' out PrefixBitLength' out PrefixOverflowTree); " is 188.
Long Statement,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,UpdatePosition,The length of the statement  "                // _currentPosition will now be end of the page...  wait for the value to change' then go back and repopulate the granule positions accordingly... " is 146.
Long Statement,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,ReadSamples,The length of the statement  "                    throw new InvalidOperationException("Currently pending a parameter change.  Read new parameters before requesting further samples!"); " is 133.
Long Statement,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,FindNextPageHeader,The length of the statement  "                } while (++cnt < 65536);    // we will only search through 64KB of data to find the next sync marker.  if it can't be found' we have a badly corrupted stream. " is 158.
Long Statement,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,AddPage,The length of the statement  "            // if the packet reader list doesn't include the serial in question' add it to the list and indicate a new stream to the caller " is 127.
Long Statement,NVorbis.Ogg,Packet,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggPacket.cs,MergeWith,The length of the statement  "            // per the spec' a partial packet goes with the next page's granulepos.  we'll go ahead and assign it to the next page as well " is 126.
Long Statement,NVorbis.Ogg,PacketReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggPacketReader.cs,FindPacketInPage,The length of the statement  "                    // if it's the last packet in the stream' it might be a partial.  The spec says the last packet has to be on its own page' so if it is not assume the stream was truncated. " is 171.
Complex Conditional,NVorbis,StreamReadBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\StreamReadBuffer.cs,EnsureAvailable,The conditional expression  "(tempS < 0 && _savedBuffers[i].End + tempS > 0) || (tempS > 0 && count - tempS > 0)"  is complex.
Complex Conditional,NVorbis,StreamReadBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\StreamReadBuffer.cs,EnsureBufferSize,The conditional expression  "(copyOffset > 0 && copyOffset < _end) || (copyOffset == 0 && newBuf != _data)"  is complex.
Complex Conditional,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The conditional expression  "_order < 1 || _rate < 1 || _bark_map_size < 1 || _books.Length == 0"  is complex.
Complex Conditional,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The conditional expression  "_readBuffer[0] != 0x4f || _readBuffer[1] != 0x67 || _readBuffer[2] != 0x67 || _readBuffer[3] != 0x53"  is complex.
Magic Number,NVorbis,Huffman,C:\repos\renaudbedard_nvorbis\NVorbis\Huffman.cs,BuildPrefixedLinkedList,The following statement contains a magic number: for (int i = 0; i < list.Length; i++)              {                  list[i] = new HuffmanListNode                  {                      Value = values[i]'                      Length = lengthList[i] <= 0 ? 99999 : lengthList[i]'                      Bits = codeList[i]'                      Mask = (1 << lengthList[i]) - 1'                  };                  if (lengthList[i] > 0 && maxLen < lengthList[i])                  {                      maxLen = lengthList[i];                  }              }
Magic Number,NVorbis,Huffman,C:\repos\renaudbedard_nvorbis\NVorbis\Huffman.cs,BuildPrefixedLinkedList,The following statement contains a magic number: for (int i = 0; i < list.Length && list[i].Length < 99999; i++)              {                  if (firstOverflowNode == null)                  {                      var itemBits = list[i].Length;                      if (itemBits > tableBits)                      {                          firstOverflowNode = list[i];                      }                      else                      {                          var maxVal = 1 << (tableBits - itemBits);                          var item = list[i];                          for (int j = 0; j < maxVal; j++)                          {                              var idx = (j << itemBits) | item.Bits;                              while (prefixList.Count <= idx)                              {                                  prefixList.Add(null);                              }                              prefixList[idx] = item;                          }                      }                  }                  else                  {                      list[i - 1].Next = list[i];                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,Mdct,The following statement contains a magic number: for (k = k2 = 0; k < _n4; ++k' k2 += 2)              {                  _A[k2] = (float)Math.Cos(4 * k * M_PI / n);                  _A[k2 + 1] = (float)-Math.Sin(4 * k * M_PI / n);                  _B[k2] = (float)Math.Cos((k2 + 1) * M_PI / n / 2) * .5f;                  _B[k2 + 1] = (float)Math.Sin((k2 + 1) * M_PI / n / 2) * .5f;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,Mdct,The following statement contains a magic number: for (k = k2 = 0; k < _n4; ++k' k2 += 2)              {                  _A[k2] = (float)Math.Cos(4 * k * M_PI / n);                  _A[k2 + 1] = (float)-Math.Sin(4 * k * M_PI / n);                  _B[k2] = (float)Math.Cos((k2 + 1) * M_PI / n / 2) * .5f;                  _B[k2 + 1] = (float)Math.Sin((k2 + 1) * M_PI / n / 2) * .5f;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,Mdct,The following statement contains a magic number: for (k = k2 = 0; k < _n4; ++k' k2 += 2)              {                  _A[k2] = (float)Math.Cos(4 * k * M_PI / n);                  _A[k2 + 1] = (float)-Math.Sin(4 * k * M_PI / n);                  _B[k2] = (float)Math.Cos((k2 + 1) * M_PI / n / 2) * .5f;                  _B[k2 + 1] = (float)Math.Sin((k2 + 1) * M_PI / n / 2) * .5f;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,Mdct,The following statement contains a magic number: for (k = k2 = 0; k < _n4; ++k' k2 += 2)              {                  _A[k2] = (float)Math.Cos(4 * k * M_PI / n);                  _A[k2 + 1] = (float)-Math.Sin(4 * k * M_PI / n);                  _B[k2] = (float)Math.Cos((k2 + 1) * M_PI / n / 2) * .5f;                  _B[k2 + 1] = (float)Math.Sin((k2 + 1) * M_PI / n / 2) * .5f;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,Mdct,The following statement contains a magic number: for (k = k2 = 0; k < _n4; ++k' k2 += 2)              {                  _A[k2] = (float)Math.Cos(4 * k * M_PI / n);                  _A[k2 + 1] = (float)-Math.Sin(4 * k * M_PI / n);                  _B[k2] = (float)Math.Cos((k2 + 1) * M_PI / n / 2) * .5f;                  _B[k2 + 1] = (float)Math.Sin((k2 + 1) * M_PI / n / 2) * .5f;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,Mdct,The following statement contains a magic number: for (k = k2 = 0; k < _n8; ++k' k2 += 2)              {                  _C[k2] = (float)Math.Cos(2 * (k2 + 1) * M_PI / n);                  _C[k2 + 1] = (float)-Math.Sin(2 * (k2 + 1) * M_PI / n);              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,Mdct,The following statement contains a magic number: for (k = k2 = 0; k < _n8; ++k' k2 += 2)              {                  _C[k2] = (float)Math.Cos(2 * (k2 + 1) * M_PI / n);                  _C[k2 + 1] = (float)-Math.Sin(2 * (k2 + 1) * M_PI / n);              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,Mdct,The following statement contains a magic number: for (k = k2 = 0; k < _n8; ++k' k2 += 2)              {                  _C[k2] = (float)Math.Cos(2 * (k2 + 1) * M_PI / n);                  _C[k2 + 1] = (float)-Math.Sin(2 * (k2 + 1) * M_PI / n);              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,Mdct,The following statement contains a magic number: for (int i = 0; i < _n8; ++i)              {                  _bitrev[i] = (ushort)(Utils.BitReverse((uint)i' _ld - 3) << 2);              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,Mdct,The following statement contains a magic number: for (int i = 0; i < _n8; ++i)              {                  _bitrev[i] = (ushort)(Utils.BitReverse((uint)i' _ld - 3) << 2);              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var d = _n2 - 2; // buf2                  var AA = 0;     // A                  var e = 0;      // buffer                  var e_stop = _n2;// buffer                  while (e != e_stop)                  {                      buf2[d + 1] = (buffer[e] * _A[AA] - buffer[e + 2] * _A[AA + 1]);                      buf2[d] = (buffer[e] * _A[AA + 1] + buffer[e + 2] * _A[AA]);                      d -= 2;                      AA += 2;                      e += 4;                  }                    e = _n2 - 3;                  while (d >= 0)                  {                      buf2[d + 1] = (-buffer[e + 2] * _A[AA] - -buffer[e] * _A[AA + 1]);                      buf2[d] = (-buffer[e + 2] * _A[AA + 1] + -buffer[e] * _A[AA]);                      d -= 2;                      AA += 2;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var AA = _n2 - 8;    // A                    var e0 = _n4;        // v                  var e1 = 0;         // v                    var d0 = _n4;        // u                  var d1 = 0;         // u                    while (AA >= 0)                  {                      float v40_20' v41_21;                        v41_21 = v[e0 + 1] - v[e1 + 1];                      v40_20 = v[e0] - v[e1];                      u[d0 + 1] = v[e0 + 1] + v[e1 + 1];                      u[d0] = v[e0] + v[e1];                      u[d1 + 1] = v41_21 * _A[AA + 4] - v40_20 * _A[AA + 5];                      u[d1] = v40_20 * _A[AA + 4] + v41_21 * _A[AA + 5];                        v41_21 = v[e0 + 3] - v[e1 + 3];                      v40_20 = v[e0 + 2] - v[e1 + 2];                      u[d0 + 3] = v[e0 + 3] + v[e1 + 3];                      u[d0 + 2] = v[e0 + 2] + v[e1 + 2];                      u[d1 + 3] = v41_21 * _A[AA] - v40_20 * _A[AA + 1];                      u[d1 + 2] = v40_20 * _A[AA] + v41_21 * _A[AA + 1];                        AA -= 8;                        d0 += 4;                      d1 += 4;                      e0 += 4;                      e1 += 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_iter0_loop(_n >> 4' u' _n2 - 1 - _n4 * 0' -_n8);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_iter0_loop(_n >> 4' u' _n2 - 1 - _n4 * 1' -_n8);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 0' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 0' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 0' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 1' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 1' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 1' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 2' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 2' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 2' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 2' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 3' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 3' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 3' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_r_loop(_n >> 5' u' _n2 - 1 - _n8 * 3' -(_n >> 4)' 16);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: var l = 2;
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: for (; l < (_ld - 3) >> 1; ++l)              {                  var k0 = _n >> (l + 2);                  var k0_2 = k0 >> 1;                  var lim = 1 << (l + 1);                  for (int i = 0; i < lim; ++i)                  {                      step3_inner_r_loop(_n >> (l + 4)' u' _n2 - 1 - k0 * i' -k0_2' 1 << (l + 3));                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: for (; l < (_ld - 3) >> 1; ++l)              {                  var k0 = _n >> (l + 2);                  var k0_2 = k0 >> 1;                  var lim = 1 << (l + 1);                  for (int i = 0; i < lim; ++i)                  {                      step3_inner_r_loop(_n >> (l + 4)' u' _n2 - 1 - k0 * i' -k0_2' 1 << (l + 3));                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: for (; l < (_ld - 3) >> 1; ++l)              {                  var k0 = _n >> (l + 2);                  var k0_2 = k0 >> 1;                  var lim = 1 << (l + 1);                  for (int i = 0; i < lim; ++i)                  {                      step3_inner_r_loop(_n >> (l + 4)' u' _n2 - 1 - k0 * i' -k0_2' 1 << (l + 3));                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: for (; l < (_ld - 3) >> 1; ++l)              {                  var k0 = _n >> (l + 2);                  var k0_2 = k0 >> 1;                  var lim = 1 << (l + 1);                  for (int i = 0; i < lim; ++i)                  {                      step3_inner_r_loop(_n >> (l + 4)' u' _n2 - 1 - k0 * i' -k0_2' 1 << (l + 3));                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: for (; l < _ld - 6; ++l)              {                  var k0 = _n >> (l + 2);                  var k1 = 1 << (l + 3);                  var k0_2 = k0 >> 1;                  var rlim = _n >> (l + 6);                  var lim = 1 << l + 1;                  var i_off = _n2 - 1;                  var A0 = 0;                    for (int r = rlim; r > 0; --r)                  {                      step3_inner_s_loop(lim' u' i_off' -k0_2' A0' k1' k0);                      A0 += k1 * 4;                      i_off -= 8;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: for (; l < _ld - 6; ++l)              {                  var k0 = _n >> (l + 2);                  var k1 = 1 << (l + 3);                  var k0_2 = k0 >> 1;                  var rlim = _n >> (l + 6);                  var lim = 1 << l + 1;                  var i_off = _n2 - 1;                  var A0 = 0;                    for (int r = rlim; r > 0; --r)                  {                      step3_inner_s_loop(lim' u' i_off' -k0_2' A0' k1' k0);                      A0 += k1 * 4;                      i_off -= 8;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: for (; l < _ld - 6; ++l)              {                  var k0 = _n >> (l + 2);                  var k1 = 1 << (l + 3);                  var k0_2 = k0 >> 1;                  var rlim = _n >> (l + 6);                  var lim = 1 << l + 1;                  var i_off = _n2 - 1;                  var A0 = 0;                    for (int r = rlim; r > 0; --r)                  {                      step3_inner_s_loop(lim' u' i_off' -k0_2' A0' k1' k0);                      A0 += k1 * 4;                      i_off -= 8;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: for (; l < _ld - 6; ++l)              {                  var k0 = _n >> (l + 2);                  var k1 = 1 << (l + 3);                  var k0_2 = k0 >> 1;                  var rlim = _n >> (l + 6);                  var lim = 1 << l + 1;                  var i_off = _n2 - 1;                  var A0 = 0;                    for (int r = rlim; r > 0; --r)                  {                      step3_inner_s_loop(lim' u' i_off' -k0_2' A0' k1' k0);                      A0 += k1 * 4;                      i_off -= 8;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: for (; l < _ld - 6; ++l)              {                  var k0 = _n >> (l + 2);                  var k1 = 1 << (l + 3);                  var k0_2 = k0 >> 1;                  var rlim = _n >> (l + 6);                  var lim = 1 << l + 1;                  var i_off = _n2 - 1;                  var A0 = 0;                    for (int r = rlim; r > 0; --r)                  {                      step3_inner_s_loop(lim' u' i_off' -k0_2' A0' k1' k0);                      A0 += k1 * 4;                      i_off -= 8;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: for (; l < _ld - 6; ++l)              {                  var k0 = _n >> (l + 2);                  var k1 = 1 << (l + 3);                  var k0_2 = k0 >> 1;                  var rlim = _n >> (l + 6);                  var lim = 1 << l + 1;                  var i_off = _n2 - 1;                  var A0 = 0;                    for (int r = rlim; r > 0; --r)                  {                      step3_inner_s_loop(lim' u' i_off' -k0_2' A0' k1' k0);                      A0 += k1 * 4;                      i_off -= 8;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: step3_inner_s_loop_ld654(_n >> 5' u' _n2 - 1' _n);
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var bit = 0;                    var d0 = _n4 - 4;    // v                  var d1 = _n2 - 4;    // v                  while (d0 >= 0)                  {                      int k4;                        k4 = _bitrev[bit];                      v[d1 + 3] = u[k4];                      v[d1 + 2] = u[k4 + 1];                      v[d0 + 3] = u[k4 + 2];                      v[d0 + 2] = u[k4 + 3];                        k4 = _bitrev[bit + 1];                      v[d1 + 1] = u[k4];                      v[d1] = u[k4 + 1];                      v[d0 + 1] = u[k4 + 2];                      v[d0] = u[k4 + 3];                        d0 -= 4;                      d1 -= 4;                      bit += 2;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var c = 0;      // C                  var d = 0;      // v                  var e = _n2 - 4; // v                    while (d < e)                  {                      float a02' a11' b0' b1' b2' b3;                        a02 = v[d] - v[e + 2];                      a11 = v[d + 1] + v[e + 3];                        b0 = _C[c + 1] * a02 + _C[c] * a11;                      b1 = _C[c + 1] * a11 - _C[c] * a02;                        b2 = v[d] + v[e + 2];                      b3 = v[d + 1] - v[e + 3];                        v[d] = b2 + b0;                      v[d + 1] = b3 + b1;                      v[e + 2] = b2 - b0;                      v[e + 3] = b1 - b3;                        a02 = v[d + 2] - v[e];                      a11 = v[d + 3] + v[e + 1];                        b0 = _C[c + 3] * a02 + _C[c + 2] * a11;                      b1 = _C[c + 3] * a11 - _C[c + 2] * a02;                        b2 = v[d + 2] + v[e];                      b3 = v[d + 3] - v[e + 1];                        v[d + 2] = b2 + b0;                      v[d + 3] = b3 + b1;                      v[e] = b2 - b0;                      v[e + 1] = b1 - b3;                        c += 4;                      d += 4;                      e -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,CalcReverse,The following statement contains a magic number: {                  var b = _n2 - 8; // B                  var e = _n2 - 8; // buf2                  var d0 = 0;     // buffer                  var d1 = _n2 - 4;// buffer                  var d2 = _n2;    // buffer                  var d3 = _n - 4; // buffer                  while (e >= 0)                  {                      float p0' p1' p2' p3;                        p3 = buf2[e + 6] * _B[b + 7] - buf2[e + 7] * _B[b + 6];                      p2 = -buf2[e + 6] * _B[b + 6] - buf2[e + 7] * _B[b + 7];                        buffer[d0] = p3;                      buffer[d1 + 3] = -p3;                      buffer[d2] = p2;                      buffer[d3 + 3] = p2;                        p1 = buf2[e + 4] * _B[b + 5] - buf2[e + 5] * _B[b + 4];                      p0 = -buf2[e + 4] * _B[b + 4] - buf2[e + 5] * _B[b + 5];                        buffer[d0 + 1] = p1;                      buffer[d1 + 2] = -p1;                      buffer[d2 + 1] = p0;                      buffer[d3 + 2] = p0;                          p3 = buf2[e + 2] * _B[b + 3] - buf2[e + 3] * _B[b + 2];                      p2 = -buf2[e + 2] * _B[b + 2] - buf2[e + 3] * _B[b + 3];                        buffer[d0 + 2] = p3;                      buffer[d1 + 1] = -p3;                      buffer[d2 + 2] = p2;                      buffer[d3 + 1] = p2;                        p1 = buf2[e] * _B[b + 1] - buf2[e + 1] * _B[b];                      p0 = -buf2[e] * _B[b] - buf2[e + 1] * _B[b + 1];                        buffer[d0 + 3] = p1;                      buffer[d1] = -p1;                      buffer[d2 + 3] = p0;                      buffer[d3] = p0;                        b -= 8;                      e -= 8;                      d0 += 4;                      d2 += 4;                      d1 -= 4;                      d3 -= 4;                  }              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_iter0_loop,The following statement contains a magic number: for (int i = n >> 2; i > 0; --i)              {                  float k00_20' k01_21;                    k00_20 = e[ee0] - e[ee2];                  k01_21 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 2] - e[ee2 - 2];                  k01_21 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 4] - e[ee2 - 4];                  k01_21 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    k00_20 = e[ee0 - 6] - e[ee2 - 6];                  k01_21 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[ee2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                  a += 8;                    ee0 -= 8;                  ee2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_r_loop,The following statement contains a magic number: for (int i = lim >> 2; i > 0; --i)              {                  k00_20 = e[e0] - e[e2];                  k01_21 = e[e0 - 1] - e[e2 - 1];                  e[e0] += e[e2];                  e[e0 - 1] += e[e2 - 1];                  e[e2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 1] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 2] - e[e2 - 2];                  k01_21 = e[e0 - 3] - e[e2 - 3];                  e[e0 - 2] += e[e2 - 2];                  e[e0 - 3] += e[e2 - 3];                  e[e2 - 2] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 3] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 4] - e[e2 - 4];                  k01_21 = e[e0 - 5] - e[e2 - 5];                  e[e0 - 4] += e[e2 - 4];                  e[e0 - 5] += e[e2 - 5];                  e[e2 - 4] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 5] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    k00_20 = e[e0 - 6] - e[e2 - 6];                  k01_21 = e[e0 - 7] - e[e2 - 7];                  e[e0 - 6] += e[e2 - 6];                  e[e0 - 7] += e[e2 - 7];                  e[e2 - 6] = k00_20 * _A[a] - k01_21 * _A[a + 1];                  e[e2 - 7] = k01_21 * _A[a] + k00_20 * _A[a + 1];                    a += k1;                    e0 -= 8;                  e2 -= 8;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: var A4 = _A[a + a_off * 2];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: var A5 = _A[a + a_off * 2 + 1];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: var A6 = _A[a + a_off * 3];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: var A7 = _A[a + a_off * 3 + 1];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop,The following statement contains a magic number: for (int i = n; i > 0; --i)              {                  k00 = e[ee0] - e[ee2];                  k11 = e[ee0 - 1] - e[ee2 - 1];                  e[ee0] += e[ee2];                  e[ee0 - 1] += e[ee2 - 1];                  e[ee2] = k00 * A0 - k11 * A1;                  e[ee2 - 1] = k11 * A0 + k00 * A1;                    k00 = e[ee0 - 2] - e[ee2 - 2];                  k11 = e[ee0 - 3] - e[ee2 - 3];                  e[ee0 - 2] += e[ee2 - 2];                  e[ee0 - 3] += e[ee2 - 3];                  e[ee2 - 2] = k00 * A2 - k11 * A3;                  e[ee2 - 3] = k11 * A2 + k00 * A3;                    k00 = e[ee0 - 4] - e[ee2 - 4];                  k11 = e[ee0 - 5] - e[ee2 - 5];                  e[ee0 - 4] += e[ee2 - 4];                  e[ee0 - 5] += e[ee2 - 5];                  e[ee2 - 4] = k00 * A4 - k11 * A5;                  e[ee2 - 5] = k11 * A4 + k00 * A5;                    k00 = e[ee0 - 6] - e[ee2 - 6];                  k11 = e[ee0 - 7] - e[ee2 - 7];                  e[ee0 - 6] += e[ee2 - 6];                  e[ee0 - 7] += e[ee2 - 7];                  e[ee2 - 6] = k00 * A6 - k11 * A7;                  e[ee2 - 7] = k11 * A6 + k00 * A7;                    ee0 -= k0;                  ee2 -= k0;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: var a_off = base_n >> 3;
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: var @base = z - 16 * n;
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,step3_inner_s_loop_ld654,The following statement contains a magic number: while (z > @base)              {                  float k00' k11;                    k00 = e[z] - e[z - 8];                  k11 = e[z - 1] - e[z - 9];                  e[z] += e[z - 8];                  e[z - 1] += e[z - 9];                  e[z - 8] = k00;                  e[z - 9] = k11;                    k00 = e[z - 2] - e[z - 10];                  k11 = e[z - 3] - e[z - 11];                  e[z - 2] += e[z - 10];                  e[z - 3] += e[z - 11];                  e[z - 10] = (k00 + k11) * A2;                  e[z - 11] = (k11 - k00) * A2;                    k00 = e[z - 12] - e[z - 4];                  k11 = e[z - 5] - e[z - 13];                  e[z - 4] += e[z - 12];                  e[z - 5] += e[z - 13];                  e[z - 12] = k11;                  e[z - 13] = k00;                    k00 = e[z - 14] - e[z - 6];                  k11 = e[z - 7] - e[z - 15];                  e[z - 6] += e[z - 14];                  e[z - 7] += e[z - 15];                  e[z - 14] = (k00 + k11) * A2;                  e[z - 15] = (k00 - k11) * A2;                    iter_54(e' z);                  iter_54(e' z - 8);                    z -= 16;              }
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: k00 = e[z] - e[z - 4];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: y0 = e[z] + e[z - 4];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: y2 = e[z - 2] + e[z - 6];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: y2 = e[z - 2] + e[z - 6];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: k22 = e[z - 2] - e[z - 6];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: k22 = e[z - 2] - e[z - 6];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: e[z - 2] = y0 - y2;
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: k33 = e[z - 3] - e[z - 7];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: k33 = e[z - 3] - e[z - 7];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: e[z - 4] = k00 + k33;
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: e[z - 6] = k00 - k33;
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: k11 = e[z - 1] - e[z - 5];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: y1 = e[z - 1] + e[z - 5];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: y3 = e[z - 3] + e[z - 7];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: y3 = e[z - 3] + e[z - 7];
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: e[z - 3] = y1 - y3;
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: e[z - 5] = k11 - k22;
Magic Number,NVorbis,Mdct,C:\repos\renaudbedard_nvorbis\NVorbis\Mdct.cs,iter_54,The following statement contains a magic number: e[z - 7] = k11 + k22;
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,TryPeekBits,The following statement contains a magic number: if (count < 0 || count > 64) throw new ArgumentOutOfRangeException("count");
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,TryPeekBits,The following statement contains a magic number: while (_bitCount < count)              {                  var val = ReadNextByte();                  if (val == -1)                  {                      bitsRead = _bitCount;                      value = _bitBucket;                      _bitBucket = 0;                      _bitCount = 0;                        IsShort = true;                        return value;                  }                  _bitBucket = (ulong)(val & 0xFF) << _bitCount | _bitBucket;                  _bitCount += 8;                                    if (_bitCount > 64)                  {                      _overflowBits = (byte)(val >> (72 - _bitCount));                  }              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,TryPeekBits,The following statement contains a magic number: while (_bitCount < count)              {                  var val = ReadNextByte();                  if (val == -1)                  {                      bitsRead = _bitCount;                      value = _bitBucket;                      _bitBucket = 0;                      _bitCount = 0;                        IsShort = true;                        return value;                  }                  _bitBucket = (ulong)(val & 0xFF) << _bitCount | _bitBucket;                  _bitCount += 8;                                    if (_bitCount > 64)                  {                      _overflowBits = (byte)(val >> (72 - _bitCount));                  }              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,TryPeekBits,The following statement contains a magic number: while (_bitCount < count)              {                  var val = ReadNextByte();                  if (val == -1)                  {                      bitsRead = _bitCount;                      value = _bitBucket;                      _bitBucket = 0;                      _bitCount = 0;                        IsShort = true;                        return value;                  }                  _bitBucket = (ulong)(val & 0xFF) << _bitCount | _bitBucket;                  _bitCount += 8;                                    if (_bitCount > 64)                  {                      _overflowBits = (byte)(val >> (72 - _bitCount));                  }              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,TryPeekBits,The following statement contains a magic number: if (count < 64)              {                  value &= (1UL << count) - 1;              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,SkipBits,The following statement contains a magic number: if (count == 0)              {                  // no-op              }              else if (_bitCount > count)              {                  // we still have bits left over...                  if (count > 63)                  {                      _bitBucket = 0;                  }                  else                  {                      _bitBucket >>= count;                  }                  if (_bitCount > 64)                  {                      var overflowCount = _bitCount - 64;                      _bitBucket |= (ulong)_overflowBits << (_bitCount - count - overflowCount);                        if (overflowCount > count)                      {                          // ugh' we have to keep bits in overflow                          _overflowBits >>= count;                      }                  }                    _bitCount -= count;                  _readBits += count;              }              else if (_bitCount == count)              {                  _bitBucket = 0UL;                  _bitCount = 0;                  _readBits += count;              }              else //  _bitCount < count              {                  // we have to move more bits than we have available...                  count -= _bitCount;                  _readBits += _bitCount;                  _bitCount = 0;                  _bitBucket = 0;                    while (count > 8)                  {                      if (ReadNextByte() == -1)                      {                          count = 0;                          IsShort = true;                          break;                      }                      count -= 8;                      _readBits += 8;                  }                    if (count > 0)                  {                      var temp = ReadNextByte();                      if (temp == -1)                      {                          IsShort = true;                      }                      else                      {                          _bitBucket = (ulong)(temp >> count);                          _bitCount = 8 - count;                          _readBits += count;                      }                  }              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,SkipBits,The following statement contains a magic number: if (count == 0)              {                  // no-op              }              else if (_bitCount > count)              {                  // we still have bits left over...                  if (count > 63)                  {                      _bitBucket = 0;                  }                  else                  {                      _bitBucket >>= count;                  }                  if (_bitCount > 64)                  {                      var overflowCount = _bitCount - 64;                      _bitBucket |= (ulong)_overflowBits << (_bitCount - count - overflowCount);                        if (overflowCount > count)                      {                          // ugh' we have to keep bits in overflow                          _overflowBits >>= count;                      }                  }                    _bitCount -= count;                  _readBits += count;              }              else if (_bitCount == count)              {                  _bitBucket = 0UL;                  _bitCount = 0;                  _readBits += count;              }              else //  _bitCount < count              {                  // we have to move more bits than we have available...                  count -= _bitCount;                  _readBits += _bitCount;                  _bitCount = 0;                  _bitBucket = 0;                    while (count > 8)                  {                      if (ReadNextByte() == -1)                      {                          count = 0;                          IsShort = true;                          break;                      }                      count -= 8;                      _readBits += 8;                  }                    if (count > 0)                  {                      var temp = ReadNextByte();                      if (temp == -1)                      {                          IsShort = true;                      }                      else                      {                          _bitBucket = (ulong)(temp >> count);                          _bitCount = 8 - count;                          _readBits += count;                      }                  }              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,SkipBits,The following statement contains a magic number: if (count == 0)              {                  // no-op              }              else if (_bitCount > count)              {                  // we still have bits left over...                  if (count > 63)                  {                      _bitBucket = 0;                  }                  else                  {                      _bitBucket >>= count;                  }                  if (_bitCount > 64)                  {                      var overflowCount = _bitCount - 64;                      _bitBucket |= (ulong)_overflowBits << (_bitCount - count - overflowCount);                        if (overflowCount > count)                      {                          // ugh' we have to keep bits in overflow                          _overflowBits >>= count;                      }                  }                    _bitCount -= count;                  _readBits += count;              }              else if (_bitCount == count)              {                  _bitBucket = 0UL;                  _bitCount = 0;                  _readBits += count;              }              else //  _bitCount < count              {                  // we have to move more bits than we have available...                  count -= _bitCount;                  _readBits += _bitCount;                  _bitCount = 0;                  _bitBucket = 0;                    while (count > 8)                  {                      if (ReadNextByte() == -1)                      {                          count = 0;                          IsShort = true;                          break;                      }                      count -= 8;                      _readBits += 8;                  }                    if (count > 0)                  {                      var temp = ReadNextByte();                      if (temp == -1)                      {                          IsShort = true;                      }                      else                      {                          _bitBucket = (ulong)(temp >> count);                          _bitCount = 8 - count;                          _readBits += count;                      }                  }              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,SkipBits,The following statement contains a magic number: if (count == 0)              {                  // no-op              }              else if (_bitCount > count)              {                  // we still have bits left over...                  if (count > 63)                  {                      _bitBucket = 0;                  }                  else                  {                      _bitBucket >>= count;                  }                  if (_bitCount > 64)                  {                      var overflowCount = _bitCount - 64;                      _bitBucket |= (ulong)_overflowBits << (_bitCount - count - overflowCount);                        if (overflowCount > count)                      {                          // ugh' we have to keep bits in overflow                          _overflowBits >>= count;                      }                  }                    _bitCount -= count;                  _readBits += count;              }              else if (_bitCount == count)              {                  _bitBucket = 0UL;                  _bitCount = 0;                  _readBits += count;              }              else //  _bitCount < count              {                  // we have to move more bits than we have available...                  count -= _bitCount;                  _readBits += _bitCount;                  _bitCount = 0;                  _bitBucket = 0;                    while (count > 8)                  {                      if (ReadNextByte() == -1)                      {                          count = 0;                          IsShort = true;                          break;                      }                      count -= 8;                      _readBits += 8;                  }                    if (count > 0)                  {                      var temp = ReadNextByte();                      if (temp == -1)                      {                          IsShort = true;                      }                      else                      {                          _bitBucket = (ulong)(temp >> count);                          _bitCount = 8 - count;                          _readBits += count;                      }                  }              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,SkipBits,The following statement contains a magic number: if (count == 0)              {                  // no-op              }              else if (_bitCount > count)              {                  // we still have bits left over...                  if (count > 63)                  {                      _bitBucket = 0;                  }                  else                  {                      _bitBucket >>= count;                  }                  if (_bitCount > 64)                  {                      var overflowCount = _bitCount - 64;                      _bitBucket |= (ulong)_overflowBits << (_bitCount - count - overflowCount);                        if (overflowCount > count)                      {                          // ugh' we have to keep bits in overflow                          _overflowBits >>= count;                      }                  }                    _bitCount -= count;                  _readBits += count;              }              else if (_bitCount == count)              {                  _bitBucket = 0UL;                  _bitCount = 0;                  _readBits += count;              }              else //  _bitCount < count              {                  // we have to move more bits than we have available...                  count -= _bitCount;                  _readBits += _bitCount;                  _bitCount = 0;                  _bitBucket = 0;                    while (count > 8)                  {                      if (ReadNextByte() == -1)                      {                          count = 0;                          IsShort = true;                          break;                      }                      count -= 8;                      _readBits += 8;                  }                    if (count > 0)                  {                      var temp = ReadNextByte();                      if (temp == -1)                      {                          IsShort = true;                      }                      else                      {                          _bitBucket = (ulong)(temp >> count);                          _bitCount = 8 - count;                          _readBits += count;                      }                  }              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,SkipBits,The following statement contains a magic number: if (count == 0)              {                  // no-op              }              else if (_bitCount > count)              {                  // we still have bits left over...                  if (count > 63)                  {                      _bitBucket = 0;                  }                  else                  {                      _bitBucket >>= count;                  }                  if (_bitCount > 64)                  {                      var overflowCount = _bitCount - 64;                      _bitBucket |= (ulong)_overflowBits << (_bitCount - count - overflowCount);                        if (overflowCount > count)                      {                          // ugh' we have to keep bits in overflow                          _overflowBits >>= count;                      }                  }                    _bitCount -= count;                  _readBits += count;              }              else if (_bitCount == count)              {                  _bitBucket = 0UL;                  _bitCount = 0;                  _readBits += count;              }              else //  _bitCount < count              {                  // we have to move more bits than we have available...                  count -= _bitCount;                  _readBits += _bitCount;                  _bitCount = 0;                  _bitBucket = 0;                    while (count > 8)                  {                      if (ReadNextByte() == -1)                      {                          count = 0;                          IsShort = true;                          break;                      }                      count -= 8;                      _readBits += 8;                  }                    if (count > 0)                  {                      var temp = ReadNextByte();                      if (temp == -1)                      {                          IsShort = true;                      }                      else                      {                          _bitBucket = (ulong)(temp >> count);                          _bitCount = 8 - count;                          _readBits += count;                      }                  }              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,SkipBits,The following statement contains a magic number: if (count == 0)              {                  // no-op              }              else if (_bitCount > count)              {                  // we still have bits left over...                  if (count > 63)                  {                      _bitBucket = 0;                  }                  else                  {                      _bitBucket >>= count;                  }                  if (_bitCount > 64)                  {                      var overflowCount = _bitCount - 64;                      _bitBucket |= (ulong)_overflowBits << (_bitCount - count - overflowCount);                        if (overflowCount > count)                      {                          // ugh' we have to keep bits in overflow                          _overflowBits >>= count;                      }                  }                    _bitCount -= count;                  _readBits += count;              }              else if (_bitCount == count)              {                  _bitBucket = 0UL;                  _bitCount = 0;                  _readBits += count;              }              else //  _bitCount < count              {                  // we have to move more bits than we have available...                  count -= _bitCount;                  _readBits += _bitCount;                  _bitCount = 0;                  _bitBucket = 0;                    while (count > 8)                  {                      if (ReadNextByte() == -1)                      {                          count = 0;                          IsShort = true;                          break;                      }                      count -= 8;                      _readBits += 8;                  }                    if (count > 0)                  {                      var temp = ReadNextByte();                      if (temp == -1)                      {                          IsShort = true;                      }                      else                      {                          _bitBucket = (ulong)(temp >> count);                          _bitCount = 8 - count;                          _readBits += count;                      }                  }              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,PeekByte,The following statement contains a magic number: return (byte)TryPeekBits(8' out temp);
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,ReadByte,The following statement contains a magic number: return (byte)ReadBits(8);
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,Read,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int cnt;                  byte val = (byte)TryPeekBits(8' out cnt);                  if (cnt == 0)                  {                      return i;                  }                  buffer[index++] = val;                  SkipBits(8);              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,Read,The following statement contains a magic number: for (int i = 0; i < count; i++)              {                  int cnt;                  byte val = (byte)TryPeekBits(8' out cnt);                  if (cnt == 0)                  {                      return i;                  }                  buffer[index++] = val;                  SkipBits(8);              }
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,ReadInt16,The following statement contains a magic number: return (short)ReadBits(16);
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,ReadInt32,The following statement contains a magic number: return (int)ReadBits(32);
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,ReadInt64,The following statement contains a magic number: return (long)ReadBits(64);
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,ReadUInt16,The following statement contains a magic number: return (ushort)ReadBits(16);
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,ReadUInt32,The following statement contains a magic number: return (uint)ReadBits(32);
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,ReadUInt64,The following statement contains a magic number: return (ulong)ReadBits(64);
Magic Number,NVorbis,DataPacket,C:\repos\renaudbedard_nvorbis\NVorbis\DataPacket.cs,SkipBytes,The following statement contains a magic number: SkipBits(count * 8);
Magic Number,NVorbis,StreamReadBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\StreamReadBuffer.cs,StreamReadBuffer,The following statement contains a magic number: initialSize = 2 << (int)Math.Log(initialSize - 1' 2);
Magic Number,NVorbis,StreamReadBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\StreamReadBuffer.cs,StreamReadBuffer,The following statement contains a magic number: initialSize = 2 << (int)Math.Log(initialSize - 1' 2);
Magic Number,NVorbis,StreamReadBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\StreamReadBuffer.cs,StreamReadBuffer,The following statement contains a magic number: maxSize = 1 << (int)Math.Log(maxSize' 2);
Magic Number,NVorbis,StreamReadBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\StreamReadBuffer.cs,EnsureAvailable,The following statement contains a magic number: while (_savedBuffers.Count > 0 && _savedBuffers[0].VersionSaved + 25 < _versionCounter)              {                  _savedBuffers[0].Buffer = null;                  _savedBuffers.RemoveAt(0);              }
Magic Number,NVorbis,StreamReadBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\StreamReadBuffer.cs,CreateNewBuffer,The following statement contains a magic number: _data = new byte[Math.Min(2 << (int)Math.Log(count - 1' 2)' _maxSize)];
Magic Number,NVorbis,StreamReadBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\StreamReadBuffer.cs,CreateNewBuffer,The following statement contains a magic number: _data = new byte[Math.Min(2 << (int)Math.Log(count - 1' 2)' _maxSize)];
Magic Number,NVorbis,StreamReadBuffer,C:\repos\renaudbedard_nvorbis\NVorbis\StreamReadBuffer.cs,EnsureBufferSize,The following statement contains a magic number: if (reqSize > _data.Length)              {                  if (reqSize > _maxSize)                  {                      if (_wrapper.Source.CanSeek || reqSize - _discardCount <= _maxSize)                      {                          // lose some of the earlier data...                          var ofs = reqSize - _maxSize;                          copyOffset += ofs;                          reqSize = _maxSize;                      }                      else                      {                          throw new InvalidOperationException("Not enough room in the buffer!  Increase the maximum size and try again.");                      }                  }                  else                  {                      // find the new size                      var size = _data.Length;                      while (size < reqSize)                      {                          size *= 2;                      }                      reqSize = size;                  }                    // if we discarded some bytes above' don't resize the buffer unless we have to...                  if (reqSize > _data.Length)                  {                      newBuf = new byte[reqSize];                  }              }
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,BitReverse,The following statement contains a magic number: return BitReverse(n' 32);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,BitReverse,The following statement contains a magic number: n = ((n & 0xCCCCCCCC) >> 2) | ((n & 0x33333333) << 2);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,BitReverse,The following statement contains a magic number: n = ((n & 0xCCCCCCCC) >> 2) | ((n & 0x33333333) << 2);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,BitReverse,The following statement contains a magic number: n = ((n & 0xF0F0F0F0) >> 4) | ((n & 0x0F0F0F0F) << 4);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,BitReverse,The following statement contains a magic number: n = ((n & 0xF0F0F0F0) >> 4) | ((n & 0x0F0F0F0F) << 4);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,BitReverse,The following statement contains a magic number: n = ((n & 0xFF00FF00) >> 8) | ((n & 0x00FF00FF) << 8);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,BitReverse,The following statement contains a magic number: n = ((n & 0xFF00FF00) >> 8) | ((n & 0x00FF00FF) << 8);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,BitReverse,The following statement contains a magic number: return ((n >> 16) | (n << 16)) >> (32 - bits);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,BitReverse,The following statement contains a magic number: return ((n >> 16) | (n << 16)) >> (32 - bits);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,BitReverse,The following statement contains a magic number: return ((n >> 16) | (n << 16)) >> (32 - bits);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,ConvertFromVorbisFloat32,The following statement contains a magic number: var sign = ((int)bits >> 31);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,ConvertFromVorbisFloat32,The following statement contains a magic number: var exponent = (double)((int)((bits & 0x7fe00000) >> 21) - 788);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,ConvertFromVorbisFloat32,The following statement contains a magic number: var exponent = (double)((int)((bits & 0x7fe00000) >> 21) - 788);
Magic Number,NVorbis,Utils,C:\repos\renaudbedard_nvorbis\NVorbis\Utils.cs,ConvertFromVorbisFloat32,The following statement contains a magic number: return mantissa * (float)System.Math.Pow(2.0' exponent);
Magic Number,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,Init,The following statement contains a magic number: var chkVal = packet.ReadBits(24);
Magic Number,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,Init,The following statement contains a magic number: Dimensions = (int)packet.ReadBits(16);
Magic Number,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,Init,The following statement contains a magic number: Entries = (int)packet.ReadBits(24);
Magic Number,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,InitTree,The following statement contains a magic number: if (packet.ReadBit())              {                  // ordered                  var len = (int)packet.ReadBits(5) + 1;                  for (var i = 0; i < Entries; )                  {                      var cnt = (int)packet.ReadBits(Utils.ilog(Entries - i));                        while (--cnt >= 0)                      {                          Lengths[i++] = len;                      }                        ++len;                  }                  total = 0;                  sparse = false;              }              else              {                  // unordered                  sparse = packet.ReadBit();                  for (var i = 0; i < Entries; i++)                  {                      if (!sparse || packet.ReadBit())                      {                          Lengths[i] = (int)packet.ReadBits(5) + 1;                          ++total;                      }                      else                      {                          Lengths[i] = -1;                      }                  }              }
Magic Number,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,InitTree,The following statement contains a magic number: if (packet.ReadBit())              {                  // ordered                  var len = (int)packet.ReadBits(5) + 1;                  for (var i = 0; i < Entries; )                  {                      var cnt = (int)packet.ReadBits(Utils.ilog(Entries - i));                        while (--cnt >= 0)                      {                          Lengths[i++] = len;                      }                        ++len;                  }                  total = 0;                  sparse = false;              }              else              {                  // unordered                  sparse = packet.ReadBit();                  for (var i = 0; i < Entries; i++)                  {                      if (!sparse || packet.ReadBit())                      {                          Lengths[i] = (int)packet.ReadBits(5) + 1;                          ++total;                      }                      else                      {                          Lengths[i] = -1;                      }                  }              }
Magic Number,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,InitTree,The following statement contains a magic number: if (sparse && total >= Entries >> 2)              {                  codewordLengths = new int[Entries];                  Array.Copy(Lengths' codewordLengths' Entries);                    sparse = false;              }
Magic Number,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,ComputeCodewords,The following statement contains a magic number: uint[] available = new uint[32];
Magic Number,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,ComputeCodewords,The following statement contains a magic number: for (i = 1; i <= len[k]; ++i) available[i] = 1U << (32 - i);
Magic Number,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,ComputeCodewords,The following statement contains a magic number: for (i = k + 1; i < n; ++i)              {                  uint res;                  int z = len[i]' y;                  if (z <= 0) continue;                    while (z > 0 && available[z] == 0) --z;                  if (z == 0) return false;                  res = available[z];                  available[z] = 0;                  AddEntry(sparse' codewords' codewordLengths' Utils.BitReverse(res)' i' m++' len[i]' values);                    if (z != len[i])                  {                      for (y = len[i]; y > z; --y)                      {                          available[y] = res + (1U << (32 - y));                      }                  }              }
Magic Number,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,InitLookupTable,The following statement contains a magic number: MapType = (int)packet.ReadBits(4);
Magic Number,NVorbis,VorbisCodebook,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisCodebook.cs,InitLookupTable,The following statement contains a magic number: var valueBits = (int)packet.ReadBits(4) + 1;
Magic Number,NVorbis,VorbisFloor,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: var type = (int)packet.ReadBits(16);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _order = (int)packet.ReadBits(8);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _rate = (int)packet.ReadBits(16);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _bark_map_size = (int)packet.ReadBits(16);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _ampBits = (int)packet.ReadBits(6);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _ampOfs = (int)packet.ReadBits(8);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _books = new VorbisCodebook[(int)packet.ReadBits(4) + 1];
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: for (int i = 0; i < _books.Length; i++)                  {                      var num = (int)packet.ReadBits(8);                      if (num < 0 || num >= _vorbis.Books.Length) throw new InvalidDataException();                      var book = _vorbis.Books[num];                        if (book.MapType == 0 || book.Dimensions < 1) throw new InvalidDataException();                        _books[i] = book;                  }
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _barkMaps[_vorbis.Block0Size] = SynthesizeBarkCurve(_vorbis.Block0Size / 2);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _barkMaps[_vorbis.Block1Size] = SynthesizeBarkCurve(_vorbis.Block1Size / 2);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _wMap[_vorbis.Block0Size] = SynthesizeWDelMap(_vorbis.Block0Size / 2);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _wMap[_vorbis.Block1Size] = SynthesizeWDelMap(_vorbis.Block1Size / 2);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,SynthesizeBarkCurve,The following statement contains a magic number: var scale = _bark_map_size / toBARK(_rate / 2);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,toBARK,The following statement contains a magic number: return (float)(13.1 * Math.Atan(0.00074 * lsp) + 2.24 * Math.Atan(0.0000000185 * lsp * lsp) + .0001 * lsp);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,toBARK,The following statement contains a magic number: return (float)(13.1 * Math.Atan(0.00074 * lsp) + 2.24 * Math.Atan(0.0000000185 * lsp * lsp) + .0001 * lsp);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,toBARK,The following statement contains a magic number: return (float)(13.1 * Math.Atan(0.00074 * lsp) + 2.24 * Math.Atan(0.0000000185 * lsp * lsp) + .0001 * lsp);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,toBARK,The following statement contains a magic number: return (float)(13.1 * Math.Atan(0.00074 * lsp) + 2.24 * Math.Atan(0.0000000185 * lsp * lsp) + .0001 * lsp);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,toBARK,The following statement contains a magic number: return (float)(13.1 * Math.Atan(0.00074 * lsp) + 2.24 * Math.Atan(0.0000000185 * lsp * lsp) + .0001 * lsp);
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Apply,The following statement contains a magic number: var n = data.BlockSize / 2;
Magic Number,NVorbis,Floor0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Apply,The following statement contains a magic number: if (data.Amp > 0f)                  {                      // this is pretty well stolen directly from libvorbis...  BSD license                      var barkMap = _barkMaps[data.BlockSize];                      var wMap = _wMap[data.BlockSize];                        int i = 0;                      for (i = 0; i < _order; i++)                      {                          data.Coeff[i] = 2f * (float)Math.Cos(data.Coeff[i]);                      }                        i = 0;                      while (i < n)                      {                          int j;                          var k = barkMap[i];                          var p = .5f;                          var q = .5f;                          var w = wMap[k];                          for (j = 1; j < _order; j += 2)                          {                              q *= w - data.Coeff[j - 1];                              p *= w - data.Coeff[j];                          }                          if (j == _order)                          {                              // odd order filter; slightly assymetric                              q *= w - data.Coeff[j - 1];                              p *= p * (4f - w * w);                              q *= q;                          }                          else                          {                              // even order filter; still symetric                              p *= p * (2f - w);                              q *= q * (2f + w);                          }                            // calc the dB of this bark section                          q = data.Amp / (float)Math.Sqrt(p + q) - _ampOfs;                            // now convert to a linear sample multiplier                          q = (float)Math.Exp(q * 0.11512925f);                            residue[i] *= q;                            while (barkMap[++i] == k) residue[i] *= q;                      }                  }                  else                  {                      Array.Clear(residue' 0' n);                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _partitionClass = new int[(int)packet.ReadBits(5)];
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: for (int i = 0; i < _partitionClass.Length; i++)                  {                      _partitionClass[i] = (int)packet.ReadBits(4);                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: for (int i = 0; i <= maximum_class; i++)                  {                      _classDimensions[i] = (int)packet.ReadBits(3) + 1;                      _classSubclasses[i] = (int)packet.ReadBits(2);                      if (_classSubclasses[i] > 0)                      {                          _classMasterBookIndex[i] = (int)packet.ReadBits(8);                          _classMasterbooks[i] = _vorbis.Books[_classMasterBookIndex[i]];                      }                        _subclassBooks[i] = new VorbisCodebook[1 << _classSubclasses[i]];                      _subclassBookIndex[i] = new int[_subclassBooks[i].Length];                      for (int j = 0; j < _subclassBooks[i].Length; j++)                      {                          var bookNum = (int)packet.ReadBits(8) - 1;                          if (bookNum >= 0) _subclassBooks[i][j] = _vorbis.Books[bookNum];                          _subclassBookIndex[i][j] = bookNum;                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: for (int i = 0; i <= maximum_class; i++)                  {                      _classDimensions[i] = (int)packet.ReadBits(3) + 1;                      _classSubclasses[i] = (int)packet.ReadBits(2);                      if (_classSubclasses[i] > 0)                      {                          _classMasterBookIndex[i] = (int)packet.ReadBits(8);                          _classMasterbooks[i] = _vorbis.Books[_classMasterBookIndex[i]];                      }                        _subclassBooks[i] = new VorbisCodebook[1 << _classSubclasses[i]];                      _subclassBookIndex[i] = new int[_subclassBooks[i].Length];                      for (int j = 0; j < _subclassBooks[i].Length; j++)                      {                          var bookNum = (int)packet.ReadBits(8) - 1;                          if (bookNum >= 0) _subclassBooks[i][j] = _vorbis.Books[bookNum];                          _subclassBookIndex[i][j] = bookNum;                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: for (int i = 0; i <= maximum_class; i++)                  {                      _classDimensions[i] = (int)packet.ReadBits(3) + 1;                      _classSubclasses[i] = (int)packet.ReadBits(2);                      if (_classSubclasses[i] > 0)                      {                          _classMasterBookIndex[i] = (int)packet.ReadBits(8);                          _classMasterbooks[i] = _vorbis.Books[_classMasterBookIndex[i]];                      }                        _subclassBooks[i] = new VorbisCodebook[1 << _classSubclasses[i]];                      _subclassBookIndex[i] = new int[_subclassBooks[i].Length];                      for (int j = 0; j < _subclassBooks[i].Length; j++)                      {                          var bookNum = (int)packet.ReadBits(8) - 1;                          if (bookNum >= 0) _subclassBooks[i][j] = _vorbis.Books[bookNum];                          _subclassBookIndex[i][j] = bookNum;                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: for (int i = 0; i <= maximum_class; i++)                  {                      _classDimensions[i] = (int)packet.ReadBits(3) + 1;                      _classSubclasses[i] = (int)packet.ReadBits(2);                      if (_classSubclasses[i] > 0)                      {                          _classMasterBookIndex[i] = (int)packet.ReadBits(8);                          _classMasterbooks[i] = _vorbis.Books[_classMasterBookIndex[i]];                      }                        _subclassBooks[i] = new VorbisCodebook[1 << _classSubclasses[i]];                      _subclassBookIndex[i] = new int[_subclassBooks[i].Length];                      for (int j = 0; j < _subclassBooks[i].Length; j++)                      {                          var bookNum = (int)packet.ReadBits(8) - 1;                          if (bookNum >= 0) _subclassBooks[i][j] = _vorbis.Books[bookNum];                          _subclassBookIndex[i][j] = bookNum;                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: _multiplier = (int)packet.ReadBits(2);
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: var rangeBits = (int)packet.ReadBits(4);
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: for (int i = 2; i < _lNeigh.Length; i++)                  {                      _lNeigh[i] = 0;                      _hNeigh[i] = 1;                      _sortIdx[i] = i;                      for (int j = 2; j < i; j++)                      {                          var temp = _xList[j];                          if (temp < _xList[i])                          {                              if (temp > _xList[_lNeigh[i]]) _lNeigh[i] = j;                          }                          else                          {                              if (temp < _xList[_hNeigh[i]]) _hNeigh[i] = j;                          }                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following statement contains a magic number: for (int i = 2; i < _lNeigh.Length; i++)                  {                      _lNeigh[i] = 0;                      _hNeigh[i] = 1;                      _sortIdx[i] = i;                      for (int j = 2; j < i; j++)                      {                          var temp = _xList[j];                          if (temp < _xList[i])                          {                              if (temp > _xList[_lNeigh[i]]) _lNeigh[i] = j;                          }                          else                          {                              if (temp < _xList[_hNeigh[i]]) _hNeigh[i] = j;                          }                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnpackPacket,The following statement contains a magic number: Array.Clear(data.Posts' 0' 64);
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnpackPacket,The following statement contains a magic number: if (packet.ReadBit())                  {                      var postCount = 2;                      data.Posts[0] = (int)packet.ReadBits(_yBits);                      data.Posts[1] = (int)packet.ReadBits(_yBits);                        for (int i = 0; i < _partitionClass.Length; i++)                      {                          var clsNum = _partitionClass[i];                          var cdim = _classDimensions[clsNum];                          var cbits = _classSubclasses[clsNum];                          var csub = (1 << cbits) - 1;                          var cval = 0U;                          if (cbits > 0)                          {                              if ((cval = (uint)_classMasterbooks[clsNum].DecodeScalar(packet)) == uint.MaxValue)                              {                                  // we read a bad value...  bail                                  postCount = 0;                                  break;                              }                          }                          for (int j = 0; j < cdim; j++)                          {                              var book = _subclassBooks[clsNum][cval & csub];                              cval >>= cbits;                              if (book != null)                              {                                  if ((data.Posts[postCount] = book.DecodeScalar(packet)) == -1)                                  {                                      // we read a bad value... bail                                      postCount = 0;                                      i = _partitionClass.Length;                                      break;                                  }                              }                              ++postCount;                          }                      }                        data.PostCount = postCount;                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Apply,The following statement contains a magic number: var n = data.BlockSize / 2;
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnwrapPosts,The following statement contains a magic number: Array.Clear(_stepFlags' 2' 62);
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnwrapPosts,The following statement contains a magic number: Array.Clear(_stepFlags' 2' 62);
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnwrapPosts,The following statement contains a magic number: Array.Clear(_finalY' 2' 62);
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnwrapPosts,The following statement contains a magic number: Array.Clear(_finalY' 2' 62);
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnwrapPosts,The following statement contains a magic number: for (int i = 2; i < data.PostCount; i++)                  {                      var lowOfs = _lNeigh[i];                      var highOfs = _hNeigh[i];                        var predicted = RenderPoint(_xList[lowOfs]' _finalY[lowOfs]' _xList[highOfs]' _finalY[highOfs]' _xList[i]);                        var val = data.Posts[i];                      var highroom = _range - predicted;                      var lowroom = predicted;                      int room;                      if (highroom < lowroom)                      {                          room = highroom * 2;                      }                      else                      {                          room = lowroom * 2;                      }                      if (val != 0)                      {                          _stepFlags[lowOfs] = true;                          _stepFlags[highOfs] = true;                          _stepFlags[i] = true;                            if (val >= room)                          {                              if (highroom > lowroom)                              {                                  _finalY[i] = val - lowroom + predicted;                              }                              else                              {                                  _finalY[i] = predicted - val + highroom - 1;                              }                          }                          else                          {                              if ((val % 2) == 1)                              {                                  // odd                                  _finalY[i] = predicted - ((val + 1) / 2);                              }                              else                              {                                  // even                                  _finalY[i] = predicted + (val / 2);                              }                          }                      }                      else                      {                          _stepFlags[i] = false;                          _finalY[i] = predicted;                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnwrapPosts,The following statement contains a magic number: for (int i = 2; i < data.PostCount; i++)                  {                      var lowOfs = _lNeigh[i];                      var highOfs = _hNeigh[i];                        var predicted = RenderPoint(_xList[lowOfs]' _finalY[lowOfs]' _xList[highOfs]' _finalY[highOfs]' _xList[i]);                        var val = data.Posts[i];                      var highroom = _range - predicted;                      var lowroom = predicted;                      int room;                      if (highroom < lowroom)                      {                          room = highroom * 2;                      }                      else                      {                          room = lowroom * 2;                      }                      if (val != 0)                      {                          _stepFlags[lowOfs] = true;                          _stepFlags[highOfs] = true;                          _stepFlags[i] = true;                            if (val >= room)                          {                              if (highroom > lowroom)                              {                                  _finalY[i] = val - lowroom + predicted;                              }                              else                              {                                  _finalY[i] = predicted - val + highroom - 1;                              }                          }                          else                          {                              if ((val % 2) == 1)                              {                                  // odd                                  _finalY[i] = predicted - ((val + 1) / 2);                              }                              else                              {                                  // even                                  _finalY[i] = predicted + (val / 2);                              }                          }                      }                      else                      {                          _stepFlags[i] = false;                          _finalY[i] = predicted;                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnwrapPosts,The following statement contains a magic number: for (int i = 2; i < data.PostCount; i++)                  {                      var lowOfs = _lNeigh[i];                      var highOfs = _hNeigh[i];                        var predicted = RenderPoint(_xList[lowOfs]' _finalY[lowOfs]' _xList[highOfs]' _finalY[highOfs]' _xList[i]);                        var val = data.Posts[i];                      var highroom = _range - predicted;                      var lowroom = predicted;                      int room;                      if (highroom < lowroom)                      {                          room = highroom * 2;                      }                      else                      {                          room = lowroom * 2;                      }                      if (val != 0)                      {                          _stepFlags[lowOfs] = true;                          _stepFlags[highOfs] = true;                          _stepFlags[i] = true;                            if (val >= room)                          {                              if (highroom > lowroom)                              {                                  _finalY[i] = val - lowroom + predicted;                              }                              else                              {                                  _finalY[i] = predicted - val + highroom - 1;                              }                          }                          else                          {                              if ((val % 2) == 1)                              {                                  // odd                                  _finalY[i] = predicted - ((val + 1) / 2);                              }                              else                              {                                  // even                                  _finalY[i] = predicted + (val / 2);                              }                          }                      }                      else                      {                          _stepFlags[i] = false;                          _finalY[i] = predicted;                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnwrapPosts,The following statement contains a magic number: for (int i = 2; i < data.PostCount; i++)                  {                      var lowOfs = _lNeigh[i];                      var highOfs = _hNeigh[i];                        var predicted = RenderPoint(_xList[lowOfs]' _finalY[lowOfs]' _xList[highOfs]' _finalY[highOfs]' _xList[i]);                        var val = data.Posts[i];                      var highroom = _range - predicted;                      var lowroom = predicted;                      int room;                      if (highroom < lowroom)                      {                          room = highroom * 2;                      }                      else                      {                          room = lowroom * 2;                      }                      if (val != 0)                      {                          _stepFlags[lowOfs] = true;                          _stepFlags[highOfs] = true;                          _stepFlags[i] = true;                            if (val >= room)                          {                              if (highroom > lowroom)                              {                                  _finalY[i] = val - lowroom + predicted;                              }                              else                              {                                  _finalY[i] = predicted - val + highroom - 1;                              }                          }                          else                          {                              if ((val % 2) == 1)                              {                                  // odd                                  _finalY[i] = predicted - ((val + 1) / 2);                              }                              else                              {                                  // even                                  _finalY[i] = predicted + (val / 2);                              }                          }                      }                      else                      {                          _stepFlags[i] = false;                          _finalY[i] = predicted;                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnwrapPosts,The following statement contains a magic number: for (int i = 2; i < data.PostCount; i++)                  {                      var lowOfs = _lNeigh[i];                      var highOfs = _hNeigh[i];                        var predicted = RenderPoint(_xList[lowOfs]' _finalY[lowOfs]' _xList[highOfs]' _finalY[highOfs]' _xList[i]);                        var val = data.Posts[i];                      var highroom = _range - predicted;                      var lowroom = predicted;                      int room;                      if (highroom < lowroom)                      {                          room = highroom * 2;                      }                      else                      {                          room = lowroom * 2;                      }                      if (val != 0)                      {                          _stepFlags[lowOfs] = true;                          _stepFlags[highOfs] = true;                          _stepFlags[i] = true;                            if (val >= room)                          {                              if (highroom > lowroom)                              {                                  _finalY[i] = val - lowroom + predicted;                              }                              else                              {                                  _finalY[i] = predicted - val + highroom - 1;                              }                          }                          else                          {                              if ((val % 2) == 1)                              {                                  // odd                                  _finalY[i] = predicted - ((val + 1) / 2);                              }                              else                              {                                  // even                                  _finalY[i] = predicted + (val / 2);                              }                          }                      }                      else                      {                          _stepFlags[i] = false;                          _finalY[i] = predicted;                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,UnwrapPosts,The following statement contains a magic number: for (int i = 2; i < data.PostCount; i++)                  {                      var lowOfs = _lNeigh[i];                      var highOfs = _hNeigh[i];                        var predicted = RenderPoint(_xList[lowOfs]' _finalY[lowOfs]' _xList[highOfs]' _finalY[highOfs]' _xList[i]);                        var val = data.Posts[i];                      var highroom = _range - predicted;                      var lowroom = predicted;                      int room;                      if (highroom < lowroom)                      {                          room = highroom * 2;                      }                      else                      {                          room = lowroom * 2;                      }                      if (val != 0)                      {                          _stepFlags[lowOfs] = true;                          _stepFlags[highOfs] = true;                          _stepFlags[i] = true;                            if (val >= room)                          {                              if (highroom > lowroom)                              {                                  _finalY[i] = val - lowroom + predicted;                              }                              else                              {                                  _finalY[i] = predicted - val + highroom - 1;                              }                          }                          else                          {                              if ((val % 2) == 1)                              {                                  // odd                                  _finalY[i] = predicted - ((val + 1) / 2);                              }                              else                              {                                  // even                                  _finalY[i] = predicted + (val / 2);                              }                          }                      }                      else                      {                          _stepFlags[i] = false;                          _finalY[i] = predicted;                      }                  }
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,RenderLineMulti,The following statement contains a magic number: var sy = 1 - (((dy >> 31) & 1) * 2);
Magic Number,NVorbis,Floor1,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,RenderLineMulti,The following statement contains a magic number: var sy = 1 - (((dy >> 31) & 1) * 2);
Magic Number,NVorbis,VorbisMapping,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMapping.cs,Init,The following statement contains a magic number: var type = (int)packet.ReadBits(16);
Magic Number,NVorbis,Mapping0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMapping.cs,Init,The following statement contains a magic number: if (packet.ReadBit()) submapCount += (int)packet.ReadBits(4);
Magic Number,NVorbis,Mapping0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMapping.cs,Init,The following statement contains a magic number: if (packet.ReadBit())                  {                      couplingSteps = (int)packet.ReadBits(8) + 1;                  }
Magic Number,NVorbis,Mapping0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMapping.cs,Init,The following statement contains a magic number: if (packet.ReadBits(2) != 0UL) throw new InvalidDataException();
Magic Number,NVorbis,Mapping0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMapping.cs,Init,The following statement contains a magic number: if (submapCount > 1)                  {                      for (int c = 0; c < ChannelSubmap.Length; c++)                      {                          mux[c] = (int)packet.ReadBits(4);                          if (mux[c] >= submapCount) throw new InvalidDataException();                      }                  }
Magic Number,NVorbis,Mapping0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMapping.cs,Init,The following statement contains a magic number: for (int j = 0; j < submapCount; j++)                  {                      packet.ReadBits(8); // unused placeholder                      var floorNum = (int)packet.ReadBits(8);                      if (floorNum >= _vorbis.Floors.Length) throw new InvalidDataException();                      var residueNum = (int)packet.ReadBits(8);                      if (residueNum >= _vorbis.Residues.Length) throw new InvalidDataException();                        Submaps[j] = new Submap                      {                          Floor = _vorbis.Floors[floorNum]'                          Residue = _vorbis.Residues[floorNum]                      };                  }
Magic Number,NVorbis,Mapping0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMapping.cs,Init,The following statement contains a magic number: for (int j = 0; j < submapCount; j++)                  {                      packet.ReadBits(8); // unused placeholder                      var floorNum = (int)packet.ReadBits(8);                      if (floorNum >= _vorbis.Floors.Length) throw new InvalidDataException();                      var residueNum = (int)packet.ReadBits(8);                      if (residueNum >= _vorbis.Residues.Length) throw new InvalidDataException();                        Submaps[j] = new Submap                      {                          Floor = _vorbis.Floors[floorNum]'                          Residue = _vorbis.Residues[floorNum]                      };                  }
Magic Number,NVorbis,Mapping0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMapping.cs,Init,The following statement contains a magic number: for (int j = 0; j < submapCount; j++)                  {                      packet.ReadBits(8); // unused placeholder                      var floorNum = (int)packet.ReadBits(8);                      if (floorNum >= _vorbis.Floors.Length) throw new InvalidDataException();                      var residueNum = (int)packet.ReadBits(8);                      if (residueNum >= _vorbis.Residues.Length) throw new InvalidDataException();                        Submaps[j] = new Submap                      {                          Floor = _vorbis.Floors[floorNum]'                          Residue = _vorbis.Residues[floorNum]                      };                  }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,Init,The following statement contains a magic number: mode.WindowType = (int)packet.ReadBits(16);
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,Init,The following statement contains a magic number: mode.TransformType = (int)packet.ReadBits(16);
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,Init,The following statement contains a magic number: var mapping = (int)packet.ReadBits(8);
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,Init,The following statement contains a magic number: if (mode.BlockFlag)              {                  // long block                  mode._windows = new float[4][];                  mode._windows[0] = new float[vorbis.Block1Size];                  mode._windows[1] = new float[vorbis.Block1Size];                  mode._windows[2] = new float[vorbis.Block1Size];                  mode._windows[3] = new float[vorbis.Block1Size];              }              else              {                  // short block                  mode._windows = new float[1][];                  mode._windows[0] = new float[vorbis.Block0Size];              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,Init,The following statement contains a magic number: if (mode.BlockFlag)              {                  // long block                  mode._windows = new float[4][];                  mode._windows[0] = new float[vorbis.Block1Size];                  mode._windows[1] = new float[vorbis.Block1Size];                  mode._windows[2] = new float[vorbis.Block1Size];                  mode._windows[3] = new float[vorbis.Block1Size];              }              else              {                  // short block                  mode._windows = new float[1][];                  mode._windows[0] = new float[vorbis.Block0Size];              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,Init,The following statement contains a magic number: if (mode.BlockFlag)              {                  // long block                  mode._windows = new float[4][];                  mode._windows[0] = new float[vorbis.Block1Size];                  mode._windows[1] = new float[vorbis.Block1Size];                  mode._windows[2] = new float[vorbis.Block1Size];                  mode._windows[3] = new float[vorbis.Block1Size];              }              else              {                  // short block                  mode._windows = new float[1][];                  mode._windows[0] = new float[vorbis.Block0Size];              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,CalcWindows,The following statement contains a magic number: for (int idx = 0; idx < _windows.Length; idx++)              {                  var array = _windows[idx];                    var left = ((idx & 1) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                  var wnd = BlockSize;                  var right = ((idx & 2) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                    var leftbegin = wnd / 4 - left / 2;                  var rightbegin = wnd - wnd / 4 - right / 2;                    for (int i = 0; i < left; i++)                  {                      var x = (float)Math.Sin((i + .5) / left * M_PI2);                      x *= x;                      array[leftbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    for (int i = leftbegin + left; i < rightbegin; i++)                  {                      array[i] = 1.0f;                  }                    for (int i = 0; i < right; i++)                  {                      var x = (float)Math.Sin((right - i - .5) / right * M_PI2);                      x *= x;                      array[rightbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    // apply a scaling factor to the window so we don't have to clip the output                  for (int i = 0; i < wnd; i++)                  {                      array[i] /= 1.38396f;                  }              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,CalcWindows,The following statement contains a magic number: for (int idx = 0; idx < _windows.Length; idx++)              {                  var array = _windows[idx];                    var left = ((idx & 1) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                  var wnd = BlockSize;                  var right = ((idx & 2) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                    var leftbegin = wnd / 4 - left / 2;                  var rightbegin = wnd - wnd / 4 - right / 2;                    for (int i = 0; i < left; i++)                  {                      var x = (float)Math.Sin((i + .5) / left * M_PI2);                      x *= x;                      array[leftbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    for (int i = leftbegin + left; i < rightbegin; i++)                  {                      array[i] = 1.0f;                  }                    for (int i = 0; i < right; i++)                  {                      var x = (float)Math.Sin((right - i - .5) / right * M_PI2);                      x *= x;                      array[rightbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    // apply a scaling factor to the window so we don't have to clip the output                  for (int i = 0; i < wnd; i++)                  {                      array[i] /= 1.38396f;                  }              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,CalcWindows,The following statement contains a magic number: for (int idx = 0; idx < _windows.Length; idx++)              {                  var array = _windows[idx];                    var left = ((idx & 1) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                  var wnd = BlockSize;                  var right = ((idx & 2) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                    var leftbegin = wnd / 4 - left / 2;                  var rightbegin = wnd - wnd / 4 - right / 2;                    for (int i = 0; i < left; i++)                  {                      var x = (float)Math.Sin((i + .5) / left * M_PI2);                      x *= x;                      array[leftbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    for (int i = leftbegin + left; i < rightbegin; i++)                  {                      array[i] = 1.0f;                  }                    for (int i = 0; i < right; i++)                  {                      var x = (float)Math.Sin((right - i - .5) / right * M_PI2);                      x *= x;                      array[rightbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    // apply a scaling factor to the window so we don't have to clip the output                  for (int i = 0; i < wnd; i++)                  {                      array[i] /= 1.38396f;                  }              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,CalcWindows,The following statement contains a magic number: for (int idx = 0; idx < _windows.Length; idx++)              {                  var array = _windows[idx];                    var left = ((idx & 1) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                  var wnd = BlockSize;                  var right = ((idx & 2) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                    var leftbegin = wnd / 4 - left / 2;                  var rightbegin = wnd - wnd / 4 - right / 2;                    for (int i = 0; i < left; i++)                  {                      var x = (float)Math.Sin((i + .5) / left * M_PI2);                      x *= x;                      array[leftbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    for (int i = leftbegin + left; i < rightbegin; i++)                  {                      array[i] = 1.0f;                  }                    for (int i = 0; i < right; i++)                  {                      var x = (float)Math.Sin((right - i - .5) / right * M_PI2);                      x *= x;                      array[rightbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    // apply a scaling factor to the window so we don't have to clip the output                  for (int i = 0; i < wnd; i++)                  {                      array[i] /= 1.38396f;                  }              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,CalcWindows,The following statement contains a magic number: for (int idx = 0; idx < _windows.Length; idx++)              {                  var array = _windows[idx];                    var left = ((idx & 1) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                  var wnd = BlockSize;                  var right = ((idx & 2) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                    var leftbegin = wnd / 4 - left / 2;                  var rightbegin = wnd - wnd / 4 - right / 2;                    for (int i = 0; i < left; i++)                  {                      var x = (float)Math.Sin((i + .5) / left * M_PI2);                      x *= x;                      array[leftbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    for (int i = leftbegin + left; i < rightbegin; i++)                  {                      array[i] = 1.0f;                  }                    for (int i = 0; i < right; i++)                  {                      var x = (float)Math.Sin((right - i - .5) / right * M_PI2);                      x *= x;                      array[rightbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    // apply a scaling factor to the window so we don't have to clip the output                  for (int i = 0; i < wnd; i++)                  {                      array[i] /= 1.38396f;                  }              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,CalcWindows,The following statement contains a magic number: for (int idx = 0; idx < _windows.Length; idx++)              {                  var array = _windows[idx];                    var left = ((idx & 1) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                  var wnd = BlockSize;                  var right = ((idx & 2) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                    var leftbegin = wnd / 4 - left / 2;                  var rightbegin = wnd - wnd / 4 - right / 2;                    for (int i = 0; i < left; i++)                  {                      var x = (float)Math.Sin((i + .5) / left * M_PI2);                      x *= x;                      array[leftbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    for (int i = leftbegin + left; i < rightbegin; i++)                  {                      array[i] = 1.0f;                  }                    for (int i = 0; i < right; i++)                  {                      var x = (float)Math.Sin((right - i - .5) / right * M_PI2);                      x *= x;                      array[rightbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    // apply a scaling factor to the window so we don't have to clip the output                  for (int i = 0; i < wnd; i++)                  {                      array[i] /= 1.38396f;                  }              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,CalcWindows,The following statement contains a magic number: for (int idx = 0; idx < _windows.Length; idx++)              {                  var array = _windows[idx];                    var left = ((idx & 1) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                  var wnd = BlockSize;                  var right = ((idx & 2) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                    var leftbegin = wnd / 4 - left / 2;                  var rightbegin = wnd - wnd / 4 - right / 2;                    for (int i = 0; i < left; i++)                  {                      var x = (float)Math.Sin((i + .5) / left * M_PI2);                      x *= x;                      array[leftbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    for (int i = leftbegin + left; i < rightbegin; i++)                  {                      array[i] = 1.0f;                  }                    for (int i = 0; i < right; i++)                  {                      var x = (float)Math.Sin((right - i - .5) / right * M_PI2);                      x *= x;                      array[rightbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    // apply a scaling factor to the window so we don't have to clip the output                  for (int i = 0; i < wnd; i++)                  {                      array[i] /= 1.38396f;                  }              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,CalcWindows,The following statement contains a magic number: for (int idx = 0; idx < _windows.Length; idx++)              {                  var array = _windows[idx];                    var left = ((idx & 1) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                  var wnd = BlockSize;                  var right = ((idx & 2) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                    var leftbegin = wnd / 4 - left / 2;                  var rightbegin = wnd - wnd / 4 - right / 2;                    for (int i = 0; i < left; i++)                  {                      var x = (float)Math.Sin((i + .5) / left * M_PI2);                      x *= x;                      array[leftbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    for (int i = leftbegin + left; i < rightbegin; i++)                  {                      array[i] = 1.0f;                  }                    for (int i = 0; i < right; i++)                  {                      var x = (float)Math.Sin((right - i - .5) / right * M_PI2);                      x *= x;                      array[rightbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    // apply a scaling factor to the window so we don't have to clip the output                  for (int i = 0; i < wnd; i++)                  {                      array[i] /= 1.38396f;                  }              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,CalcWindows,The following statement contains a magic number: for (int idx = 0; idx < _windows.Length; idx++)              {                  var array = _windows[idx];                    var left = ((idx & 1) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                  var wnd = BlockSize;                  var right = ((idx & 2) == 0 ? _vorbis.Block0Size : _vorbis.Block1Size) / 2;                    var leftbegin = wnd / 4 - left / 2;                  var rightbegin = wnd - wnd / 4 - right / 2;                    for (int i = 0; i < left; i++)                  {                      var x = (float)Math.Sin((i + .5) / left * M_PI2);                      x *= x;                      array[leftbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    for (int i = leftbegin + left; i < rightbegin; i++)                  {                      array[i] = 1.0f;                  }                    for (int i = 0; i < right; i++)                  {                      var x = (float)Math.Sin((right - i - .5) / right * M_PI2);                      x *= x;                      array[rightbegin + i] = (float)Math.Sin(x * M_PI2);                  }                    // apply a scaling factor to the window so we don't have to clip the output                  for (int i = 0; i < wnd; i++)                  {                      array[i] /= 1.38396f;                  }              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,GetWindow,The following statement contains a magic number: if (BlockFlag)              {                  if (next)                  {                      if (prev) return _windows[3];                      return _windows[2];                  }                  else if (prev)                  {                      return _windows[1];                  }              }
Magic Number,NVorbis,VorbisMode,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMode.cs,GetWindow,The following statement contains a magic number: if (BlockFlag)              {                  if (next)                  {                      if (prev) return _windows[3];                      return _windows[2];                  }                  else if (prev)                  {                      return _windows[1];                  }              }
Magic Number,NVorbis,VorbisResidue,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following statement contains a magic number: var type = (int)packet.ReadBits(16);
Magic Number,NVorbis,VorbisResidue,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following statement contains a magic number: switch (type)              {                  case 0: residue = new Residue0(vorbis); break;                  case 1: residue = new Residue1(vorbis); break;                  case 2: residue = new Residue2(vorbis); break;              }
Magic Number,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following statement contains a magic number: _begin = (int)packet.ReadBits(24);
Magic Number,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following statement contains a magic number: _end = (int)packet.ReadBits(24);
Magic Number,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following statement contains a magic number: _partitionSize = (int)packet.ReadBits(24) + 1;
Magic Number,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following statement contains a magic number: _classifications = (int)packet.ReadBits(6) + 1;
Magic Number,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following statement contains a magic number: _classBook = _vorbis.Books[(int)packet.ReadBits(8)];
Magic Number,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following statement contains a magic number: for (int i = 0; i < _classifications; i++)                  {                      var low_bits = (int)packet.ReadBits(3);                      if (packet.ReadBit())                      {                          _cascade[i] = (int)packet.ReadBits(5) << 3 | low_bits;                      }                      else                      {                          _cascade[i] = low_bits;                      }                      acc += icount(_cascade[i]);                  }
Magic Number,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following statement contains a magic number: for (int i = 0; i < _classifications; i++)                  {                      var low_bits = (int)packet.ReadBits(3);                      if (packet.ReadBit())                      {                          _cascade[i] = (int)packet.ReadBits(5) << 3 | low_bits;                      }                      else                      {                          _cascade[i] = low_bits;                      }                      acc += icount(_cascade[i]);                  }
Magic Number,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following statement contains a magic number: for (int i = 0; i < _classifications; i++)                  {                      var low_bits = (int)packet.ReadBits(3);                      if (packet.ReadBit())                      {                          _cascade[i] = (int)packet.ReadBits(5) << 3 | low_bits;                      }                      else                      {                          _cascade[i] = low_bits;                      }                      acc += icount(_cascade[i]);                  }
Magic Number,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following statement contains a magic number: for (var i = 0; i < acc; i++)                  {                      bookNums[i] = (int)packet.ReadBits(8);                      if (_vorbis.Books[bookNums[i]].MapType == 0) throw new InvalidDataException();                  }
Magic Number,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Decode,The following statement contains a magic number: var end = _end < blockSize / 2 ? _end : blockSize / 2;
Magic Number,NVorbis,Residue0,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Decode,The following statement contains a magic number: var end = _end < blockSize / 2 ? _end : blockSize / 2;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,ProcessStreamHeader,The following statement contains a magic number: if (!packet.ReadBytes(7).SequenceEqual(new byte[] { 0x01' 0x76' 0x6f' 0x72' 0x62' 0x69' 0x73 }))              {                  // don't mark the packet as done... it might be used elsewhere                  _glueBits += packet.Length * 8;                  return false;              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,ProcessStreamHeader,The following statement contains a magic number: if (!packet.ReadBytes(7).SequenceEqual(new byte[] { 0x01' 0x76' 0x6f' 0x72' 0x62' 0x69' 0x73 }))              {                  // don't mark the packet as done... it might be used elsewhere                  _glueBits += packet.Length * 8;                  return false;              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,ProcessStreamHeader,The following statement contains a magic number: _glueBits += 56;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,ProcessStreamHeader,The following statement contains a magic number: Block0Size = 1 << (int)packet.ReadBits(4);
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,ProcessStreamHeader,The following statement contains a magic number: Block1Size = 1 << (int)packet.ReadBits(4);
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,ProcessStreamHeader,The following statement contains a magic number: if (_nominalBitrate == 0)              {                  if (_upperBitrate > 0 && _lowerBitrate > 0)                  {                      _nominalBitrate = (_upperBitrate + _lowerBitrate) / 2;                  }              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,ProcessStreamHeader,The following statement contains a magic number: _metaBits += packet.BitsRead - startPos + 8;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,ProcessStreamHeader,The following statement contains a magic number: _wasteHdrBits += 8 * packet.Length - packet.BitsRead;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadComments,The following statement contains a magic number: if (!packet.ReadBytes(7).SequenceEqual(new byte[] { 0x03' 0x76' 0x6f' 0x72' 0x62' 0x69' 0x73 }))              {                  return false;              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadComments,The following statement contains a magic number: _glueBits += 56;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadComments,The following statement contains a magic number: _metaBits += packet.BitsRead - 56;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadComments,The following statement contains a magic number: _wasteHdrBits += 8 * packet.Length - packet.BitsRead;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadBooks,The following statement contains a magic number: if (!packet.ReadBytes(7).SequenceEqual(new byte[] { 0x05' 0x76' 0x6f' 0x72' 0x62' 0x69' 0x73 }))              {                  return false;              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadBooks,The following statement contains a magic number: Times = new VorbisTime[(int)packet.ReadBits(6) + 1];
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadBooks,The following statement contains a magic number: Floors = new VorbisFloor[(int)packet.ReadBits(6) + 1];
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadBooks,The following statement contains a magic number: Residues = new VorbisResidue[(int)packet.ReadBits(6) + 1];
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadBooks,The following statement contains a magic number: Maps = new VorbisMapping[(int)packet.ReadBits(6) + 1];
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadBooks,The following statement contains a magic number: Modes = new VorbisMode[(int)packet.ReadBits(6) + 1];
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,LoadBooks,The following statement contains a magic number: _wasteHdrBits += 8 * packet.Length - packet.BitsRead;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,ResetDecoder,The following statement contains a magic number: if (isFullReset)              {                  _noExecuteChannel = new bool[_channels];                  _floorData = new VorbisFloor.PacketData[_channels];                    _residue = new float[_channels][];                  for (int i = 0; i < _channels; i++)                  {                      _residue[i] = new float[Block1Size];                  }                    _outputBuffer = new RingBuffer(Block1Size * 2 * _channels);                  _outputBuffer.Channels = _channels;              }              else              {                  _outputBuffer.Clear();              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,UnpackPacket,The following statement contains a magic number: if (_mode.BlockFlag)              {                  _prevFlag = packet.ReadBit();                  _nextFlag = packet.ReadBit();                  modeBits += 2;              }              else              {                  _prevFlag = _nextFlag = false;              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,UnpackPacket,The following statement contains a magic number: var halfBlockSize = _mode.BlockSize / 2;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,UnpackPacket,The following statement contains a magic number: _wasteBits += 8 * packet.Length - packet.BitsRead;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,DecodePacket,The following statement contains a magic number: var halfSizeW = _mode.BlockSize / 2;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,OverlapSamples,The following statement contains a magic number: if (_mode.BlockFlag)              {                  // if the flag is true' it's a long block                  // if the flag is false' it's a short block                  if (!_prevFlag)                  {                      // previous block was short                      left = Block1Size / 4 - Block0Size / 4;  // where to start in pcm[][]                      center = left + Block0Size / 2;     // adjust the center so we're correctly clearing the buffer...                      begin = Block0Size / -2 - left;     // where to start in _outputBuffer[']                  }                    if (!_nextFlag)                  {                      // next block is short                      right -= sizeW / 4 - Block0Size / 4;                      end = sizeW / 4 + Block0Size / 4;                  }              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,OverlapSamples,The following statement contains a magic number: if (_mode.BlockFlag)              {                  // if the flag is true' it's a long block                  // if the flag is false' it's a short block                  if (!_prevFlag)                  {                      // previous block was short                      left = Block1Size / 4 - Block0Size / 4;  // where to start in pcm[][]                      center = left + Block0Size / 2;     // adjust the center so we're correctly clearing the buffer...                      begin = Block0Size / -2 - left;     // where to start in _outputBuffer[']                  }                    if (!_nextFlag)                  {                      // next block is short                      right -= sizeW / 4 - Block0Size / 4;                      end = sizeW / 4 + Block0Size / 4;                  }              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,OverlapSamples,The following statement contains a magic number: if (_mode.BlockFlag)              {                  // if the flag is true' it's a long block                  // if the flag is false' it's a short block                  if (!_prevFlag)                  {                      // previous block was short                      left = Block1Size / 4 - Block0Size / 4;  // where to start in pcm[][]                      center = left + Block0Size / 2;     // adjust the center so we're correctly clearing the buffer...                      begin = Block0Size / -2 - left;     // where to start in _outputBuffer[']                  }                    if (!_nextFlag)                  {                      // next block is short                      right -= sizeW / 4 - Block0Size / 4;                      end = sizeW / 4 + Block0Size / 4;                  }              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,OverlapSamples,The following statement contains a magic number: if (_mode.BlockFlag)              {                  // if the flag is true' it's a long block                  // if the flag is false' it's a short block                  if (!_prevFlag)                  {                      // previous block was short                      left = Block1Size / 4 - Block0Size / 4;  // where to start in pcm[][]                      center = left + Block0Size / 2;     // adjust the center so we're correctly clearing the buffer...                      begin = Block0Size / -2 - left;     // where to start in _outputBuffer[']                  }                    if (!_nextFlag)                  {                      // next block is short                      right -= sizeW / 4 - Block0Size / 4;                      end = sizeW / 4 + Block0Size / 4;                  }              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,OverlapSamples,The following statement contains a magic number: if (_mode.BlockFlag)              {                  // if the flag is true' it's a long block                  // if the flag is false' it's a short block                  if (!_prevFlag)                  {                      // previous block was short                      left = Block1Size / 4 - Block0Size / 4;  // where to start in pcm[][]                      center = left + Block0Size / 2;     // adjust the center so we're correctly clearing the buffer...                      begin = Block0Size / -2 - left;     // where to start in _outputBuffer[']                  }                    if (!_nextFlag)                  {                      // next block is short                      right -= sizeW / 4 - Block0Size / 4;                      end = sizeW / 4 + Block0Size / 4;                  }              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,OverlapSamples,The following statement contains a magic number: if (_mode.BlockFlag)              {                  // if the flag is true' it's a long block                  // if the flag is false' it's a short block                  if (!_prevFlag)                  {                      // previous block was short                      left = Block1Size / 4 - Block0Size / 4;  // where to start in pcm[][]                      center = left + Block0Size / 2;     // adjust the center so we're correctly clearing the buffer...                      begin = Block0Size / -2 - left;     // where to start in _outputBuffer[']                  }                    if (!_nextFlag)                  {                      // next block is short                      right -= sizeW / 4 - Block0Size / 4;                      end = sizeW / 4 + Block0Size / 4;                  }              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,OverlapSamples,The following statement contains a magic number: if (_mode.BlockFlag)              {                  // if the flag is true' it's a long block                  // if the flag is false' it's a short block                  if (!_prevFlag)                  {                      // previous block was short                      left = Block1Size / 4 - Block0Size / 4;  // where to start in pcm[][]                      center = left + Block0Size / 2;     // adjust the center so we're correctly clearing the buffer...                      begin = Block0Size / -2 - left;     // where to start in _outputBuffer[']                  }                    if (!_nextFlag)                  {                      // next block is short                      right -= sizeW / 4 - Block0Size / 4;                      end = sizeW / 4 + Block0Size / 4;                  }              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,OverlapSamples,The following statement contains a magic number: if (_mode.BlockFlag)              {                  // if the flag is true' it's a long block                  // if the flag is false' it's a short block                  if (!_prevFlag)                  {                      // previous block was short                      left = Block1Size / 4 - Block0Size / 4;  // where to start in pcm[][]                      center = left + Block0Size / 2;     // adjust the center so we're correctly clearing the buffer...                      begin = Block0Size / -2 - left;     // where to start in _outputBuffer[']                  }                    if (!_nextFlag)                  {                      // next block is short                      right -= sizeW / 4 - Block0Size / 4;                      end = sizeW / 4 + Block0Size / 4;                  }              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,DecodeNextPacket,The following statement contains a magic number: try              {                  // get the next packet                  var packetProvider = _packetProvider;                  if (packetProvider != null)                  {                      packet = packetProvider.GetNextPacket();                  }                    // if the packet is null' we've hit the end or the packet reader has been disposed...                  if (packet == null)                  {                      _eosFound = true;                      return;                  }                    // keep our page count in sync                  if (!_pagesSeen.Contains((_lastPageSeen = packet.PageSequenceNumber))) _pagesSeen.Add(_lastPageSeen);                    // check for resync                  if (packet.IsResync)                  {                      ResetDecoder(false); // if we're a resync' our current decoder state is invalid...                  }                    // check for parameter change                  if (packet == _parameterChangePacket)                  {                      _isParameterChange = true;                      ProcessParameterChange(packet);                      return;                  }                    if (!UnpackPacket(packet))                  {                      packet.Done();                      _wasteBits += 8 * packet.Length;                      return;                  }                  packet.Done();                    // we can now safely decode all the data without having to worry about a corrupt or partial packet                    DecodePacket();                  var samplesDecoded = OverlapSamples();                    // we can do something cool here...  mark down how many samples were decoded in this packet                  if (packet.GranuleCount.HasValue == false)                  {                      packet.GranuleCount = samplesDecoded;                  }                    // update our position                    UpdatePosition(samplesDecoded' packet);                    // a little statistical housekeeping...                  var sc = Utils.Sum(_sampleCountHistory) + samplesDecoded;                    _bitsPerPacketHistory.Enqueue((int)packet.BitsRead);                  _sampleCountHistory.Enqueue(samplesDecoded);                    while (sc > _sampleRate)                  {                      _bitsPerPacketHistory.Dequeue();                      sc -= _sampleCountHistory.Dequeue();                  }              }              catch              {                  if (packet != null)                  {                      packet.Done();                  }                  throw;              }              finally              {                  _sw.Stop();              }
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,GetPacketLength,The following statement contains a magic number: return mode.BlockSize / 4 + prevMode.BlockSize / 4;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,GetPacketLength,The following statement contains a magic number: return mode.BlockSize / 4 + prevMode.BlockSize / 4;
Magic Number,NVorbis,VorbisStreamDecoder,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisStreamDecoder.cs,SeekTo,The following statement contains a magic number: if (granulePos > 0)              {                  packet = _packetProvider.FindPacket(granulePos' GetPacketLength);                  if (packet == null) throw new ArgumentOutOfRangeException("granulePos");              }              else              {                  packet = _packetProvider.GetPacket(4);              }
Magic Number,NVorbis,VorbisTime,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisTime.cs,Init,The following statement contains a magic number: var type = (int)packet.ReadBits(16);
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: if (_stream.Read(_readBuffer' 0' 27) != 27) return null;
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: if (_stream.Read(_readBuffer' 0' 27) != 27) return null;
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: if (_readBuffer[0] != 0x4f || _readBuffer[1] != 0x67 || _readBuffer[2] != 0x67 || _readBuffer[3] != 0x53) return null;
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: if (_readBuffer[0] != 0x4f || _readBuffer[1] != 0x67 || _readBuffer[2] != 0x67 || _readBuffer[3] != 0x53) return null;
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: if (_readBuffer[4] != 0) return null;
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: hdr.Flags = (PageFlags)_readBuffer[5];
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: hdr.GranulePosition = BitConverter.ToInt64(_readBuffer' 6);
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: hdr.StreamSerial = BitConverter.ToInt32(_readBuffer' 14);
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: hdr.SequenceNumber = BitConverter.ToInt32(_readBuffer' 18);
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: var crc = BitConverter.ToUInt32(_readBuffer' 22);
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: for (int i = 0; i < 22; i++)              {                  _crc.Update(_readBuffer[i]);              }
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: _crc.Update(_readBuffer[26]);
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: var segCnt = (int)_readBuffer[26];
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: for (int i = 0; i < segCnt; i++)              {                  var temp = _readBuffer[i];                  _crc.Update(temp);                    if (idx == packetSizes.Count) packetSizes.Add(0);                  packetSizes[idx] += temp;                  if (temp < 255)                  {                      ++idx;                      hdr.LastPacketContinues = false;                  }                  else                  {                      hdr.LastPacketContinues = true;                  }                    size += temp;              }
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: hdr.DataOffset = position + 27 + segCnt;
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: if (_crc.Test(crc))              {                  _containerBits += 8 * (27 + segCnt);                  ++_pageCount;                  return hdr;              }
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,ReadPageHeader,The following statement contains a magic number: if (_crc.Test(crc))              {                  _containerBits += 8 * (27 + segCnt);                  ++_pageCount;                  return hdr;              }
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,FindNextPageHeader,The following statement contains a magic number: while ((hdr = ReadPageHeader(startPos)) == null)              {                  isResync = true;                  _wasteBits += 8;                  _stream.Position = ++startPos;                    var cnt = 0;                  do                  {                      var b = _stream.ReadByte();                      if (b == 0x4f)                      {                          if (_stream.ReadByte() == 0x67 && _stream.ReadByte() == 0x67 && _stream.ReadByte() == 0x53)                          {                              // found it!                              startPos += cnt;                              break;                          }                          else                          {                              _stream.Seek(-3' SeekOrigin.Current);                          }                      }                      else if (b == -1)                      {                          return null;                      }                      _wasteBits += 8;                  } while (++cnt < 65536);    // we will only search through 64KB of data to find the next sync marker.  if it can't be found' we have a badly corrupted stream.                  if (cnt == 65536) return null;              }
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,FindNextPageHeader,The following statement contains a magic number: while ((hdr = ReadPageHeader(startPos)) == null)              {                  isResync = true;                  _wasteBits += 8;                  _stream.Position = ++startPos;                    var cnt = 0;                  do                  {                      var b = _stream.ReadByte();                      if (b == 0x4f)                      {                          if (_stream.ReadByte() == 0x67 && _stream.ReadByte() == 0x67 && _stream.ReadByte() == 0x53)                          {                              // found it!                              startPos += cnt;                              break;                          }                          else                          {                              _stream.Seek(-3' SeekOrigin.Current);                          }                      }                      else if (b == -1)                      {                          return null;                      }                      _wasteBits += 8;                  } while (++cnt < 65536);    // we will only search through 64KB of data to find the next sync marker.  if it can't be found' we have a badly corrupted stream.                  if (cnt == 65536) return null;              }
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,FindNextPageHeader,The following statement contains a magic number: while ((hdr = ReadPageHeader(startPos)) == null)              {                  isResync = true;                  _wasteBits += 8;                  _stream.Position = ++startPos;                    var cnt = 0;                  do                  {                      var b = _stream.ReadByte();                      if (b == 0x4f)                      {                          if (_stream.ReadByte() == 0x67 && _stream.ReadByte() == 0x67 && _stream.ReadByte() == 0x53)                          {                              // found it!                              startPos += cnt;                              break;                          }                          else                          {                              _stream.Seek(-3' SeekOrigin.Current);                          }                      }                      else if (b == -1)                      {                          return null;                      }                      _wasteBits += 8;                  } while (++cnt < 65536);    // we will only search through 64KB of data to find the next sync marker.  if it can't be found' we have a badly corrupted stream.                  if (cnt == 65536) return null;              }
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,FindNextPageHeader,The following statement contains a magic number: while ((hdr = ReadPageHeader(startPos)) == null)              {                  isResync = true;                  _wasteBits += 8;                  _stream.Position = ++startPos;                    var cnt = 0;                  do                  {                      var b = _stream.ReadByte();                      if (b == 0x4f)                      {                          if (_stream.ReadByte() == 0x67 && _stream.ReadByte() == 0x67 && _stream.ReadByte() == 0x53)                          {                              // found it!                              startPos += cnt;                              break;                          }                          else                          {                              _stream.Seek(-3' SeekOrigin.Current);                          }                      }                      else if (b == -1)                      {                          return null;                      }                      _wasteBits += 8;                  } while (++cnt < 65536);    // we will only search through 64KB of data to find the next sync marker.  if it can't be found' we have a badly corrupted stream.                  if (cnt == 65536) return null;              }
Magic Number,NVorbis.Ogg,ContainerReader,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggContainerReader.cs,FindNextPageHeader,The following statement contains a magic number: while ((hdr = ReadPageHeader(startPos)) == null)              {                  isResync = true;                  _wasteBits += 8;                  _stream.Position = ++startPos;                    var cnt = 0;                  do                  {                      var b = _stream.ReadByte();                      if (b == 0x4f)                      {                          if (_stream.ReadByte() == 0x67 && _stream.ReadByte() == 0x67 && _stream.ReadByte() == 0x53)                          {                              // found it!                              startPos += cnt;                              break;                          }                          else                          {                              _stream.Seek(-3' SeekOrigin.Current);                          }                      }                      else if (b == -1)                      {                          return null;                      }                      _wasteBits += 8;                  } while (++cnt < 65536);    // we will only search through 64KB of data to find the next sync marker.  if it can't be found' we have a badly corrupted stream.                  if (cnt == 65536) return null;              }
Magic Number,NVorbis.Ogg,Crc,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggCrc.cs,Crc,The following statement contains a magic number: for (uint i = 0; i < 256; i++)              {                  uint s = i << 24;                  for (int j = 0; j < 8; ++j)                  {                      s = (s << 1) ^ (s >= (1U << 31) ? CRC32_POLY : 0);                  }                  crcTable[i] = s;              }
Magic Number,NVorbis.Ogg,Crc,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggCrc.cs,Crc,The following statement contains a magic number: for (uint i = 0; i < 256; i++)              {                  uint s = i << 24;                  for (int j = 0; j < 8; ++j)                  {                      s = (s << 1) ^ (s >= (1U << 31) ? CRC32_POLY : 0);                  }                  crcTable[i] = s;              }
Magic Number,NVorbis.Ogg,Crc,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggCrc.cs,Crc,The following statement contains a magic number: for (uint i = 0; i < 256; i++)              {                  uint s = i << 24;                  for (int j = 0; j < 8; ++j)                  {                      s = (s << 1) ^ (s >= (1U << 31) ? CRC32_POLY : 0);                  }                  crcTable[i] = s;              }
Magic Number,NVorbis.Ogg,Crc,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggCrc.cs,Crc,The following statement contains a magic number: for (uint i = 0; i < 256; i++)              {                  uint s = i << 24;                  for (int j = 0; j < 8; ++j)                  {                      s = (s << 1) ^ (s >= (1U << 31) ? CRC32_POLY : 0);                  }                  crcTable[i] = s;              }
Magic Number,NVorbis.Ogg,Crc,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggCrc.cs,Update,The following statement contains a magic number: _crc = (_crc << 8) ^ crcTable[nextVal ^ (_crc >> 24)];
Magic Number,NVorbis.Ogg,Crc,C:\repos\renaudbedard_nvorbis\NVorbis\Ogg\OggCrc.cs,Update,The following statement contains a magic number: _crc = (_crc << 8) ^ crcTable[nextVal ^ (_crc >> 24)];
Missing Default,NVorbis,BufferedReadStream,C:\repos\renaudbedard_nvorbis\NVorbis\BufferedReadStream.cs,Seek,The following switch statement is missing a default case: switch (origin)              {                  case SeekOrigin.Begin:                      // no-op                      break;                  case SeekOrigin.Current:                      offset += Position;                      break;                  case SeekOrigin.End:                      offset += _baseStream.Length;                      break;              }
Missing Default,NVorbis,VorbisFloor,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisFloor.cs,Init,The following switch statement is missing a default case: switch (type)              {                  case 0: floor = new Floor0(vorbis); break;                  case 1: floor = new Floor1(vorbis); break;              }
Missing Default,NVorbis,VorbisMapping,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisMapping.cs,Init,The following switch statement is missing a default case: switch (type)              {                  case 0: mapping = new Mapping0(vorbis); break;              }
Missing Default,NVorbis,VorbisResidue,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisResidue.cs,Init,The following switch statement is missing a default case: switch (type)              {                  case 0: residue = new Residue0(vorbis); break;                  case 1: residue = new Residue1(vorbis); break;                  case 2: residue = new Residue2(vorbis); break;              }
Missing Default,NVorbis,VorbisTime,C:\repos\renaudbedard_nvorbis\NVorbis\VorbisTime.cs,Init,The following switch statement is missing a default case: switch (type)              {                  case 0: time = new Time0(vorbis); break;              }
