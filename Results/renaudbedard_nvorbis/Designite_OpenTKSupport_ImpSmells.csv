Implementation smell,Namespace,Class,File,Method,Description
Magic Number,NVorbis.OpenTKSupport,OggStreamer,C:\repos\renaudbedard_nvorbis\OpenTKSupport\OggStream.cs,EnsureBuffersFilled,The following statement contains a magic number: while (!cancelled)             {                 Thread.Sleep((int) (1000 / UpdateRate));                 if (cancelled) break;                  threadLocalStreams.Clear();                 lock (iterationMutex) threadLocalStreams.AddRange(streams);                  foreach (var stream in threadLocalStreams)                 {                     lock (stream.prepareMutex)                     {                         lock (iterationMutex)                             if (!streams.Contains(stream))                                 continue;                          bool finished = false;                          int queued;                         AL.GetSource(stream.alSourceId' ALGetSourcei.BuffersQueued' out queued);                         ALHelper.Check();                         int processed;                         AL.GetSource(stream.alSourceId' ALGetSourcei.BuffersProcessed' out processed);                         ALHelper.Check();                          if (processed == 0 && queued == stream.BufferCount) continue;                          int[] tempBuffers;                         if (processed > 0)                             tempBuffers = AL.SourceUnqueueBuffers(stream.alSourceId' processed);                         else                             tempBuffers = stream.alBufferIds.Skip(queued).ToArray();                          for (int i = 0; i < tempBuffers.Length; i++)                         {                             finished |= FillBuffer(stream' tempBuffers[i]);                              if (finished)                             {                                 if (stream.IsLooped)                                     stream.Reader.DecodedTime = TimeSpan.Zero;                                 else                                 {                                     streams.Remove(stream);                                     i = tempBuffers.Length;                                 }                             }                         }                          AL.SourceQueueBuffers(stream.alSourceId' tempBuffers.Length' tempBuffers);                         ALHelper.Check();                          if (finished && !stream.IsLooped)                             continue;                     }                      lock (stream.stopMutex)                     {                         if (stream.Preparing) continue;                          lock (iterationMutex)                             if (!streams.Contains(stream))                                 continue;                          var state = AL.GetSourceState(stream.alSourceId);                         if (state == ALSourceState.Stopped)                         {                              Logger.Log(LogEvent.BufferUnderrun' stream);                             AL.SourcePlay(stream.alSourceId);                             ALHelper.Check();                         }                     }                 }             }
Missing Default,NVorbis.OpenTKSupport,OggStream,C:\repos\renaudbedard_nvorbis\OpenTKSupport\OggStream.cs,Prepare,The following switch statement is missing a default case: switch (state)                 {                     case ALSourceState.Playing:                     case ALSourceState.Paused:                         return;                      case ALSourceState.Stopped:                         lock (prepareMutex)                         {                             Reader.DecodedTime = TimeSpan.Zero;                             Ready = false;                             Empty();                         }                         break;                 }
Missing Default,NVorbis.OpenTKSupport,OggStream,C:\repos\renaudbedard_nvorbis\OpenTKSupport\OggStream.cs,Play,The following switch statement is missing a default case: switch (state)             {                 case ALSourceState.Playing: return;                 case ALSourceState.Paused:                     Resume();                     return;             }
