Implementation smell,Namespace,Class,File,Method,Description
Complex Method,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,Cyclomatic complexity of the method is 10
Complex Method,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,Cyclomatic complexity of the method is 9
Long Statement,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The length of the statement  "			if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) { " is 163.
Complex Conditional,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The conditional expression  "i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]"  is complex.
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (source.Length > 65535) {  	throw new ArgumentException ("source size too big > 65535");  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: for (int i = 0; i < source.Length - 1; i++) {  	var b = source [i];  	var next = source [i + 1];  	counter [1] = counter [2] == 0 ? i : counter [1];  	if (next == b) {  		if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  			counter [2] += 5;  			i += 4;  		}  		else if (counter [2] > 0) {  			counter [2]++;  		}  		else {  			left.Add (b);  			continue;  		}  		counter [0] = b;  	}  	else {  		if (counter [2] > 0) {  			if (counter [0] == b) {  				counter [2]++;  			}  			compress.Add (BitConverter.GetBytes (counter [0]) [0]);  			var c1 = BitConverter.GetBytes (counter [1]);  			var c2 = BitConverter.GetBytes (counter [2]);  			compress.Add (c1 [0]);  			compress.Add (c1 [1]);  			compress.Add (c2 [0]);  			compress.Add (c2 [1]);  			counter = new int[3];  		}  		else {  			left.Add (b);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: counter [1] = counter [2] == 0 ? i : counter [1];  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (next == b) {  	if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  		counter [2] += 5;  		i += 4;  	}  	else if (counter [2] > 0) {  		counter [2]++;  	}  	else {  		left.Add (b);  		continue;  	}  	counter [0] = b;  }  else {  	if (counter [2] > 0) {  		if (counter [0] == b) {  			counter [2]++;  		}  		compress.Add (BitConverter.GetBytes (counter [0]) [0]);  		var c1 = BitConverter.GetBytes (counter [1]);  		var c2 = BitConverter.GetBytes (counter [2]);  		compress.Add (c1 [0]);  		compress.Add (c1 [1]);  		compress.Add (c2 [0]);  		compress.Add (c2 [1]);  		counter = new int[3];  	}  	else {  		left.Add (b);  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  	counter [2] += 5;  	i += 4;  }  else if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  	counter [2] += 5;  	i += 4;  }  else if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  	counter [2] += 5;  	i += 4;  }  else if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  	counter [2] += 5;  	i += 4;  }  else if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  	counter [2] += 5;  	i += 4;  }  else if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  	counter [2] += 5;  	i += 4;  }  else if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  	counter [2] += 5;  	i += 4;  }  else if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  	counter [2] += 5;  	i += 4;  }  else if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  	counter [2] += 5;  	i += 4;  }  else if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  	counter [2] += 5;  	i += 4;  }  else if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (i < source.Length - 5 && counter [2] == 0 && b == source [i + 1] && b == source [i + 2] && b == source [i + 3] && b == source [i + 4] && b == source [i + 5]) {  	counter [2] += 5;  	i += 4;  }  else if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: counter [2] += 5;  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: counter [2] += 5;  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: i += 4;  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (counter [2] > 0) {  	counter [2]++;  }  else {  	left.Add (b);  	continue;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: counter [2]++;  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (counter [2] > 0) {  	if (counter [0] == b) {  		counter [2]++;  	}  	compress.Add (BitConverter.GetBytes (counter [0]) [0]);  	var c1 = BitConverter.GetBytes (counter [1]);  	var c2 = BitConverter.GetBytes (counter [2]);  	compress.Add (c1 [0]);  	compress.Add (c1 [1]);  	compress.Add (c2 [0]);  	compress.Add (c2 [1]);  	counter = new int[3];  }  else {  	left.Add (b);  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (counter [2] > 0) {  	if (counter [0] == b) {  		counter [2]++;  	}  	compress.Add (BitConverter.GetBytes (counter [0]) [0]);  	var c1 = BitConverter.GetBytes (counter [1]);  	var c2 = BitConverter.GetBytes (counter [2]);  	compress.Add (c1 [0]);  	compress.Add (c1 [1]);  	compress.Add (c2 [0]);  	compress.Add (c2 [1]);  	counter = new int[3];  }  else {  	left.Add (b);  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (counter [2] > 0) {  	if (counter [0] == b) {  		counter [2]++;  	}  	compress.Add (BitConverter.GetBytes (counter [0]) [0]);  	var c1 = BitConverter.GetBytes (counter [1]);  	var c2 = BitConverter.GetBytes (counter [2]);  	compress.Add (c1 [0]);  	compress.Add (c1 [1]);  	compress.Add (c2 [0]);  	compress.Add (c2 [1]);  	counter = new int[3];  }  else {  	left.Add (b);  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (counter [2] > 0) {  	if (counter [0] == b) {  		counter [2]++;  	}  	compress.Add (BitConverter.GetBytes (counter [0]) [0]);  	var c1 = BitConverter.GetBytes (counter [1]);  	var c2 = BitConverter.GetBytes (counter [2]);  	compress.Add (c1 [0]);  	compress.Add (c1 [1]);  	compress.Add (c2 [0]);  	compress.Add (c2 [1]);  	counter = new int[3];  }  else {  	left.Add (b);  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: if (counter [0] == b) {  	counter [2]++;  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: counter [2]++;  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallCompress,The following statement contains a magic number: counter = new int[3];  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: Array.Copy (source' lengthBytes' 4);  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: Array.Copy (source' 4' compress' 0' compress.Length);  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: Array.Copy (source' length + 4' left' 0' left.Length);  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: for (int i = 0; i < compress.Length; i += 5) {  	var value = compress [i];  	var posBytes = new byte[4];  	posBytes [0] = compress [i + 1];  	posBytes [1] = compress [i + 2];  	posBytes [2] = posBytes [3] = 0;  	var position = BitConverter.ToInt32 (posBytes' 0);  	var lenBytes = new byte[4];  	lenBytes [0] = compress [i + 3];  	lenBytes [1] = compress [i + 4];  	lenBytes [2] = lenBytes [3] = 0;  	var len = BitConverter.ToInt32 (lenBytes' 0);  	if (position >= decompress.Count) {  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddLast (value);  			posDecompress.Insert (position' insertNode);  		}  	}  	else {  		var node = posDecompress [position];  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddBefore (node' value);  			posDecompress.Insert (position' insertNode);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: for (int i = 0; i < compress.Length; i += 5) {  	var value = compress [i];  	var posBytes = new byte[4];  	posBytes [0] = compress [i + 1];  	posBytes [1] = compress [i + 2];  	posBytes [2] = posBytes [3] = 0;  	var position = BitConverter.ToInt32 (posBytes' 0);  	var lenBytes = new byte[4];  	lenBytes [0] = compress [i + 3];  	lenBytes [1] = compress [i + 4];  	lenBytes [2] = lenBytes [3] = 0;  	var len = BitConverter.ToInt32 (lenBytes' 0);  	if (position >= decompress.Count) {  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddLast (value);  			posDecompress.Insert (position' insertNode);  		}  	}  	else {  		var node = posDecompress [position];  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddBefore (node' value);  			posDecompress.Insert (position' insertNode);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: for (int i = 0; i < compress.Length; i += 5) {  	var value = compress [i];  	var posBytes = new byte[4];  	posBytes [0] = compress [i + 1];  	posBytes [1] = compress [i + 2];  	posBytes [2] = posBytes [3] = 0;  	var position = BitConverter.ToInt32 (posBytes' 0);  	var lenBytes = new byte[4];  	lenBytes [0] = compress [i + 3];  	lenBytes [1] = compress [i + 4];  	lenBytes [2] = lenBytes [3] = 0;  	var len = BitConverter.ToInt32 (lenBytes' 0);  	if (position >= decompress.Count) {  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddLast (value);  			posDecompress.Insert (position' insertNode);  		}  	}  	else {  		var node = posDecompress [position];  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddBefore (node' value);  			posDecompress.Insert (position' insertNode);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: for (int i = 0; i < compress.Length; i += 5) {  	var value = compress [i];  	var posBytes = new byte[4];  	posBytes [0] = compress [i + 1];  	posBytes [1] = compress [i + 2];  	posBytes [2] = posBytes [3] = 0;  	var position = BitConverter.ToInt32 (posBytes' 0);  	var lenBytes = new byte[4];  	lenBytes [0] = compress [i + 3];  	lenBytes [1] = compress [i + 4];  	lenBytes [2] = lenBytes [3] = 0;  	var len = BitConverter.ToInt32 (lenBytes' 0);  	if (position >= decompress.Count) {  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddLast (value);  			posDecompress.Insert (position' insertNode);  		}  	}  	else {  		var node = posDecompress [position];  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddBefore (node' value);  			posDecompress.Insert (position' insertNode);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: for (int i = 0; i < compress.Length; i += 5) {  	var value = compress [i];  	var posBytes = new byte[4];  	posBytes [0] = compress [i + 1];  	posBytes [1] = compress [i + 2];  	posBytes [2] = posBytes [3] = 0;  	var position = BitConverter.ToInt32 (posBytes' 0);  	var lenBytes = new byte[4];  	lenBytes [0] = compress [i + 3];  	lenBytes [1] = compress [i + 4];  	lenBytes [2] = lenBytes [3] = 0;  	var len = BitConverter.ToInt32 (lenBytes' 0);  	if (position >= decompress.Count) {  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddLast (value);  			posDecompress.Insert (position' insertNode);  		}  	}  	else {  		var node = posDecompress [position];  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddBefore (node' value);  			posDecompress.Insert (position' insertNode);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: for (int i = 0; i < compress.Length; i += 5) {  	var value = compress [i];  	var posBytes = new byte[4];  	posBytes [0] = compress [i + 1];  	posBytes [1] = compress [i + 2];  	posBytes [2] = posBytes [3] = 0;  	var position = BitConverter.ToInt32 (posBytes' 0);  	var lenBytes = new byte[4];  	lenBytes [0] = compress [i + 3];  	lenBytes [1] = compress [i + 4];  	lenBytes [2] = lenBytes [3] = 0;  	var len = BitConverter.ToInt32 (lenBytes' 0);  	if (position >= decompress.Count) {  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddLast (value);  			posDecompress.Insert (position' insertNode);  		}  	}  	else {  		var node = posDecompress [position];  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddBefore (node' value);  			posDecompress.Insert (position' insertNode);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: for (int i = 0; i < compress.Length; i += 5) {  	var value = compress [i];  	var posBytes = new byte[4];  	posBytes [0] = compress [i + 1];  	posBytes [1] = compress [i + 2];  	posBytes [2] = posBytes [3] = 0;  	var position = BitConverter.ToInt32 (posBytes' 0);  	var lenBytes = new byte[4];  	lenBytes [0] = compress [i + 3];  	lenBytes [1] = compress [i + 4];  	lenBytes [2] = lenBytes [3] = 0;  	var len = BitConverter.ToInt32 (lenBytes' 0);  	if (position >= decompress.Count) {  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddLast (value);  			posDecompress.Insert (position' insertNode);  		}  	}  	else {  		var node = posDecompress [position];  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddBefore (node' value);  			posDecompress.Insert (position' insertNode);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: for (int i = 0; i < compress.Length; i += 5) {  	var value = compress [i];  	var posBytes = new byte[4];  	posBytes [0] = compress [i + 1];  	posBytes [1] = compress [i + 2];  	posBytes [2] = posBytes [3] = 0;  	var position = BitConverter.ToInt32 (posBytes' 0);  	var lenBytes = new byte[4];  	lenBytes [0] = compress [i + 3];  	lenBytes [1] = compress [i + 4];  	lenBytes [2] = lenBytes [3] = 0;  	var len = BitConverter.ToInt32 (lenBytes' 0);  	if (position >= decompress.Count) {  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddLast (value);  			posDecompress.Insert (position' insertNode);  		}  	}  	else {  		var node = posDecompress [position];  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddBefore (node' value);  			posDecompress.Insert (position' insertNode);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: for (int i = 0; i < compress.Length; i += 5) {  	var value = compress [i];  	var posBytes = new byte[4];  	posBytes [0] = compress [i + 1];  	posBytes [1] = compress [i + 2];  	posBytes [2] = posBytes [3] = 0;  	var position = BitConverter.ToInt32 (posBytes' 0);  	var lenBytes = new byte[4];  	lenBytes [0] = compress [i + 3];  	lenBytes [1] = compress [i + 4];  	lenBytes [2] = lenBytes [3] = 0;  	var len = BitConverter.ToInt32 (lenBytes' 0);  	if (position >= decompress.Count) {  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddLast (value);  			posDecompress.Insert (position' insertNode);  		}  	}  	else {  		var node = posDecompress [position];  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddBefore (node' value);  			posDecompress.Insert (position' insertNode);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: for (int i = 0; i < compress.Length; i += 5) {  	var value = compress [i];  	var posBytes = new byte[4];  	posBytes [0] = compress [i + 1];  	posBytes [1] = compress [i + 2];  	posBytes [2] = posBytes [3] = 0;  	var position = BitConverter.ToInt32 (posBytes' 0);  	var lenBytes = new byte[4];  	lenBytes [0] = compress [i + 3];  	lenBytes [1] = compress [i + 4];  	lenBytes [2] = lenBytes [3] = 0;  	var len = BitConverter.ToInt32 (lenBytes' 0);  	if (position >= decompress.Count) {  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddLast (value);  			posDecompress.Insert (position' insertNode);  		}  	}  	else {  		var node = posDecompress [position];  		for (int j = 0; j < len; j++) {  			var insertNode = decompress.AddBefore (node' value);  			posDecompress.Insert (position' insertNode);  		}  	}  }  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: i += 5
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: posBytes [1] = compress [i + 2];  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: posBytes [2] = posBytes [3] = 0;  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: posBytes [2] = posBytes [3] = 0;  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: lenBytes [0] = compress [i + 3];  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: lenBytes [1] = compress [i + 4];  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: lenBytes [2] = lenBytes [3] = 0;  
Magic Number,CompressBinary,Compressor,C:\repos\JasonJDong_CompressBinary\CompressBinary\Compressor.cs,SmallDecompress,The following statement contains a magic number: lenBytes [2] = lenBytes [3] = 0;  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: using (var fs = new FileStream (file' FileMode.Open' FileAccess.Read)) {  	var buffer = new byte[65535];  	var read = fs.Read (buffer' 0' buffer.Length);  	var bigBuffer = new List<byte> (65535 * 1024);  	while (read > 0) {  		var tempBuffer = new byte[read];  		Array.Copy (buffer' 0' tempBuffer' 0' read);  		bigBuffer.AddRange (tempBuffer);  		buffer = new byte[65535];  		read = fs.Read (buffer' 0' buffer.Length);  	}  	bigBuffer.TrimExcess ();  	var realRead = bigBuffer.ToArray ();  	Compressor compressor = new Compressor ();  	var isCompress = false;  	var compressed = compressor.SmallCompress (realRead' out isCompress);  	if (isCompress) {  		var watch = new Stopwatch ();  		byte[] decompress = null;  		watch.Start ();  		for (int i = 0; i < 1; i++) {  			decompress = compressor.SmallDecompress (compressed);  			watch.Stop ();  			//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  			watch.Reset ();  			watch.Start ();  		}  		//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  		for (int i = 0; i < decompress.Length; i++) {  			if (decompress [i] != realRead [i]) {  				Console.WriteLine ("Not Equals");  			}  		}  	}  	if (realRead.Length != 0) {  		Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  	}  	var gZipCompress = new GZipCompress ();  	var gzipBytes = gZipCompress.Compress (realRead);  	Console.WriteLine ("Compress: " + (100 - (gzipBytes.Length * 100.0 / realRead.Length)) + "%");  	Console.ReadKey ();  }  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: using (var fs = new FileStream (file' FileMode.Open' FileAccess.Read)) {  	var buffer = new byte[65535];  	var read = fs.Read (buffer' 0' buffer.Length);  	var bigBuffer = new List<byte> (65535 * 1024);  	while (read > 0) {  		var tempBuffer = new byte[read];  		Array.Copy (buffer' 0' tempBuffer' 0' read);  		bigBuffer.AddRange (tempBuffer);  		buffer = new byte[65535];  		read = fs.Read (buffer' 0' buffer.Length);  	}  	bigBuffer.TrimExcess ();  	var realRead = bigBuffer.ToArray ();  	Compressor compressor = new Compressor ();  	var isCompress = false;  	var compressed = compressor.SmallCompress (realRead' out isCompress);  	if (isCompress) {  		var watch = new Stopwatch ();  		byte[] decompress = null;  		watch.Start ();  		for (int i = 0; i < 1; i++) {  			decompress = compressor.SmallDecompress (compressed);  			watch.Stop ();  			//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  			watch.Reset ();  			watch.Start ();  		}  		//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  		for (int i = 0; i < decompress.Length; i++) {  			if (decompress [i] != realRead [i]) {  				Console.WriteLine ("Not Equals");  			}  		}  	}  	if (realRead.Length != 0) {  		Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  	}  	var gZipCompress = new GZipCompress ();  	var gzipBytes = gZipCompress.Compress (realRead);  	Console.WriteLine ("Compress: " + (100 - (gzipBytes.Length * 100.0 / realRead.Length)) + "%");  	Console.ReadKey ();  }  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: using (var fs = new FileStream (file' FileMode.Open' FileAccess.Read)) {  	var buffer = new byte[65535];  	var read = fs.Read (buffer' 0' buffer.Length);  	var bigBuffer = new List<byte> (65535 * 1024);  	while (read > 0) {  		var tempBuffer = new byte[read];  		Array.Copy (buffer' 0' tempBuffer' 0' read);  		bigBuffer.AddRange (tempBuffer);  		buffer = new byte[65535];  		read = fs.Read (buffer' 0' buffer.Length);  	}  	bigBuffer.TrimExcess ();  	var realRead = bigBuffer.ToArray ();  	Compressor compressor = new Compressor ();  	var isCompress = false;  	var compressed = compressor.SmallCompress (realRead' out isCompress);  	if (isCompress) {  		var watch = new Stopwatch ();  		byte[] decompress = null;  		watch.Start ();  		for (int i = 0; i < 1; i++) {  			decompress = compressor.SmallDecompress (compressed);  			watch.Stop ();  			//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  			watch.Reset ();  			watch.Start ();  		}  		//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  		for (int i = 0; i < decompress.Length; i++) {  			if (decompress [i] != realRead [i]) {  				Console.WriteLine ("Not Equals");  			}  		}  	}  	if (realRead.Length != 0) {  		Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  	}  	var gZipCompress = new GZipCompress ();  	var gzipBytes = gZipCompress.Compress (realRead);  	Console.WriteLine ("Compress: " + (100 - (gzipBytes.Length * 100.0 / realRead.Length)) + "%");  	Console.ReadKey ();  }  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: using (var fs = new FileStream (file' FileMode.Open' FileAccess.Read)) {  	var buffer = new byte[65535];  	var read = fs.Read (buffer' 0' buffer.Length);  	var bigBuffer = new List<byte> (65535 * 1024);  	while (read > 0) {  		var tempBuffer = new byte[read];  		Array.Copy (buffer' 0' tempBuffer' 0' read);  		bigBuffer.AddRange (tempBuffer);  		buffer = new byte[65535];  		read = fs.Read (buffer' 0' buffer.Length);  	}  	bigBuffer.TrimExcess ();  	var realRead = bigBuffer.ToArray ();  	Compressor compressor = new Compressor ();  	var isCompress = false;  	var compressed = compressor.SmallCompress (realRead' out isCompress);  	if (isCompress) {  		var watch = new Stopwatch ();  		byte[] decompress = null;  		watch.Start ();  		for (int i = 0; i < 1; i++) {  			decompress = compressor.SmallDecompress (compressed);  			watch.Stop ();  			//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  			watch.Reset ();  			watch.Start ();  		}  		//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  		for (int i = 0; i < decompress.Length; i++) {  			if (decompress [i] != realRead [i]) {  				Console.WriteLine ("Not Equals");  			}  		}  	}  	if (realRead.Length != 0) {  		Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  	}  	var gZipCompress = new GZipCompress ();  	var gzipBytes = gZipCompress.Compress (realRead);  	Console.WriteLine ("Compress: " + (100 - (gzipBytes.Length * 100.0 / realRead.Length)) + "%");  	Console.ReadKey ();  }  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: using (var fs = new FileStream (file' FileMode.Open' FileAccess.Read)) {  	var buffer = new byte[65535];  	var read = fs.Read (buffer' 0' buffer.Length);  	var bigBuffer = new List<byte> (65535 * 1024);  	while (read > 0) {  		var tempBuffer = new byte[read];  		Array.Copy (buffer' 0' tempBuffer' 0' read);  		bigBuffer.AddRange (tempBuffer);  		buffer = new byte[65535];  		read = fs.Read (buffer' 0' buffer.Length);  	}  	bigBuffer.TrimExcess ();  	var realRead = bigBuffer.ToArray ();  	Compressor compressor = new Compressor ();  	var isCompress = false;  	var compressed = compressor.SmallCompress (realRead' out isCompress);  	if (isCompress) {  		var watch = new Stopwatch ();  		byte[] decompress = null;  		watch.Start ();  		for (int i = 0; i < 1; i++) {  			decompress = compressor.SmallDecompress (compressed);  			watch.Stop ();  			//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  			watch.Reset ();  			watch.Start ();  		}  		//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  		for (int i = 0; i < decompress.Length; i++) {  			if (decompress [i] != realRead [i]) {  				Console.WriteLine ("Not Equals");  			}  		}  	}  	if (realRead.Length != 0) {  		Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  	}  	var gZipCompress = new GZipCompress ();  	var gzipBytes = gZipCompress.Compress (realRead);  	Console.WriteLine ("Compress: " + (100 - (gzipBytes.Length * 100.0 / realRead.Length)) + "%");  	Console.ReadKey ();  }  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: using (var fs = new FileStream (file' FileMode.Open' FileAccess.Read)) {  	var buffer = new byte[65535];  	var read = fs.Read (buffer' 0' buffer.Length);  	var bigBuffer = new List<byte> (65535 * 1024);  	while (read > 0) {  		var tempBuffer = new byte[read];  		Array.Copy (buffer' 0' tempBuffer' 0' read);  		bigBuffer.AddRange (tempBuffer);  		buffer = new byte[65535];  		read = fs.Read (buffer' 0' buffer.Length);  	}  	bigBuffer.TrimExcess ();  	var realRead = bigBuffer.ToArray ();  	Compressor compressor = new Compressor ();  	var isCompress = false;  	var compressed = compressor.SmallCompress (realRead' out isCompress);  	if (isCompress) {  		var watch = new Stopwatch ();  		byte[] decompress = null;  		watch.Start ();  		for (int i = 0; i < 1; i++) {  			decompress = compressor.SmallDecompress (compressed);  			watch.Stop ();  			//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  			watch.Reset ();  			watch.Start ();  		}  		//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  		for (int i = 0; i < decompress.Length; i++) {  			if (decompress [i] != realRead [i]) {  				Console.WriteLine ("Not Equals");  			}  		}  	}  	if (realRead.Length != 0) {  		Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  	}  	var gZipCompress = new GZipCompress ();  	var gzipBytes = gZipCompress.Compress (realRead);  	Console.WriteLine ("Compress: " + (100 - (gzipBytes.Length * 100.0 / realRead.Length)) + "%");  	Console.ReadKey ();  }  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: using (var fs = new FileStream (file' FileMode.Open' FileAccess.Read)) {  	var buffer = new byte[65535];  	var read = fs.Read (buffer' 0' buffer.Length);  	var bigBuffer = new List<byte> (65535 * 1024);  	while (read > 0) {  		var tempBuffer = new byte[read];  		Array.Copy (buffer' 0' tempBuffer' 0' read);  		bigBuffer.AddRange (tempBuffer);  		buffer = new byte[65535];  		read = fs.Read (buffer' 0' buffer.Length);  	}  	bigBuffer.TrimExcess ();  	var realRead = bigBuffer.ToArray ();  	Compressor compressor = new Compressor ();  	var isCompress = false;  	var compressed = compressor.SmallCompress (realRead' out isCompress);  	if (isCompress) {  		var watch = new Stopwatch ();  		byte[] decompress = null;  		watch.Start ();  		for (int i = 0; i < 1; i++) {  			decompress = compressor.SmallDecompress (compressed);  			watch.Stop ();  			//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  			watch.Reset ();  			watch.Start ();  		}  		//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  		for (int i = 0; i < decompress.Length; i++) {  			if (decompress [i] != realRead [i]) {  				Console.WriteLine ("Not Equals");  			}  		}  	}  	if (realRead.Length != 0) {  		Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  	}  	var gZipCompress = new GZipCompress ();  	var gzipBytes = gZipCompress.Compress (realRead);  	Console.WriteLine ("Compress: " + (100 - (gzipBytes.Length * 100.0 / realRead.Length)) + "%");  	Console.ReadKey ();  }  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: using (var fs = new FileStream (file' FileMode.Open' FileAccess.Read)) {  	var buffer = new byte[65535];  	var read = fs.Read (buffer' 0' buffer.Length);  	var bigBuffer = new List<byte> (65535 * 1024);  	while (read > 0) {  		var tempBuffer = new byte[read];  		Array.Copy (buffer' 0' tempBuffer' 0' read);  		bigBuffer.AddRange (tempBuffer);  		buffer = new byte[65535];  		read = fs.Read (buffer' 0' buffer.Length);  	}  	bigBuffer.TrimExcess ();  	var realRead = bigBuffer.ToArray ();  	Compressor compressor = new Compressor ();  	var isCompress = false;  	var compressed = compressor.SmallCompress (realRead' out isCompress);  	if (isCompress) {  		var watch = new Stopwatch ();  		byte[] decompress = null;  		watch.Start ();  		for (int i = 0; i < 1; i++) {  			decompress = compressor.SmallDecompress (compressed);  			watch.Stop ();  			//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  			watch.Reset ();  			watch.Start ();  		}  		//Console.WriteLine("time:" + watch.ElapsedMilliseconds + "ms");  		for (int i = 0; i < decompress.Length; i++) {  			if (decompress [i] != realRead [i]) {  				Console.WriteLine ("Not Equals");  			}  		}  	}  	if (realRead.Length != 0) {  		Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  	}  	var gZipCompress = new GZipCompress ();  	var gzipBytes = gZipCompress.Compress (realRead);  	Console.WriteLine ("Compress: " + (100 - (gzipBytes.Length * 100.0 / realRead.Length)) + "%");  	Console.ReadKey ();  }  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: while (read > 0) {  	var tempBuffer = new byte[read];  	Array.Copy (buffer' 0' tempBuffer' 0' read);  	bigBuffer.AddRange (tempBuffer);  	buffer = new byte[65535];  	read = fs.Read (buffer' 0' buffer.Length);  }  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: buffer = new byte[65535];  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: if (realRead.Length != 0) {  	Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  }  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: if (realRead.Length != 0) {  	Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  }  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: Console.WriteLine ("Compress: " + (100 - (compressed.Length * 100.0 / realRead.Length)) + "%");  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: Console.WriteLine ("Compress: " + (100 - (gzipBytes.Length * 100.0 / realRead.Length)) + "%");  
Magic Number,CompressBinary,Program,C:\repos\JasonJDong_CompressBinary\CompressBinary\Program.cs,Main,The following statement contains a magic number: Console.WriteLine ("Compress: " + (100 - (gzipBytes.Length * 100.0 / realRead.Length)) + "%");  
