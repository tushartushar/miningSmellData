Implementation smell,Namespace,Class,File,Method,Description
Long Method,NintendoSpy,Skin,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Skin.cs,Skin,The method has 107 lines of code.
Complex Method,NintendoSpy,Skin,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Skin.cs,Skin,Cyclomatic complexity of the method is 22
Complex Method,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,ViewWindow,Cyclomatic complexity of the method is 12
Complex Method,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,reader_ControllerStateChanged,Cyclomatic complexity of the method is 14
Complex Method,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,Cyclomatic complexity of the method is 9
Complex Method,NintendoSpy.Readers,BlinkReductionFilter,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,Cyclomatic complexity of the method is 15
Long Parameter List,NintendoSpy,InputSource,D:\research\architectureSmells\repos\jaburns_NintendoSpy\InputSource.cs,InputSource,The method has 5 parameters. Parameters: typeTag' name' requiresComPort' requiresId' buildReader
Long Statement,NintendoSpy,Skin,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Skin.cs,getArrayAttr,The length of the statement  "                    throw new ConfigParseException("Required attribute '" + attrName + "' not found on element '" + elem.Name + "'. You can use it with ';' for multiple values."); " is 159.
Long Statement,NintendoSpy,Skin,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Skin.cs,parseStandardConfig,The length of the statement  "                X = x' Y = y' Image = image' Width = width' Height = height' TargetBackgrounds = targetBgs' IgnoreBackgrounds = ignoreBgs " is 121.
Long Statement,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click); " is 129.
Long Statement,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click); " is 132.
Long Statement,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click); " is 132.
Long Statement,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click); " is 130.
Long Statement,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged); " is 166.
Long Statement,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged); " is 149.
Long Statement,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The length of the statement  "                // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes) " is 130.
Long Statement,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The length of the statement  "			state.SetAnalog("rstick_x"' readRightStick(((data[0] & 0xC0) >> 3) | ((data[1] & 0xC0) >> 5) | ((data[2] & 0x80) >> 7))); " is 121.
Empty Catch Block,NintendoSpy,SerialMonitor,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SerialMonitor.cs,Stop,The method has an empty catch block.
Magic Number,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,SetupWindow,The following statement contains a magic number: _xiAndGamepadListUpdateTimer.Interval = TimeSpan.FromSeconds(2);
Magic Number,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,readStick,The following statement contains a magic number: return (float)(input - 128) / 128;
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,readStick,The following statement contains a magic number: return (float)(input - 128) / 128;
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,readTrigger,The following statement contains a magic number: return (float)(input) / 256;
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,GameCube,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: switch (packet.Length)              {                  // Standard 64 bit packet size                  case PACKET_SIZE:                      for (int i = 0; i < BUTTONS.Length; ++i)                      {                          if (string.IsNullOrEmpty(BUTTONS[i])) continue;                          state.SetButton(BUTTONS[i]' packet[i] != 0x00);                          Console.WriteLine(i + ": " + packet[i]);                      }                      state.SetAnalog("lstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length)));                      state.SetAnalog("lstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 8)));                      state.SetAnalog("cstick_x"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 16)));                      state.SetAnalog("cstick_y"' readStick(SignalTool.readByte(packet' BUTTONS.Length + 24)));                      state.SetAnalog("trig_l"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 32)));                      state.SetAnalog("trig_r"' readTrigger(SignalTool.readByte(packet' BUTTONS.Length + 40)));                      break;                  // Packets are written as bytes when writing from the NicoHood API' so we're looking for a packet size of 8 (interpreted as bytes)                  case NICOHOOD_PACKET_SIZE:                      for (int i = 0; i < 16; i++)                      {                          if (string.IsNullOrEmpty(NICOHOOD_BUTTONS[i])) continue;                          int bitPacket = (packet[i / 8] >> (i % 8)) & 0x1;                          state.SetButton(NICOHOOD_BUTTONS[i]' bitPacket != 0x00);                      }                      state.SetAnalog("lstick_x"' readStick(packet[2]));                      state.SetAnalog("lstick_y"' readStick(packet[3]));                      state.SetAnalog("cstick_x"' readStick(packet[4]));                      state.SetAnalog("cstick_y"' readStick(packet[5]));                      state.SetAnalog("trig_l"' readTrigger(packet[6]));                      state.SetAnalog("trig_r"' readTrigger(packet[7]));                      break;                  default:                      return null;              }
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,readLeftStick,The following statement contains a magic number: return (float)(input - 30) / 30;
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,readLeftStick,The following statement contains a magic number: return (float)(input - 30) / 30;
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,readRightStick,The following statement contains a magic number: return (float)(input - 15) / 15;
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,readRightStick,The following statement contains a magic number: return (float)(input - 15) / 15;
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,readTrigger,The following statement contains a magic number: return (float)(input) / 31;
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: byte[] data = new byte[PACKET_SIZE / 8];
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: data[i] = unencrypt(SignalTool.readByte(packet' i * 8));
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: i < PACKET_SIZE / 8
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetButton(BUTTONS[i]' (data[4 + i / 8] & (0x01 << (i % 8))) == 0x00);
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetButton(BUTTONS[i]' (data[4 + i / 8] & (0x01 << (i % 8))) == 0x00);
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetButton(BUTTONS[i]' (data[4 + i / 8] & (0x01 << (i % 8))) == 0x00);
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog("rstick_x"' readRightStick(((data[0] & 0xC0) >> 3) | ((data[1] & 0xC0) >> 5) | ((data[2] & 0x80) >> 7)));
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog("rstick_x"' readRightStick(((data[0] & 0xC0) >> 3) | ((data[1] & 0xC0) >> 5) | ((data[2] & 0x80) >> 7)));
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog("rstick_x"' readRightStick(((data[0] & 0xC0) >> 3) | ((data[1] & 0xC0) >> 5) | ((data[2] & 0x80) >> 7)));
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog("rstick_x"' readRightStick(((data[0] & 0xC0) >> 3) | ((data[1] & 0xC0) >> 5) | ((data[2] & 0x80) >> 7)));
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog("rstick_y"' readRightStick(data[2] & 0x1F));
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog("trig_l"' readTrigger(((data[2] & 0x60) >> 2) | ((data[3] & 0xE0) >> 5)));
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog("trig_l"' readTrigger(((data[2] & 0x60) >> 2) | ((data[3] & 0xE0) >> 5)));
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog("trig_l"' readTrigger(((data[2] & 0x60) >> 2) | ((data[3] & 0xE0) >> 5)));
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog("trig_l"' readTrigger(((data[2] & 0x60) >> 2) | ((data[3] & 0xE0) >> 5)));
Magic Number,NintendoSpy.Readers,ClassicController,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\ClassicController.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog("trig_r"' readTrigger(data[3] & 0x1F));
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: filteredStateBuilder.SetButton(button' _states[2].Buttons[button]);
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: filteredStateBuilder.SetAnalog(button' _states[2].Analogs[button]);
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: _lastUnfiltered = _states[2];
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: return _states[2];
Magic Number,NintendoSpy.Readers,Nintendo64,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\Nintendo64.cs,readStick,The following statement contains a magic number: return (float)((sbyte)input) / 128;
Magic Number,NintendoSpy.Readers,Nintendo64,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\Nintendo64.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog ("stick_y"' readStick (SignalTool.readByte (packet' BUTTONS.Length + 8)));
Magic Number,NintendoSpy.Readers,GamepadReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,octantAngle,The following statement contains a magic number: return 2750 + 4500 * octant;
Magic Number,NintendoSpy.Readers,GamepadReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,octantAngle,The following statement contains a magic number: return 2750 + 4500 * octant;
Magic Number,NintendoSpy.Readers,GamepadReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: outState.SetButton ("up"' pov[0] > octantAngle (6) || pov[0] < octantAngle (1));
Magic Number,NintendoSpy.Readers,GamepadReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: outState.SetButton ("right"' pov[0] > octantAngle (0) && pov[0] < octantAngle (3));
Magic Number,NintendoSpy.Readers,GamepadReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: outState.SetButton ("down"' pov[0] > octantAngle (2) && pov[0] < octantAngle (5));
Magic Number,NintendoSpy.Readers,GamepadReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: outState.SetButton ("down"' pov[0] > octantAngle (2) && pov[0] < octantAngle (5));
Magic Number,NintendoSpy.Readers,GamepadReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: outState.SetButton ("left"' pov[0] > octantAngle (4) && pov[0] < octantAngle (7));
Magic Number,NintendoSpy.Readers,GamepadReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: outState.SetButton ("left"' pov[0] > octantAngle (4) && pov[0] < octantAngle (7));
Magic Number,NintendoSpy.Readers,XInputReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,GetDevices,The following statement contains a magic number: i < 4
Magic Number,NintendoSpy.Readers,XInputReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("lstick_x"' (float)state.sThumbLX / 32768);
Magic Number,NintendoSpy.Readers,XInputReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("lstick_y"' (float)state.sThumbLY / 32768);
Magic Number,NintendoSpy.Readers,XInputReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("rstick_x"' (float)state.sThumbRX / 32768);
Magic Number,NintendoSpy.Readers,XInputReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("rstick_y"' (float)state.sThumbRY / 32768);
Magic Number,NintendoSpy.Readers,XInputReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("trig_l"' (float)state.bLeftTrigger / 255);
Magic Number,NintendoSpy.Readers,XInputReader,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("trig_r"' (float)state.bRightTrigger / 255);
Magic Number,NintendoSpy.Readers,SignalTool,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\SignalTool.cs,readByte,The following statement contains a magic number: val |= (byte)(1<<(7-i));
Magic Number,NintendoSpy.Readers,SignalTool,D:\research\architectureSmells\repos\jaburns_NintendoSpy\Readers\SignalTool.cs,readByte,The following statement contains a magic number: i < 8
Missing Default,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,reader_ControllerStateChanged,The following switch statement is missing a default case: switch (skin.Direction)                   {                      case Skin.AnalogTrigger.DirectionValue.Right:                          grid.Width = skin.Config.Width * val;                          break;                        case Skin.AnalogTrigger.DirectionValue.Left:                          var width = skin.Config.Width * val;                          var offx = skin.Config.Width - width;                          grid.Margin = new Thickness (skin.Config.X + offx' skin.Config.Y' 0' 0);                          grid.Width = width;                          break;                        case Skin.AnalogTrigger.DirectionValue.Down:                          grid.Height = skin.Config.Height * val;                          break;                        case Skin.AnalogTrigger.DirectionValue.Up:                          var height = skin.Config.Height * val;                          var offy = skin.Config.Height - height;                          grid.Margin = new Thickness (skin.Config.X' skin.Config.Y + offy' 0' 0);                          grid.Height = height;                          break;                  }
Missing Default,NintendoSpy,ViewWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Missing Default,NintendoSpy,SetupWindow,D:\research\architectureSmells\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
