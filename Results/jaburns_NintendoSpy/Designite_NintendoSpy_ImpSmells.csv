Implementation smell,Namespace,Class,File,Method,Description
Long Method,NintendoSpy,Skin,C:\repos\jaburns_NintendoSpy\Skin.cs,Skin,The method has 107 lines of code.
Complex Method,NintendoSpy,Skin,C:\repos\jaburns_NintendoSpy\Skin.cs,Skin,Cyclomatic complexity of the method is 16
Complex Method,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,ViewWindow,Cyclomatic complexity of the method is 12
Complex Method,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,reader_ControllerStateChanged,Cyclomatic complexity of the method is 12
Complex Method,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,Cyclomatic complexity of the method is 15
Long Parameter List,NintendoSpy,InputSource,C:\repos\jaburns_NintendoSpy\InputSource.cs,InputSource,The method has 5 parameters. Parameters: typeTag' name' requiresComPort' requiresId' buildReader
Long Statement,NintendoSpy,Skin,C:\repos\jaburns_NintendoSpy\Skin.cs,getArrayAttr,The length of the statement  "                    throw new ConfigParseException("Required attribute '" + attrName + "' not found on element '" + elem.Name + "'. You can use it with ';' for multiple values."); " is 159.
Long Statement,NintendoSpy,Skin,C:\repos\jaburns_NintendoSpy\Skin.cs,parseStandardConfig,The length of the statement  "                X = x' Y = y' Image = image' Width = width' Height = height' TargetBackgrounds = targetBgs' IgnoreBackgrounds = ignoreBgs " is 121.
Long Statement,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click); " is 129.
Long Statement,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click); " is 132.
Long Statement,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click); " is 132.
Long Statement,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click); " is 130.
Long Statement,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged); " is 166.
Long Statement,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged); " is 149.
Empty Catch Block,NintendoSpy,SerialMonitor,C:\repos\jaburns_NintendoSpy\SerialMonitor.cs,Stop,The method has an empty catch block.
Magic Number,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Magic Number,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,SetupWindow,The following statement contains a magic number: _xiAndGamepadListUpdateTimer.Interval = TimeSpan.FromSeconds(2);
Magic Number,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,NintendoSpy.Readers,GameCube,C:\repos\jaburns_NintendoSpy\Readers\GameCube.cs,readStick,The following statement contains a magic number: return (float)(input - 128) / 128;
Magic Number,NintendoSpy.Readers,GameCube,C:\repos\jaburns_NintendoSpy\Readers\GameCube.cs,readStick,The following statement contains a magic number: return (float)(input - 128) / 128;
Magic Number,NintendoSpy.Readers,GameCube,C:\repos\jaburns_NintendoSpy\Readers\GameCube.cs,readTrigger,The following statement contains a magic number: return (float)(input) / 256;
Magic Number,NintendoSpy.Readers,GameCube,C:\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog ("lstick_y"' readStick (SignalTool.readByte (packet' BUTTONS.Length +  8)));
Magic Number,NintendoSpy.Readers,GameCube,C:\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog ("cstick_x"' readStick (SignalTool.readByte (packet' BUTTONS.Length + 16)));
Magic Number,NintendoSpy.Readers,GameCube,C:\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog ("cstick_y"' readStick (SignalTool.readByte (packet' BUTTONS.Length + 24)));
Magic Number,NintendoSpy.Readers,GameCube,C:\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog ("trig_l"' readTrigger (SignalTool.readByte (packet' BUTTONS.Length + 32)));
Magic Number,NintendoSpy.Readers,GameCube,C:\repos\jaburns_NintendoSpy\Readers\GameCube.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog ("trig_r"' readTrigger (SignalTool.readByte (packet' BUTTONS.Length + 40)));
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: {                  uint massCounter = 0;                  foreach (var button in _states[0].Buttons.Keys)                  {                      filteredStateBuilder.SetButton(button' _states[2].Buttons[button]);                        if (ButtonEnabled)                      {                          // previous previous frame    equals      current frame                          if (_states[0].Buttons[button] == _states[2].Buttons[button] &&                          // AND current frame       not equals    previous frame                          _states[2].Buttons[button] != _states[1].Buttons[button])                          {                              filteredStateBuilder.SetButton(button' false); // if noisy' we turn the button off                              filtered = true;                          }                      }                      if (MassEnabled)                      {                          if (_states[2].Buttons[button])                          {                              massCounter++;                          }                      }                  }                                      foreach (var button in _states[0].Analogs.Keys)                  {                      filteredStateBuilder.SetAnalog(button' _states[2].Analogs[button]);                      if (MassEnabled)                      {                          if (Math.Abs(Math.Abs(_states[2].Analogs[button]) - Math.Abs(_states[1].Analogs[button])) > 0.3)                          {                              massCounter++;                          }                      }                      if (AnalogEnabled)                      {                          // If we traveled over 0.5 Analog between the last three frames                          // but less than 0.1 in the frame before                          // we drop the change for this input                          if (Math.Abs(_states[2].Analogs[button]-_states[1].Analogs[button]) > .5f &&                              Math.Abs(_states[1].Analogs[button] - _states[0].Analogs[button]) < 0.1f){                              filteredStateBuilder.SetAnalog(button' _lastUnfiltered.Analogs[button]);                              filtered = true;                          }                      }                  }                  // if over 80% of the buttons are used we revert (this is either a reset button combo or a blink)                  if(massCounter > (_states[0].Analogs.Count + _states[0].Buttons.Count) * 0.8)                  {                          revert = true;                  }              }
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: {                  uint massCounter = 0;                  foreach (var button in _states[0].Buttons.Keys)                  {                      filteredStateBuilder.SetButton(button' _states[2].Buttons[button]);                        if (ButtonEnabled)                      {                          // previous previous frame    equals      current frame                          if (_states[0].Buttons[button] == _states[2].Buttons[button] &&                          // AND current frame       not equals    previous frame                          _states[2].Buttons[button] != _states[1].Buttons[button])                          {                              filteredStateBuilder.SetButton(button' false); // if noisy' we turn the button off                              filtered = true;                          }                      }                      if (MassEnabled)                      {                          if (_states[2].Buttons[button])                          {                              massCounter++;                          }                      }                  }                                      foreach (var button in _states[0].Analogs.Keys)                  {                      filteredStateBuilder.SetAnalog(button' _states[2].Analogs[button]);                      if (MassEnabled)                      {                          if (Math.Abs(Math.Abs(_states[2].Analogs[button]) - Math.Abs(_states[1].Analogs[button])) > 0.3)                          {                              massCounter++;                          }                      }                      if (AnalogEnabled)                      {                          // If we traveled over 0.5 Analog between the last three frames                          // but less than 0.1 in the frame before                          // we drop the change for this input                          if (Math.Abs(_states[2].Analogs[button]-_states[1].Analogs[button]) > .5f &&                              Math.Abs(_states[1].Analogs[button] - _states[0].Analogs[button]) < 0.1f){                              filteredStateBuilder.SetAnalog(button' _lastUnfiltered.Analogs[button]);                              filtered = true;                          }                      }                  }                  // if over 80% of the buttons are used we revert (this is either a reset button combo or a blink)                  if(massCounter > (_states[0].Analogs.Count + _states[0].Buttons.Count) * 0.8)                  {                          revert = true;                  }              }
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: {                  uint massCounter = 0;                  foreach (var button in _states[0].Buttons.Keys)                  {                      filteredStateBuilder.SetButton(button' _states[2].Buttons[button]);                        if (ButtonEnabled)                      {                          // previous previous frame    equals      current frame                          if (_states[0].Buttons[button] == _states[2].Buttons[button] &&                          // AND current frame       not equals    previous frame                          _states[2].Buttons[button] != _states[1].Buttons[button])                          {                              filteredStateBuilder.SetButton(button' false); // if noisy' we turn the button off                              filtered = true;                          }                      }                      if (MassEnabled)                      {                          if (_states[2].Buttons[button])                          {                              massCounter++;                          }                      }                  }                                      foreach (var button in _states[0].Analogs.Keys)                  {                      filteredStateBuilder.SetAnalog(button' _states[2].Analogs[button]);                      if (MassEnabled)                      {                          if (Math.Abs(Math.Abs(_states[2].Analogs[button]) - Math.Abs(_states[1].Analogs[button])) > 0.3)                          {                              massCounter++;                          }                      }                      if (AnalogEnabled)                      {                          // If we traveled over 0.5 Analog between the last three frames                          // but less than 0.1 in the frame before                          // we drop the change for this input                          if (Math.Abs(_states[2].Analogs[button]-_states[1].Analogs[button]) > .5f &&                              Math.Abs(_states[1].Analogs[button] - _states[0].Analogs[button]) < 0.1f){                              filteredStateBuilder.SetAnalog(button' _lastUnfiltered.Analogs[button]);                              filtered = true;                          }                      }                  }                  // if over 80% of the buttons are used we revert (this is either a reset button combo or a blink)                  if(massCounter > (_states[0].Analogs.Count + _states[0].Buttons.Count) * 0.8)                  {                          revert = true;                  }              }
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: {                  uint massCounter = 0;                  foreach (var button in _states[0].Buttons.Keys)                  {                      filteredStateBuilder.SetButton(button' _states[2].Buttons[button]);                        if (ButtonEnabled)                      {                          // previous previous frame    equals      current frame                          if (_states[0].Buttons[button] == _states[2].Buttons[button] &&                          // AND current frame       not equals    previous frame                          _states[2].Buttons[button] != _states[1].Buttons[button])                          {                              filteredStateBuilder.SetButton(button' false); // if noisy' we turn the button off                              filtered = true;                          }                      }                      if (MassEnabled)                      {                          if (_states[2].Buttons[button])                          {                              massCounter++;                          }                      }                  }                                      foreach (var button in _states[0].Analogs.Keys)                  {                      filteredStateBuilder.SetAnalog(button' _states[2].Analogs[button]);                      if (MassEnabled)                      {                          if (Math.Abs(Math.Abs(_states[2].Analogs[button]) - Math.Abs(_states[1].Analogs[button])) > 0.3)                          {                              massCounter++;                          }                      }                      if (AnalogEnabled)                      {                          // If we traveled over 0.5 Analog between the last three frames                          // but less than 0.1 in the frame before                          // we drop the change for this input                          if (Math.Abs(_states[2].Analogs[button]-_states[1].Analogs[button]) > .5f &&                              Math.Abs(_states[1].Analogs[button] - _states[0].Analogs[button]) < 0.1f){                              filteredStateBuilder.SetAnalog(button' _lastUnfiltered.Analogs[button]);                              filtered = true;                          }                      }                  }                  // if over 80% of the buttons are used we revert (this is either a reset button combo or a blink)                  if(massCounter > (_states[0].Analogs.Count + _states[0].Buttons.Count) * 0.8)                  {                          revert = true;                  }              }
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: {                  uint massCounter = 0;                  foreach (var button in _states[0].Buttons.Keys)                  {                      filteredStateBuilder.SetButton(button' _states[2].Buttons[button]);                        if (ButtonEnabled)                      {                          // previous previous frame    equals      current frame                          if (_states[0].Buttons[button] == _states[2].Buttons[button] &&                          // AND current frame       not equals    previous frame                          _states[2].Buttons[button] != _states[1].Buttons[button])                          {                              filteredStateBuilder.SetButton(button' false); // if noisy' we turn the button off                              filtered = true;                          }                      }                      if (MassEnabled)                      {                          if (_states[2].Buttons[button])                          {                              massCounter++;                          }                      }                  }                                      foreach (var button in _states[0].Analogs.Keys)                  {                      filteredStateBuilder.SetAnalog(button' _states[2].Analogs[button]);                      if (MassEnabled)                      {                          if (Math.Abs(Math.Abs(_states[2].Analogs[button]) - Math.Abs(_states[1].Analogs[button])) > 0.3)                          {                              massCounter++;                          }                      }                      if (AnalogEnabled)                      {                          // If we traveled over 0.5 Analog between the last three frames                          // but less than 0.1 in the frame before                          // we drop the change for this input                          if (Math.Abs(_states[2].Analogs[button]-_states[1].Analogs[button]) > .5f &&                              Math.Abs(_states[1].Analogs[button] - _states[0].Analogs[button]) < 0.1f){                              filteredStateBuilder.SetAnalog(button' _lastUnfiltered.Analogs[button]);                              filtered = true;                          }                      }                  }                  // if over 80% of the buttons are used we revert (this is either a reset button combo or a blink)                  if(massCounter > (_states[0].Analogs.Count + _states[0].Buttons.Count) * 0.8)                  {                          revert = true;                  }              }
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: {                  uint massCounter = 0;                  foreach (var button in _states[0].Buttons.Keys)                  {                      filteredStateBuilder.SetButton(button' _states[2].Buttons[button]);                        if (ButtonEnabled)                      {                          // previous previous frame    equals      current frame                          if (_states[0].Buttons[button] == _states[2].Buttons[button] &&                          // AND current frame       not equals    previous frame                          _states[2].Buttons[button] != _states[1].Buttons[button])                          {                              filteredStateBuilder.SetButton(button' false); // if noisy' we turn the button off                              filtered = true;                          }                      }                      if (MassEnabled)                      {                          if (_states[2].Buttons[button])                          {                              massCounter++;                          }                      }                  }                                      foreach (var button in _states[0].Analogs.Keys)                  {                      filteredStateBuilder.SetAnalog(button' _states[2].Analogs[button]);                      if (MassEnabled)                      {                          if (Math.Abs(Math.Abs(_states[2].Analogs[button]) - Math.Abs(_states[1].Analogs[button])) > 0.3)                          {                              massCounter++;                          }                      }                      if (AnalogEnabled)                      {                          // If we traveled over 0.5 Analog between the last three frames                          // but less than 0.1 in the frame before                          // we drop the change for this input                          if (Math.Abs(_states[2].Analogs[button]-_states[1].Analogs[button]) > .5f &&                              Math.Abs(_states[1].Analogs[button] - _states[0].Analogs[button]) < 0.1f){                              filteredStateBuilder.SetAnalog(button' _lastUnfiltered.Analogs[button]);                              filtered = true;                          }                      }                  }                  // if over 80% of the buttons are used we revert (this is either a reset button combo or a blink)                  if(massCounter > (_states[0].Analogs.Count + _states[0].Buttons.Count) * 0.8)                  {                          revert = true;                  }              }
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: {                  uint massCounter = 0;                  foreach (var button in _states[0].Buttons.Keys)                  {                      filteredStateBuilder.SetButton(button' _states[2].Buttons[button]);                        if (ButtonEnabled)                      {                          // previous previous frame    equals      current frame                          if (_states[0].Buttons[button] == _states[2].Buttons[button] &&                          // AND current frame       not equals    previous frame                          _states[2].Buttons[button] != _states[1].Buttons[button])                          {                              filteredStateBuilder.SetButton(button' false); // if noisy' we turn the button off                              filtered = true;                          }                      }                      if (MassEnabled)                      {                          if (_states[2].Buttons[button])                          {                              massCounter++;                          }                      }                  }                                      foreach (var button in _states[0].Analogs.Keys)                  {                      filteredStateBuilder.SetAnalog(button' _states[2].Analogs[button]);                      if (MassEnabled)                      {                          if (Math.Abs(Math.Abs(_states[2].Analogs[button]) - Math.Abs(_states[1].Analogs[button])) > 0.3)                          {                              massCounter++;                          }                      }                      if (AnalogEnabled)                      {                          // If we traveled over 0.5 Analog between the last three frames                          // but less than 0.1 in the frame before                          // we drop the change for this input                          if (Math.Abs(_states[2].Analogs[button]-_states[1].Analogs[button]) > .5f &&                              Math.Abs(_states[1].Analogs[button] - _states[0].Analogs[button]) < 0.1f){                              filteredStateBuilder.SetAnalog(button' _lastUnfiltered.Analogs[button]);                              filtered = true;                          }                      }                  }                  // if over 80% of the buttons are used we revert (this is either a reset button combo or a blink)                  if(massCounter > (_states[0].Analogs.Count + _states[0].Buttons.Count) * 0.8)                  {                          revert = true;                  }              }
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: {                  uint massCounter = 0;                  foreach (var button in _states[0].Buttons.Keys)                  {                      filteredStateBuilder.SetButton(button' _states[2].Buttons[button]);                        if (ButtonEnabled)                      {                          // previous previous frame    equals      current frame                          if (_states[0].Buttons[button] == _states[2].Buttons[button] &&                          // AND current frame       not equals    previous frame                          _states[2].Buttons[button] != _states[1].Buttons[button])                          {                              filteredStateBuilder.SetButton(button' false); // if noisy' we turn the button off                              filtered = true;                          }                      }                      if (MassEnabled)                      {                          if (_states[2].Buttons[button])                          {                              massCounter++;                          }                      }                  }                                      foreach (var button in _states[0].Analogs.Keys)                  {                      filteredStateBuilder.SetAnalog(button' _states[2].Analogs[button]);                      if (MassEnabled)                      {                          if (Math.Abs(Math.Abs(_states[2].Analogs[button]) - Math.Abs(_states[1].Analogs[button])) > 0.3)                          {                              massCounter++;                          }                      }                      if (AnalogEnabled)                      {                          // If we traveled over 0.5 Analog between the last three frames                          // but less than 0.1 in the frame before                          // we drop the change for this input                          if (Math.Abs(_states[2].Analogs[button]-_states[1].Analogs[button]) > .5f &&                              Math.Abs(_states[1].Analogs[button] - _states[0].Analogs[button]) < 0.1f){                              filteredStateBuilder.SetAnalog(button' _lastUnfiltered.Analogs[button]);                              filtered = true;                          }                      }                  }                  // if over 80% of the buttons are used we revert (this is either a reset button combo or a blink)                  if(massCounter > (_states[0].Analogs.Count + _states[0].Buttons.Count) * 0.8)                  {                          revert = true;                  }              }
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: {                  uint massCounter = 0;                  foreach (var button in _states[0].Buttons.Keys)                  {                      filteredStateBuilder.SetButton(button' _states[2].Buttons[button]);                        if (ButtonEnabled)                      {                          // previous previous frame    equals      current frame                          if (_states[0].Buttons[button] == _states[2].Buttons[button] &&                          // AND current frame       not equals    previous frame                          _states[2].Buttons[button] != _states[1].Buttons[button])                          {                              filteredStateBuilder.SetButton(button' false); // if noisy' we turn the button off                              filtered = true;                          }                      }                      if (MassEnabled)                      {                          if (_states[2].Buttons[button])                          {                              massCounter++;                          }                      }                  }                                      foreach (var button in _states[0].Analogs.Keys)                  {                      filteredStateBuilder.SetAnalog(button' _states[2].Analogs[button]);                      if (MassEnabled)                      {                          if (Math.Abs(Math.Abs(_states[2].Analogs[button]) - Math.Abs(_states[1].Analogs[button])) > 0.3)                          {                              massCounter++;                          }                      }                      if (AnalogEnabled)                      {                          // If we traveled over 0.5 Analog between the last three frames                          // but less than 0.1 in the frame before                          // we drop the change for this input                          if (Math.Abs(_states[2].Analogs[button]-_states[1].Analogs[button]) > .5f &&                              Math.Abs(_states[1].Analogs[button] - _states[0].Analogs[button]) < 0.1f){                              filteredStateBuilder.SetAnalog(button' _lastUnfiltered.Analogs[button]);                              filtered = true;                          }                      }                  }                  // if over 80% of the buttons are used we revert (this is either a reset button combo or a blink)                  if(massCounter > (_states[0].Analogs.Count + _states[0].Buttons.Count) * 0.8)                  {                          revert = true;                  }              }
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: _lastUnfiltered = _states[2];
Magic Number,NintendoSpy.Readers,BlinkReductionFilter,C:\repos\jaburns_NintendoSpy\Readers\BlinkReductionFilter.cs,Process,The following statement contains a magic number: return _states[2];
Magic Number,NintendoSpy.Readers,Nintendo64,C:\repos\jaburns_NintendoSpy\Readers\Nintendo64.cs,readStick,The following statement contains a magic number: return (float)((sbyte)input) / 128;
Magic Number,NintendoSpy.Readers,Nintendo64,C:\repos\jaburns_NintendoSpy\Readers\Nintendo64.cs,ReadFromPacket,The following statement contains a magic number: state.SetAnalog ("stick_y"' readStick (SignalTool.readByte (packet' BUTTONS.Length + 8)));
Magic Number,NintendoSpy.Readers,GamepadReader,C:\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,octantAngle,The following statement contains a magic number: return 2750 + 4500 * octant;
Magic Number,NintendoSpy.Readers,GamepadReader,C:\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,octantAngle,The following statement contains a magic number: return 2750 + 4500 * octant;
Magic Number,NintendoSpy.Readers,GamepadReader,C:\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: if (pov != null && pov.Length > 0 && pov[0] >= 0) {                  outState.SetButton ("up"' pov[0] > octantAngle (6) || pov[0] < octantAngle (1));                  outState.SetButton ("right"' pov[0] > octantAngle (0) && pov[0] < octantAngle (3));                  outState.SetButton ("down"' pov[0] > octantAngle (2) && pov[0] < octantAngle (5));                  outState.SetButton ("left"' pov[0] > octantAngle (4) && pov[0] < octantAngle (7));              }
Magic Number,NintendoSpy.Readers,GamepadReader,C:\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: if (pov != null && pov.Length > 0 && pov[0] >= 0) {                  outState.SetButton ("up"' pov[0] > octantAngle (6) || pov[0] < octantAngle (1));                  outState.SetButton ("right"' pov[0] > octantAngle (0) && pov[0] < octantAngle (3));                  outState.SetButton ("down"' pov[0] > octantAngle (2) && pov[0] < octantAngle (5));                  outState.SetButton ("left"' pov[0] > octantAngle (4) && pov[0] < octantAngle (7));              }
Magic Number,NintendoSpy.Readers,GamepadReader,C:\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: if (pov != null && pov.Length > 0 && pov[0] >= 0) {                  outState.SetButton ("up"' pov[0] > octantAngle (6) || pov[0] < octantAngle (1));                  outState.SetButton ("right"' pov[0] > octantAngle (0) && pov[0] < octantAngle (3));                  outState.SetButton ("down"' pov[0] > octantAngle (2) && pov[0] < octantAngle (5));                  outState.SetButton ("left"' pov[0] > octantAngle (4) && pov[0] < octantAngle (7));              }
Magic Number,NintendoSpy.Readers,GamepadReader,C:\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: if (pov != null && pov.Length > 0 && pov[0] >= 0) {                  outState.SetButton ("up"' pov[0] > octantAngle (6) || pov[0] < octantAngle (1));                  outState.SetButton ("right"' pov[0] > octantAngle (0) && pov[0] < octantAngle (3));                  outState.SetButton ("down"' pov[0] > octantAngle (2) && pov[0] < octantAngle (5));                  outState.SetButton ("left"' pov[0] > octantAngle (4) && pov[0] < octantAngle (7));              }
Magic Number,NintendoSpy.Readers,GamepadReader,C:\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: if (pov != null && pov.Length > 0 && pov[0] >= 0) {                  outState.SetButton ("up"' pov[0] > octantAngle (6) || pov[0] < octantAngle (1));                  outState.SetButton ("right"' pov[0] > octantAngle (0) && pov[0] < octantAngle (3));                  outState.SetButton ("down"' pov[0] > octantAngle (2) && pov[0] < octantAngle (5));                  outState.SetButton ("left"' pov[0] > octantAngle (4) && pov[0] < octantAngle (7));              }
Magic Number,NintendoSpy.Readers,GamepadReader,C:\repos\jaburns_NintendoSpy\Readers\GamepadReader.cs,tick,The following statement contains a magic number: if (pov != null && pov.Length > 0 && pov[0] >= 0) {                  outState.SetButton ("up"' pov[0] > octantAngle (6) || pov[0] < octantAngle (1));                  outState.SetButton ("right"' pov[0] > octantAngle (0) && pov[0] < octantAngle (3));                  outState.SetButton ("down"' pov[0] > octantAngle (2) && pov[0] < octantAngle (5));                  outState.SetButton ("left"' pov[0] > octantAngle (4) && pov[0] < octantAngle (7));              }
Magic Number,NintendoSpy.Readers,XInputReader,C:\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,GetDevices,The following statement contains a magic number: for (uint i = 0; i < 4; i++) //Poll all 4 possible controllers to see which are connected' thats how it works :/              {                  if (XInputDLL.XInputGetState(i' ref dummy) == 0)                  {                      result.Add(i);                  }              }
Magic Number,NintendoSpy.Readers,XInputReader,C:\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("lstick_x"' (float)state.sThumbLX / 32768);
Magic Number,NintendoSpy.Readers,XInputReader,C:\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("lstick_y"' (float)state.sThumbLY / 32768);
Magic Number,NintendoSpy.Readers,XInputReader,C:\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("rstick_x"' (float)state.sThumbRX / 32768);
Magic Number,NintendoSpy.Readers,XInputReader,C:\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("rstick_y"' (float)state.sThumbRY / 32768);
Magic Number,NintendoSpy.Readers,XInputReader,C:\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("trig_l"' (float)state.bLeftTrigger / 255);
Magic Number,NintendoSpy.Readers,XInputReader,C:\repos\jaburns_NintendoSpy\Readers\XInputReader.cs,tick,The following statement contains a magic number: outState.SetAnalog ("trig_r"' (float)state.bRightTrigger / 255);
Magic Number,NintendoSpy.Readers,SignalTool,C:\repos\jaburns_NintendoSpy\Readers\SignalTool.cs,readByte,The following statement contains a magic number: for (int i = 0 ; i < 8 ; ++i) {                  if ((packet[i+offset] & 0x0F) != 0) {                      val |= (byte)(1<<(7-i));                  }              }
Magic Number,NintendoSpy.Readers,SignalTool,C:\repos\jaburns_NintendoSpy\Readers\SignalTool.cs,readByte,The following statement contains a magic number: for (int i = 0 ; i < 8 ; ++i) {                  if ((packet[i+offset] & 0x0F) != 0) {                      val |= (byte)(1<<(7-i));                  }              }
Missing Default,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,reader_ControllerStateChanged,The following switch statement is missing a default case: switch (skin.Direction)                   {                      case Skin.AnalogTrigger.DirectionValue.Right:                          grid.Width = skin.Config.Width * val;                          break;                        case Skin.AnalogTrigger.DirectionValue.Left:                          var width = skin.Config.Width * val;                          var offx = skin.Config.Width - width;                          grid.Margin = new Thickness (skin.Config.X + offx' skin.Config.Y' 0' 0);                          grid.Width = width;                          break;                        case Skin.AnalogTrigger.DirectionValue.Down:                          grid.Height = skin.Config.Height * val;                          break;                        case Skin.AnalogTrigger.DirectionValue.Up:                          var height = skin.Config.Height * val;                          var offy = skin.Config.Height - height;                          grid.Margin = new Thickness (skin.Config.X' skin.Config.Y + offy' 0' 0);                          grid.Height = height;                          break;                  }
Missing Default,NintendoSpy,ViewWindow,C:\repos\jaburns_NintendoSpy\ViewWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\ViewWindow.xaml"              ((NintendoSpy.ViewWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.ControllerGrid = ((System.Windows.Controls.Grid)(target));              return;              case 3:                            #line 9 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AlwaysOnTop_Click);                            #line default              #line hidden              return;              case 4:                            #line 11 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AllBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 5:                            #line 13 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.ButtonBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 6:                            #line 14 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.AnalogBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              case 7:                            #line 15 "..\..\..\ViewWindow.xaml"              ((System.Windows.Controls.MenuItem)(target)).Click += new System.Windows.RoutedEventHandler(this.MassBlinkReductionEnabled_Click);                            #line default              #line hidden              return;              }
Missing Default,NintendoSpy,SetupWindow,C:\repos\jaburns_NintendoSpy\SetupWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ComboBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.SourceSelectComboBox_SelectionChanged);                            #line default              #line hidden              return;              case 2:              this.ComPortLabel = ((System.Windows.Controls.Label)(target));              return;              case 3:              this.ControllerIdLabel = ((System.Windows.Controls.Label)(target));              return;              case 4:              this.ComPortCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 5:              this.ControllerIdCombo = ((System.Windows.Controls.ComboBox)(target));              return;              case 6:                            #line 30 "..\..\..\SetupWindow.xaml"              ((System.Windows.Controls.ListBox)(target)).SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.Skin_SelectionChanged);                            #line default              #line hidden              return;              case 7:              this.txtDelay = ((System.Windows.Controls.TextBox)(target));              return;              case 8:              this.goButton = ((System.Windows.Controls.Button)(target));                            #line 32 "..\..\..\SetupWindow.xaml"              this.goButton.Click += new System.Windows.RoutedEventHandler(this.goButton_Click);                            #line default              #line hidden              return;              case 9:              this.DelayLabel = ((System.Windows.Controls.Label)(target));              return;              }
