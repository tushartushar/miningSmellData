Implementation smell,Namespace,Class,File,Method,Description
Long Method,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The method has 141 lines of code.
Complex Method,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,Cyclomatic complexity of the method is 9
Complex Method,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,Cyclomatic complexity of the method is 14
Complex Method,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,Cyclomatic complexity of the method is 11
Complex Method,CardGames,MainWindow,C:\repos\yzzw006_CardGames\MainWindow.xaml.cs,StartGame,Cyclomatic complexity of the method is 21
Complex Method,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,Cyclomatic complexity of the method is 9
Complex Method,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,Cyclomatic complexity of the method is 8
Complex Method,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,Cyclomatic complexity of the method is 115
Long Statement,CardGames.AcesUpGame,AcesUpCore,C:\repos\yzzw006_CardGames\AcesUpGame\AceUpCore.cs,CanMove,The length of the statement  "				if (IsLarger (cList.Last ().Rank' _cardStack [src].Last ().Rank) && cList.Last ().Suit == _cardStack [src].Last ().Suit) " is 120.
Long Statement,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,Element_MouseLeftButtonUp,The length of the statement  "				sCardBorderList [0].AddHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown)' true); " is 130.
Long Statement,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The length of the statement  "				(freecellList [n].Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown)); " is 148.
Long Statement,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The length of the statement  "				(homecellList [n].Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Homecell_MouseLeftButtonDown)); " is 149.
Long Statement,CardGames,MainWindow,C:\repos\yzzw006_CardGames\MainWindow.xaml.cs,SaveFrameworkElementToImage,The length of the statement  "	RenderTargetBitmap bmp = new RenderTargetBitmap ((int)ui.ActualWidth + 1' (int)ui.ActualHeight + 1' 96d' 96d' PixelFormats.Pbgra32); " is 132.
Long Statement,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,Element_MouseLeftButtonUp,The length of the statement  "				sCardBorderList [0].AddHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown)' true); " is 130.
Long Statement,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The length of the statement  "				(DealCell.Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown)); " is 140.
Long Statement,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Menu_Help,The length of the statement  "	hw.Info += "规则：把牌从A到K不管花色顺序摆放在得分列。只要每列的最上面一张牌符合得分列的排列顺序，就可以移动到得分列。桌面上的牌也可以从大到小'不计花色进行排列。每次只能移动一张牌。空列只能放入一张发的牌或K。发的牌可以放到任一非得分列，不计花色大小。"; " is 135.
Complex Conditional,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,ParseDestination,The conditional expression  "x > 0 && x < 71 && p.Y > 50 && p.Y < 450"  is complex.
Complex Conditional,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,IsOrdered,The conditional expression  "!((c1.Suit <= 2 && c2.Suit >= 3) || (c1.Suit >= 3 && c2.Suit <= 2))"  is complex.
Complex Conditional,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The conditional expression  "x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314"  is complex.
Complex Conditional,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,ParseDestination,The conditional expression  "x > 0 && x < 71 && p.Y > 50 && p.Y < 350"  is complex.
Complex Conditional,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The conditional expression  "x >= 97 && x < 168 && p.Y > 12 && p.Y < 120"  is complex.
Complex Conditional,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,IsOrdered,The conditional expression  "!((c1.Suit <= 2 && c2.Suit >= 3) || (c1.Suit >= 3 && c2.Suit <= 2))"  is complex.
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,Init,The following statement contains a magic number: foreach (CardStack cs in stackList) {  	cs.TopMargin = 20;  	cs.RefreshStack (gameCore.Stack [index]);  	cs.Index = index;  	cs.GameBase = this;  	index++;  }  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,Init,The following statement contains a magic number: cs.TopMargin = 20;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,Init,The following statement contains a magic number: HomeList.TopMargin = 4;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,Init,The following statement contains a magic number: HomeList.Index = 4;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,Init,The following statement contains a magic number: DealList.TopMargin = 8;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,Init,The following statement contains a magic number: DealList.Index = 5;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack < _stackCount) {  	top = 50 + 20 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 50 + 8 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack < _stackCount) {  	top = 50 + 20 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 50 + 8 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack < _stackCount) {  	top = 50 + 20 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 50 + 8 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack < _stackCount) {  	top = 50 + 20 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 50 + 8 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack < _stackCount) {  	top = 50 + 20 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 50 + 8 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack < _stackCount) {  	top = 50 + 20 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 50 + 8 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: top = 50 + 20 * gameCore.FocusedCard;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: top = 50 + 20 * gameCore.FocusedCard;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: top = 50 + 8 * gameCore.FocusedCard;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: top = 50 + 8 * gameCore.FocusedCard;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,StartDrag,The following statement contains a magic number: left = 32;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,ParseDestination,The following statement contains a magic number: if (x > 0 && x < 71 && p.Y > 50 && p.Y < 450) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > _stackCount)  		result = -1;  	//return result;  }  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,ParseDestination,The following statement contains a magic number: if (x > 0 && x < 71 && p.Y > 50 && p.Y < 450) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > _stackCount)  		result = -1;  	//return result;  }  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,ParseDestination,The following statement contains a magic number: if (x > 0 && x < 71 && p.Y > 50 && p.Y < 450) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > _stackCount)  		result = -1;  	//return result;  }  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,ParseDestination,The following statement contains a magic number: if (x > 0 && x < 71 && p.Y > 50 && p.Y < 450) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > _stackCount)  		result = -1;  	//return result;  }  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,ParseDestination,The following statement contains a magic number: result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  
Magic Number,CardGames.AcesUpGame,AcesUp,C:\repos\yzzw006_CardGames\AcesUpGame\AcesUp.xaml.cs,RefreshInfo,The following statement contains a magic number: CountLabel.Text = "Score : " + gameCore.HomeList.Count * 2;  
Magic Number,CardGames.AcesUpGame,AcesUpCore,C:\repos\yzzw006_CardGames\AcesUpGame\AceUpCore.cs,AcesUpCore,The following statement contains a magic number: _cardList = Card_DealData.getDealCardList (rd.Next (0' 100000));  
Magic Number,CardGames.AcesUpGame,AcesUpCore,C:\repos\yzzw006_CardGames\AcesUpGame\AceUpCore.cs,IsLarger,The following statement contains a magic number: if (max == 1)  	max += 13;  
Magic Number,CardGames.AcesUpGame,AcesUpCore,C:\repos\yzzw006_CardGames\AcesUpGame\AceUpCore.cs,IsLarger,The following statement contains a magic number: max += 13;  
Magic Number,CardGames.AcesUpGame,AcesUpCore,C:\repos\yzzw006_CardGames\AcesUpGame\AceUpCore.cs,IsLarger,The following statement contains a magic number: if (min == 1)  	min += 13;  
Magic Number,CardGames.AcesUpGame,AcesUpCore,C:\repos\yzzw006_CardGames\AcesUpGame\AceUpCore.cs,IsLarger,The following statement contains a magic number: min += 13;  
Magic Number,CardGames.AcesUpGame,AcesUpCore,C:\repos\yzzw006_CardGames\AcesUpGame\AceUpCore.cs,GetFocus,The following statement contains a magic number: foreach (Card c in _homeList) {  	if (c.Rank == rank && c.Suit == suit) {  		this._isFocused = true;  		this._focusedStack = 4;  		this._focusedCard = _cardList.IndexOf (c);  		return;  	}  }  
Magic Number,CardGames.AcesUpGame,AcesUpCore,C:\repos\yzzw006_CardGames\AcesUpGame\AceUpCore.cs,GetFocus,The following statement contains a magic number: if (c.Rank == rank && c.Suit == suit) {  	this._isFocused = true;  	this._focusedStack = 4;  	this._focusedCard = _cardList.IndexOf (c);  	return;  }  
Magic Number,CardGames.AcesUpGame,AcesUpCore,C:\repos\yzzw006_CardGames\AcesUpGame\AceUpCore.cs,GetFocus,The following statement contains a magic number: this._focusedStack = 4;  
Magic Number,CardGames.Data,Card_DealData,C:\repos\yzzw006_CardGames\Data\Card_DealData.cs,getDealCardList,The following statement contains a magic number: for (int i = 0; i < 52; i++) {  	deck.Add (i);  }  
Magic Number,CardGames.Data,Card_DealData,C:\repos\yzzw006_CardGames\Data\Card_DealData.cs,RenderCard,The following statement contains a magic number: return new Card (suitArray [cardId % 4]' cardId / 4 + 1);  
Magic Number,CardGames.Data,Card_DealData,C:\repos\yzzw006_CardGames\Data\Card_DealData.cs,RenderCard,The following statement contains a magic number: return new Card (suitArray [cardId % 4]' cardId / 4 + 1);  
Magic Number,CardGames.Data,Card_DealData,C:\repos\yzzw006_CardGames\Data\Card_DealData.cs,getDealCards,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	columns [i] = new List<int> ();  }  
Magic Number,CardGames.Data,Card_DealData,C:\repos\yzzw006_CardGames\Data\Card_DealData.cs,getDealCards,The following statement contains a magic number: for (int i = 0; i < 52; i++) {  	deck.Add (i);  }  
Magic Number,CardGames.Data,Card_DealData,C:\repos\yzzw006_CardGames\Data\Card_DealData.cs,getDealCards,The following statement contains a magic number: for (var i = 0; i < 52; i++) {  	columns [i % num_cols].Add (deck [i]);  }  
Magic Number,CardGames.Data,MSRand,C:\repos\yzzw006_CardGames\Data\Card_DealData.cs,rand,The following statement contains a magic number: this._seed = (this._seed * 214013 + 2531011) & 0x7FFFFFFF;  
Magic Number,CardGames.Data,MSRand,C:\repos\yzzw006_CardGames\Data\Card_DealData.cs,rand,The following statement contains a magic number: this._seed = (this._seed * 214013 + 2531011) & 0x7FFFFFFF;  
Magic Number,CardGames.Data,MSRand,C:\repos\yzzw006_CardGames\Data\Card_DealData.cs,rand,The following statement contains a magic number: return ((this._seed >> 16) & 0x7fff);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,FreecellCore,The following statement contains a magic number: for (int i = 0; i < 8; i++)  	_cardStack [i] = new List<Card> ();  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,FreecellCore,The following statement contains a magic number: for (var i = 0; i < 52; i++) {  	_cardStack [i % 8].Add (cardLibrary [i]);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,FreecellCore,The following statement contains a magic number: for (var i = 0; i < 52; i++) {  	_cardStack [i % 8].Add (cardLibrary [i]);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,FreecellCore,The following statement contains a magic number: _cardStack [i % 8].Add (cardLibrary [i]);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (des <= 7) {  	nSrc = des;  	nSrcIndex = _cardStack [des].Count;  }  else if (des <= 11) {  	nSrc = 8;  	nSrcIndex = des - 8;  }  else {  	nSrc = 9;  	nSrcIndex = des - 12;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (des <= 7) {  	nSrc = des;  	nSrcIndex = _cardStack [des].Count;  }  else if (des <= 11) {  	nSrc = 8;  	nSrcIndex = des - 8;  }  else {  	nSrc = 9;  	nSrcIndex = des - 12;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (des <= 7) {  	nSrc = des;  	nSrcIndex = _cardStack [des].Count;  }  else if (des <= 11) {  	nSrc = 8;  	nSrcIndex = des - 8;  }  else {  	nSrc = 9;  	nSrcIndex = des - 12;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (des <= 7) {  	nSrc = des;  	nSrcIndex = _cardStack [des].Count;  }  else if (des <= 11) {  	nSrc = 8;  	nSrcIndex = des - 8;  }  else {  	nSrc = 9;  	nSrcIndex = des - 12;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (des <= 7) {  	nSrc = des;  	nSrcIndex = _cardStack [des].Count;  }  else if (des <= 11) {  	nSrc = 8;  	nSrcIndex = des - 8;  }  else {  	nSrc = 9;  	nSrcIndex = des - 12;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (des <= 7) {  	nSrc = des;  	nSrcIndex = _cardStack [des].Count;  }  else if (des <= 11) {  	nSrc = 8;  	nSrcIndex = des - 8;  }  else {  	nSrc = 9;  	nSrcIndex = des - 12;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (des <= 11) {  	nSrc = 8;  	nSrcIndex = des - 8;  }  else {  	nSrc = 9;  	nSrcIndex = des - 12;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (des <= 11) {  	nSrc = 8;  	nSrcIndex = des - 8;  }  else {  	nSrc = 9;  	nSrcIndex = des - 12;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (des <= 11) {  	nSrc = 8;  	nSrcIndex = des - 8;  }  else {  	nSrc = 9;  	nSrcIndex = des - 12;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (des <= 11) {  	nSrc = 8;  	nSrcIndex = des - 8;  }  else {  	nSrc = 9;  	nSrcIndex = des - 12;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (des <= 11) {  	nSrc = 8;  	nSrcIndex = des - 8;  }  else {  	nSrc = 9;  	nSrcIndex = des - 12;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: nSrc = 8;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: nSrcIndex = des - 8;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: nSrc = 9;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: nSrcIndex = des - 12;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,AddRevokeList,The following statement contains a magic number: if (_focusedStack <= 7)  	nDes = _focusedStack;  else  	nDes = _focusedStack + _focusedCard;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,GetFocus,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	foreach (Card c in _cardStack [i]) {  		if (c.Rank == rank && c.Suit == suit) {  			this._isFocused = true;  			this._focusedStack = i;  			this._focusedCard = _cardStack [i].IndexOf (c);  			return;  		}  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,GetFocus,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (_freecell [i] != null && _freecell [i].Rank == rank && _freecell [i].Suit == suit) {  		this._isFocused = true;  		this._focusedStack = 8;  		this._focusedCard = i;  		return;  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,GetFocus,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (_freecell [i] != null && _freecell [i].Rank == rank && _freecell [i].Suit == suit) {  		this._isFocused = true;  		this._focusedStack = 8;  		this._focusedCard = i;  		return;  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,GetFocus,The following statement contains a magic number: if (_freecell [i] != null && _freecell [i].Rank == rank && _freecell [i].Suit == suit) {  	this._isFocused = true;  	this._focusedStack = 8;  	this._focusedCard = i;  	return;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,GetFocus,The following statement contains a magic number: this._focusedStack = 8;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src <= 7) {  	//源和目的不能相同  	if (src == des)  		return false;  	if (des <= 7) {  		result = CanSSMove (src' des' n);  	}  	else if (des <= 11)  		result = CanSFMove (src' des' n);  	else if (des <= 15)  		result = CanSHMove (src' des' n);  }  else if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src <= 7) {  	//源和目的不能相同  	if (src == des)  		return false;  	if (des <= 7) {  		result = CanSSMove (src' des' n);  	}  	else if (des <= 11)  		result = CanSFMove (src' des' n);  	else if (des <= 15)  		result = CanSHMove (src' des' n);  }  else if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src <= 7) {  	//源和目的不能相同  	if (src == des)  		return false;  	if (des <= 7) {  		result = CanSSMove (src' des' n);  	}  	else if (des <= 11)  		result = CanSFMove (src' des' n);  	else if (des <= 15)  		result = CanSHMove (src' des' n);  }  else if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src <= 7) {  	//源和目的不能相同  	if (src == des)  		return false;  	if (des <= 7) {  		result = CanSSMove (src' des' n);  	}  	else if (des <= 11)  		result = CanSFMove (src' des' n);  	else if (des <= 15)  		result = CanSHMove (src' des' n);  }  else if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src <= 7) {  	//源和目的不能相同  	if (src == des)  		return false;  	if (des <= 7) {  		result = CanSSMove (src' des' n);  	}  	else if (des <= 11)  		result = CanSFMove (src' des' n);  	else if (des <= 15)  		result = CanSHMove (src' des' n);  }  else if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src <= 7) {  	//源和目的不能相同  	if (src == des)  		return false;  	if (des <= 7) {  		result = CanSSMove (src' des' n);  	}  	else if (des <= 11)  		result = CanSFMove (src' des' n);  	else if (des <= 15)  		result = CanSHMove (src' des' n);  }  else if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src <= 7) {  	//源和目的不能相同  	if (src == des)  		return false;  	if (des <= 7) {  		result = CanSSMove (src' des' n);  	}  	else if (des <= 11)  		result = CanSFMove (src' des' n);  	else if (des <= 15)  		result = CanSHMove (src' des' n);  }  else if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src <= 7) {  	//源和目的不能相同  	if (src == des)  		return false;  	if (des <= 7) {  		result = CanSSMove (src' des' n);  	}  	else if (des <= 11)  		result = CanSFMove (src' des' n);  	else if (des <= 15)  		result = CanSHMove (src' des' n);  }  else if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 7) {  	result = CanSSMove (src' des' n);  }  else if (des <= 11)  	result = CanSFMove (src' des' n);  else if (des <= 15)  	result = CanSHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 7) {  	result = CanSSMove (src' des' n);  }  else if (des <= 11)  	result = CanSFMove (src' des' n);  else if (des <= 15)  	result = CanSHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 7) {  	result = CanSSMove (src' des' n);  }  else if (des <= 11)  	result = CanSFMove (src' des' n);  else if (des <= 15)  	result = CanSHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 11)  	result = CanSFMove (src' des' n);  else if (des <= 15)  	result = CanSHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 11)  	result = CanSFMove (src' des' n);  else if (des <= 15)  	result = CanSHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 15)  	result = CanSHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	//源和目的不能相同  	if (src + n == des)  		return false;  	if (des <= 7)  		result = CanFSMove (src' des' n);  	else if (des <= 11)  		result = CanFFMove (src' des' n);  	else if (des <= 15)  		result = CanFHMove (src' des' n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 7)  	result = CanFSMove (src' des' n);  else if (des <= 11)  	result = CanFFMove (src' des' n);  else if (des <= 15)  	result = CanFHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 7)  	result = CanFSMove (src' des' n);  else if (des <= 11)  	result = CanFFMove (src' des' n);  else if (des <= 15)  	result = CanFHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 7)  	result = CanFSMove (src' des' n);  else if (des <= 11)  	result = CanFFMove (src' des' n);  else if (des <= 15)  	result = CanFHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 11)  	result = CanFFMove (src' des' n);  else if (des <= 15)  	result = CanFHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 11)  	result = CanFFMove (src' des' n);  else if (des <= 15)  	result = CanFHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanMove,The following statement contains a magic number: if (des <= 15)  	result = CanFHMove (src' des' n);  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanSFMove,The following statement contains a magic number: if (n + 1 == _cardStack [iSrc].Count && _freecell [iDest - 8] == null)  	return true;  else  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanSHMove,The following statement contains a magic number: if (_cardStack [iSrc] [n].Suit != iDest - 11)  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanSHMove,The following statement contains a magic number: if (_homecell [iDest - 12] == null && _cardStack [iSrc] [n].Rank != 1)  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanSHMove,The following statement contains a magic number: if (_homecell [iDest - 12] != null && _cardStack [iSrc] [n].Rank - _homecell [iDest - 12].Rank != 1)  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanSHMove,The following statement contains a magic number: if (_homecell [iDest - 12] != null && _cardStack [iSrc] [n].Rank - _homecell [iDest - 12].Rank != 1)  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanFFMove,The following statement contains a magic number: if (_freecell [iDest - 8] == null)  	return true;  else  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanFHMove,The following statement contains a magic number: if (_freecell [n].Suit != iDest - 11)  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanFHMove,The following statement contains a magic number: if (_homecell [iDest - 12] == null && _freecell [n].Rank != 1)  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanFHMove,The following statement contains a magic number: if (_homecell [iDest - 12] != null && _freecell [n].Rank - _homecell [iDest - 12].Rank != 1)  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,CanFHMove,The following statement contains a magic number: if (_homecell [iDest - 12] != null && _freecell [n].Rank - _homecell [iDest - 12].Rank != 1)  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src <= 7) {  	if (des <= 7) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des <= 11) {  		//SFMove  		_freecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	else if (des <= 15) {  		//SHMove  		_homecell [des - 12] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  }  else if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//SSMove  	int moveCount = _cardStack [src].Count - n;  	_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  	_cardStack [src].RemoveRange (n' moveCount);  }  else if (des <= 11) {  	//SFMove  	_freecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  else if (des <= 15) {  	//SHMove  	_homecell [des - 12] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//SSMove  	int moveCount = _cardStack [src].Count - n;  	_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  	_cardStack [src].RemoveRange (n' moveCount);  }  else if (des <= 11) {  	//SFMove  	_freecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  else if (des <= 15) {  	//SHMove  	_homecell [des - 12] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//SSMove  	int moveCount = _cardStack [src].Count - n;  	_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  	_cardStack [src].RemoveRange (n' moveCount);  }  else if (des <= 11) {  	//SFMove  	_freecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  else if (des <= 15) {  	//SHMove  	_homecell [des - 12] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//SSMove  	int moveCount = _cardStack [src].Count - n;  	_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  	_cardStack [src].RemoveRange (n' moveCount);  }  else if (des <= 11) {  	//SFMove  	_freecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  else if (des <= 15) {  	//SHMove  	_homecell [des - 12] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//SSMove  	int moveCount = _cardStack [src].Count - n;  	_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  	_cardStack [src].RemoveRange (n' moveCount);  }  else if (des <= 11) {  	//SFMove  	_freecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  else if (des <= 15) {  	//SHMove  	_homecell [des - 12] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//SFMove  	_freecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  else if (des <= 15) {  	//SHMove  	_homecell [des - 12] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//SFMove  	_freecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  else if (des <= 15) {  	//SHMove  	_homecell [des - 12] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//SFMove  	_freecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  else if (des <= 15) {  	//SHMove  	_homecell [des - 12] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//SFMove  	_freecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  else if (des <= 15) {  	//SHMove  	_homecell [des - 12] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: _freecell [des - 8] = _cardStack [src] [n];  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 15) {  	//SHMove  	_homecell [des - 12] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 15) {  	//SHMove  	_homecell [des - 12] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: _homecell [des - 12] = _cardStack [src] [n];  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_freecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _freecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _freecell [n];  	}  	_freecell [n] = null;  }  else if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//FSMove  	_cardStack [des].Add (_freecell [n]);  }  else if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _freecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _freecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//FSMove  	_cardStack [des].Add (_freecell [n]);  }  else if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _freecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _freecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//FSMove  	_cardStack [des].Add (_freecell [n]);  }  else if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _freecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _freecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//FSMove  	_cardStack [des].Add (_freecell [n]);  }  else if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _freecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _freecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//FSMove  	_cardStack [des].Add (_freecell [n]);  }  else if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _freecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _freecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _freecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _freecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _freecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _freecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _freecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _freecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _freecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _freecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: _freecell [des - 8] = _freecell [n];  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _freecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _freecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: _homecell [des - 12] = _freecell [n];  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (src == 9) {  	//撤销时才会src ==9  	if (des <= 7) {  		//FSMove  		_cardStack [des].Add (_homecell [n]);  	}  	else if (des <= 11) {  		//FFMove  		_freecell [des - 8] = _homecell [n];  	}  	else if (des <= 15) {  		//FHMove  		_homecell [des - 12] = _homecell [n];  	}  	//homecell因为是重复覆盖型容器，因此需要判断是改变还是移除  	if (_homecell [n].Rank == 1)  		_homecell [n] = null;  	else {  		//homecell[n].Rank--;//不能直接改，因为会导致移出的卡发生改变  		_homecell [n] = new Card (_homecell [n].Suit' _homecell [n].Rank - 1);  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//FSMove  	_cardStack [des].Add (_homecell [n]);  }  else if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _homecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _homecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//FSMove  	_cardStack [des].Add (_homecell [n]);  }  else if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _homecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _homecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//FSMove  	_cardStack [des].Add (_homecell [n]);  }  else if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _homecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _homecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//FSMove  	_cardStack [des].Add (_homecell [n]);  }  else if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _homecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _homecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 7) {  	//FSMove  	_cardStack [des].Add (_homecell [n]);  }  else if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _homecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _homecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _homecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _homecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _homecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _homecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _homecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _homecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 11) {  	//FFMove  	_freecell [des - 8] = _homecell [n];  }  else if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _homecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: _freecell [des - 8] = _homecell [n];  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _homecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: if (des <= 15) {  	//FHMove  	_homecell [des - 12] = _homecell [n];  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,Move,The following statement contains a magic number: _homecell [des - 12] = _homecell [n];  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,IsHomeFull,The following statement contains a magic number: foreach (Card c in _homecell) {  	if (c == null || c.Rank != 13)  		return false;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,IsHomeFull,The following statement contains a magic number: if (c == null || c.Rank != 13)  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,IsAllOrdered,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	for (int i = 0; i < _cardStack [j].Count - 1; i++) {  		if (_cardStack [j] [i].Rank < _cardStack [j] [i + 1].Rank)  			return false;  	}  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,IsOrdered,The following statement contains a magic number: if (!((c1.Suit <= 2 && c2.Suit >= 3) || (c1.Suit >= 3 && c2.Suit <= 2)))  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,IsOrdered,The following statement contains a magic number: if (!((c1.Suit <= 2 && c2.Suit >= 3) || (c1.Suit >= 3 && c2.Suit <= 2)))  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,IsOrdered,The following statement contains a magic number: if (!((c1.Suit <= 2 && c2.Suit >= 3) || (c1.Suit >= 3 && c2.Suit <= 2)))  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,IsOrdered,The following statement contains a magic number: if (!((c1.Suit <= 2 && c2.Suit >= 3) || (c1.Suit >= 3 && c2.Suit <= 2)))  	return false;  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,FreeNum,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	if (_freecell [i] == null)  		fNum++;  }  
Magic Number,CardGames.FreecellGame,FreecellCore,C:\repos\yzzw006_CardGames\FreecellGame\FreecellCore.cs,FreeNum,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	if (_cardStack [i].Count == 0)  		sNum++;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,InitUI,The following statement contains a magic number: for (int i = 1; i <= 8; i++) {  	stackList [i - 1] = FindName ("CardStack" + i) as CardStack;  	stackList [i - 1].Index = i - 1;  	stackList [i - 1].GameBase = this;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,InitUI,The following statement contains a magic number: for (int i = 1; i <= 4; i++) {  	freecellList [i - 1] = FindName ("Freecell" + i) as Label;  	homecellList [i - 1] = FindName ("Homecell" + i) as Label;  	freecellList [i - 1].MouseLeftButtonDown += Element_MouseLeftButtonDown;  	homecellList [i - 1].MouseLeftButtonDown += Homecell_MouseLeftButtonDown;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,InitData,The following statement contains a magic number: if (index == -1) {  	Random num = new Random ();  	index = num.Next (1' 1000000);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,InitData,The following statement contains a magic number: index = num.Next (1' 1000000);  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: foreach (CardBorder cb in cbList) {  	if (gameCore.FocusedStack != 8) {  		cb.Margin = new Thickness (0' 25 * index' 0' 0);  		if (cb.Parent != null)  			(cb.Parent as Grid).Children.Remove (cb);  		DragPannel.Children.Add (cb);  		index++;  	}  	else {  		DragPannel.Children.Add (cb);  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: foreach (CardBorder cb in cbList) {  	if (gameCore.FocusedStack != 8) {  		cb.Margin = new Thickness (0' 25 * index' 0' 0);  		if (cb.Parent != null)  			(cb.Parent as Grid).Children.Remove (cb);  		DragPannel.Children.Add (cb);  		index++;  	}  	else {  		DragPannel.Children.Add (cb);  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack != 8) {  	cb.Margin = new Thickness (0' 25 * index' 0' 0);  	if (cb.Parent != null)  		(cb.Parent as Grid).Children.Remove (cb);  	DragPannel.Children.Add (cb);  	index++;  }  else {  	DragPannel.Children.Add (cb);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack != 8) {  	cb.Margin = new Thickness (0' 25 * index' 0' 0);  	if (cb.Parent != null)  		(cb.Parent as Grid).Children.Remove (cb);  	DragPannel.Children.Add (cb);  	index++;  }  else {  	DragPannel.Children.Add (cb);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: cb.Margin = new Thickness (0' 25 * index' 0' 0);  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 7) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 13 + 81 * gameCore.FocusedCard;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 7) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 13 + 81 * gameCore.FocusedCard;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 7) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 13 + 81 * gameCore.FocusedCard;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 7) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 13 + 81 * gameCore.FocusedCard;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 7) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 13 + 81 * gameCore.FocusedCard;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 7) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 13 + 81 * gameCore.FocusedCard;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 7) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 13 + 81 * gameCore.FocusedCard;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: top = 150 + 25 * gameCore.FocusedCard;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: top = 150 + 25 * gameCore.FocusedCard;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: top = 13;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: left = 13 + 81 * gameCore.FocusedCard;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,StartDrag,The following statement contains a magic number: left = 13 + 81 * gameCore.FocusedCard;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,Element_MouseLeftButtonUp,The following statement contains a magic number: if (isDragDropInEffect) {  	FrameworkElement ele = sender as FrameworkElement;  	isDragDropInEffect = false;  	ele.ReleaseMouseCapture ();  	int des = ParseDestination (e.GetPosition (null));  	int src = gameCore.FocusedStack;  	if (!gameCore.TryMove (des)) {  		DragPannel.Children.Clear ();  		if (src <= 7)  			stackList [src].RefreshPannel ();  		else {  			freecellList [gameCore.FocusedCard].Content = sCardBorderList [0];  			sCardBorderList [0].AddHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown)' true);  		}  	}  	else {  		DragPannel.Children.Clear ();  		UIMove (src' des' gameCore.FocusedCard' true);  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,Element_MouseLeftButtonUp,The following statement contains a magic number: if (!gameCore.TryMove (des)) {  	DragPannel.Children.Clear ();  	if (src <= 7)  		stackList [src].RefreshPannel ();  	else {  		freecellList [gameCore.FocusedCard].Content = sCardBorderList [0];  		sCardBorderList [0].AddHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown)' true);  	}  }  else {  	DragPannel.Children.Clear ();  	UIMove (src' des' gameCore.FocusedCard' true);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,Element_MouseLeftButtonUp,The following statement contains a magic number: if (src <= 7)  	stackList [src].RefreshPannel ();  else {  	freecellList [gameCore.FocusedCard].Content = sCardBorderList [0];  	sCardBorderList [0].AddHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown)' true);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (src <= 7) {  	stackList [src].AIRefresh (gameCore.Stack [src]);  }  else if (src == 8) {  	if (!isOnDrag) {  		if (freecellList [n].Content != null)  			(freecellList [n].Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown));  		freecellList [n].Content = null;  	}  }  else {  	if (gameCore.Homecell [n] == null) {  		if (homecellList [n].Content != null) {  			(homecellList [n].Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Homecell_MouseLeftButtonDown));  		}  		homecellList [n].Content = null;  	}  	else {  		//homecellList[n].Content = new CardBorder(gameCore.Homecell[n].Rank' gameCore.Homecell[n].Suit);  		(homecellList [n].Content as CardBorder).Redraw (gameCore.Homecell [n].Rank' gameCore.Homecell [n].Suit);  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (src <= 7) {  	stackList [src].AIRefresh (gameCore.Stack [src]);  }  else if (src == 8) {  	if (!isOnDrag) {  		if (freecellList [n].Content != null)  			(freecellList [n].Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown));  		freecellList [n].Content = null;  	}  }  else {  	if (gameCore.Homecell [n] == null) {  		if (homecellList [n].Content != null) {  			(homecellList [n].Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Homecell_MouseLeftButtonDown));  		}  		homecellList [n].Content = null;  	}  	else {  		//homecellList[n].Content = new CardBorder(gameCore.Homecell[n].Rank' gameCore.Homecell[n].Suit);  		(homecellList [n].Content as CardBorder).Redraw (gameCore.Homecell [n].Rank' gameCore.Homecell [n].Suit);  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (src == 8) {  	if (!isOnDrag) {  		if (freecellList [n].Content != null)  			(freecellList [n].Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown));  		freecellList [n].Content = null;  	}  }  else {  	if (gameCore.Homecell [n] == null) {  		if (homecellList [n].Content != null) {  			(homecellList [n].Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Homecell_MouseLeftButtonDown));  		}  		homecellList [n].Content = null;  	}  	else {  		//homecellList[n].Content = new CardBorder(gameCore.Homecell[n].Rank' gameCore.Homecell[n].Suit);  		(homecellList [n].Content as CardBorder).Redraw (gameCore.Homecell [n].Rank' gameCore.Homecell [n].Suit);  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 7) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 7) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 7) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 7) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 7) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 7) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 7) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 11) {  	freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  }  else if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: freecellList [des - 8].Content = CreateCardBorder (gameCore.Freecell [des - 8]);  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 15) {  	homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,UIMove,The following statement contains a magic number: homecellList [des - 12].Content = CreateCardBorder (gameCore.Homecell [des - 12]' 1);  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + 708) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Freecell 8-11  	x = (p.X - 12) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  		result = 8 + (int)(p.X - 12) / 81;  		if (result < 8 || result > 11)  			result = -1;  		//return result;  	}  	else {  		//判断是否是Homecell 12-15  		if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  			x = (314 - this.ActualWidth + p.X) % 81;  			if (x < 71 && p.Y > 12 && p.Y < 120) {  				result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  			}  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (result < 0 || result > 7)  	result = -1;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: x = (p.X - 12) % 81;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: x = (p.X - 12) % 81;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120 && p.X < 314) {  	result = 8 + (int)(p.X - 12) / 81;  	if (result < 8 || result > 11)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: result = 8 + (int)(p.X - 12) / 81;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: result = 8 + (int)(p.X - 12) / 81;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: result = 8 + (int)(p.X - 12) / 81;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (result < 8 || result > 11)  	result = -1;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (result < 8 || result > 11)  	result = -1;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: x = (314 - this.ActualWidth + p.X) % 81;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: x = (314 - this.ActualWidth + p.X) % 81;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,ParseDestination,The following statement contains a magic number: result = 12 + (int)(314 - this.ActualWidth + p.X) / 81;  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,EndGame,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	freecellList [i].Content = null;  	homecellList [i].Content = null;  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,NewGame,The following statement contains a magic number: if (index == -1) {  	Random num = new Random ();  	index = num.Next (1' 1000000);  }  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,NewGame,The following statement contains a magic number: index = num.Next (1' 1000000);  
Magic Number,CardGames.FreecellGame,Freecell,C:\repos\yzzw006_CardGames\FreecellGame\Freecell.xaml.cs,Card_RightMouseDown,The following statement contains a magic number: if (des <= 7 && des >= 0)  	stackList [des].CheckTop ();  
Magic Number,CardGames.FreecellGame,FreecellSelect,C:\repos\yzzw006_CardGames\FreecellGame\FreecellSelect.xaml.cs,Btn_Confirm_Click,The following statement contains a magic number: if (Text_Index.Text != "") {  	int index = Convert.ToInt32 (Text_Index.Text) > 1000000 ? 1000000 : Convert.ToInt32 (Text_Index.Text);  	_parent.NewGame (index);  	(this.Parent as Grid).Children.Remove (this);  }  
Magic Number,CardGames.FreecellGame,FreecellSelect,C:\repos\yzzw006_CardGames\FreecellGame\FreecellSelect.xaml.cs,Btn_Confirm_Click,The following statement contains a magic number: if (Text_Index.Text != "") {  	int index = Convert.ToInt32 (Text_Index.Text) > 1000000 ? 1000000 : Convert.ToInt32 (Text_Index.Text);  	_parent.NewGame (index);  	(this.Parent as Grid).Children.Remove (this);  }  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,Init,The following statement contains a magic number: foreach (CardStack cs in stackList) {  	cs.TopMargin = 20;  	cs.RefreshStack (gameCore.Stack [index]);  	cs.Index = index;  	cs.GameBase = this;  	index++;  }  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,Init,The following statement contains a magic number: cs.TopMargin = 20;  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,Init,The following statement contains a magic number: HomeList.TopMargin = 15;  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,Init,The following statement contains a magic number: HomeList.Index = 7;  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,Init,The following statement contains a magic number: DealList.TopMargin = 15;  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,Init,The following statement contains a magic number: DealList.Index = 8;  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack < _stackCount) {  	top = 50 + 20 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack < _stackCount) {  	top = 50 + 20 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack < _stackCount) {  	top = 50 + 20 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,StartDrag,The following statement contains a magic number: top = 50 + 20 * gameCore.FocusedCard;  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,StartDrag,The following statement contains a magic number: top = 50 + 20 * gameCore.FocusedCard;  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,StartDrag,The following statement contains a magic number: left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,ParseDestination,The following statement contains a magic number: if (x > 0 && x < 71 && p.Y > 50 && p.Y < 350) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > _stackCount)  		result = -1;  	//return result;  }  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,ParseDestination,The following statement contains a magic number: if (x > 0 && x < 71 && p.Y > 50 && p.Y < 350) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > _stackCount)  		result = -1;  	//return result;  }  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,ParseDestination,The following statement contains a magic number: if (x > 0 && x < 71 && p.Y > 50 && p.Y < 350) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > _stackCount)  		result = -1;  	//return result;  }  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,ParseDestination,The following statement contains a magic number: if (x > 0 && x < 71 && p.Y > 50 && p.Y < 350) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > _stackCount)  		result = -1;  	//return result;  }  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,ParseDestination,The following statement contains a magic number: result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  
Magic Number,CardGames.GolfGame,Golf,C:\repos\yzzw006_CardGames\GolfGame\Golf.xaml.cs,RefreshInfo,The following statement contains a magic number: CountLabel.Text = "Score : " + gameCore.HomeList.Count * 2;  
Magic Number,CardGames.GolfGame,GolfCore,C:\repos\yzzw006_CardGames\GolfGame\GolfCore.cs,GolfCore,The following statement contains a magic number: _cardList = Card_DealData.getDealCardList (rd.Next (0' 100000));  
Magic Number,CardGames.GolfGame,GolfCore,C:\repos\yzzw006_CardGames\GolfGame\GolfCore.cs,GolfCore,The following statement contains a magic number: for (int i = 0; i < _stackCount; i++) {  	_cardStack [i] = new List<Card> ();  	_cardStack [i].AddRange (_cardList.GetRange (0' 5));  	_cardList.RemoveRange (0' 5);  }  
Magic Number,CardGames.GolfGame,GolfCore,C:\repos\yzzw006_CardGames\GolfGame\GolfCore.cs,GolfCore,The following statement contains a magic number: for (int i = 0; i < _stackCount; i++) {  	_cardStack [i] = new List<Card> ();  	_cardStack [i].AddRange (_cardList.GetRange (0' 5));  	_cardList.RemoveRange (0' 5);  }  
Magic Number,CardGames.GolfGame,GolfCore,C:\repos\yzzw006_CardGames\GolfGame\GolfCore.cs,GolfCore,The following statement contains a magic number: _cardStack [i].AddRange (_cardList.GetRange (0' 5));  
Magic Number,CardGames.GolfGame,GolfCore,C:\repos\yzzw006_CardGames\GolfGame\GolfCore.cs,GolfCore,The following statement contains a magic number: _cardList.RemoveRange (0' 5);  
Magic Number,CardGames.GolfGame,GolfCore,C:\repos\yzzw006_CardGames\GolfGame\GolfCore.cs,CanMove,The following statement contains a magic number: if (src > 6 || des != 7)  	return false;  
Magic Number,CardGames.GolfGame,GolfCore,C:\repos\yzzw006_CardGames\GolfGame\GolfCore.cs,CanMove,The following statement contains a magic number: if (src > 6 || des != 7)  	return false;  
Magic Number,CardGames.GolfGame,GolfCore,C:\repos\yzzw006_CardGames\GolfGame\GolfCore.cs,GetFocus,The following statement contains a magic number: foreach (Card c in _homeList) {  	if (c.Rank == rank && c.Suit == suit) {  		this._isFocused = true;  		this._focusedStack = 7;  		this._focusedCard = _cardList.IndexOf (c);  		return;  	}  }  
Magic Number,CardGames.GolfGame,GolfCore,C:\repos\yzzw006_CardGames\GolfGame\GolfCore.cs,GetFocus,The following statement contains a magic number: if (c.Rank == rank && c.Suit == suit) {  	this._isFocused = true;  	this._focusedStack = 7;  	this._focusedCard = _cardList.IndexOf (c);  	return;  }  
Magic Number,CardGames.GolfGame,GolfCore,C:\repos\yzzw006_CardGames\GolfGame\GolfCore.cs,GetFocus,The following statement contains a magic number: this._focusedStack = 7;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,InitUI,The following statement contains a magic number: for (int i = 1; i <= 7; i++) {  	stackList [i - 1] = FindName ("CardStack" + i) as CardStack;  	stackList [i - 1].Index = i - 1;  	stackList [i - 1].GameBase = this;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,InitUI,The following statement contains a magic number: for (int i = 1; i <= 4; i++) {  	homecellList [i - 1] = FindName ("Homecell" + i) as Label;  	homecellList [i - 1].MouseLeftButtonDown += Homecell_MouseLeftButtonDown;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: foreach (CardBorder cb in cbList) {  	if (gameCore.FocusedStack != 7) {  		cb.Margin = new Thickness (0' 25 * index' 0' 0);  		if (cb.Parent != null)  			(cb.Parent as Grid).Children.Remove (cb);  		DragPannel.Children.Add (cb);  		index++;  	}  	else {  		DragPannel.Children.Add (cb);  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: foreach (CardBorder cb in cbList) {  	if (gameCore.FocusedStack != 7) {  		cb.Margin = new Thickness (0' 25 * index' 0' 0);  		if (cb.Parent != null)  			(cb.Parent as Grid).Children.Remove (cb);  		DragPannel.Children.Add (cb);  		index++;  	}  	else {  		DragPannel.Children.Add (cb);  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack != 7) {  	cb.Margin = new Thickness (0' 25 * index' 0' 0);  	if (cb.Parent != null)  		(cb.Parent as Grid).Children.Remove (cb);  	DragPannel.Children.Add (cb);  	index++;  }  else {  	DragPannel.Children.Add (cb);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack != 7) {  	cb.Margin = new Thickness (0' 25 * index' 0' 0);  	if (cb.Parent != null)  		(cb.Parent as Grid).Children.Remove (cb);  	DragPannel.Children.Add (cb);  	index++;  }  else {  	DragPannel.Children.Add (cb);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: cb.Margin = new Thickness (0' 25 * index' 0' 0);  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= _stackCount - 1) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 97;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= _stackCount - 1) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 97;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= _stackCount - 1) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 97;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= _stackCount - 1) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 97;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= _stackCount - 1) {  	top = 150 + 25 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 13;  	left = 97;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: top = 150 + 25 * gameCore.FocusedCard;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: top = 150 + 25 * gameCore.FocusedCard;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: top = 13;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,StartDrag,The following statement contains a magic number: left = 97;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (src <= 6) {  	stackList [src].AIRefresh (gameCore.Stack [src]);  	stackList [src].Flop ();  }  else if (src == 7) {  	if (!isOnDrag) {  		if (DealCell.Content != null)  			(DealCell.Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown));  		DealCell.Content = null;  	}  	Menu_Deal ();  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (src <= 6) {  	stackList [src].AIRefresh (gameCore.Stack [src]);  	stackList [src].Flop ();  }  else if (src == 7) {  	if (!isOnDrag) {  		if (DealCell.Content != null)  			(DealCell.Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown));  		DealCell.Content = null;  	}  	Menu_Deal ();  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (src == 7) {  	if (!isOnDrag) {  		if (DealCell.Content != null)  			(DealCell.Content as CardBorder).RemoveHandler (Button.MouseLeftButtonDownEvent' new MouseButtonEventHandler (Element_MouseLeftButtonDown));  		DealCell.Content = null;  	}  	Menu_Deal ();  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 6) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des == 7) {  	DealCell.Content = CreateCardBorder (gameCore.DealCard);  }  else if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 6) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des == 7) {  	DealCell.Content = CreateCardBorder (gameCore.DealCard);  }  else if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 6) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des == 7) {  	DealCell.Content = CreateCardBorder (gameCore.DealCard);  }  else if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 6) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des == 7) {  	DealCell.Content = CreateCardBorder (gameCore.DealCard);  }  else if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 6) {  	stackList [des].AIRefresh (gameCore.Stack [des]);  }  else if (des == 7) {  	DealCell.Content = CreateCardBorder (gameCore.DealCard);  }  else if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des == 7) {  	DealCell.Content = CreateCardBorder (gameCore.DealCard);  }  else if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des == 7) {  	DealCell.Content = CreateCardBorder (gameCore.DealCard);  }  else if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des == 7) {  	DealCell.Content = CreateCardBorder (gameCore.DealCard);  }  else if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des == 7) {  	DealCell.Content = CreateCardBorder (gameCore.DealCard);  }  else if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: if (des >= 8) {  	homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,UIMove,The following statement contains a magic number: homecellList [des - 8].Content = CreateCardBorder (gameCore.Homecell [des - 8]' 1);  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 150 && p.Y < 550) {  	//p.X < (this.ActualWidth + _stackWidth) / 2 && x > 0 &&   	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	if (result < 0 || result > 7)  		result = -1;  	//return result;  }  else {  	//判断是否是Homecell 12-15  	if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  		x = (314 - this.ActualWidth + p.X) % 81;  		if (x < 71 && p.Y > 12 && p.Y < 120) {  			result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  		}  	}  	else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  		result = 7;  	}  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (result < 0 || result > 7)  	result = -1;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (this.ActualWidth - p.X > 0 && this.ActualWidth - p.X < 314) {  	x = (314 - this.ActualWidth + p.X) % 81;  	if (x < 71 && p.Y > 12 && p.Y < 120) {  		result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  	}  }  else if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: x = (314 - this.ActualWidth + p.X) % 81;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: x = (314 - this.ActualWidth + p.X) % 81;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71 && p.Y > 12 && p.Y < 120) {  	result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: result = 8 + (int)(314 - this.ActualWidth + p.X) / 81;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: if (x >= 97 && x < 168 && p.Y > 12 && p.Y < 120) {  	result = 7;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,ParseDestination,The following statement contains a magic number: result = 7;  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,EndGame,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	homecellList [i].Content = null;  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,Menu_Deal,The following statement contains a magic number: if (gameCore.DealCard != null) {  	if (DealCell.Content == null)  		DealCell.Content = CreateCardBorder (gameCore.DealCard);  	else  		(DealCell.Content as CardBorder).Redraw (gameCore.DealCard.Rank' gameCore.DealCard.Suit);  	DealLine.Margin = new Thickness (12' 12 + gameCore.DealPercent * 107' 0' 0);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,Menu_Deal,The following statement contains a magic number: if (gameCore.DealCard != null) {  	if (DealCell.Content == null)  		DealCell.Content = CreateCardBorder (gameCore.DealCard);  	else  		(DealCell.Content as CardBorder).Redraw (gameCore.DealCard.Rank' gameCore.DealCard.Suit);  	DealLine.Margin = new Thickness (12' 12 + gameCore.DealPercent * 107' 0' 0);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,Menu_Deal,The following statement contains a magic number: if (gameCore.DealCard != null) {  	if (DealCell.Content == null)  		DealCell.Content = CreateCardBorder (gameCore.DealCard);  	else  		(DealCell.Content as CardBorder).Redraw (gameCore.DealCard.Rank' gameCore.DealCard.Suit);  	DealLine.Margin = new Thickness (12' 12 + gameCore.DealPercent * 107' 0' 0);  }  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,Menu_Deal,The following statement contains a magic number: DealLine.Margin = new Thickness (12' 12 + gameCore.DealPercent * 107' 0' 0);  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,Menu_Deal,The following statement contains a magic number: DealLine.Margin = new Thickness (12' 12 + gameCore.DealPercent * 107' 0' 0);  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,Menu_Deal,The following statement contains a magic number: DealLine.Margin = new Thickness (12' 12 + gameCore.DealPercent * 107' 0' 0);  
Magic Number,CardGames.KlondikeGame,Klondike,C:\repos\yzzw006_CardGames\KlondikeGame\Klondike.xaml.cs,Card_RightMouseDown,The following statement contains a magic number: if (des <= 7 && des >= 0)  	stackList [des].CheckTop ();  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,KlondikeCore,The following statement contains a magic number: _cardList = Card_DealData.getDealCardList (rd.Next (0' 100000));  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,KlondikeCore,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	_cardStack [i] = new List<Card> ();  	_cardStack [i].AddRange (_cardList.GetRange (0' i + 1));  	//最后一张牌正过来  	_cardStack [i].Last ().IsContrary = false;  	_cardList.RemoveRange (0' i + 1);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,GetFocus,The following statement contains a magic number: for (int i = 0; i < 7; i++) {  	foreach (Card c in _cardStack [i]) {  		if (c.Rank == rank && c.Suit == suit) {  			this._isFocused = true;  			this._focusedStack = i;  			this._focusedCard = _cardStack [i].IndexOf (c);  			return;  		}  	}  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,GetFocus,The following statement contains a magic number: if (this.DealCard.Rank == rank && this.DealCard.Suit == suit) {  	this._isFocused = true;  	this._focusedStack = 7;  	this._focusedCard = 0;  	return;  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,GetFocus,The following statement contains a magic number: this._focusedStack = 7;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		result = CanSSMove (src' des' n);  	}  	else if (des >= 8)  		result = CanSHMove (src' des' n);  }  else if (src == 7) {  	if (des <= 6)  		result = CanDSMove (src' des' n);  	else if (des >= 8)  		result = CanDHMove (src' des' n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		result = CanSSMove (src' des' n);  	}  	else if (des >= 8)  		result = CanSHMove (src' des' n);  }  else if (src == 7) {  	if (des <= 6)  		result = CanDSMove (src' des' n);  	else if (des >= 8)  		result = CanDHMove (src' des' n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		result = CanSSMove (src' des' n);  	}  	else if (des >= 8)  		result = CanSHMove (src' des' n);  }  else if (src == 7) {  	if (des <= 6)  		result = CanDSMove (src' des' n);  	else if (des >= 8)  		result = CanDHMove (src' des' n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		result = CanSSMove (src' des' n);  	}  	else if (des >= 8)  		result = CanSHMove (src' des' n);  }  else if (src == 7) {  	if (des <= 6)  		result = CanDSMove (src' des' n);  	else if (des >= 8)  		result = CanDHMove (src' des' n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		result = CanSSMove (src' des' n);  	}  	else if (des >= 8)  		result = CanSHMove (src' des' n);  }  else if (src == 7) {  	if (des <= 6)  		result = CanDSMove (src' des' n);  	else if (des >= 8)  		result = CanDHMove (src' des' n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		result = CanSSMove (src' des' n);  	}  	else if (des >= 8)  		result = CanSHMove (src' des' n);  }  else if (src == 7) {  	if (des <= 6)  		result = CanDSMove (src' des' n);  	else if (des >= 8)  		result = CanDHMove (src' des' n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (des <= 6) {  	result = CanSSMove (src' des' n);  }  else if (des >= 8)  	result = CanSHMove (src' des' n);  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (des <= 6) {  	result = CanSSMove (src' des' n);  }  else if (des >= 8)  	result = CanSHMove (src' des' n);  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (des >= 8)  	result = CanSHMove (src' des' n);  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (src == 7) {  	if (des <= 6)  		result = CanDSMove (src' des' n);  	else if (des >= 8)  		result = CanDHMove (src' des' n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (src == 7) {  	if (des <= 6)  		result = CanDSMove (src' des' n);  	else if (des >= 8)  		result = CanDHMove (src' des' n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (src == 7) {  	if (des <= 6)  		result = CanDSMove (src' des' n);  	else if (des >= 8)  		result = CanDHMove (src' des' n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (des <= 6)  	result = CanDSMove (src' des' n);  else if (des >= 8)  	result = CanDHMove (src' des' n);  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (des <= 6)  	result = CanDSMove (src' des' n);  else if (des >= 8)  	result = CanDHMove (src' des' n);  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanMove,The following statement contains a magic number: if (des >= 8)  	result = CanDHMove (src' des' n);  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanSSMove,The following statement contains a magic number: if (_cardStack [des].Count == 0) {  	if (_cardStack [src] [n].Rank == 13)  		return true;  	else  		return false;  }  else {  	if (IsOrdered (_cardStack [des].Last ()' _cardStack [src] [n]))  		return true;  	else  		return false;  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanSSMove,The following statement contains a magic number: if (_cardStack [src] [n].Rank == 13)  	return true;  else  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanSHMove,The following statement contains a magic number: if (_cardStack [iSrc] [n].Suit != iDest - 7)  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanSHMove,The following statement contains a magic number: if (_homecell [iDest - 8] == null && _cardStack [iSrc] [n].Rank != 1)  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanSHMove,The following statement contains a magic number: if (_homecell [iDest - 8] != null && _cardStack [iSrc] [n].Rank - _homecell [iDest - 8].Rank != 1)  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanSHMove,The following statement contains a magic number: if (_homecell [iDest - 8] != null && _cardStack [iSrc] [n].Rank - _homecell [iDest - 8].Rank != 1)  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanDSMove,The following statement contains a magic number: if (_cardStack [iDest].Count == 0) {  	if (DealCard.Rank == 13)  		return true;  	else  		return false;  }  else {  	if (IsOrdered (_cardStack [iDest].Last ()' this.DealCard))  		return true;  	else  		return false;  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanDSMove,The following statement contains a magic number: if (DealCard.Rank == 13)  	return true;  else  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanDHMove,The following statement contains a magic number: if (DealCard.Suit != des - 7)  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanDHMove,The following statement contains a magic number: if (_homecell [des - 8] == null && DealCard.Rank != 1)  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanDHMove,The following statement contains a magic number: if (_homecell [des - 8] != null && DealCard.Rank - _homecell [des - 8].Rank != 1)  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,CanDHMove,The following statement contains a magic number: if (_homecell [des - 8] != null && DealCard.Rank - _homecell [des - 8].Rank != 1)  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des >= 8) {  		//SHMove  		_homecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	if (_cardStack [src].Count > 0 && _cardStack [src].Last ().IsContrary)  		_cardStack [src].Last ().IsContrary = false;  }  else if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des >= 8) {  		//SHMove  		_homecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	if (_cardStack [src].Count > 0 && _cardStack [src].Last ().IsContrary)  		_cardStack [src].Last ().IsContrary = false;  }  else if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des >= 8) {  		//SHMove  		_homecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	if (_cardStack [src].Count > 0 && _cardStack [src].Last ().IsContrary)  		_cardStack [src].Last ().IsContrary = false;  }  else if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des >= 8) {  		//SHMove  		_homecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	if (_cardStack [src].Count > 0 && _cardStack [src].Last ().IsContrary)  		_cardStack [src].Last ().IsContrary = false;  }  else if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des >= 8) {  		//SHMove  		_homecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	if (_cardStack [src].Count > 0 && _cardStack [src].Last ().IsContrary)  		_cardStack [src].Last ().IsContrary = false;  }  else if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des >= 8) {  		//SHMove  		_homecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	if (_cardStack [src].Count > 0 && _cardStack [src].Last ().IsContrary)  		_cardStack [src].Last ().IsContrary = false;  }  else if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des >= 8) {  		//SHMove  		_homecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	if (_cardStack [src].Count > 0 && _cardStack [src].Last ().IsContrary)  		_cardStack [src].Last ().IsContrary = false;  }  else if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src <= 6) {  	if (des <= 6) {  		//SSMove  		int moveCount = _cardStack [src].Count - n;  		_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  		_cardStack [src].RemoveRange (n' moveCount);  	}  	else if (des >= 8) {  		//SHMove  		_homecell [des - 8] = _cardStack [src] [n];  		_cardStack [src].RemoveAt (n);  	}  	if (_cardStack [src].Count > 0 && _cardStack [src].Last ().IsContrary)  		_cardStack [src].Last ().IsContrary = false;  }  else if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (des <= 6) {  	//SSMove  	int moveCount = _cardStack [src].Count - n;  	_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  	_cardStack [src].RemoveRange (n' moveCount);  }  else if (des >= 8) {  	//SHMove  	_homecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (des <= 6) {  	//SSMove  	int moveCount = _cardStack [src].Count - n;  	_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  	_cardStack [src].RemoveRange (n' moveCount);  }  else if (des >= 8) {  	//SHMove  	_homecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (des <= 6) {  	//SSMove  	int moveCount = _cardStack [src].Count - n;  	_cardStack [des].AddRange (_cardStack [src].GetRange (n' moveCount));  	_cardStack [src].RemoveRange (n' moveCount);  }  else if (des >= 8) {  	//SHMove  	_homecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (des >= 8) {  	//SHMove  	_homecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (des >= 8) {  	//SHMove  	_homecell [des - 8] = _cardStack [src] [n];  	_cardStack [src].RemoveAt (n);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: _homecell [des - 8] = _cardStack [src] [n];  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (src == 7) {  	if (des <= 6) {  		//DSMove  		_cardStack [des].Add (DealCard);  	}  	else if (des >= 8) {  		//FHMove  		_homecell [des - 8] = DealCard;  	}  	_cardList.RemoveAt (_dealIndex);  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (des <= 6) {  	//DSMove  	_cardStack [des].Add (DealCard);  }  else if (des >= 8) {  	//FHMove  	_homecell [des - 8] = DealCard;  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (des <= 6) {  	//DSMove  	_cardStack [des].Add (DealCard);  }  else if (des >= 8) {  	//FHMove  	_homecell [des - 8] = DealCard;  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (des <= 6) {  	//DSMove  	_cardStack [des].Add (DealCard);  }  else if (des >= 8) {  	//FHMove  	_homecell [des - 8] = DealCard;  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (des >= 8) {  	//FHMove  	_homecell [des - 8] = DealCard;  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: if (des >= 8) {  	//FHMove  	_homecell [des - 8] = DealCard;  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,Move,The following statement contains a magic number: _homecell [des - 8] = DealCard;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,IsHomeFull,The following statement contains a magic number: foreach (Card c in _homecell) {  	if (c == null || c.Rank != 13)  		return false;  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,IsHomeFull,The following statement contains a magic number: if (c == null || c.Rank != 13)  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,IsAllOrdered,The following statement contains a magic number: for (int j = 0; j < 8; j++) {  	for (int i = 0; i < _cardStack [j].Count - 1; i++) {  		if (_cardStack [j] [i].Rank < _cardStack [j] [i + 1].Rank)  			return false;  	}  }  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,IsOrdered,The following statement contains a magic number: if (!((c1.Suit <= 2 && c2.Suit >= 3) || (c1.Suit >= 3 && c2.Suit <= 2)))  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,IsOrdered,The following statement contains a magic number: if (!((c1.Suit <= 2 && c2.Suit >= 3) || (c1.Suit >= 3 && c2.Suit <= 2)))  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,IsOrdered,The following statement contains a magic number: if (!((c1.Suit <= 2 && c2.Suit >= 3) || (c1.Suit >= 3 && c2.Suit <= 2)))  	return false;  
Magic Number,CardGames.KlondikeGame,KlondikeCore,C:\repos\yzzw006_CardGames\KlondikeGame\KlondikeCore.cs,IsOrdered,The following statement contains a magic number: if (!((c1.Suit <= 2 && c2.Suit >= 3) || (c1.Suit >= 3 && c2.Suit <= 2)))  	return false;  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,Init,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	stackList [i - 1] = FindName ("cardStack" + i) as CardStack;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 50 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 50 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 50 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 50 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 50 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 50 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + _stackTopMargin * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,StartDrag,The following statement contains a magic number: top = 50 + _stackTopMargin * gameCore.FocusedCard;  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,StartDrag,The following statement contains a magic number: left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,StartDrag,The following statement contains a magic number: top = 270 + _stackTopMargin * gameCore.FocusedCard;  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,StartDrag,The following statement contains a magic number: left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,StartDrag,The following statement contains a magic number: left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 50 && p.Y < 259) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 479) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 50 && p.Y < 259) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 479) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 50 && p.Y < 259) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 479) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 50 && p.Y < 259) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 479) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 50 && p.Y < 259) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 479) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 50 && p.Y < 259) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 479) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 50 && p.Y < 259) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 479) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 50 && p.Y < 259) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 479) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 50 && p.Y < 259) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 479) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 50 && p.Y < 259) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 479) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 50 && p.Y < 259) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 479) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 50 && p.Y < 259) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 479) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 50 && p.Y < 259) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 479) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 50 && p.Y < 259) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 479) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 50 && p.Y < 259) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 479) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 270 && p.Y < 479) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 270 && p.Y < 479) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 270 && p.Y < 479) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 270 && p.Y < 479) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,ParseDestination,The following statement contains a magic number: result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,Menu_Restart,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	stackList [i].RefreshStack (gameCore.Stack [i]);  }  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,RefreshInfo,The following statement contains a magic number: CountLabel.Text = "Score : " + gameCore.RemovedCards * 2;  
Magic Number,CardGames.NestorGame,Nestor,C:\repos\yzzw006_CardGames\NestorGame\Nestor.xaml.cs,Card_RightMouseDown,The following statement contains a magic number: if (des <= 11 && des >= 0)  	stackList [des].CheckTop ();  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: _cardList = Card_DealData.getDealCardList (rd.Next (0' 100000));  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: for (int i = 0; i < 12; i++)  	_cardStack [i] = new List<Card> ();  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	if (i < 8)  		_cardStack [i].AddRange (_cardList.GetRange (i * 6' 6));  	else  		_cardStack [i].Add (_cardList [40 + i]);  }  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	if (i < 8)  		_cardStack [i].AddRange (_cardList.GetRange (i * 6' 6));  	else  		_cardStack [i].Add (_cardList [40 + i]);  }  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	if (i < 8)  		_cardStack [i].AddRange (_cardList.GetRange (i * 6' 6));  	else  		_cardStack [i].Add (_cardList [40 + i]);  }  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	if (i < 8)  		_cardStack [i].AddRange (_cardList.GetRange (i * 6' 6));  	else  		_cardStack [i].Add (_cardList [40 + i]);  }  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	if (i < 8)  		_cardStack [i].AddRange (_cardList.GetRange (i * 6' 6));  	else  		_cardStack [i].Add (_cardList [40 + i]);  }  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: if (i < 8)  	_cardStack [i].AddRange (_cardList.GetRange (i * 6' 6));  else  	_cardStack [i].Add (_cardList [40 + i]);  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: if (i < 8)  	_cardStack [i].AddRange (_cardList.GetRange (i * 6' 6));  else  	_cardStack [i].Add (_cardList [40 + i]);  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: if (i < 8)  	_cardStack [i].AddRange (_cardList.GetRange (i * 6' 6));  else  	_cardStack [i].Add (_cardList [40 + i]);  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: if (i < 8)  	_cardStack [i].AddRange (_cardList.GetRange (i * 6' 6));  else  	_cardStack [i].Add (_cardList [40 + i]);  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: _cardStack [i].AddRange (_cardList.GetRange (i * 6' 6));  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: _cardStack [i].AddRange (_cardList.GetRange (i * 6' 6));  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,NestorCore,The following statement contains a magic number: _cardStack [i].Add (_cardList [40 + i]);  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,Move,The following statement contains a magic number: _removedCards += 2;  
Magic Number,CardGames.NestorGame,NestorCore,C:\repos\yzzw006_CardGames\NestorGame\NestorCore.cs,GetFocus,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	foreach (Card c in _cardStack [i]) {  		if (c.Rank == rank && c.Suit == suit) {  			this._isFocused = true;  			this._focusedStack = i;  			this._focusedCard = _cardStack [i].IndexOf (c);  			return;  		}  	}  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,ConvertSuit,The following statement contains a magic number: result.Fill = FindResource (colorArray [(suit - 1) / 2]) as LinearGradientBrush;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,ConvertRank,The following statement contains a magic number: if (index != 10)  	return "A23456789TJQK" [index - 1].ToString ();  else  	return "10";  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: if (_rank >= 1 && _rank <= 10) {  	CardBody.Height = 75;  	ScaleTransform st = new ScaleTransform (-1' -1);  	Point sp = new Point (0.5' 0.5);  	List<Path> pathList = new List<Path> ();  	double miniMargin = 13;  	for (int i = 0; i < _rank; i++) {  		Path p = ClonePath ();  		p.Width = miniMargin;  		p.RenderTransformOrigin = sp;  		pathList.Add (p);  		CardBody.Children.Add (p);  	}  	switch (_rank) {  	case 1:  		ArrangeControl (pathList [0]);  		break;  	case 2:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 3);  		pathList [1].RenderTransform = st;  		break;  	case 3:  		ArrangeControl (pathList [0]' 2' 1);  		ArrangeControl (pathList [1]' 2' 2);  		ArrangeControl (pathList [2]' 2' 3);  		pathList [2].RenderTransform = st;  		break;  	case 4:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 5:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 2' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 6:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 7:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		break;  	case 8:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 3);  		ArrangeControl (pathList [2]' 3' 1);  		ArrangeControl (pathList [3]' 3' 3);  		ArrangeControl (pathList [4]' 1' 2);  		ArrangeControl (pathList [5]' 3' 2);  		ArrangeControl (pathList [6]' 2' 1);  		ArrangeControl (pathList [7]' 2' 3);  		pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [1].RenderTransform = st;  		pathList [3].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 9:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		ArrangeControl (pathList [8]' 2' 2);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		break;  	case 10:  		ArrangeControl (pathList [0]' 1' 1);  		ArrangeControl (pathList [1]' 1' 1);  		ArrangeControl (pathList [2]' 1' 3);  		ArrangeControl (pathList [3]' 3' 1);  		ArrangeControl (pathList [4]' 3' 1);  		ArrangeControl (pathList [5]' 3' 3);  		ArrangeControl (pathList [6]' 1' 1);  		ArrangeControl (pathList [7]' 3' 1);  		pathList [1].Margin = new Thickness (0' 21' 0' 0);  		pathList [4].Margin = new Thickness (0' 21' 0' 0);  		pathList [6].Margin = new Thickness (0' 42' 0' 0);  		pathList [7].Margin = new Thickness (0' 42' 0' 0);  		ArrangeControl (pathList [8]' 2' 1);  		ArrangeControl (pathList [9]' 2' 3);  		pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  		pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  		pathList [2].RenderTransform = st;  		pathList [5].RenderTransform = st;  		pathList [6].RenderTransform = st;  		pathList [7].RenderTransform = st;  		pathList [9].RenderTransform = st;  		break;  	default:  		break;  	}  }  else {  	Image cBody = FindResource (_tag + _suit) as Image;  	cBody.VerticalAlignment = System.Windows.VerticalAlignment.Center;  	cBody.HorizontalAlignment = System.Windows.HorizontalAlignment.Center;  	cBody.Stretch = Stretch.Uniform;  	if (cBody.Parent != null) {  		(cBody.Parent as Grid).Children.Clear ();  	}  	CardBody.Children.Add (cBody);  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: CardBody.Height = 75;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: switch (_rank) {  case 1:  	ArrangeControl (pathList [0]);  	break;  case 2:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 3);  	pathList [1].RenderTransform = st;  	break;  case 3:  	ArrangeControl (pathList [0]' 2' 1);  	ArrangeControl (pathList [1]' 2' 2);  	ArrangeControl (pathList [2]' 2' 3);  	pathList [2].RenderTransform = st;  	break;  case 4:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 5:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 2' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 6:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 7:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	break;  case 8:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 3);  	ArrangeControl (pathList [2]' 3' 1);  	ArrangeControl (pathList [3]' 3' 3);  	ArrangeControl (pathList [4]' 1' 2);  	ArrangeControl (pathList [5]' 3' 2);  	ArrangeControl (pathList [6]' 2' 1);  	ArrangeControl (pathList [7]' 2' 3);  	pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [1].RenderTransform = st;  	pathList [3].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 9:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	ArrangeControl (pathList [8]' 2' 2);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	break;  case 10:  	ArrangeControl (pathList [0]' 1' 1);  	ArrangeControl (pathList [1]' 1' 1);  	ArrangeControl (pathList [2]' 1' 3);  	ArrangeControl (pathList [3]' 3' 1);  	ArrangeControl (pathList [4]' 3' 1);  	ArrangeControl (pathList [5]' 3' 3);  	ArrangeControl (pathList [6]' 1' 1);  	ArrangeControl (pathList [7]' 3' 1);  	pathList [1].Margin = new Thickness (0' 21' 0' 0);  	pathList [4].Margin = new Thickness (0' 21' 0' 0);  	pathList [6].Margin = new Thickness (0' 42' 0' 0);  	pathList [7].Margin = new Thickness (0' 42' 0' 0);  	ArrangeControl (pathList [8]' 2' 1);  	ArrangeControl (pathList [9]' 2' 3);  	pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  	pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  	pathList [2].RenderTransform = st;  	pathList [5].RenderTransform = st;  	pathList [6].RenderTransform = st;  	pathList [7].RenderTransform = st;  	pathList [9].RenderTransform = st;  	break;  default:  	break;  }  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [0]' 2' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [1]' 2' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [1]' 2' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [0]' 2' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [1]' 2' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [1]' 2' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 2' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 2' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 2' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [2].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [1]' 1' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [3].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [1]' 1' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 2' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 2' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 2' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [3].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [1]' 1' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 1' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 1' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [3].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [1]' 1' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 1' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 1' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [6]' 2' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [6]' 2' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [3].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [1]' 1' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 1' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 1' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [6]' 2' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [6]' 2' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [7]' 2' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [7]' 2' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [7]' 2' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [6].Margin = new Thickness (0' miniMargin' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [7].Margin = new Thickness (0' 0' 0' miniMargin);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [3].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [7].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 1' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 1' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [6]' 1' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [7]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [7]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [8]' 2' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [8]' 2' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [8]' 2' 2);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [1].Margin = new Thickness (0' 21' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [4].Margin = new Thickness (0' 21' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [4].Margin = new Thickness (0' 21' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [6].Margin = new Thickness (0' 42' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [6].Margin = new Thickness (0' 42' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [7].Margin = new Thickness (0' 42' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [7].Margin = new Thickness (0' 42' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [2].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [5].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [6].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [7].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 1' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [2]' 1' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [3]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [4]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [5]' 3' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [6]' 1' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [7]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [7]' 3' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [1].Margin = new Thickness (0' 21' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [4].Margin = new Thickness (0' 21' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [4].Margin = new Thickness (0' 21' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [6].Margin = new Thickness (0' 42' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [6].Margin = new Thickness (0' 42' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [7].Margin = new Thickness (0' 42' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [7].Margin = new Thickness (0' 42' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [8]' 2' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [8]' 2' 1);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [9]' 2' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [9]' 2' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: ArrangeControl (pathList [9]' 2' 3);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [8].Margin = new Thickness (0' miniMargin' 0' 0);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [9].Margin = new Thickness (0' 0' 0' miniMargin);  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [2].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [5].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [6].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [7].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,DrawBody,The following statement contains a magic number: pathList [9].RenderTransform = st;  
Magic Number,CardGames.UI,CardBorder,C:\repos\yzzw006_CardGames\Resource\Control\CardBorder.xaml.cs,Adapt,The following statement contains a magic number: this.Width = this.Height * 0.65;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Init,The following statement contains a magic number: for (int i = 1; i <= 4; i++) {  	stackList [i - 1] = FindName ("cardStack" + i) as CardStack;  	stackList [i - 1].TopMargin = 10;  	stackList [i - 1].Index = i - 1;  	stackList [i - 1].GameBase = this;  	homecellList [i - 1] = FindName ("Homecell" + i) as Label;  	homecellList [i - 1].MouseLeftButtonDown += Homecell_MouseLeftButtonDown;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Init,The following statement contains a magic number: for (int i = 1; i <= 4; i++) {  	stackList [i - 1] = FindName ("cardStack" + i) as CardStack;  	stackList [i - 1].TopMargin = 10;  	stackList [i - 1].Index = i - 1;  	stackList [i - 1].GameBase = this;  	homecellList [i - 1] = FindName ("Homecell" + i) as Label;  	homecellList [i - 1].MouseLeftButtonDown += Homecell_MouseLeftButtonDown;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Init,The following statement contains a magic number: stackList [i - 1].TopMargin = 10;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Init,The following statement contains a magic number: CardLibrary.Index = 8;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Init,The following statement contains a magic number: CardLibrary.TopMargin = 5;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 3) {  	top = 160 + 10 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 12 + 5 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 3) {  	top = 160 + 10 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 12 + 5 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 3) {  	top = 160 + 10 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 12 + 5 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 3) {  	top = 160 + 10 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 12 + 5 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 3) {  	top = 160 + 10 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 12 + 5 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 3) {  	top = 160 + 10 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 12 + 5 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 3) {  	top = 160 + 10 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 12 + 5 * gameCore.FocusedCard;  	left = 32;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: top = 160 + 10 * gameCore.FocusedCard;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: top = 160 + 10 * gameCore.FocusedCard;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: top = 12 + 5 * gameCore.FocusedCard;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: top = 12 + 5 * gameCore.FocusedCard;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,StartDrag,The following statement contains a magic number: left = 32;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Stack_MouseLeftButtonDown,The following statement contains a magic number: if (!gameCore.IsFocused || !gameCore.TryMove (sIndex)) {  	FindFocus ();  	if (gameCore.IsDragable) {  		StartDrag (cbList);  	}  	else {  		//如果不能拖动，则焦点下浮到最后一个  		if (sIndex <= 3)  			stackList [sIndex].FocusLastCard ();  		else  			CardLibrary.FocusLastCard ();  		FindFocus ();  	}  }  else {  	UIMove (gameCore.FocusedStack' sIndex);  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Stack_MouseLeftButtonDown,The following statement contains a magic number: if (gameCore.IsDragable) {  	StartDrag (cbList);  }  else {  	//如果不能拖动，则焦点下浮到最后一个  	if (sIndex <= 3)  		stackList [sIndex].FocusLastCard ();  	else  		CardLibrary.FocusLastCard ();  	FindFocus ();  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Stack_MouseLeftButtonDown,The following statement contains a magic number: if (sIndex <= 3)  	stackList [sIndex].FocusLastCard ();  else  	CardLibrary.FocusLastCard ();  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Element_MouseLeftButtonUp,The following statement contains a magic number: if (isDragDropInEffect) {  	FrameworkElement ele = sender as FrameworkElement;  	isDragDropInEffect = false;  	ele.ReleaseMouseCapture ();  	int des = ParseDestination (e.GetPosition (null));  	int src = gameCore.FocusedStack;  	if (!gameCore.TryMove (des)) {  		DragPannel.Children.Clear ();  		if (src <= 3)  			stackList [src].RefreshPannel ();  		else  			CardLibrary.RefreshPannel ();  	}  	else {  		DragPannel.Children.Clear ();  		UIMove (src' des);  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Element_MouseLeftButtonUp,The following statement contains a magic number: if (!gameCore.TryMove (des)) {  	DragPannel.Children.Clear ();  	if (src <= 3)  		stackList [src].RefreshPannel ();  	else  		CardLibrary.RefreshPannel ();  }  else {  	DragPannel.Children.Clear ();  	UIMove (src' des);  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Element_MouseLeftButtonUp,The following statement contains a magic number: if (src <= 3)  	stackList [src].RefreshPannel ();  else  	CardLibrary.RefreshPannel ();  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,UIMove,The following statement contains a magic number: if (src == 8)  	CardLibrary.AIRefresh (gameCore.CardLibrary);  else  	stackList [src].AIRefresh (gameCore.Stack [src]);  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 3)  	stackList [des].AIRefresh (gameCore.Stack [des]);  else  	homecellList [des - 4].Content = CreateCardBorder (gameCore.Homecell [des - 4]);  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 3)  	stackList [des].AIRefresh (gameCore.Stack [des]);  else  	homecellList [des - 4].Content = CreateCardBorder (gameCore.Homecell [des - 4]);  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,UIMove,The following statement contains a magic number: if (des <= 3)  	stackList [des].AIRefresh (gameCore.Stack [des]);  else  	homecellList [des - 4].Content = CreateCardBorder (gameCore.Homecell [des - 4]);  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,UIMove,The following statement contains a magic number: homecellList [des - 4].Content = CreateCardBorder (gameCore.Homecell [des - 4]);  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,UIMove,The following statement contains a magic number: homecellList [des - 4].Content = CreateCardBorder (gameCore.Homecell [des - 4]);  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y <= 120 && p.Y >= 12 && p.X >= (this.ActualWidth - 314) / 2) {  	double x = (p.X - (this.ActualWidth - 314) / 2) % 81;  	if (x <= 71) {  		result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (x <= 71) {  	result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (x <= 71) {  	result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (x <= 71) {  	result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (x <= 71) {  	result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (x <= 71) {  	result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: result = 4 + (int)(p.X - (this.ActualWidth - 314) / 2) / 81;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y >= 160 && p.Y <= 560 && p.X >= (this.ActualWidth - _stackWidth) / 2) {  	double x = (p.X - (this.ActualWidth - _stackWidth) / 2) % _cellWidth;  	if (x <= 71) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y >= 160 && p.Y <= 560 && p.X >= (this.ActualWidth - _stackWidth) / 2) {  	double x = (p.X - (this.ActualWidth - _stackWidth) / 2) % _cellWidth;  	if (x <= 71) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y >= 160 && p.Y <= 560 && p.X >= (this.ActualWidth - _stackWidth) / 2) {  	double x = (p.X - (this.ActualWidth - _stackWidth) / 2) % _cellWidth;  	if (x <= 71) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y >= 160 && p.Y <= 560 && p.X >= (this.ActualWidth - _stackWidth) / 2) {  	double x = (p.X - (this.ActualWidth - _stackWidth) / 2) % _cellWidth;  	if (x <= 71) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y >= 160 && p.Y <= 560 && p.X >= (this.ActualWidth - _stackWidth) / 2) {  	double x = (p.X - (this.ActualWidth - _stackWidth) / 2) % _cellWidth;  	if (x <= 71) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y >= 160 && p.Y <= 560 && p.X >= (this.ActualWidth - _stackWidth) / 2) {  	double x = (p.X - (this.ActualWidth - _stackWidth) / 2) % _cellWidth;  	if (x <= 71) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (x <= 71) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: if (x <= 71) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,ParseDestination,The following statement contains a magic number: result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  
Magic Number,CardGames.ShiftingGame,Shifting,C:\repos\yzzw006_CardGames\ShiftingGame\Shifting.xaml.cs,Card_RightMouseDown,The following statement contains a magic number: if (des <= 11 && des >= 0)  	stackList [des].CheckTop ();  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,ShiftingCore,The following statement contains a magic number: _cardList = Card_DealData.getDealCardList (rd.Next (0' 100000));  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,ShiftingCore,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	_cardStack [i] = new List<Card> ();  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if ((src >= 4 && src <= 7) || des == 8)  	return false;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if ((src >= 4 && src <= 7) || des == 8)  	return false;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if ((src >= 4 && src <= 7) || des == 8)  	return false;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	if (des <= 3)  		return true;  	else {  		if (des >= 4) {  			//check rank  			if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  				return true;  			if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  				return true;  		}  	}  }  else {  	//src == [0'3]  	if (des <= 3) {  		if (_cardStack [des].Count == 0) {  			//only a K or Library card can be put into empty stack.                     			if (_cardStack [src].Last ().Rank == 13)  				return true;  		}  		else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  			return true;  	}  	else {  		//check rank  		if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	if (des <= 3)  		return true;  	else {  		if (des >= 4) {  			//check rank  			if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  				return true;  			if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  				return true;  		}  	}  }  else {  	//src == [0'3]  	if (des <= 3) {  		if (_cardStack [des].Count == 0) {  			//only a K or Library card can be put into empty stack.                     			if (_cardStack [src].Last ().Rank == 13)  				return true;  		}  		else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  			return true;  	}  	else {  		//check rank  		if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	if (des <= 3)  		return true;  	else {  		if (des >= 4) {  			//check rank  			if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  				return true;  			if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  				return true;  		}  	}  }  else {  	//src == [0'3]  	if (des <= 3) {  		if (_cardStack [des].Count == 0) {  			//only a K or Library card can be put into empty stack.                     			if (_cardStack [src].Last ().Rank == 13)  				return true;  		}  		else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  			return true;  	}  	else {  		//check rank  		if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	if (des <= 3)  		return true;  	else {  		if (des >= 4) {  			//check rank  			if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  				return true;  			if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  				return true;  		}  	}  }  else {  	//src == [0'3]  	if (des <= 3) {  		if (_cardStack [des].Count == 0) {  			//only a K or Library card can be put into empty stack.                     			if (_cardStack [src].Last ().Rank == 13)  				return true;  		}  		else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  			return true;  	}  	else {  		//check rank  		if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	if (des <= 3)  		return true;  	else {  		if (des >= 4) {  			//check rank  			if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  				return true;  			if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  				return true;  		}  	}  }  else {  	//src == [0'3]  	if (des <= 3) {  		if (_cardStack [des].Count == 0) {  			//only a K or Library card can be put into empty stack.                     			if (_cardStack [src].Last ().Rank == 13)  				return true;  		}  		else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  			return true;  	}  	else {  		//check rank  		if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	if (des <= 3)  		return true;  	else {  		if (des >= 4) {  			//check rank  			if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  				return true;  			if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  				return true;  		}  	}  }  else {  	//src == [0'3]  	if (des <= 3) {  		if (_cardStack [des].Count == 0) {  			//only a K or Library card can be put into empty stack.                     			if (_cardStack [src].Last ().Rank == 13)  				return true;  		}  		else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  			return true;  	}  	else {  		//check rank  		if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	if (des <= 3)  		return true;  	else {  		if (des >= 4) {  			//check rank  			if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  				return true;  			if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  				return true;  		}  	}  }  else {  	//src == [0'3]  	if (des <= 3) {  		if (_cardStack [des].Count == 0) {  			//only a K or Library card can be put into empty stack.                     			if (_cardStack [src].Last ().Rank == 13)  				return true;  		}  		else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  			return true;  	}  	else {  		//check rank  		if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	if (des <= 3)  		return true;  	else {  		if (des >= 4) {  			//check rank  			if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  				return true;  			if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  				return true;  		}  	}  }  else {  	//src == [0'3]  	if (des <= 3) {  		if (_cardStack [des].Count == 0) {  			//only a K or Library card can be put into empty stack.                     			if (_cardStack [src].Last ().Rank == 13)  				return true;  		}  		else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  			return true;  	}  	else {  		//check rank  		if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	if (des <= 3)  		return true;  	else {  		if (des >= 4) {  			//check rank  			if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  				return true;  			if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  				return true;  		}  	}  }  else {  	//src == [0'3]  	if (des <= 3) {  		if (_cardStack [des].Count == 0) {  			//only a K or Library card can be put into empty stack.                     			if (_cardStack [src].Last ().Rank == 13)  				return true;  		}  		else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  			return true;  	}  	else {  		//check rank  		if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	if (des <= 3)  		return true;  	else {  		if (des >= 4) {  			//check rank  			if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  				return true;  			if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  				return true;  		}  	}  }  else {  	//src == [0'3]  	if (des <= 3) {  		if (_cardStack [des].Count == 0) {  			//only a K or Library card can be put into empty stack.                     			if (_cardStack [src].Last ().Rank == 13)  				return true;  		}  		else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  			return true;  	}  	else {  		//check rank  		if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (src == 8) {  	if (des <= 3)  		return true;  	else {  		if (des >= 4) {  			//check rank  			if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  				return true;  			if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  				return true;  		}  	}  }  else {  	//src == [0'3]  	if (des <= 3) {  		if (_cardStack [des].Count == 0) {  			//only a K or Library card can be put into empty stack.                     			if (_cardStack [src].Last ().Rank == 13)  				return true;  		}  		else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  			return true;  	}  	else {  		//check rank  		if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des <= 3)  	return true;  else {  	if (des >= 4) {  		//check rank  		if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des <= 3)  	return true;  else {  	if (des >= 4) {  		//check rank  		if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des <= 3)  	return true;  else {  	if (des >= 4) {  		//check rank  		if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des <= 3)  	return true;  else {  	if (des >= 4) {  		//check rank  		if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des <= 3)  	return true;  else {  	if (des >= 4) {  		//check rank  		if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  			return true;  		if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  			return true;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des >= 4) {  	//check rank  	if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  		return true;  	if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  		return true;  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des >= 4) {  	//check rank  	if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  		return true;  	if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  		return true;  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des >= 4) {  	//check rank  	if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  		return true;  	if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  		return true;  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des >= 4) {  	//check rank  	if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  		return true;  	if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  		return true;  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (_homecell [des - 4] == null && _cardList.Last ().Rank == 1)  	return true;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  	return true;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (_homecell [des - 4] != null && _cardList.Last ().Rank - _homecell [des - 4].Rank == 1)  	return true;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des <= 3) {  	if (_cardStack [des].Count == 0) {  		//only a K or Library card can be put into empty stack.                     		if (_cardStack [src].Last ().Rank == 13)  			return true;  	}  	else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  		return true;  }  else {  	//check rank  	if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  		return true;  	if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  		return true;  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des <= 3) {  	if (_cardStack [des].Count == 0) {  		//only a K or Library card can be put into empty stack.                     		if (_cardStack [src].Last ().Rank == 13)  			return true;  	}  	else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  		return true;  }  else {  	//check rank  	if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  		return true;  	if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  		return true;  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des <= 3) {  	if (_cardStack [des].Count == 0) {  		//only a K or Library card can be put into empty stack.                     		if (_cardStack [src].Last ().Rank == 13)  			return true;  	}  	else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  		return true;  }  else {  	//check rank  	if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  		return true;  	if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  		return true;  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des <= 3) {  	if (_cardStack [des].Count == 0) {  		//only a K or Library card can be put into empty stack.                     		if (_cardStack [src].Last ().Rank == 13)  			return true;  	}  	else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  		return true;  }  else {  	//check rank  	if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  		return true;  	if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  		return true;  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (des <= 3) {  	if (_cardStack [des].Count == 0) {  		//only a K or Library card can be put into empty stack.                     		if (_cardStack [src].Last ().Rank == 13)  			return true;  	}  	else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  		return true;  }  else {  	//check rank  	if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  		return true;  	if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  		return true;  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (_cardStack [des].Count == 0) {  	//only a K or Library card can be put into empty stack.                     	if (_cardStack [src].Last ().Rank == 13)  		return true;  }  else if (_cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank == 1)  	return true;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (_cardStack [src].Last ().Rank == 13)  	return true;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (_homecell [des - 4] == null && _cardStack [src].Last ().Rank == 1)  	return true;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  	return true;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,CanMove,The following statement contains a magic number: if (_homecell [des - 4] != null && _cardStack [src].Last ().Rank - _homecell [des - 4].Rank == 1)  	return true;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 3) {  		_cardStack [des].Add (_cardList.Last ());  		_cardList.Remove (_cardList.Last ());  	}  	else {  		_homecell [des - 4] = _cardList.Last ();  		_cardList.Remove (_cardList.Last ());  	}  }  else {  	if (des <= 3)  		_cardStack [des].Add (_cardStack [src].Last ());  	else  		_homecell [des - 4] = _cardStack [src].Last ();  	_cardStack [src].Remove (_cardStack [src].Last ());  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 3) {  		_cardStack [des].Add (_cardList.Last ());  		_cardList.Remove (_cardList.Last ());  	}  	else {  		_homecell [des - 4] = _cardList.Last ();  		_cardList.Remove (_cardList.Last ());  	}  }  else {  	if (des <= 3)  		_cardStack [des].Add (_cardStack [src].Last ());  	else  		_homecell [des - 4] = _cardStack [src].Last ();  	_cardStack [src].Remove (_cardStack [src].Last ());  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 3) {  		_cardStack [des].Add (_cardList.Last ());  		_cardList.Remove (_cardList.Last ());  	}  	else {  		_homecell [des - 4] = _cardList.Last ();  		_cardList.Remove (_cardList.Last ());  	}  }  else {  	if (des <= 3)  		_cardStack [des].Add (_cardStack [src].Last ());  	else  		_homecell [des - 4] = _cardStack [src].Last ();  	_cardStack [src].Remove (_cardStack [src].Last ());  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 3) {  		_cardStack [des].Add (_cardList.Last ());  		_cardList.Remove (_cardList.Last ());  	}  	else {  		_homecell [des - 4] = _cardList.Last ();  		_cardList.Remove (_cardList.Last ());  	}  }  else {  	if (des <= 3)  		_cardStack [des].Add (_cardStack [src].Last ());  	else  		_homecell [des - 4] = _cardStack [src].Last ();  	_cardStack [src].Remove (_cardStack [src].Last ());  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,Move,The following statement contains a magic number: if (src == 8) {  	if (des <= 3) {  		_cardStack [des].Add (_cardList.Last ());  		_cardList.Remove (_cardList.Last ());  	}  	else {  		_homecell [des - 4] = _cardList.Last ();  		_cardList.Remove (_cardList.Last ());  	}  }  else {  	if (des <= 3)  		_cardStack [des].Add (_cardStack [src].Last ());  	else  		_homecell [des - 4] = _cardStack [src].Last ();  	_cardStack [src].Remove (_cardStack [src].Last ());  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,Move,The following statement contains a magic number: if (des <= 3) {  	_cardStack [des].Add (_cardList.Last ());  	_cardList.Remove (_cardList.Last ());  }  else {  	_homecell [des - 4] = _cardList.Last ();  	_cardList.Remove (_cardList.Last ());  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,Move,The following statement contains a magic number: if (des <= 3) {  	_cardStack [des].Add (_cardList.Last ());  	_cardList.Remove (_cardList.Last ());  }  else {  	_homecell [des - 4] = _cardList.Last ();  	_cardList.Remove (_cardList.Last ());  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,Move,The following statement contains a magic number: _homecell [des - 4] = _cardList.Last ();  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,Move,The following statement contains a magic number: if (des <= 3)  	_cardStack [des].Add (_cardStack [src].Last ());  else  	_homecell [des - 4] = _cardStack [src].Last ();  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,Move,The following statement contains a magic number: if (des <= 3)  	_cardStack [des].Add (_cardStack [src].Last ());  else  	_homecell [des - 4] = _cardStack [src].Last ();  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,Move,The following statement contains a magic number: _homecell [des - 4] = _cardStack [src].Last ();  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,GetFocus,The following statement contains a magic number: foreach (Card c in _cardList) {  	if (c.Rank == rank && c.Suit == suit) {  		this._isFocused = true;  		this._focusedStack = 8;  		this._focusedCard = _cardList.IndexOf (c);  		return;  	}  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,GetFocus,The following statement contains a magic number: if (c.Rank == rank && c.Suit == suit) {  	this._isFocused = true;  	this._focusedStack = 8;  	this._focusedCard = _cardList.IndexOf (c);  	return;  }  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,GetFocus,The following statement contains a magic number: this._focusedStack = 8;  
Magic Number,CardGames.ShiftingGame,ShiftingCore,C:\repos\yzzw006_CardGames\ShiftingGame\ShiftingCore.cs,GetFocus,The following statement contains a magic number: for (int i = 0; i < 4; i++) {  	foreach (Card c in _cardStack [i]) {  		if (c.Rank == rank && c.Suit == suit) {  			this._isFocused = true;  			this._focusedStack = i;  			this._focusedCard = _cardStack [i].IndexOf (c);  			return;  		}  	}  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,Init,The following statement contains a magic number: for (int i = 1; i <= 12; i++) {  	stackList [i - 1] = FindName ("cardStack" + i) as CardStack;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,Init,The following statement contains a magic number: foreach (CardStack cs in stackList) {  	cs.RefreshStack (gameCore.Stack [index]);  	cs.TopMargin = 10;  	cs.Index = index;  	cs.GameBase = this;  	index++;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,Init,The following statement contains a magic number: cs.TopMargin = 10;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,Init,The following statement contains a magic number: DealList.TopMargin = 8;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,Init,The following statement contains a magic number: DealList.Index = 12;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 70 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 70 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 70 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 70 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 70 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 70 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 70 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: if (gameCore.FocusedStack <= 5) {  	top = 70 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  }  else {  	top = 270 + 5 * gameCore.FocusedCard;  	left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: top = 70 + 5 * gameCore.FocusedCard;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: top = 70 + 5 * gameCore.FocusedCard;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * gameCore.FocusedStack;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: top = 270 + 5 * gameCore.FocusedCard;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: top = 270 + 5 * gameCore.FocusedCard;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,StartDrag,The following statement contains a magic number: left = (this.ActualWidth - _stackWidth) / 2 + _cellWidth * (gameCore.FocusedStack - 6);  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 70 && p.Y < 220) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 420) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 70 && p.Y < 220) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 420) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 70 && p.Y < 220) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 420) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 70 && p.Y < 220) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 420) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 70 && p.Y < 220) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 420) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 70 && p.Y < 220) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 420) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 70 && p.Y < 220) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 420) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (x < 71) {  	//判断是上层stack还是下层  	if (p.Y > 70 && p.Y < 220) {  		result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  	else if (p.Y > 270 && p.Y < 420) {  		result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  	}  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 70 && p.Y < 220) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 420) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 70 && p.Y < 220) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 420) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 70 && p.Y < 220) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 420) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 70 && p.Y < 220) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 420) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 70 && p.Y < 220) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 420) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 70 && p.Y < 220) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 420) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 70 && p.Y < 220) {  	result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  else if (p.Y > 270 && p.Y < 420) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: result = (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 270 && p.Y < 420) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 270 && p.Y < 420) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 270 && p.Y < 420) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: if (p.Y > 270 && p.Y < 420) {  	result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,ParseDestination,The following statement contains a magic number: result = 6 + (int)(p.X - (this.ActualWidth - _stackWidth) / 2) / _cellWidth;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,Menu_Restart,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	stackList [i].RefreshStack (gameCore.Stack [i]);  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelve,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelve.xaml.cs,Card_RightMouseDown,The following statement contains a magic number: if (des <= 11 && des >= 0)  	stackList [des].CheckTop ();  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelveCore,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelveCore.cs,TrustyTwelveCore,The following statement contains a magic number: _cardList = Card_DealData.getDealCardList (rd.Next (0' 100000));  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelveCore,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelveCore.cs,TrustyTwelveCore,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	_cardStack [i] = new List<Card> ();  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelveCore,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelveCore.cs,CanMove,The following statement contains a magic number: if (_cardStack [des].Count == 0)  	return false;  else {  	int sub = _cardStack [des].Last ().Rank - _cardStack [src].Last ().Rank;  	if (sub == 1 || sub == -12)  		return true;  	else  		return false;  }  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelveCore,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelveCore.cs,CanMove,The following statement contains a magic number: if (sub == 1 || sub == -12)  	return true;  else  	return false;  
Magic Number,CardGames.TrustyTwelveGame,TrustyTwelveCore,C:\repos\yzzw006_CardGames\TrustyTwelveGame\TrustyTwelveCore.cs,GetFocus,The following statement contains a magic number: for (int i = 0; i < 12; i++) {  	foreach (Card c in _cardStack [i]) {  		if (c.Rank == rank && c.Suit == suit) {  			this._isFocused = true;  			this._focusedStack = i;  			this._focusedCard = _cardStack [i].IndexOf (c);  			return;  		}  	}  }  
Missing Default,CardGames,MainWindow,C:\repos\yzzw006_CardGames\MainWindow.xaml.cs,StartGame,The following switch statement is missing a default case: switch (source.Content as string) {  case "Freecell":  	_startedGame = new Freecell ();  	break;  case "TrustyTwelve":  	_startedGame = new TrustyTwelve ();  	break;  case "Shifting":  	_startedGame = new Shifting ();  	break;  case "Nestor":  	_startedGame = new Nestor ();  	break;  //Klondike  case "Klondike":  	_startedGame = new Klondike ();  	break;  case "Golf":  	_startedGame = new Golf ();  	break;  case "AcesUp":  	_startedGame = new AcesUp ();  	break;  }  
