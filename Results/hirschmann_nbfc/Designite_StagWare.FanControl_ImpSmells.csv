Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,StagWare.FanControl,FanControl,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanControl.cs,FanControl,The method has 5 parameters. Parameters: config' filter' ec' tempMon' fans
Long Parameter List,StagWare.FanControl,FanInformation,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanInformation.cs,FanInformation,The method has 5 parameters. Parameters: targetFanSpeed' currentFanSpeed' autoControlEnabled' criticalModeEnabled' fanDisplayName
Magic Number,StagWare.FanControl,FanControl,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanControl.cs,UpdateEc,The following statement contains a magic number: for (int i = 0; i < speeds.Length; i++)              {                  speeds[i] = this.fans[i].GetCurrentSpeed();                    if (Math.Abs(speeds[i] - this.fans[i].TargetSpeed) > 15)                  {                      reInitRequired = true;                  }              }
Magic Number,StagWare.FanControl,FanControl,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanControl.cs,ResetEc,The following statement contains a magic number: try              {                  Monitor.TryEnter(syncRoot' MaxLockTimeout * 2' ref syncRootLockTaken);                    if (!syncRootLockTaken && !force)                  {                      throw new TimeoutException("EC reset failed: Could not enter monitor");                  }                    bool ecLockAcquired = this.ec.AcquireLock(EcTimeout * 2);                    if (!ecLockAcquired && !force)                  {                      throw new TimeoutException("EC reset failed: Could not acquire EC lock");                  }                    // If force is true' try to reset the EC even if AquireLock failed                  try                  {                      int tries = force ? 3 : 1;                        for (int i = 0; i < tries; i++)                      {                          ResetRegisterWriteConfigs();                          ResetFans();                      }                  }                  catch(Exception e)                  {                      logger.Error(e' "EC reset failed");                  }                  finally                  {                      if (ecLockAcquired)                      {                          this.ec.ReleaseLock();                      }                  }              }              finally              {                  if (syncRootLockTaken)                  {                      Monitor.Exit(syncRoot);                  }              }
Magic Number,StagWare.FanControl,FanControl,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanControl.cs,ResetEc,The following statement contains a magic number: try              {                  Monitor.TryEnter(syncRoot' MaxLockTimeout * 2' ref syncRootLockTaken);                    if (!syncRootLockTaken && !force)                  {                      throw new TimeoutException("EC reset failed: Could not enter monitor");                  }                    bool ecLockAcquired = this.ec.AcquireLock(EcTimeout * 2);                    if (!ecLockAcquired && !force)                  {                      throw new TimeoutException("EC reset failed: Could not acquire EC lock");                  }                    // If force is true' try to reset the EC even if AquireLock failed                  try                  {                      int tries = force ? 3 : 1;                        for (int i = 0; i < tries; i++)                      {                          ResetRegisterWriteConfigs();                          ResetFans();                      }                  }                  catch(Exception e)                  {                      logger.Error(e' "EC reset failed");                  }                  finally                  {                      if (ecLockAcquired)                      {                          this.ec.ReleaseLock();                      }                  }              }              finally              {                  if (syncRootLockTaken)                  {                      Monitor.Exit(syncRoot);                  }              }
Magic Number,StagWare.FanControl,FanControl,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanControl.cs,ResetEc,The following statement contains a magic number: try              {                  Monitor.TryEnter(syncRoot' MaxLockTimeout * 2' ref syncRootLockTaken);                    if (!syncRootLockTaken && !force)                  {                      throw new TimeoutException("EC reset failed: Could not enter monitor");                  }                    bool ecLockAcquired = this.ec.AcquireLock(EcTimeout * 2);                    if (!ecLockAcquired && !force)                  {                      throw new TimeoutException("EC reset failed: Could not acquire EC lock");                  }                    // If force is true' try to reset the EC even if AquireLock failed                  try                  {                      int tries = force ? 3 : 1;                        for (int i = 0; i < tries; i++)                      {                          ResetRegisterWriteConfigs();                          ResetFans();                      }                  }                  catch(Exception e)                  {                      logger.Error(e' "EC reset failed");                  }                  finally                  {                      if (ecLockAcquired)                      {                          this.ec.ReleaseLock();                      }                  }              }              finally              {                  if (syncRootLockTaken)                  {                      Monitor.Exit(syncRoot);                  }              }
Magic Number,StagWare.FanControl,Fan,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\Fan.cs,SetTargetSpeed,The following statement contains a magic number: this.AutoControlEnabled = (speed < 0) || (speed > 100);
Magic Number,StagWare.FanControl,Fan,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\Fan.cs,GetCurrentSpeed,The following statement contains a magic number: for (int i = 0; i <= 2; i++)              {                  speed = ECReadValue();                    if ((speed >= minSpeedValueReadAbs) && (speed <= maxSpeedValueReadAbs))                  {                      break;                  }              }
Magic Number,StagWare.FanControl,Fan,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\Fan.cs,PercentageToFanSpeed,The following statement contains a magic number: if ((percentage > 100) || (percentage < 0))              {                  throw new ArgumentOutOfRangeException(                      "percentage"'                      "Percentage must be greater or equal 0 and less or equal 100");              }
Magic Number,StagWare.FanControl,Fan,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\Fan.cs,PercentageToFanSpeed,The following statement contains a magic number: if (this.overriddenPercentages.ContainsKey(percentage))              {                  return this.overriddenPercentages[percentage].FanSpeedValue;              }              else              {                  return (int)Math.Round(minSpeedValueWrite                      + (((maxSpeedValueWrite - minSpeedValueWrite) * percentage) / 100.0));              }
Magic Number,StagWare.FanControl,Fan,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\Fan.cs,FanSpeedToPercentage,The following statement contains a magic number: if (this.overriddenValues.ContainsKey(fanSpeed))              {                  return this.overriddenValues[fanSpeed].FanSpeedPercentage;              }              else              {                  if (minSpeedValueRead == maxSpeedValueRead)                  {                      return 0;                  }                  else                  {                      return ((float)(fanSpeed - minSpeedValueRead)                          / (maxSpeedValueRead - minSpeedValueRead)) * 100;                  }              }
Magic Number,StagWare.FanControl.Plugins,FanControlPluginLoader<T>,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\Plugins\FanControlPluginLoader.cs,SelectPlugin,The following statement contains a magic number: switch (IntPtr.Size)              {                  case 4:                      arch = SupportedCpuArchitectures.x86;                      break;                    case 8:                      arch = SupportedCpuArchitectures.x64;                      break;              }
Magic Number,StagWare.FanControl.Plugins,FanControlPluginLoader<T>,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\Plugins\FanControlPluginLoader.cs,SelectPlugin,The following statement contains a magic number: switch (IntPtr.Size)              {                  case 4:                      arch = SupportedCpuArchitectures.x86;                      break;                    case 8:                      arch = SupportedCpuArchitectures.x64;                      break;              }
Missing Default,StagWare.FanControl.Plugins,FanControlPluginLoader<T>,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\Plugins\FanControlPluginLoader.cs,SelectPlugin,The following switch statement is missing a default case: switch (os.Platform)              {                  case PlatformID.Win32NT:                      platform = SupportedPlatforms.Windows;                      break;                    case PlatformID.Unix:                      platform = SupportedPlatforms.Unix;                      break;                    case PlatformID.MacOSX:                      platform = SupportedPlatforms.MacOSX;                      break;              }
Missing Default,StagWare.FanControl.Plugins,FanControlPluginLoader<T>,C:\repos\hirschmann_nbfc\Core\StagWare.FanControl\Plugins\FanControlPluginLoader.cs,SelectPlugin,The following switch statement is missing a default case: switch (IntPtr.Size)              {                  case 4:                      arch = SupportedCpuArchitectures.x86;                      break;                    case 8:                      arch = SupportedCpuArchitectures.x64;                      break;              }
