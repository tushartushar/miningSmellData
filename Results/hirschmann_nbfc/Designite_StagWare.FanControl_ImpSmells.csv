Implementation smell,Namespace,Class,File,Method,Description
Complex Method,StagWare.FanControl,FanControl,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanControl.cs,Start,Cyclomatic complexity of the method is 11
Complex Method,StagWare.FanControl.Plugins,FanControlPluginLoader<T>,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\Plugins\FanControlPluginLoader.cs,SelectPlugin,Cyclomatic complexity of the method is 9
Long Parameter List,StagWare.FanControl,FanControl,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanControl.cs,FanControl,The method has 5 parameters. Parameters: config' filter' ec' tempMon' fans
Long Parameter List,StagWare.FanControl,FanInformation,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanInformation.cs,FanInformation,The method has 5 parameters. Parameters: targetFanSpeed' currentFanSpeed' autoControlEnabled' criticalModeEnabled' fanDisplayName
Magic Number,StagWare.FanControl,FanControl,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanControl.cs,UpdateEc,The following statement contains a magic number: Math.Abs(speeds[i] - this.fans[i].TargetSpeed) > 15
Magic Number,StagWare.FanControl,FanControl,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanControl.cs,ResetEc,The following statement contains a magic number: Monitor.TryEnter(syncRoot' MaxLockTimeout * 2' ref syncRootLockTaken);
Magic Number,StagWare.FanControl,FanControl,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanControl.cs,ResetEc,The following statement contains a magic number: bool ecLockAcquired = this.ec.AcquireLock(EcTimeout * 2);
Magic Number,StagWare.FanControl,FanControl,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\FanControl.cs,ResetEc,The following statement contains a magic number: int tries = force ? 3 : 1;
Magic Number,StagWare.FanControl,Fan,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\Fan.cs,SetTargetSpeed,The following statement contains a magic number: this.AutoControlEnabled = (speed < 0) || (speed > 100);
Magic Number,StagWare.FanControl,Fan,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\Fan.cs,SetTargetSpeed,The following statement contains a magic number: speed = CriticalModeEnabled ? 100.0f : this.targetFanSpeed;
Magic Number,StagWare.FanControl,Fan,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\Fan.cs,GetCurrentSpeed,The following statement contains a magic number: i <= 2
Magic Number,StagWare.FanControl,Fan,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\Fan.cs,PercentageToFanSpeed,The following statement contains a magic number: (percentage > 100) || (percentage < 0)
Magic Number,StagWare.FanControl.Plugins,FanControlPluginLoader<T>,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\Plugins\FanControlPluginLoader.cs,SelectPlugin,The following statement contains a magic number: switch (IntPtr.Size)              {                  case 4:                      arch = SupportedCpuArchitectures.x86;                      break;                    case 8:                      arch = SupportedCpuArchitectures.x64;                      break;                    default:                      arch = SupportedCpuArchitectures.None;                      break;              }
Magic Number,StagWare.FanControl.Plugins,FanControlPluginLoader<T>,D:\research\architectureSmells\repos\hirschmann_nbfc\Core\StagWare.FanControl\Plugins\FanControlPluginLoader.cs,SelectPlugin,The following statement contains a magic number: switch (IntPtr.Size)              {                  case 4:                      arch = SupportedCpuArchitectures.x86;                      break;                    case 8:                      arch = SupportedCpuArchitectures.x64;                      break;                    default:                      arch = SupportedCpuArchitectures.None;                      break;              }
