Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ParseArgs,The length of the statement  "	helpGen.GenericDescription = "All input values are interpreted as decimal numbers by default." + Environment.NewLine + "Hexadecimal values may be entered by prefixing them with \"0x\"."; " is 186.
Magic Number,NbfcProbe.CommandLineOptions,ECMonitorVerb,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\CommandLineOptions\ECMonitorVerb.cs,ECMonitorVerb,The following statement contains a magic number: Interval = 5;  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ParseArgs,The following statement contains a magic number: helpGen.DescriptionDistance = 29;  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ParseArgs,The following statement contains a magic number: if (opt.ECDump != null) {  	ECDump ();  } else if (opt.ECRead != null) {  	ECRead (opt.ECRead.Register);  } else if (opt.ECWrite != null) {  	ECWrite (opt.ECWrite.Register' opt.ECWrite.Value' opt.ECWrite.Verbose);  } else if (opt.ECMonitor != null) {  	if (opt.ECMonitor.Interval < 1) {  		Console.Error.WriteLine ("The interval must be at least 1 second");  		return;  	}  	if ((opt.ECMonitor.Timespan < 2 * opt.ECMonitor.Interval) && (opt.ECMonitor.Timespan > 0)) {  		Console.Error.WriteLine ("The monitored timespan must be at least (2 * interval)");  		return;  	}  	ECMonitor (opt.ECMonitor.Timespan' opt.ECMonitor.Interval' opt.ECMonitor.ReportPath' opt.ECMonitor.Clearly);  } else {  	Console.WriteLine (helpGen.GetHelp (parser.Config));  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ParseArgs,The following statement contains a magic number: if (opt.ECRead != null) {  	ECRead (opt.ECRead.Register);  } else if (opt.ECWrite != null) {  	ECWrite (opt.ECWrite.Register' opt.ECWrite.Value' opt.ECWrite.Verbose);  } else if (opt.ECMonitor != null) {  	if (opt.ECMonitor.Interval < 1) {  		Console.Error.WriteLine ("The interval must be at least 1 second");  		return;  	}  	if ((opt.ECMonitor.Timespan < 2 * opt.ECMonitor.Interval) && (opt.ECMonitor.Timespan > 0)) {  		Console.Error.WriteLine ("The monitored timespan must be at least (2 * interval)");  		return;  	}  	ECMonitor (opt.ECMonitor.Timespan' opt.ECMonitor.Interval' opt.ECMonitor.ReportPath' opt.ECMonitor.Clearly);  } else {  	Console.WriteLine (helpGen.GetHelp (parser.Config));  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ParseArgs,The following statement contains a magic number: if (opt.ECWrite != null) {  	ECWrite (opt.ECWrite.Register' opt.ECWrite.Value' opt.ECWrite.Verbose);  } else if (opt.ECMonitor != null) {  	if (opt.ECMonitor.Interval < 1) {  		Console.Error.WriteLine ("The interval must be at least 1 second");  		return;  	}  	if ((opt.ECMonitor.Timespan < 2 * opt.ECMonitor.Interval) && (opt.ECMonitor.Timespan > 0)) {  		Console.Error.WriteLine ("The monitored timespan must be at least (2 * interval)");  		return;  	}  	ECMonitor (opt.ECMonitor.Timespan' opt.ECMonitor.Interval' opt.ECMonitor.ReportPath' opt.ECMonitor.Clearly);  } else {  	Console.WriteLine (helpGen.GetHelp (parser.Config));  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ParseArgs,The following statement contains a magic number: if (opt.ECMonitor != null) {  	if (opt.ECMonitor.Interval < 1) {  		Console.Error.WriteLine ("The interval must be at least 1 second");  		return;  	}  	if ((opt.ECMonitor.Timespan < 2 * opt.ECMonitor.Interval) && (opt.ECMonitor.Timespan > 0)) {  		Console.Error.WriteLine ("The monitored timespan must be at least (2 * interval)");  		return;  	}  	ECMonitor (opt.ECMonitor.Timespan' opt.ECMonitor.Interval' opt.ECMonitor.ReportPath' opt.ECMonitor.Clearly);  } else {  	Console.WriteLine (helpGen.GetHelp (parser.Config));  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ParseArgs,The following statement contains a magic number: if ((opt.ECMonitor.Timespan < 2 * opt.ECMonitor.Interval) && (opt.ECMonitor.Timespan > 0)) {  	Console.Error.WriteLine ("The monitored timespan must be at least (2 * interval)");  	return;  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ECDump,The following statement contains a magic number: AccessEcSynchronized (ec => {  	StringBuilder sb = new StringBuilder (16 * 54);  	// Read all register bytes  	for (int i = 0; i <= 0xF0; i += 0x10) {  		sb.AppendFormat ("{0:X2}: "' i);  		for (int j = 0; j <= 0xF; j++) {  			byte b = ec.ReadByte ((byte)(i + j));  			sb.AppendFormat ("{0:X2} "' b);  		}  		sb.AppendLine ();  	}  	Console.WriteLine (sb);  });  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ECDump,The following statement contains a magic number: AccessEcSynchronized (ec => {  	StringBuilder sb = new StringBuilder (16 * 54);  	// Read all register bytes  	for (int i = 0; i <= 0xF0; i += 0x10) {  		sb.AppendFormat ("{0:X2}: "' i);  		for (int j = 0; j <= 0xF; j++) {  			byte b = ec.ReadByte ((byte)(i + j));  			sb.AppendFormat ("{0:X2} "' b);  		}  		sb.AppendLine ();  	}  	Console.WriteLine (sb);  });  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ECMonitor,The following statement contains a magic number: using (IEmbeddedController embeddedController = LoadEC ()) {  	if (embeddedController == null) {  		return;  	}  	byte[] initialBytes = new byte[byte.MaxValue];  	for (byte reg = 0; reg < initialBytes.Length; reg++) {  		AccessEcSynchronized (ec => {  			initialBytes [reg] = ec.ReadByte (reg);  		}' embeddedController);  	}  	int loopCount = 0;  	while ((timespan < 1) || (loopCount < Math.Ceiling (((double)timespan / interval) - 1))) {  		Thread.Sleep (interval * 1000);  		AccessEcSynchronized (ec => {  			for (byte reg = 0; reg < initialBytes.Length; reg++) {  				byte value = ec.ReadByte (reg);  				if (dict.ContainsKey (reg)) {  					dict [reg].Add (value);  				} else if (value != initialBytes [reg]) {  					var log = new List<byte> ();  					for (int j = 0; j <= loopCount; j++) {  						log.Add (initialBytes [reg]);  					}  					log.Add (value);  					dict.Add (reg' log);  				}  			}  		}' embeddedController);  		Console.Clear ();  		PrintMonitoringStatus (dict' clearly);  		loopCount++;  	}  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ECMonitor,The following statement contains a magic number: while ((timespan < 1) || (loopCount < Math.Ceiling (((double)timespan / interval) - 1))) {  	Thread.Sleep (interval * 1000);  	AccessEcSynchronized (ec => {  		for (byte reg = 0; reg < initialBytes.Length; reg++) {  			byte value = ec.ReadByte (reg);  			if (dict.ContainsKey (reg)) {  				dict [reg].Add (value);  			} else if (value != initialBytes [reg]) {  				var log = new List<byte> ();  				for (int j = 0; j <= loopCount; j++) {  					log.Add (initialBytes [reg]);  				}  				log.Add (value);  				dict.Add (reg' log);  			}  		}  	}' embeddedController);  	Console.Clear ();  	PrintMonitoringStatus (dict' clearly);  	loopCount++;  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ECMonitor,The following statement contains a magic number: Thread.Sleep (interval * 1000);  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,PrintMonitoringStatus,The following statement contains a magic number: foreach (var pair in registerLogs.OrderBy (x => x.Key)) {  	int start = 0;  	report.AppendFormat ("0x{0:X2}: "' pair.Key);  	if (6 + pair.Value.Count * 3 > Console.BufferWidth) {  		report.Append ("...'");  		start = pair.Value.Count - ((Console.BufferWidth - 10) / 3);  	}  	AppendRegisterLog (report' pair.Value' start' clearly);  	report.AppendLine ();  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,PrintMonitoringStatus,The following statement contains a magic number: foreach (var pair in registerLogs.OrderBy (x => x.Key)) {  	int start = 0;  	report.AppendFormat ("0x{0:X2}: "' pair.Key);  	if (6 + pair.Value.Count * 3 > Console.BufferWidth) {  		report.Append ("...'");  		start = pair.Value.Count - ((Console.BufferWidth - 10) / 3);  	}  	AppendRegisterLog (report' pair.Value' start' clearly);  	report.AppendLine ();  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,PrintMonitoringStatus,The following statement contains a magic number: foreach (var pair in registerLogs.OrderBy (x => x.Key)) {  	int start = 0;  	report.AppendFormat ("0x{0:X2}: "' pair.Key);  	if (6 + pair.Value.Count * 3 > Console.BufferWidth) {  		report.Append ("...'");  		start = pair.Value.Count - ((Console.BufferWidth - 10) / 3);  	}  	AppendRegisterLog (report' pair.Value' start' clearly);  	report.AppendLine ();  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,PrintMonitoringStatus,The following statement contains a magic number: foreach (var pair in registerLogs.OrderBy (x => x.Key)) {  	int start = 0;  	report.AppendFormat ("0x{0:X2}: "' pair.Key);  	if (6 + pair.Value.Count * 3 > Console.BufferWidth) {  		report.Append ("...'");  		start = pair.Value.Count - ((Console.BufferWidth - 10) / 3);  	}  	AppendRegisterLog (report' pair.Value' start' clearly);  	report.AppendLine ();  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,PrintMonitoringStatus,The following statement contains a magic number: if (6 + pair.Value.Count * 3 > Console.BufferWidth) {  	report.Append ("...'");  	start = pair.Value.Count - ((Console.BufferWidth - 10) / 3);  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,PrintMonitoringStatus,The following statement contains a magic number: if (6 + pair.Value.Count * 3 > Console.BufferWidth) {  	report.Append ("...'");  	start = pair.Value.Count - ((Console.BufferWidth - 10) / 3);  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,PrintMonitoringStatus,The following statement contains a magic number: if (6 + pair.Value.Count * 3 > Console.BufferWidth) {  	report.Append ("...'");  	start = pair.Value.Count - ((Console.BufferWidth - 10) / 3);  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,PrintMonitoringStatus,The following statement contains a magic number: if (6 + pair.Value.Count * 3 > Console.BufferWidth) {  	report.Append ("...'");  	start = pair.Value.Count - ((Console.BufferWidth - 10) / 3);  }  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,PrintMonitoringStatus,The following statement contains a magic number: start = pair.Value.Count - ((Console.BufferWidth - 10) / 3);  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,PrintMonitoringStatus,The following statement contains a magic number: start = pair.Value.Count - ((Console.BufferWidth - 10) / 3);  
Magic Number,NbfcProbe,Program,F:\newReposMay17\hirschmann_nbfc\Core\NbfcProbe\Program.cs,AccessEcSynchronized,The following statement contains a magic number: if (ec.AcquireLock (200)) {  	try {  		callback (ec);  	} finally {  		ec.ReleaseLock ();  	}  } else {  	Console.Error.WriteLine ("Could not acquire EC lock");  }  
