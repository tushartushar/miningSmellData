Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NbfcProbe,Program,C:\repos\hirschmann_nbfc\Core\NbfcProbe\Program.cs,SaveRegisterLogs,Cyclomatic complexity of the method is 8
Long Parameter List,NbfcProbe,Program,C:\repos\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ECMonitor,The method has 5 parameters. Parameters: timespan' interval' reportPath' clearly' decimalFormat
Empty Catch Block,NbfcProbe,Program,C:\repos\hirschmann_nbfc\Core\NbfcProbe\Program.cs,Main,The method has an empty catch block.
Magic Number,NbfcProbe.CommandLineOptions,ECMonitorVerb,C:\repos\hirschmann_nbfc\Core\NbfcProbe\CommandLineOptions\ECMonitorVerb.cs,ECMonitorVerb,The following statement contains a magic number: Interval = 5;
Magic Number,NbfcProbe,Program,C:\repos\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ParseArgs,The following statement contains a magic number: helpGen.DescriptionDistance = 29;
Magic Number,NbfcProbe,Program,C:\repos\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ParseArgs,The following statement contains a magic number: if (opt.ECDump != null)              {                  ECDump();              }              else if (opt.ECRead != null)              {                  ECRead(opt.ECRead.Register);              }              else if (opt.ECWrite != null)              {                  ECWrite(opt.ECWrite.Register' opt.ECWrite.Value' opt.ECWrite.Verbose);              }              else if (opt.ECMonitor != null)              {                  if (opt.ECMonitor.Interval < 1)                  {                      Console.Error.WriteLine("The interval must be at least 1 second");                      return;                  }                    if ((opt.ECMonitor.Timespan < 2 * opt.ECMonitor.Interval) && (opt.ECMonitor.Timespan > 0))                  {                      Console.Error.WriteLine("The monitored timespan must be at least (2 * interval)");                      return;                  }                    ECMonitor(                      opt.ECMonitor.Timespan'                      opt.ECMonitor.Interval'                      opt.ECMonitor.ReportPath'                      opt.ECMonitor.Clearly'                      opt.ECMonitor.Decimal);              }              else              {                  Console.WriteLine(helpGen.GetHelp(parser.Config));              }
Magic Number,NbfcProbe,Program,C:\repos\hirschmann_nbfc\Core\NbfcProbe\Program.cs,ECMonitor,The following statement contains a magic number: using (ec = LoadEC())              {                  if (ec == null)                  {                      return;                  }                    Console.WriteLine("monitoring...");                    for (byte b = 0; b < logs.Length; b++)                  {                      AccessEcSynchronized(ec =>                      {                          logs[b].Values = new List<byte>();                          logs[b].Values.Add(ec.ReadByte(b));                      }'                      ec);                  }                    int loopCount = 0;                    while ((timespan < 1) || (loopCount < Math.Ceiling(((double)timespan / interval) - 1)))                  {                      Thread.Sleep(interval * 1000);                      AccessEcSynchronized(ec =>                      {                          for (int i = 0; i < logs.Length; i++)                          {                              byte value = ec.ReadByte((byte)i);                              logs[i].Values.Add(value);                                if (value != logs[i].Values[0])                              {                                  logs[i].Print = true;                              }                          }                      }'                      ec);                        Console.Clear();                      PrintRegisterLogs(logs' clearly' decimalFormat);                      loopCount++;                  }              }
Magic Number,NbfcProbe,Program,C:\repos\hirschmann_nbfc\Core\NbfcProbe\Program.cs,PrintRegisterLogs,The following statement contains a magic number: for (int i = 0; i < logs.Length; i++)              {                  if (!logs[i].Print)                  {                      continue;                  }                    int start = 0;                  Console.ForegroundColor = ConsoleColor.DarkGreen;                  Console.Write(headerFormat' i);                  Console.ForegroundColor = defaultColor;                    if (headerLength + logs[i].Values.Count * valueLength > Console.BufferWidth)                  {                      Console.ForegroundColor = ConsoleColor.DarkGray;                      Console.Write("...'");                      Console.ForegroundColor = defaultColor;                      start = logs[i].Values.Count - ((Console.BufferWidth - 10) / valueLength);                  }                    byte? prev = null;                    for (int j = start; j < logs[i].Values.Count; j++)                  {                      bool valueChanged = logs[i].Values[j] != prev;                      prev = logs[i].Values[j];                        if (clearly && !valueChanged)                      {                          Console.Write(string.Empty.PadRight(valueLength));                          continue;                      }                        if (j > start)                      {                          Console.ForegroundColor = ConsoleColor.DarkGray;                          Console.Write("'");                      }                        Console.ForegroundColor = valueChanged ? ConsoleColor.Red : ConsoleColor.DarkGray;                      Console.Write(valueFormat' logs[i].Values[j]);                      Console.ForegroundColor = defaultColor;                  }                    Console.WriteLine();              }
Magic Number,NbfcProbe,Program,C:\repos\hirschmann_nbfc\Core\NbfcProbe\Program.cs,AccessEcSynchronized,The following statement contains a magic number: if (ec.AcquireLock(200))              {                  try                  {                      callback(ec);                  }                  finally                  {                      ec.ReleaseLock();                  }              }              else              {                  Console.Error.WriteLine("Could not acquire EC lock");              }
