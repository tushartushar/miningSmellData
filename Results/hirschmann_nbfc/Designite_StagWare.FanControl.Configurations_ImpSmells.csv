Implementation smell,Namespace,Class,File,Method,Description
Complex Method,StagWare.ExtensionMethods,StringExtensionMethods,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\ExtensionMethods\StringExtensionMethods.cs,GetLongestCommonSubstrings,Cyclomatic complexity of the method is 8
Long Identifier,StagWare.FanControl.Configurations,FanControlConfigV2,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\FanControlConfigV2.cs,,The length of the parameter AdjustFanControlModeDescription is 31.
Long Statement,StagWare.FanControl.Configurations.Validation.Rules,UpThresholdMayNotBeLowerThanDownThreshold,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\Validation\Rules\UpThresholdMayNotBeLowerThanDownThreshold.cs,Validate,The length of the statement  "                    v.Reason = $"At least one up-threshold ({t.UpThreshold}) is less than its corresponding down-threshold ({t.DownThreshold})"; " is 124.
Empty Catch Block,StagWare.Configurations,ConfigManager<T>,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\ConfigManager.cs,LoadConfig,The method has an empty catch block.
Magic Number,StagWare.ExtensionMethods,StringExtensionMethods,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\ExtensionMethods\StringExtensionMethods.cs,GetLongestCommonSubstrings,The following statement contains a magic number: var lookup = new int[2][] { new int[minString.Length]' new int[minString.Length] };
Magic Number,StagWare.ExtensionMethods,StringExtensionMethods,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\ExtensionMethods\StringExtensionMethods.cs,GetLongestCommonSubstrings,The following statement contains a magic number: for(int i = 0; i < maxString.Length; i++)              {                  int rowIdx = i % 2;                    for(int j = 0; j < minString.Length; j++)                  {                      if(maxString[i] == minString[j])                      {                          if ((i == 0) || (j == 0))                          {                              lookup[rowIdx][j] = 1;                          }                          else                          {                              lookup[rowIdx][j] = lookup[(rowIdx + 1) % 2][j - 1] + 1;                          }                            if(lookup[rowIdx][j] > substrLength)                          {                              substrLength = lookup[rowIdx][j];                              substrEndIndices.Clear();                              substrEndIndices.Add(i);                          }                          else if(lookup[rowIdx][j] == substrLength)                          {                              substrEndIndices.Add(i);                          }                      }                      else                      {                          lookup[rowIdx][j] = 0;                      }                  }              }
Magic Number,StagWare.ExtensionMethods,StringExtensionMethods,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\ExtensionMethods\StringExtensionMethods.cs,GetLongestCommonSubstrings,The following statement contains a magic number: for(int i = 0; i < maxString.Length; i++)              {                  int rowIdx = i % 2;                    for(int j = 0; j < minString.Length; j++)                  {                      if(maxString[i] == minString[j])                      {                          if ((i == 0) || (j == 0))                          {                              lookup[rowIdx][j] = 1;                          }                          else                          {                              lookup[rowIdx][j] = lookup[(rowIdx + 1) % 2][j - 1] + 1;                          }                            if(lookup[rowIdx][j] > substrLength)                          {                              substrLength = lookup[rowIdx][j];                              substrEndIndices.Clear();                              substrEndIndices.Add(i);                          }                          else if(lookup[rowIdx][j] == substrLength)                          {                              substrEndIndices.Add(i);                          }                      }                      else                      {                          lookup[rowIdx][j] = 0;                      }                  }              }
Magic Number,StagWare.FanControl.Configurations,FanControlConfigManager,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\FanControlConfigManager.cs,GetSimilarityIndex,The following statement contains a magic number: foreach (string s1 in modelName1.Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries))              {                  double maxSimilarity = 0;                    foreach (string s2 in modelName2.Split(new[] { ' ' }' StringSplitOptions.RemoveEmptyEntries))                  {                      int lcsLength = s1.GetLongestCommonSubstring(s2).Length;                        if (lcsLength < 2)                      {                          continue;                      }                        double similarity = (double)lcsLength / Math.Max(s1.Length' s2.Length);                      maxSimilarity = Math.Max(maxSimilarity' similarity);                  }                    result += maxSimilarity;              }
Magic Number,StagWare.FanControl.Configurations,FanControlConfig,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\FanControlConfig.cs,FanControlConfig,The following statement contains a magic number: EcPollInterval = 3000;
Magic Number,StagWare.FanControl.Configurations,FanControlConfigV2,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\FanControlConfigV2.cs,FanControlConfigV2,The following statement contains a magic number: this.CriticalTemperature = 75;
Magic Number,StagWare.FanControl.Configurations,FanControlConfigV2,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\FanControlConfigV2.cs,FanControlConfigV2,The following statement contains a magic number: this.EcPollInterval = 3000;
Magic Number,StagWare.FanControl.Configurations.Validation.Rules,MaxFanSpeedThresholdRequired,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\Validation\Rules\MaxFanSpeedThresholdRequired.cs,Validate,The following statement contains a magic number: foreach (FanConfiguration cfg in item.FanConfigurations)              {                  i++;                    // ignore empty thresholds' because in this case the defaults will be applied                  if (cfg.TemperatureThresholds == null || cfg.TemperatureThresholds.Count == 0)                  {                      continue;                  }                    if (!cfg.TemperatureThresholds.Any(x => x.FanSpeed == 100))                  {                      string fanName = "Fan #" + i;                        if (!string.IsNullOrWhiteSpace(cfg.FanDisplayName))                      {                          fanName += $" ({cfg.FanDisplayName})";                      }                        v.Result = ValidationResult.Error;                      v.Reason = "There is no threshold with a fan speed of 100: " + fanName;                      return v;                  }              }
Magic Number,StagWare.FanControl.Configurations.Validation.Rules,UpThresholdsMustBeLowerThanCriticalTemperature,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\Validation\Rules\UpThresholdsMustBeLowerThanCriticalTemperature.cs,Validate,The following statement contains a magic number: foreach (var cfg in item.FanConfigurations)              {                  var threshold = cfg.TemperatureThresholds?.FirstOrDefault(x => x.UpThreshold >= item.CriticalTemperature);                    if (threshold != null)                  {                      v.Result = ValidationResult.Error;                      v.Reason = "At least one up-threshold is higher than or equal to the critical temperature: " + threshold.UpThreshold;                      return v;                  }                    threshold = cfg.TemperatureThresholds?.FirstOrDefault(x => x.UpThreshold >= (item.CriticalTemperature - 5));                    if (threshold != null)                  {                      v.Result = ValidationResult.Warning;                      v.Reason = "At least one up-threshold is less than 5 degrees below the critical temperature: " + threshold.UpThreshold;                      return v;                  }              }
Missing Default,StagWare.FanControl.Configurations.Validation,Validator<T>,C:\repos\hirschmann_nbfc\Core\StagWare.Configurations\Validation\Validator.cs,Validate,The following switch statement is missing a default case: switch (validation.Result)                  {                      case ValidationResult.Success:                          summary.Passed.Add(validation);                          break;                        case ValidationResult.Warning:                          summary.Warnings.Add(validation);                          if (failOnWarnings) summary.Success = false;                          break;                        case ValidationResult.Error:                          summary.Failed.Add(validation);                          summary.Success = false;                          break;                  }
