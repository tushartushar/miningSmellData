Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Dota2Stats.GameStats,StatsFetcher,C:\repos\tdhowe_Dota2Stats\Dota2Stats\GameStats\StatsFetcher.cs,Fetch,The method has 6 parameters.
Long Statement,Dota2Stats,SteamIDWindow,C:\repos\tdhowe_Dota2Stats\Dota2Stats\SteamIDWindow.cs,button_Find_Click,The length of the statement  "		/* get the lines with the image files and nicknames from the http result */List<String> imageLines = new List<string> (responseString.Split (new string[] { " is 155.
Long Statement,Dota2Stats,SteamIDWindow,C:\repos\tdhowe_Dota2Stats\Dota2Stats\SteamIDWindow.cs,button_Find_Click,The length of the statement  "			MessageBox.Show ("Image count differs from Name count"' "An Error Has Occurred"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 125.
Long Statement,Dota2Stats,SteamIDWindow,C:\repos\tdhowe_Dota2Stats\Dota2Stats\SteamIDWindow.cs,button_Find_Click,The length of the statement  "			/* populate the listview with the lines */Match accountidMatch = Regex.Match (imageLine' "http://steamcommunity.com/(\\S+)\""); " is 127.
Long Statement,Dota2Stats,MainWindow,C:\repos\tdhowe_Dota2Stats\Dota2Stats\MainWindow.cs,InitializeWindowVariables,The length of the statement  "	/* add each property of a playergamestats object to the objectlistview */foreach (PropertyInfo pi in typeof(PlayerGameStats).GetProperties ()) { " is 144.
Long Statement,Dota2Stats,MainWindow,C:\repos\tdhowe_Dota2Stats\Dota2Stats\MainWindow.cs,statsFetcher_StatsCompleteEvent,The length of the statement  "			MessageBox.Show ("No results were found for these settings"' "No Results"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 125.
Long Statement,Dota2Stats,MainWindow,C:\repos\tdhowe_Dota2Stats\Dota2Stats\MainWindow.cs,parseSteamID,The length of the statement  "		/* this is a custom id url.  We are going to have to request the account id */VanityURLResult vur = apiEngine.ResolveVanityURL (id.Replace ("id/"' "")); " is 152.
Long Statement,Dota2Stats,MainWindow,C:\repos\tdhowe_Dota2Stats\Dota2Stats\MainWindow.cs,backgroundWorker_DoWork,The length of the statement  "			MessageBox.Show ("Invalid Steam Account ID.  Use the button above to determine your 64-bit Steam Account ID"' "Invalid ID"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 174.
Magic Number,Dota2Stats.GameStats,GameStats,C:\repos\tdhowe_Dota2Stats\Dota2Stats\GameStats\GameStats.cs,GameStats,The following statement contains a magic number: this.GameLength = String.Format ("{0:d2}:{1:d2}"' (m.Duration / 60)' (m.Duration % 60));  
Magic Number,Dota2Stats.GameStats,GameStats,C:\repos\tdhowe_Dota2Stats\Dota2Stats\GameStats\GameStats.cs,GameStats,The following statement contains a magic number: this.GameLength = String.Format ("{0:d2}:{1:d2}"' (m.Duration / 60)' (m.Duration % 60));  
Magic Number,Dota2Stats.GameStats,PlayerGameStats,C:\repos\tdhowe_Dota2Stats\Dota2Stats\GameStats\PlayerGameStats.cs,getRating,The following statement contains a magic number: return 100;  
Magic Number,Dota2Stats.GameStats,StatsFetcher,C:\repos\tdhowe_Dota2Stats\Dota2Stats\GameStats\StatsFetcher.cs,Fetch,The following statement contains a magic number: while ((total_matches < num_matches) && (num_tries > 0)) {  	hist = engine.GetMatchHistory (account_id' last_match_id' (ushort)(total_matches - num_matches)' 0);  	if (hist != null) {  		foreach (Match m in hist.Matches) {  			MatchDetails currentMatch = engine.GetMatchDetails (m.MatchID);  			MatchDetailsPlayer p = currentMatch.Players.Where (player => player.AccountID == account_id).FirstOrDefault ();  			if ((p != null) && (types.Contains (currentMatch.LobbyType))) {  				PlayerGameDiscoveredEvent (this' new PlayerGameStats (currentMatch' p));  				total_matches++;  				/* we found a match' there might be more.  Give us some more tries! */num_tries = num_tries + 5;  			}  			else {  				/* match was not found.  Decrement number of tries */num_tries--;  			}  		}  		last_match_id = hist.Matches.OrderByDescending (match => match.MatchID).LastOrDefault ().MatchID - 1;  	}  	if (last_match_id == 0)  		break;  }  
Magic Number,Dota2Stats.GameStats,StatsFetcher,C:\repos\tdhowe_Dota2Stats\Dota2Stats\GameStats\StatsFetcher.cs,Fetch,The following statement contains a magic number: if (hist != null) {  	foreach (Match m in hist.Matches) {  		MatchDetails currentMatch = engine.GetMatchDetails (m.MatchID);  		MatchDetailsPlayer p = currentMatch.Players.Where (player => player.AccountID == account_id).FirstOrDefault ();  		if ((p != null) && (types.Contains (currentMatch.LobbyType))) {  			PlayerGameDiscoveredEvent (this' new PlayerGameStats (currentMatch' p));  			total_matches++;  			/* we found a match' there might be more.  Give us some more tries! */num_tries = num_tries + 5;  		}  		else {  			/* match was not found.  Decrement number of tries */num_tries--;  		}  	}  	last_match_id = hist.Matches.OrderByDescending (match => match.MatchID).LastOrDefault ().MatchID - 1;  }  
Magic Number,Dota2Stats.GameStats,StatsFetcher,C:\repos\tdhowe_Dota2Stats\Dota2Stats\GameStats\StatsFetcher.cs,Fetch,The following statement contains a magic number: foreach (Match m in hist.Matches) {  	MatchDetails currentMatch = engine.GetMatchDetails (m.MatchID);  	MatchDetailsPlayer p = currentMatch.Players.Where (player => player.AccountID == account_id).FirstOrDefault ();  	if ((p != null) && (types.Contains (currentMatch.LobbyType))) {  		PlayerGameDiscoveredEvent (this' new PlayerGameStats (currentMatch' p));  		total_matches++;  		/* we found a match' there might be more.  Give us some more tries! */num_tries = num_tries + 5;  	}  	else {  		/* match was not found.  Decrement number of tries */num_tries--;  	}  }  
Magic Number,Dota2Stats.GameStats,StatsFetcher,C:\repos\tdhowe_Dota2Stats\Dota2Stats\GameStats\StatsFetcher.cs,Fetch,The following statement contains a magic number: if ((p != null) && (types.Contains (currentMatch.LobbyType))) {  	PlayerGameDiscoveredEvent (this' new PlayerGameStats (currentMatch' p));  	total_matches++;  	/* we found a match' there might be more.  Give us some more tries! */num_tries = num_tries + 5;  }  else {  	/* match was not found.  Decrement number of tries */num_tries--;  }  
Magic Number,Dota2Stats.GameStats,StatsFetcher,C:\repos\tdhowe_Dota2Stats\Dota2Stats\GameStats\StatsFetcher.cs,Fetch,The following statement contains a magic number: num_tries = num_tries + 5;  
Magic Number,Dota2Stats,SteamIDWindow,C:\repos\tdhowe_Dota2Stats\Dota2Stats\SteamIDWindow.cs,button_Find_Click,The following statement contains a magic number: using (Stream stream = response.GetResponseStream ()) {  	StreamReader reader = new StreamReader (stream' Encoding.UTF8);  	String responseString = reader.ReadToEnd ();  	/* get the lines with the image files and nicknames from the http result */List<String> imageLines = new List<string> (responseString.Split (new string[] {  		"\r\n"'  		"\n"  	}' StringSplitOptions.RemoveEmptyEntries).Where (line => line.Contains (imageSearchString)));  	List<String> nameLines = new List<string> (responseString.Split (new string[] {  		"\r\n"'  		"\n"  	}' StringSplitOptions.RemoveEmptyEntries).Where (line => line.Contains (currentNameSearchString)));  	ImageList imageList = new ImageList ();  	imageList.ImageSize = new Size (64' 64);  	imageList.ColorDepth = ColorDepth.Depth32Bit;  	if (imageLines.Count != nameLines.Count) {  		MessageBox.Show ("Image count differs from Name count"' "An Error Has Occurred"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		return;  	}  	for (int i = 0; i < imageLines.Count; i++) {  		string imageLine = imageLines [i];  		/* populate the listview with the lines */Match accountidMatch = Regex.Match (imageLine' "http://steamcommunity.com/(\\S+)\"");  		Match imageMatch = Regex.Match (imageLine' "img src=\"(\\S+)\"");  		imageList.Images.Add (accountidMatch.Groups [1].Value' DownloadImage (imageMatch.Groups [1].Value));  	}  	listView_Results.LargeImageList = imageList;  	for (int i = 0; i < imageList.Images.Count; i++) {  		ListViewItem lvi = new ListViewItem ();  		string account = imageList.Images.Keys [i];  		string displayname = Regex.Match (nameLines [i]' "\">(.+)<").Groups [1].Value;  		lvi.ImageKey = account;  		lvi.Text = displayname;  		listView_Results.Items.Add (lvi);  	}  	if (listView_Results.Items.Count == 0) {  		MessageBox.Show ("No Results Found"' "Results"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  	}  	this.Cursor = Cursors.Default;  	statusBar.Text = "Ready";  }  
Magic Number,Dota2Stats,SteamIDWindow,C:\repos\tdhowe_Dota2Stats\Dota2Stats\SteamIDWindow.cs,button_Find_Click,The following statement contains a magic number: using (Stream stream = response.GetResponseStream ()) {  	StreamReader reader = new StreamReader (stream' Encoding.UTF8);  	String responseString = reader.ReadToEnd ();  	/* get the lines with the image files and nicknames from the http result */List<String> imageLines = new List<string> (responseString.Split (new string[] {  		"\r\n"'  		"\n"  	}' StringSplitOptions.RemoveEmptyEntries).Where (line => line.Contains (imageSearchString)));  	List<String> nameLines = new List<string> (responseString.Split (new string[] {  		"\r\n"'  		"\n"  	}' StringSplitOptions.RemoveEmptyEntries).Where (line => line.Contains (currentNameSearchString)));  	ImageList imageList = new ImageList ();  	imageList.ImageSize = new Size (64' 64);  	imageList.ColorDepth = ColorDepth.Depth32Bit;  	if (imageLines.Count != nameLines.Count) {  		MessageBox.Show ("Image count differs from Name count"' "An Error Has Occurred"' MessageBoxButtons.OK' MessageBoxIcon.Error);  		return;  	}  	for (int i = 0; i < imageLines.Count; i++) {  		string imageLine = imageLines [i];  		/* populate the listview with the lines */Match accountidMatch = Regex.Match (imageLine' "http://steamcommunity.com/(\\S+)\"");  		Match imageMatch = Regex.Match (imageLine' "img src=\"(\\S+)\"");  		imageList.Images.Add (accountidMatch.Groups [1].Value' DownloadImage (imageMatch.Groups [1].Value));  	}  	listView_Results.LargeImageList = imageList;  	for (int i = 0; i < imageList.Images.Count; i++) {  		ListViewItem lvi = new ListViewItem ();  		string account = imageList.Images.Keys [i];  		string displayname = Regex.Match (nameLines [i]' "\">(.+)<").Groups [1].Value;  		lvi.ImageKey = account;  		lvi.Text = displayname;  		listView_Results.Items.Add (lvi);  	}  	if (listView_Results.Items.Count == 0) {  		MessageBox.Show ("No Results Found"' "Results"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation);  	}  	this.Cursor = Cursors.Default;  	statusBar.Text = "Ready";  }  
Magic Number,Dota2Stats,SteamIDWindow,C:\repos\tdhowe_Dota2Stats\Dota2Stats\SteamIDWindow.cs,button_Find_Click,The following statement contains a magic number: imageList.ImageSize = new Size (64' 64);  
Magic Number,Dota2Stats,SteamIDWindow,C:\repos\tdhowe_Dota2Stats\Dota2Stats\SteamIDWindow.cs,button_Find_Click,The following statement contains a magic number: imageList.ImageSize = new Size (64' 64);  
