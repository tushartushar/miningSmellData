Implementation smell,Namespace,Class,File,Method,Description
Long Method,Articulate,BlogMlImporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlImporter.cs,ImportPosts,The method has 108 lines of code.
Complex Method,Articulate,BlogMlExporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlExporter.cs,Export,Cyclomatic complexity of the method is 10
Complex Method,Articulate,BlogMlImporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlImporter.cs,ImportPosts,Cyclomatic complexity of the method is 16
Complex Method,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,Cyclomatic complexity of the method is 8
Complex Method,Articulate,MetaWeblogHandler,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogHandler.cs,AddOrUpdateContent,Cyclomatic complexity of the method is 8
Complex Method,Articulate.Controllers,MardownEditorApiController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\MardownEditorApiController.cs,PostNew,Cyclomatic complexity of the method is 15
Long Parameter List,Articulate,BlogMlImporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlImporter.cs,Import,The method has 8 parameters. Parameters: userId' fileName' blogRootNode' overwrite' regexMatch' regexReplace' publishAll' exportDisqusXml
Long Parameter List,Articulate,BlogMlImporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlImporter.cs,ImportPosts,The method has 11 parameters. Parameters: userId' xdoc' rootNode' posts' authors' categories' authorIdsToName' overwrite' regexMatch' regexReplace' publishAll
Long Parameter List,Articulate,DefaultArticulateSearcher,C:\repos\Shandem_Articulate\src\Articulate\DefaultArticulateSearcher.cs,Search,The method has 6 parameters. Parameters: term' provider' blogArchiveNodeId' pageSize' pageIndex' totalResults
Long Parameter List,Articulate,IArticulateSearcher,C:\repos\Shandem_Articulate\src\Articulate\IArticulateSearcher.cs,Search,The method has 6 parameters. Parameters: term' provider' blogArchiveNodeId' pageSize' pageIndex' totalResults
Long Parameter List,Articulate,DisqusImporter,C:\repos\Shandem_Articulate\src\Articulate\DisqusImporter.cs,Import,The method has 6 parameters. Parameters: postId' comment' user' email' userUrl' date
Long Parameter List,Articulate,HtmlHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\HtmlHelperExtensions.cs,ThemedPartial,The method has 5 parameters. Parameters: html' model' partialName' viewModel' viewData
Long Parameter List,Articulate,HtmlHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\HtmlHelperExtensions.cs,TagCloud,The method has 5 parameters. Parameters: html' model' tagLink' maxWeight' maxResults
Long Parameter List,Articulate,HtmlHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\HtmlHelperExtensions.cs,Table,The method has 5 parameters. Parameters: html' collection' headers' cssClasses' cellTemplates
Long Parameter List,Articulate,HtmlHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\HtmlHelperExtensions.cs,Table,The method has 6 parameters. Parameters: html' collection' htmlAttributes' headers' cssClasses' cellTemplates
Long Parameter List,Articulate,MetaWeblogHandler,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogHandler.cs,AddPost,The method has 5 parameters. Parameters: blogid' username' password' post' publish
Long Parameter List,Articulate,MetaWeblogHandler,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogHandler.cs,UpdatePost,The method has 5 parameters. Parameters: postid' username' password' post' publish
Long Parameter List,Articulate,MetaWeblogHandler,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogHandler.cs,DeletePost,The method has 5 parameters. Parameters: key' postid' username' password' publish
Long Parameter List,Articulate,MetaWeblogHandler,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogHandler.cs,AddOrUpdateContent,The method has 5 parameters. Parameters: content' post' user' publish' extractFirstImageAsProperty
Long Parameter List,Articulate,MetaWeblogRouteConstraint,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' parameterName' values' routeDirection
Long Parameter List,Articulate,RouteCollectionExtensions,C:\repos\Shandem_Articulate\src\Articulate\RouteCollectionExtensions.cs,MapUmbracoRoute,The method has 7 parameters. Parameters: routes' name' url' defaults' virtualNodeHandler' constraints' namespaces
Long Parameter List,Articulate,TagsOrCategoryPathRouteConstraint,C:\repos\Shandem_Articulate\src\Articulate\TagsOrCategoryPathRouteConstraint.cs,Match,The method has 5 parameters. Parameters: httpContext' route' parameterName' values' routeDirection
Long Parameter List,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByTag,The method has 7 parameters. Parameters: helper' masterModel' tag' tagGroup' baseUrlName' page' pageSize
Long Parameter List,Articulate.Controllers,ListControllerBase,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ListControllerBase.cs,GetPagedListView,The method has 5 parameters. Parameters: masterModel' pageNode' listItems' totalPosts' p
Long Parameter List,Articulate.Models,PagerModel,C:\repos\Shandem_Articulate\src\Articulate\Models\PagerModel.cs,PagerModel,The method has 5 parameters. Parameters: pageSize' currentIndex' totalPages' nextUrl' previousUrl
Long Parameter List,Articulate.Models.MetaWeblog,IBloggerMetaWeblog,C:\repos\Shandem_Articulate\src\Articulate\Models\MetaWeblog\IBloggerMetaWeblog.cs,DeletePost,The method has 5 parameters. Parameters: key' postid' username' password' publish
Long Parameter List,Articulate.Models.MetaWeblog,IMetaWeblog,C:\repos\Shandem_Articulate\src\Articulate\Models\MetaWeblog\IMetaWeblog.cs,AddPost,The method has 5 parameters. Parameters: blogid' username' password' post' publish
Long Parameter List,Articulate.Models.MetaWeblog,IMetaWeblog,C:\repos\Shandem_Articulate\src\Articulate\Models\MetaWeblog\IMetaWeblog.cs,UpdatePost,The method has 5 parameters. Parameters: postid' username' password' post' publish
Long Identifier,Articulate,ArticulateRoutes,C:\repos\Shandem_Articulate\src\Articulate\ArticulateRoutes.cs,MapRoutes,The length of the parameter articulateNodesGroupedByUriPath is 31.
Long Identifier,Articulate,PathHelper,C:\repos\Shandem_Articulate\src\Articulate\PathHelper.cs,,The length of the parameter VirtualThemePartialViewPathToken is 32.
Long Statement,Articulate,ArticulateTagsRouteHandler,C:\repos\Shandem_Articulate\src\Articulate\ArticulateTagsRouteHandler.cs,FindContent,The length of the statement  "            var tag = HttpUtility.UrlDecode(requestContext.RouteData.Values["tag"] == null ? null : requestContext.RouteData.Values["tag"].ToString()); " is 139.
Long Statement,Articulate,ArticulateTagsRouteHandler,C:\repos\Shandem_Articulate\src\Articulate\ArticulateTagsRouteHandler.cs,FindContent,The length of the statement  "            var pageName = actionName.InvariantEquals(urlAndPageName.TagsUrlName) ? urlAndPageName.TagsPageName : urlAndPageName.CategoriesPageName; " is 136.
Long Statement,Articulate,BlogMlExporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlExporter.cs,Export,The length of the statement  "                throw new InvalidOperationException("Articulate is not installed properly' the ArticulateRichText doc type could not be found"); " is 128.
Long Statement,Articulate,BlogMlExporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlExporter.cs,Export,The length of the statement  "            var categoryDataType = _applicationContext.Services.DataTypeService.GetDataTypeDefinitionByName("Articulate Categories"); " is 121.
Long Statement,Articulate,BlogMlExporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlExporter.cs,Export,The length of the statement  "            var categoryDtPreVals = _applicationContext.Services.DataTypeService.GetPreValuesCollectionByDataTypeId(categoryDataType.Id); " is 125.
Long Statement,Articulate,BlogMlExporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlExporter.cs,AddBlogPosts,The length of the statement  "                posts = _applicationContext.Services.ContentService.GetPagedChildren(archiveNode.Id' pageIndex' pageSize' out total' "createDate").ToArray(); " is 141.
Long Statement,Articulate,BlogMlExporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlExporter.cs,AddBlogPosts,The length of the statement  "                    var author = blogMlDoc.Authors.FirstOrDefault(x => x.Title != null && x.Title.Content.InvariantEquals(child.GetValue<string>("author"))); " is 137.
Long Statement,Articulate,BlogMlImporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlImporter.cs,Import,The length of the statement  "                    var imported = await ImportPosts(userId' xdoc' root' document.Posts' document.Authors.ToArray()' document.Categories.ToArray()' authorIdsToName' overwrite' regexMatch' regexReplace' publishAll); " is 194.
Long Statement,Articulate,BlogMlImporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlImporter.cs,ImportAuthors,The length of the statement  "                throw new InvalidOperationException("Articulate is not installed properly' the ArticulateAuthor doc type could not be found"); " is 126.
Long Statement,Articulate,BlogMlImporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlImporter.cs,ImportPosts,The length of the statement  "                throw new InvalidOperationException("Articulate is not installed properly' the ArticulateRichText doc type could not be found"); " is 128.
Long Statement,Articulate,BlogMlImporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlImporter.cs,ImportTags,The length of the statement  "            var tags = xmlPost.Descendants(XName.Get("tag"' xdoc.Root.Name.NamespaceName)).Select(x => (string)x.Attribute("ref")).ToArray(); " is 129.
Long Statement,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,The length of the statement  "                route = contentRequest.Domain.RootNodeId.ToString() + DomainHelper.PathRelativeToDomain(contentRequest.DomainUri' contentRequest.Uri.GetAbsolutePathDecoded()); " is 159.
Long Statement,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,The length of the statement  "            // This simple logic should do the trick: basically if I find an url with more than 4 segments (the 3 date parts and the slug) " is 126.
Long Statement,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,The length of the statement  "                var stringDate = contentRequest.Uri.Segments[segmentLength - 4]+ contentRequest.Uri.Segments[segmentLength - 3]+ contentRequest.Uri.Segments[segmentLength - 2].TrimEnd("/"); " is 173.
Long Statement,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,The length of the statement  "                // If by chance something matches the format pattern I check again if there is sucn a node and if it's an articulate post " is 121.
Long Statement,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,The length of the statement  "                if (node == null || (node.DocumentTypeAlias!= "ArticulateRichText" && node.DocumentTypeAlias != "ArticulateMarkdown")) return false; " is 132.
Long Statement,Articulate,DateFormattedUrlProvider,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedUrlProvider.cs,GetUrl,The length of the statement  "            if (content != null && (content.DocumentTypeAlias == "ArticulateRichText" || content.DocumentTypeAlias == "ArticulateMarkdown") && content.Parent != null) " is 154.
Long Statement,Articulate,DisqusImporter,C:\repos\Shandem_Articulate\src\Articulate\DisqusImporter.cs,Import,The length of the statement  "            //TODO: This should work but everyone is having a problem with it' apparently the public key listed in apps isn't the one " is 121.
Long Statement,Articulate,HtmlHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\HtmlHelperExtensions.cs,SocialMetaTags,The length of the statement  "                openGraphImage.Attributes["content"] = PathHelper.GetDomain(html.ViewContext.RequestContext.HttpContext.Request.Url) + model.CroppedPostImageUrl; " is 145.
Long Statement,Articulate,HtmlHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\HtmlHelperExtensions.cs,SocialMetaTags,The length of the statement  "                openGraphDesc.Attributes["content"] = model.SocialMetaDescription.IsNullOrWhiteSpace() ? model.Excerpt : model.SocialMetaDescription; " is 133.
Long Statement,Articulate,HtmlHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\HtmlHelperExtensions.cs,RenderOpenSearch,The length of the statement  "            var tag = $@"<link rel=""search"" type=""application/opensearchdescription+xml"" href=""{openSearchUrl}"" title=""Search {model.RootBlogNode.Name}"" >"; " is 152.
Long Statement,Articulate,HtmlHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\HtmlHelperExtensions.cs,GoogleAnalyticsTracking,The length of the statement  "  ga('create'' '" + model.RootBlogNode.GetPropertyValue<string>("googleAnalyticsId") + @"'' '" + model.RootBlogNode.GetPropertyValue<string>("googleAnalyticsName") + @"'); " is 169.
Long Statement,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,InstallContent,The length of the statement  "            root.SetValue("blogLogo"' @"{'focalPoint': {'left': 0.51648351648351654''top': 0.43333333333333335}''src': '/media/articulate/default/capture3.png'''crops': []}"); " is 163.
Long Statement,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,InstallContent,The length of the statement  "            root.SetValue("blogBanner"' @"{'focalPoint': {'left': 0.35''top': 0.29588014981273408}''src': '/media/articulate/default/7406981406_1aff1cb527_o.jpg'''crops': []}"); " is 165.
Long Statement,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,InstallContent,The length of the statement  "            author.SetValue("authorImage"' @"{'focalPoint': {'left': 0.5''top': 0.5}''src': '/media/articulate/default/random-mask.jpg'''crops': []}"); " is 139.
Long Statement,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,InstallContent,The length of the statement  "            post.SetValue("excerpt"' "Hi! Welcome to blogging with Articulate :) This is a fully functional blog engine supporting many features."); " is 136.
Long Statement,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,InstallContent,The length of the statement  "            post.SetValue("socialDescription"' "This article is the bomb!!! Write a description that is more suitable for social sharing than a standard meta description."); " is 161.
Long Statement,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,InstallContent,The length of the statement  "It comes with 4 themes which have different features enabled. You can easily change themes on the root Articulate node on the style tab. Themes are super easy to create and in fact the 4 themes shipped with Articulate are MIT licensed themes originally built for the Ghost blogging platform. " is 291.
Long Statement,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,InstallContent,The length of the statement  "Live Writer integration is fully functional' to configure Live Writer just use the URL of the Articulate root node and use your Umbraco username/password. " is 154.
Long Statement,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,InstallContent,The length of the statement  "You can post directly from your mobile (including images and photos). This editor can be found at the path of ""/a-new"". As an example if Articulate is your root node in Umbraco' then the URL would be: " is 202.
Long Statement,Articulate,MetaWeblogHandler,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogHandler.cs,GetUsersMembershipProvider,The length of the statement  "                throw new InvalidOperationException("No membership provider found with name " + UmbracoConfig.For.UmbracoSettings().Providers.DefaultBackOfficeUserProvider); " is 157.
Long Statement,Articulate,PathHelper,C:\repos\Shandem_Articulate\src\Articulate\PathHelper.cs,GetThemePath,The length of the statement  "                throw new InvalidOperationException("No theme has been set for this Articulate root' republish the root with a selected theme"); " is 128.
Long Statement,Articulate,PathHelper,C:\repos\Shandem_Articulate\src\Articulate\PathHelper.cs,GetThemeViewPath,The length of the statement  "                throw new InvalidOperationException("No theme has been set for this Articulate root' republish the root with a selected theme"); " is 128.
Long Statement,Articulate,PathHelper,C:\repos\Shandem_Articulate\src\Articulate\PathHelper.cs,GetThemePartialViewPath,The length of the statement  "                throw new InvalidOperationException("No theme has been set for this Articulate root' republish the root with a selected theme"); " is 128.
Long Statement,Articulate,ReflectionHelper,C:\repos\Shandem_Articulate\src\Articulate\ReflectionHelper.cs,GetPropertyInfo,The length of the statement  "                    propInfo = filter(type.GetProperties(BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Static) " is 128.
Long Statement,Articulate,TagsOrCategoryPathRouteConstraint,C:\repos\Shandem_Articulate\src\Articulate\TagsOrCategoryPathRouteConstraint.cs,Match,The length of the statement  "                    : httpContext.Request.Url.Host.InvariantEquals("localhost") && !UmbracoConfig.For.UmbracoSettings().RequestHandler.UseDomainPrefixes " is 132.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetAllCategories,The length of the statement  "            //TODO: We want to use the core for this but it's not available' this needs to be implemented: http://issues.umbraco.org/issue/U4-9290 " is 134.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetTagQuery,The length of the statement  "                .Where("umbracoNode." + sqlSyntax.GetQuotedColumnName("path") + " LIKE @path"' new { path = masterModel.RootBlogNode.Path + "'%" }); " is 132.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByTagQueryForPaging,The length of the statement  "                //must only return rows with the publishedDate property data so we only get one row and so we can sort on `cmsPropertyData.dataDate` which will be the publishedDate " is 164.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByTagQueryForPaging,The length of the statement  "                .Where("umbracoNode." + sqlSyntax.GetQuotedColumnName("path") + " LIKE @path"' new { path = masterModel.RootBlogNode.Path + "'%" }); " is 132.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByTags,The length of the statement  "            //TODO: We want to use the core for this but it's not available' this needs to be implemented: http://issues.umbraco.org/issue/U4-9290 " is 134.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByTag,The length of the statement  "            //TODO: We want to use the core for this but it's not available' this needs to be implemented: http://issues.umbraco.org/issue/U4-9290 " is 134.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByTag,The length of the statement  "                    sqlTags.Where("CAST(cmsTags.tag AS NVARCHAR(200)) = @tagName AND cmsTags." + sqlSyntax.GetQuotedColumnName("group") + " = @tagGroup"' new " is 137.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByTag,The length of the statement  "                var publishedDatePropertyTypeId = appContext.DatabaseContext.Database.ExecuteScalar<int>(@"SELECT cmsPropertyType.id FROM cmsContentType " is 136.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByTag,The length of the statement  "WHERE cmsContentType.alias = @contentTypeAlias AND cmsPropertyType.alias = @propertyTypeAlias"' new { contentTypeAlias = "ArticulatePost"' propertyTypeAlias = "publishedDate" }); " is 178.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByTag,The length of the statement  "                string.Concat(typeof(UmbracoHelperExtensions).Name' "GetContentByTag"' masterModel.RootBlogNode.Id' tagGroup' tag' page' pageSize)' " is 131.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByAuthor,The length of the statement  "                return xmlNode != null && string.Equals(xmlNode.Value' authorName.Replace("-"' " ")' StringComparison.InvariantCultureIgnoreCase); " is 130.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByAuthors,The length of the statement  "            //Children property of the AuthorModel is not used is a waste because as soon as we get the latest post date for an author it will " is 130.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByAuthors,The length of the statement  "                        postsWithAuthors[int.Parse(x.GetAttribute("id"' ""))] = Tuple.Create(xmlNode.Value' authors.First(a => a.Name == xmlNode.Value)); " is 129.
Long Statement,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByAuthors,The length of the statement  "                .Select(x => new AuthorModel(x' GetLazyAuthorPosts(x' lazyAuthorPosts)' pager' GetPostCount(helper' x.Name' listNodeIds))); " is 123.
Long Statement,Articulate,UmbracoEventHandler,C:\repos\Shandem_Articulate\src\Articulate\UmbracoEventHandler.cs,ContentService_Saving,The length of the statement  "                    .Where(c => c.ContentType.Alias.InvariantEquals("ArticulateRichText") || c.ContentType.Alias.InvariantEquals("ArticulateMarkdown"))) " is 132.
Long Statement,Articulate,UmbracoEventHandler,C:\repos\Shandem_Articulate\src\Articulate\UmbracoEventHandler.cs,ServerVariablesParser_Parsing,The length of the statement  "                {"articulateImportBaseUrl"' urlHelper.GetUmbracoApiServiceBaseUrl<ArticulateBlogImportController>(controller => controller.PostImportBlogMl(null))}' " is 148.
Long Statement,Articulate,UmbracoEventHandler,C:\repos\Shandem_Articulate\src\Articulate\UmbracoEventHandler.cs,ServerVariablesParser_Parsing,The length of the statement  "                {"articulateDataInstallerBaseUrl"' urlHelper.GetUmbracoApiServiceBaseUrl<ArticulateBlogDataInstallController>(controller => controller.PostInstall())}' " is 151.
Long Statement,Articulate,UmbracoEventHandler,C:\repos\Shandem_Articulate\src\Articulate\UmbracoEventHandler.cs,ServerVariablesParser_Parsing,The length of the statement  "                {"articulatePropertyEditorsBaseUrl"' urlHelper.GetUmbracoApiServiceBaseUrl<ArticulatePropertyEditorsController>(controller => controller.GetThemes())} " is 150.
Long Statement,Articulate,UmbracoEventHandler,C:\repos\Shandem_Articulate\src\Articulate\UmbracoEventHandler.cs,ServerVariablesParser_Parsing,The length of the statement  "                umbUrls["articulateThemeEditorApiBaseUrl"] = urlHelper.GetUmbracoApiServiceBaseUrl<ThemeEditorController>(controller => controller.GetByPath(null)); " is 148.
Long Statement,Articulate,UmbracoEventHandler,C:\repos\Shandem_Articulate\src\Articulate\UmbracoEventHandler.cs,ServerVariablesParser_Parsing,The length of the statement  "                    {"articulateThemeEditorApiBaseUrl"' urlHelper.GetUmbracoApiServiceBaseUrl<ThemeEditorController>(controller => controller.GetByPath(null))} " is 139.
Long Statement,Articulate,ArticulateVirtualNodeByIdRouteHandler,C:\repos\Shandem_Articulate\src\Articulate\ArticulateVirtualNodeByIdRouteHandler.cs,FindContent,The length of the statement  "                        LogHelper.Warn<ArticulateVirtualNodeByIdRouteHandler>("No entries found in hosts/IDs map with an empty Host value. Values: " + DebugHostIdsCollection()); " is 153.
Long Statement,Articulate,ArticulateVirtualNodeByIdRouteHandler,C:\repos\Shandem_Articulate\src\Articulate\ArticulateVirtualNodeByIdRouteHandler.cs,FindContent,The length of the statement  "                        LogHelper.Warn<ArticulateVirtualNodeByIdRouteHandler>("No entries found in hosts/IDs map with a Host value of " + requestContext.HttpContext.Request.Url.Host + ". Values: " + DebugHostIdsCollection()); " is 201.
Long Statement,Articulate,UrlHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UrlHelperExtensions.cs,ThemedAsset,The length of the statement  "            return VirtualPathUtility.ToAbsolute(PathHelper.GetThemePath(model)).EnsureEndsWith('/') + "assets/" + relativeAssetPath; " is 121.
Long Statement,Articulate.Controllers,ArticulateBlogImportController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ArticulateBlogImportController.cs,PostImportBlogMl,The length of the statement  "                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.InternalServerError' "Importing failed' see umbraco log for details")); " is 146.
Long Statement,Articulate.Controllers,ArticulateRssController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ArticulateRssController.cs,RenderTagsOrCategoriesRss,The length of the statement  "                throw new InvalidOperationException("The RenderModel.Content instance must be of type " + typeof(ArticulateVirtualPage)); " is 121.
Long Statement,Articulate.Controllers,FeedController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\FeedController.cs,RenderViewToString,The length of the statement  "                var viewContext = new ViewContext(controller.ControllerContext' viewResult.View' controller.ViewData' controller.TempData' sw); " is 127.
Long Statement,Articulate.Controllers,MardownEditorApiController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\MardownEditorApiController.cs,PostNew,The length of the statement  "                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.BadRequest' "The request was not formatted correctly and is missing the 'model' parameter")); " is 168.
Long Statement,Articulate.Controllers,MardownEditorApiController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\MardownEditorApiController.cs,PostNew,The length of the statement  "                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.Forbidden' "No Articulate node found with the specified id")); " is 137.
Long Statement,Articulate.Controllers,MardownEditorApiController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\MardownEditorApiController.cs,PostNew,The length of the statement  "                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.Forbidden' "No Articulate Archive node found for the specified id")); " is 144.
Long Statement,Articulate.Controllers,MardownEditorApiController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\MardownEditorApiController.cs,PostNew,The length of the statement  "                throw new HttpResponseException(Request.CreateErrorResponse(HttpStatusCode.Forbidden' "Cannot create content at this level")); " is 126.
Long Statement,Articulate.Controllers,MardownEditorApiController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\MardownEditorApiController.cs,CheckPermissions,The length of the statement  "                if (entityPermission == null || !entityPermission.AssignedPermissions.Contains(ch.ToString(CultureInfo.InvariantCulture))) " is 122.
Long Statement,Articulate.Controllers,OpenSearchController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\OpenSearchController.cs,Index,The length of the statement  "            //<OpenSearchDescription xmlns="http://a9.com/-/spec/opensearch/1.1/" xmlns:moz="http://www.mozilla.org/2006/browser/search/"> " is 126.
Long Statement,Articulate.Controllers,OpenSearchController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\OpenSearchController.cs,Index,The length of the statement  "            //  <Image width="16" height="16" type="image/x-icon">http://codeclimber.net.nz/App_Plugins/Articulate/Themes/PhantomV2/assets/img/favicon.ico</Image> " is 150.
Long Statement,Articulate.Controllers,ArticulateSearchController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ArticulateSearchController.cs,Search,The length of the statement  "                throw new InvalidOperationException("The RenderModel.Content instance must be of type " + typeof(ArticulateVirtualPage)); " is 121.
Long Statement,Articulate.Controllers,ArticulateSearchController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ArticulateSearchController.cs,Search,The length of the statement  "                var emptyList = new ListModel(searchPage' Enumerable.Empty<IPublishedContent>()' new PagerModel(masterModel.PageSize' 0' 0)); " is 125.
Long Statement,Articulate.Controllers,ArticulateSearchController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ArticulateSearchController.cs,Search,The length of the statement  "            var searchResult = ArticulateSearcher.Search(term' provider' masterModel.BlogArchiveNode.Id' masterModel.PageSize' p.Value - 1' out totalPosts); " is 144.
Long Statement,Articulate.Controllers,ArticulateTagsController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ArticulateTagsController.cs,RenderTagsOrCategories,The length of the statement  "                throw new InvalidOperationException("The RenderModel.Content instance must be of type " + typeof(ArticulateVirtualPage)); " is 121.
Long Statement,Articulate.Controllers,ArticulateTagsController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ArticulateTagsController.cs,RenderByTagOrCategory,The length of the statement  "                throw new InvalidOperationException("The RenderModel.Content instance must be of type " + typeof(ArticulateVirtualPage)); " is 121.
Long Statement,Articulate.Controllers,ThemeEditorController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ThemeEditorController.cs,PostCreateFile,The length of the statement  "            if (string.IsNullOrWhiteSpace(parentId)) throw new ArgumentException("Value cannot be null or whitespace."' "parentId"); " is 120.
Long Statement,Articulate.Controllers,ThemeEditorController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ThemeEditorController.cs,CreateOrUpdateFile,The length of the statement  "            display.VirtualPath = EnsureCorrectFileExtension(NormalizeVirtualPath(display.VirtualPath' PathHelper.VirtualThemePath)' expectedExtension); " is 140.
Long Statement,Articulate.Controllers,ThemeEditorController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ThemeEditorController.cs,CreateOrUpdateFile,The length of the statement  "            if (!Path.GetFileNameWithoutExtension(display.VirtualPath).InvariantEquals(Path.GetFileNameWithoutExtension(display.Name))) " is 123.
Long Statement,Articulate.Controllers,ThemeEditorController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ThemeEditorController.cs,GetByPath,The length of the statement  "            if (string.IsNullOrWhiteSpace(virtualPath)) throw new ArgumentException("Value cannot be null or whitespace."' nameof(virtualPath)); " is 132.
Long Statement,Articulate.Controllers,ThemeTreeController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ThemeTreeController.cs,GetMenuForNode,The length of the statement  "                menuItemCollection.Items.Add<RefreshNode' ActionRefresh>(Services.TextService.Localize($"actions/{ActionRefresh.Instance.Alias}")); " is 131.
Long Statement,Articulate.Controllers,ThemeTreeController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ThemeTreeController.cs,GetMenuForNode,The length of the statement  "            var path = string.IsNullOrEmpty(id) || id == Constants.System.Root.ToString() ? "" : HttpUtility.UrlDecode(id).TrimStart("/"); " is 126.
Long Statement,Articulate.Controllers,ThemeTreeController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ThemeTreeController.cs,GetMenuForNode,The length of the statement  "                menuItemCollection.Items.Add<RefreshNode' ActionRefresh>(Services.TextService.Localize($"actions/{ActionRefresh.Instance.Alias}")); " is 131.
Long Statement,Articulate.Controllers,TagsControllerActionInvoker,C:\repos\Shandem_Articulate\src\Articulate\Controllers\TagsControllerActionInvoker.cs,GetActionDescriptor,The length of the statement  "            //check if the action name matches' it won't if the user has changed the action name in umbraco' if this occurs we need to refresh the cache " is 140.
Long Statement,Articulate.Syndication,RssResult,C:\repos\Shandem_Articulate\src\Articulate\Syndication\RssResult.cs,ExecuteResult,The length of the statement  "                var xsltHeader = string.Format("type=\"text/xsl\" href=\"{0}\""' _model.RootBlogNode.UrlWithDomain().EnsureEndsWith('/') + "rss/xslt"); " is 135.
Long Statement,Articulate.Syndication,RssFeedGenerator,C:\repos\Shandem_Articulate\src\Articulate\Syndication\RssFeedGenerator.cs,GetFeed,The length of the statement  "            //feed.AttributeExtensions.Add(new XmlQualifiedName("media"' "http://www.w3.org/2000/xmlns/")' "http://search.yahoo.com/mrss/"); " is 128.
Long Statement,Articulate.Syndication,RssFeedGenerator,C:\repos\Shandem_Articulate\src\Articulate\Syndication\RssFeedGenerator.cs,GetFeedItem,The length of the statement  "            //item.ElementExtensions.Add(new SyndicationElementExtension("thumbnail"' "http://search.yahoo.com/mrss/"' "This is a test!")); " is 127.
Complex Conditional,Articulate,DateFormattedUrlProvider,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedUrlProvider.cs,GetUrl,The conditional expression  "content != null && (content.DocumentTypeAlias == "ArticulateRichText" || content.DocumentTypeAlias == "ArticulateMarkdown") && content.Parent != null"  is complex.
Magic Number,Articulate,BlogMlExporter,C:\repos\Shandem_Articulate\src\Articulate\BlogMlExporter.cs,AddBlogPosts,The following statement contains a magic number: const int pageSize = 1000;
Magic Number,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,The following statement contains a magic number: if (segmentLength > 4)              {                  var stringDate = contentRequest.Uri.Segments[segmentLength - 4]+ contentRequest.Uri.Segments[segmentLength - 3]+ contentRequest.Uri.Segments[segmentLength - 2].TrimEnd("/");                  DateTime postDate;                  try                  {                      postDate = DateTime.ParseExact(stringDate' "yyyy/MM/dd"' CultureInfo.InvariantCulture);                  }                  catch (FormatException)                  {                      return false;                  }                                    var newRoute = string.Empty;                  for (int i = 0; i < segmentLength; i++)                  {                      if (i < segmentLength - 4 || i > segmentLength - 2)                          newRoute += contentRequest.Uri.Segments[i];                  }                  var node = FindContent(contentRequest' newRoute);                  contentRequest.PublishedContent = null;                  // If by chance something matches the format pattern I check again if there is sucn a node and if it's an articulate post                  if (node == null || (node.DocumentTypeAlias!= "ArticulateRichText" && node.DocumentTypeAlias != "ArticulateMarkdown")) return false;                  if (!node.Parent.Parent.GetPropertyValue<bool>("useDateFormatForUrl")) return false;                  if (node.GetPropertyValue<DateTime>("publishedDate").Date!= postDate.Date) return false;                                    contentRequest.PublishedContent = node;                  return true;              }
Magic Number,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,The following statement contains a magic number: if (segmentLength > 4)              {                  var stringDate = contentRequest.Uri.Segments[segmentLength - 4]+ contentRequest.Uri.Segments[segmentLength - 3]+ contentRequest.Uri.Segments[segmentLength - 2].TrimEnd("/");                  DateTime postDate;                  try                  {                      postDate = DateTime.ParseExact(stringDate' "yyyy/MM/dd"' CultureInfo.InvariantCulture);                  }                  catch (FormatException)                  {                      return false;                  }                                    var newRoute = string.Empty;                  for (int i = 0; i < segmentLength; i++)                  {                      if (i < segmentLength - 4 || i > segmentLength - 2)                          newRoute += contentRequest.Uri.Segments[i];                  }                  var node = FindContent(contentRequest' newRoute);                  contentRequest.PublishedContent = null;                  // If by chance something matches the format pattern I check again if there is sucn a node and if it's an articulate post                  if (node == null || (node.DocumentTypeAlias!= "ArticulateRichText" && node.DocumentTypeAlias != "ArticulateMarkdown")) return false;                  if (!node.Parent.Parent.GetPropertyValue<bool>("useDateFormatForUrl")) return false;                  if (node.GetPropertyValue<DateTime>("publishedDate").Date!= postDate.Date) return false;                                    contentRequest.PublishedContent = node;                  return true;              }
Magic Number,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,The following statement contains a magic number: if (segmentLength > 4)              {                  var stringDate = contentRequest.Uri.Segments[segmentLength - 4]+ contentRequest.Uri.Segments[segmentLength - 3]+ contentRequest.Uri.Segments[segmentLength - 2].TrimEnd("/");                  DateTime postDate;                  try                  {                      postDate = DateTime.ParseExact(stringDate' "yyyy/MM/dd"' CultureInfo.InvariantCulture);                  }                  catch (FormatException)                  {                      return false;                  }                                    var newRoute = string.Empty;                  for (int i = 0; i < segmentLength; i++)                  {                      if (i < segmentLength - 4 || i > segmentLength - 2)                          newRoute += contentRequest.Uri.Segments[i];                  }                  var node = FindContent(contentRequest' newRoute);                  contentRequest.PublishedContent = null;                  // If by chance something matches the format pattern I check again if there is sucn a node and if it's an articulate post                  if (node == null || (node.DocumentTypeAlias!= "ArticulateRichText" && node.DocumentTypeAlias != "ArticulateMarkdown")) return false;                  if (!node.Parent.Parent.GetPropertyValue<bool>("useDateFormatForUrl")) return false;                  if (node.GetPropertyValue<DateTime>("publishedDate").Date!= postDate.Date) return false;                                    contentRequest.PublishedContent = node;                  return true;              }
Magic Number,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,The following statement contains a magic number: if (segmentLength > 4)              {                  var stringDate = contentRequest.Uri.Segments[segmentLength - 4]+ contentRequest.Uri.Segments[segmentLength - 3]+ contentRequest.Uri.Segments[segmentLength - 2].TrimEnd("/");                  DateTime postDate;                  try                  {                      postDate = DateTime.ParseExact(stringDate' "yyyy/MM/dd"' CultureInfo.InvariantCulture);                  }                  catch (FormatException)                  {                      return false;                  }                                    var newRoute = string.Empty;                  for (int i = 0; i < segmentLength; i++)                  {                      if (i < segmentLength - 4 || i > segmentLength - 2)                          newRoute += contentRequest.Uri.Segments[i];                  }                  var node = FindContent(contentRequest' newRoute);                  contentRequest.PublishedContent = null;                  // If by chance something matches the format pattern I check again if there is sucn a node and if it's an articulate post                  if (node == null || (node.DocumentTypeAlias!= "ArticulateRichText" && node.DocumentTypeAlias != "ArticulateMarkdown")) return false;                  if (!node.Parent.Parent.GetPropertyValue<bool>("useDateFormatForUrl")) return false;                  if (node.GetPropertyValue<DateTime>("publishedDate").Date!= postDate.Date) return false;                                    contentRequest.PublishedContent = node;                  return true;              }
Magic Number,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,The following statement contains a magic number: if (segmentLength > 4)              {                  var stringDate = contentRequest.Uri.Segments[segmentLength - 4]+ contentRequest.Uri.Segments[segmentLength - 3]+ contentRequest.Uri.Segments[segmentLength - 2].TrimEnd("/");                  DateTime postDate;                  try                  {                      postDate = DateTime.ParseExact(stringDate' "yyyy/MM/dd"' CultureInfo.InvariantCulture);                  }                  catch (FormatException)                  {                      return false;                  }                                    var newRoute = string.Empty;                  for (int i = 0; i < segmentLength; i++)                  {                      if (i < segmentLength - 4 || i > segmentLength - 2)                          newRoute += contentRequest.Uri.Segments[i];                  }                  var node = FindContent(contentRequest' newRoute);                  contentRequest.PublishedContent = null;                  // If by chance something matches the format pattern I check again if there is sucn a node and if it's an articulate post                  if (node == null || (node.DocumentTypeAlias!= "ArticulateRichText" && node.DocumentTypeAlias != "ArticulateMarkdown")) return false;                  if (!node.Parent.Parent.GetPropertyValue<bool>("useDateFormatForUrl")) return false;                  if (node.GetPropertyValue<DateTime>("publishedDate").Date!= postDate.Date) return false;                                    contentRequest.PublishedContent = node;                  return true;              }
Magic Number,Articulate,DateFormattedPostContentFinder,C:\repos\Shandem_Articulate\src\Articulate\DateFormattedPostContentFinder.cs,TryFindContent,The following statement contains a magic number: if (segmentLength > 4)              {                  var stringDate = contentRequest.Uri.Segments[segmentLength - 4]+ contentRequest.Uri.Segments[segmentLength - 3]+ contentRequest.Uri.Segments[segmentLength - 2].TrimEnd("/");                  DateTime postDate;                  try                  {                      postDate = DateTime.ParseExact(stringDate' "yyyy/MM/dd"' CultureInfo.InvariantCulture);                  }                  catch (FormatException)                  {                      return false;                  }                                    var newRoute = string.Empty;                  for (int i = 0; i < segmentLength; i++)                  {                      if (i < segmentLength - 4 || i > segmentLength - 2)                          newRoute += contentRequest.Uri.Segments[i];                  }                  var node = FindContent(contentRequest' newRoute);                  contentRequest.PublishedContent = null;                  // If by chance something matches the format pattern I check again if there is sucn a node and if it's an articulate post                  if (node == null || (node.DocumentTypeAlias!= "ArticulateRichText" && node.DocumentTypeAlias != "ArticulateMarkdown")) return false;                  if (!node.Parent.Parent.GetPropertyValue<bool>("useDateFormatForUrl")) return false;                  if (node.GetPropertyValue<DateTime>("publishedDate").Date!= postDate.Date) return false;                                    contentRequest.PublishedContent = node;                  return true;              }
Magic Number,Articulate,DefaultArticulateSearcher,C:\repos\Shandem_Articulate\src\Articulate\DefaultArticulateSearcher.cs,Search,The following statement contains a magic number: var fields = new Dictionary<string' int>              {                  {"markdown"' 2}'                  {"richText"' 2}'                  {"nodeName"' 3}'                  {"tags"' 1}'                  {"categories"' 1}'                  {"umbracoUrlName"' 3}              };
Magic Number,Articulate,DefaultArticulateSearcher,C:\repos\Shandem_Articulate\src\Articulate\DefaultArticulateSearcher.cs,Search,The following statement contains a magic number: var fields = new Dictionary<string' int>              {                  {"markdown"' 2}'                  {"richText"' 2}'                  {"nodeName"' 3}'                  {"tags"' 1}'                  {"categories"' 1}'                  {"umbracoUrlName"' 3}              };
Magic Number,Articulate,DefaultArticulateSearcher,C:\repos\Shandem_Articulate\src\Articulate\DefaultArticulateSearcher.cs,Search,The following statement contains a magic number: var fields = new Dictionary<string' int>              {                  {"markdown"' 2}'                  {"richText"' 2}'                  {"nodeName"' 3}'                  {"tags"' 1}'                  {"categories"' 1}'                  {"umbracoUrlName"' 3}              };
Magic Number,Articulate,DefaultArticulateSearcher,C:\repos\Shandem_Articulate\src\Articulate\DefaultArticulateSearcher.cs,Search,The following statement contains a magic number: var fields = new Dictionary<string' int>              {                  {"markdown"' 2}'                  {"richText"' 2}'                  {"nodeName"' 3}'                  {"tags"' 1}'                  {"categories"' 1}'                  {"umbracoUrlName"' 3}              };
Magic Number,Articulate,DefaultArticulateSearcher,C:\repos\Shandem_Articulate\src\Articulate\DefaultArticulateSearcher.cs,Search,The following statement contains a magic number: const int exactMatch = 5;
Magic Number,Articulate,DefaultArticulateSearcher,C:\repos\Shandem_Articulate\src\Articulate\DefaultArticulateSearcher.cs,Search,The following statement contains a magic number: const int termMatch = 2;
Magic Number,Articulate,GitHubFeed,C:\repos\Shandem_Articulate\src\Articulate\GitHubFeed.cs,GetResult,The following statement contains a magic number: return (string[])_cache.GetCacheItem(typeof(GitHubFeed).ToString()' () =>              {                  using (var client = new HttpClient())                  {                      var result = client.GetStringAsync(_url);                      Task.WaitAll(result);                      var xml = XDocument.Parse(result.Result);                      var ns = XNamespace.Get("http://www.w3.org/2005/Atom");                        return xml.Root.Descendants(ns + "content").Select(x => x.Value).Take(_maxResults).ToArray();                  }              }' TimeSpan.FromHours(0.5));
Magic Number,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,Upgrade,The following statement contains a magic number: if (cropperDt != null)              {                  if (cropperDt.PropertyEditorAlias.InvariantEquals("Umbraco.ImageCropper"))                  {                      var preVals = _services.DataTypeService.GetPreValuesCollectionByDataTypeId(cropperDt.Id);                      if (preVals != null)                      {                          var crops = new[]                          {                              new {alias = "square"' width = 480' height = 480}'                              new {alias = "thumbnail"' width = 50' height = 50}'                              new {alias = "wide"' width = 1024' height = 512}                          };                            if (preVals.PreValuesAsDictionary["crops"] == null                              || preVals.PreValuesAsDictionary["crops"].Value.IsNullOrWhiteSpace())                          {                              //there aren't any so we need to add them all                                                                                      preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(crops));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                          else                          {                              //we should merge them since the developer may have added their own                              var json = JsonConvert.DeserializeObject<JArray>(preVals.PreValuesAsDictionary["crops"].Value);                              var required = crops.ToDictionary(crop => crop.alias' crop => false);                              foreach (var prop in json.Children<JObject>().SelectMany(x => x.Property("alias")))                              {                                  var val = prop.Value<string>();                                  if (required.ContainsKey(prop.Value<string>()))                                      required[val] = true;                              }                              //fill in the missing                              foreach (var req in required)                              {                                  if (!req.Value)                                      json.Add(JObject.FromObject(crops.First(x => x.alias == req.Key)));                              }                                preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(json));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                                              }                  }              }
Magic Number,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,Upgrade,The following statement contains a magic number: if (cropperDt != null)              {                  if (cropperDt.PropertyEditorAlias.InvariantEquals("Umbraco.ImageCropper"))                  {                      var preVals = _services.DataTypeService.GetPreValuesCollectionByDataTypeId(cropperDt.Id);                      if (preVals != null)                      {                          var crops = new[]                          {                              new {alias = "square"' width = 480' height = 480}'                              new {alias = "thumbnail"' width = 50' height = 50}'                              new {alias = "wide"' width = 1024' height = 512}                          };                            if (preVals.PreValuesAsDictionary["crops"] == null                              || preVals.PreValuesAsDictionary["crops"].Value.IsNullOrWhiteSpace())                          {                              //there aren't any so we need to add them all                                                                                      preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(crops));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                          else                          {                              //we should merge them since the developer may have added their own                              var json = JsonConvert.DeserializeObject<JArray>(preVals.PreValuesAsDictionary["crops"].Value);                              var required = crops.ToDictionary(crop => crop.alias' crop => false);                              foreach (var prop in json.Children<JObject>().SelectMany(x => x.Property("alias")))                              {                                  var val = prop.Value<string>();                                  if (required.ContainsKey(prop.Value<string>()))                                      required[val] = true;                              }                              //fill in the missing                              foreach (var req in required)                              {                                  if (!req.Value)                                      json.Add(JObject.FromObject(crops.First(x => x.alias == req.Key)));                              }                                preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(json));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                                              }                  }              }
Magic Number,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,Upgrade,The following statement contains a magic number: if (cropperDt != null)              {                  if (cropperDt.PropertyEditorAlias.InvariantEquals("Umbraco.ImageCropper"))                  {                      var preVals = _services.DataTypeService.GetPreValuesCollectionByDataTypeId(cropperDt.Id);                      if (preVals != null)                      {                          var crops = new[]                          {                              new {alias = "square"' width = 480' height = 480}'                              new {alias = "thumbnail"' width = 50' height = 50}'                              new {alias = "wide"' width = 1024' height = 512}                          };                            if (preVals.PreValuesAsDictionary["crops"] == null                              || preVals.PreValuesAsDictionary["crops"].Value.IsNullOrWhiteSpace())                          {                              //there aren't any so we need to add them all                                                                                      preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(crops));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                          else                          {                              //we should merge them since the developer may have added their own                              var json = JsonConvert.DeserializeObject<JArray>(preVals.PreValuesAsDictionary["crops"].Value);                              var required = crops.ToDictionary(crop => crop.alias' crop => false);                              foreach (var prop in json.Children<JObject>().SelectMany(x => x.Property("alias")))                              {                                  var val = prop.Value<string>();                                  if (required.ContainsKey(prop.Value<string>()))                                      required[val] = true;                              }                              //fill in the missing                              foreach (var req in required)                              {                                  if (!req.Value)                                      json.Add(JObject.FromObject(crops.First(x => x.alias == req.Key)));                              }                                preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(json));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                                              }                  }              }
Magic Number,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,Upgrade,The following statement contains a magic number: if (cropperDt != null)              {                  if (cropperDt.PropertyEditorAlias.InvariantEquals("Umbraco.ImageCropper"))                  {                      var preVals = _services.DataTypeService.GetPreValuesCollectionByDataTypeId(cropperDt.Id);                      if (preVals != null)                      {                          var crops = new[]                          {                              new {alias = "square"' width = 480' height = 480}'                              new {alias = "thumbnail"' width = 50' height = 50}'                              new {alias = "wide"' width = 1024' height = 512}                          };                            if (preVals.PreValuesAsDictionary["crops"] == null                              || preVals.PreValuesAsDictionary["crops"].Value.IsNullOrWhiteSpace())                          {                              //there aren't any so we need to add them all                                                                                      preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(crops));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                          else                          {                              //we should merge them since the developer may have added their own                              var json = JsonConvert.DeserializeObject<JArray>(preVals.PreValuesAsDictionary["crops"].Value);                              var required = crops.ToDictionary(crop => crop.alias' crop => false);                              foreach (var prop in json.Children<JObject>().SelectMany(x => x.Property("alias")))                              {                                  var val = prop.Value<string>();                                  if (required.ContainsKey(prop.Value<string>()))                                      required[val] = true;                              }                              //fill in the missing                              foreach (var req in required)                              {                                  if (!req.Value)                                      json.Add(JObject.FromObject(crops.First(x => x.alias == req.Key)));                              }                                preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(json));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                                              }                  }              }
Magic Number,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,Upgrade,The following statement contains a magic number: if (cropperDt != null)              {                  if (cropperDt.PropertyEditorAlias.InvariantEquals("Umbraco.ImageCropper"))                  {                      var preVals = _services.DataTypeService.GetPreValuesCollectionByDataTypeId(cropperDt.Id);                      if (preVals != null)                      {                          var crops = new[]                          {                              new {alias = "square"' width = 480' height = 480}'                              new {alias = "thumbnail"' width = 50' height = 50}'                              new {alias = "wide"' width = 1024' height = 512}                          };                            if (preVals.PreValuesAsDictionary["crops"] == null                              || preVals.PreValuesAsDictionary["crops"].Value.IsNullOrWhiteSpace())                          {                              //there aren't any so we need to add them all                                                                                      preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(crops));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                          else                          {                              //we should merge them since the developer may have added their own                              var json = JsonConvert.DeserializeObject<JArray>(preVals.PreValuesAsDictionary["crops"].Value);                              var required = crops.ToDictionary(crop => crop.alias' crop => false);                              foreach (var prop in json.Children<JObject>().SelectMany(x => x.Property("alias")))                              {                                  var val = prop.Value<string>();                                  if (required.ContainsKey(prop.Value<string>()))                                      required[val] = true;                              }                              //fill in the missing                              foreach (var req in required)                              {                                  if (!req.Value)                                      json.Add(JObject.FromObject(crops.First(x => x.alias == req.Key)));                              }                                preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(json));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                                              }                  }              }
Magic Number,Articulate,ArticulateDataInstaller,C:\repos\Shandem_Articulate\src\Articulate\ArticulateDataInstaller.cs,Upgrade,The following statement contains a magic number: if (cropperDt != null)              {                  if (cropperDt.PropertyEditorAlias.InvariantEquals("Umbraco.ImageCropper"))                  {                      var preVals = _services.DataTypeService.GetPreValuesCollectionByDataTypeId(cropperDt.Id);                      if (preVals != null)                      {                          var crops = new[]                          {                              new {alias = "square"' width = 480' height = 480}'                              new {alias = "thumbnail"' width = 50' height = 50}'                              new {alias = "wide"' width = 1024' height = 512}                          };                            if (preVals.PreValuesAsDictionary["crops"] == null                              || preVals.PreValuesAsDictionary["crops"].Value.IsNullOrWhiteSpace())                          {                              //there aren't any so we need to add them all                                                                                      preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(crops));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                          else                          {                              //we should merge them since the developer may have added their own                              var json = JsonConvert.DeserializeObject<JArray>(preVals.PreValuesAsDictionary["crops"].Value);                              var required = crops.ToDictionary(crop => crop.alias' crop => false);                              foreach (var prop in json.Children<JObject>().SelectMany(x => x.Property("alias")))                              {                                  var val = prop.Value<string>();                                  if (required.ContainsKey(prop.Value<string>()))                                      required[val] = true;                              }                              //fill in the missing                              foreach (var req in required)                              {                                  if (!req.Value)                                      json.Add(JObject.FromObject(crops.First(x => x.alias == req.Key)));                              }                                preVals.PreValuesAsDictionary["crops"] = new PreValue(JsonConvert.SerializeObject(json));                                _services.DataTypeService.SavePreValues(cropperDt.Id' preVals.PreValuesAsDictionary);                          }                                              }                  }              }
Magic Number,Articulate,MetaWeblogHandler,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogHandler.cs,AddOrUpdateContent,The following statement contains a magic number: if (content.HasProperty("richText"))              {                  var firstImage = "";                    //we need to replace all absolute image paths with relative ones                  var contentToSave = _mediaSrc.Replace(post.Content' match =>                  {                      if (match.Groups.Count == 2)                      {                          var imageSrc = match.Groups[1].Value.EnsureStartsWith('/');                          if (firstImage.IsNullOrWhiteSpace())                          {                              firstImage = imageSrc;                          }                          return " src=\"" + imageSrc + "\"";                      }                      return null;                  });                    var imagesProcessed = 0;                    //now replace all absolute anchor paths with relative ones                  contentToSave = _mediaHref.Replace(contentToSave' match =>                  {                      if (match.Groups.Count == 2)                      {                          var href = " href=\"" +                                 match.Groups[1].Value.EnsureStartsWith('/') +                                 "\" class=\"a-image-" + imagesProcessed + "\" ";                            imagesProcessed++;                            return href;                      }                      return null;                  });                    content.SetValue("richText"' contentToSave);                    if (extractFirstImageAsProperty                      && content.HasProperty("postImage")                      && !firstImage.IsNullOrWhiteSpace())                  {                      content.SetValue("postImage"' firstImage);                      //content.SetValue("postImage"' JsonConvert.SerializeObject(JObject.FromObject(new                      //{                      //    src = firstImage                      //})));                  }              }
Magic Number,Articulate,MetaWeblogHandler,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogHandler.cs,AddOrUpdateContent,The following statement contains a magic number: if (content.HasProperty("richText"))              {                  var firstImage = "";                    //we need to replace all absolute image paths with relative ones                  var contentToSave = _mediaSrc.Replace(post.Content' match =>                  {                      if (match.Groups.Count == 2)                      {                          var imageSrc = match.Groups[1].Value.EnsureStartsWith('/');                          if (firstImage.IsNullOrWhiteSpace())                          {                              firstImage = imageSrc;                          }                          return " src=\"" + imageSrc + "\"";                      }                      return null;                  });                    var imagesProcessed = 0;                    //now replace all absolute anchor paths with relative ones                  contentToSave = _mediaHref.Replace(contentToSave' match =>                  {                      if (match.Groups.Count == 2)                      {                          var href = " href=\"" +                                 match.Groups[1].Value.EnsureStartsWith('/') +                                 "\" class=\"a-image-" + imagesProcessed + "\" ";                            imagesProcessed++;                            return href;                      }                      return null;                  });                    content.SetValue("richText"' contentToSave);                    if (extractFirstImageAsProperty                      && content.HasProperty("postImage")                      && !firstImage.IsNullOrWhiteSpace())                  {                      content.SetValue("postImage"' firstImage);                      //content.SetValue("postImage"' JsonConvert.SerializeObject(JObject.FromObject(new                      //{                      //    src = firstImage                      //})));                  }              }
Magic Number,Articulate,MetaWeblogHandler,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogHandler.cs,AddOrUpdateContent,The following statement contains a magic number: if (post.AllowComments == 1)              {                  content.SetValue("enableComments"' 1);              }              else if (post.AllowComments == 2)              {                  content.SetValue("enableComments"' 0);              }
Magic Number,Articulate,MetaWeblogHandler,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogHandler.cs,FromPost,The following statement contains a magic number: return new MetaWeblogPost              {                  AllowComments = post.EnableComments ? 1 : 2'                  Author = post.Author.Name'                  Categories = post.Categories.ToArray()'                  Content = post.Body.ToString()'                  CreateDate = post.PublishedDate != default(DateTime) ? post.PublishedDate : post.UpdateDate'                  Id = post.Id.ToString(CultureInfo.InvariantCulture)'                  Slug = post.UrlName'                  Excerpt = post.Excerpt'                  Tags = string.Join("'"' post.Tags.ToArray())'                  Title = post.Name              };
Magic Number,Articulate,MetaWeblogHandler,C:\repos\Shandem_Articulate\src\Articulate\MetaWeblogHandler.cs,FromContent,The following statement contains a magic number: return new MetaWeblogPost              {                  AllowComments = post.GetValue<bool>("enableComments") ? 1 : 2'                  Author = post.GetValue<string>("author")'                  Categories = post.GetValue<string>("categories").Split(new[] { ''' }' StringSplitOptions.RemoveEmptyEntries)'                  Content = post.ContentType.Alias == "ArticulateRichText"                      ? post.GetValue<string>("richText")                      : new MarkdownDeep.Markdown().Transform(post.GetValue<string>("markdown"))'                  CreateDate = post.UpdateDate'                  Id = post.Id.ToString(CultureInfo.InvariantCulture)'                  Slug = post.GetValue<string>("umbracoUrlName").IsNullOrWhiteSpace()                      ? post.Name.ToUrlSegment()                      : post.GetValue<string>("umbracoUrlName").ToUrlSegment()'                  Excerpt = post.GetValue<string>("excerpt")'                  Tags = string.Join("'"' post.GetValue<string>("tags").Split(new[] { ''' }' StringSplitOptions.RemoveEmptyEntries))'                  Title = post.Name              };
Magic Number,Articulate,NotFoundHandler,C:\repos\Shandem_Articulate\src\Articulate\NotFoundHandler.cs,ProcessRequest,The following statement contains a magic number: context.Response.StatusCode = 404;
Magic Number,Articulate,UmbracoHelperExtensions,C:\repos\Shandem_Articulate\src\Articulate\UmbracoHelperExtensions.cs,GetContentByTags,The following statement contains a magic number: IEnumerable<PostsByTagModel> GetResult()              {                  var taggedContent = new List<TagDto>();                    //process in groups to not exceed the max SQL params                  foreach (var tagBatch in tags.InGroupsOf(2000))                  {                      var sql = GetTagQuery("cmsTagRelationship.nodeId' cmsTagRelationship.tagId' cmsTags.tag"' masterModel' sqlSyntax)                          .Where("tagId IN (@tagIds) AND cmsTags." + sqlSyntax.GetQuotedColumnName("group") + " = @tagGroup"' new                          {                              tagIds = tagBatch.Select(x => x.Id).ToArray()'                              tagGroup = tagGroup                          });                      taggedContent.AddRange(appContext.DatabaseContext.Database.Fetch<TagDto>(sql));                  }                    var result = new List<PostsByTagModel>();                  foreach (var groupedTags in taggedContent.GroupBy(x => x.TagId))                  {                      //will be the same tag name for all of these tag Ids                      var tagName = groupedTags.First().Tag;                        var publishedContent = helper.TypedContent(groupedTags.Select(t => t.NodeId).Distinct()).WhereNotNull();                        var model = new PostsByTagModel(                          publishedContent.Select(c => new PostModel(c)).OrderByDescending(c => c.PublishedDate)'                           tagName'                           masterModel.RootBlogNode.Url.EnsureEndsWith('/') + baseUrlName + "/" + tagName.ToLowerInvariant());                        result.Add(model);                  }                    return result.OrderBy(x => x.TagName).ToArray();              }
Magic Number,Articulate,UmbracoEventHandler,C:\repos\Shandem_Articulate\src\Articulate\UmbracoEventHandler.cs,ContentService_Created,The following statement contains a magic number: if (e.Entity.ContentType.Alias.InvariantEquals("ArticulateRichText")                  || e.Entity.ContentType.Alias.InvariantEquals("ArticulateMarkdown"))              {                  if (UmbracoContext.Current.Security.CurrentUser != null)                  {                      e.Entity.SetValue("author"' UmbracoContext.Current.Security.CurrentUser.Name);                  }                  e.Entity.SetValue("publishedDate"' DateTime.Now);                  e.Entity.SetValue("enableComments"' 1);              }              else if (e.Entity.ContentType.Alias.InvariantEquals("Articulate"))              {                  e.Entity.SetValue("theme"' "VAPOR");                  e.Entity.SetValue("pageSize"' 10);                  e.Entity.SetValue("categoriesUrlName"' "categories");                  e.Entity.SetValue("tagsUrlName"' "tags");                  e.Entity.SetValue("redirectArchive"' true);                  e.Entity.SetValue("searchUrlName"' "search");                  e.Entity.SetValue("categoriesPageName"' "Categories");                  e.Entity.SetValue("tagsPageName"' "Tags");                  e.Entity.SetValue("searchPageName"' "Search results");              }
Magic Number,Articulate.Controllers,ArticulateRssController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ArticulateRssController.cs,Index,The following statement contains a magic number: if (!maxItems.HasValue) maxItems = 25;
Magic Number,Articulate.Controllers,ArticulateRssController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ArticulateRssController.cs,Author,The following statement contains a magic number: if (!maxItems.HasValue) maxItems = 25;
Magic Number,Articulate.Controllers,ArticulateRssController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ArticulateRssController.cs,Categories,The following statement contains a magic number: if (!maxItems.HasValue) maxItems = 25;
Magic Number,Articulate.Controllers,ArticulateRssController,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ArticulateRssController.cs,Tags,The following statement contains a magic number: if (!maxItems.HasValue) maxItems = 25;
Magic Number,Articulate.Controllers,ListControllerBase,C:\repos\Shandem_Articulate\src\Articulate\Controllers\ListControllerBase.cs,GetPagerModel,The following statement contains a magic number: pager = new PagerModel(                  pageSize'                  p.Value - 1'                  totalPages'                  totalPages > p ? masterModel.Url.EnsureEndsWith('?') + "p=" + (p + 1) : null'                  p > 2 ? masterModel.Url.EnsureEndsWith('?') + "p=" + (p - 1) : p > 1 ? masterModel.Url : null);
Magic Number,Articulate.Syndication,RssFeedGenerator,C:\repos\Shandem_Articulate\src\Articulate\Syndication\RssFeedGenerator.cs,GetFeedItem,The following statement contains a magic number: var content = _relativeMediaHref.Replace(GetPostContent(post)' match =>              {                  if (match.Groups.Count == 2)                  {                      return $" href=\"{rootUrl.TrimEnd('/')}{match.Groups[1].Value.EnsureStartsWith('/')}\"";                  }                  return null;              });
Magic Number,Articulate.Syndication,RssFeedGenerator,C:\repos\Shandem_Articulate\src\Articulate\Syndication\RssFeedGenerator.cs,GetFeedItem,The following statement contains a magic number: content = _relativeMediaSrc.Replace(content' match =>              {                  if (match.Groups.Count == 2)                  {                      return $" src=\"{mediaRoot}{match.Groups[1].Value.EnsureStartsWith('/')}\"";                  }                  return null;              });
Magic Number,Articulate.Options,ArticulateOptions,C:\repos\Shandem_Articulate\src\Articulate\Options\ArticulateOptions.cs,ArticulateOptions,The following statement contains a magic number: GenerateExcerpt = generateExcerpt ?? (val => val == null                  ? string.Empty                  : string.Join(""' val.StripHtml()                      .DecodeHtml()                      .StripNewLines()                      .TruncateAtWord(200' "")));
Missing Default,Articulate,UmbracoEventHandler,C:\repos\Shandem_Articulate\src\Articulate\UmbracoEventHandler.cs,PageCacheRefresher_CacheUpdated,The following switch statement is missing a default case: switch (e.MessageType)              {                  case MessageType.RefreshById:                  case MessageType.RemoveById:                      var item = UmbracoContext.Current.ContentCache.GetById((int)e.MessageObject);                      if (item != null && item.DocumentTypeAlias.InvariantEquals("Articulate"))                      {                          //ensure routes are rebuilt                          ApplicationContext.Current.ApplicationCache.RequestCache.GetCacheItem("articulate-refresh-routes"' () => true);                      }                      break;                    case MessageType.RefreshByInstance:                  case MessageType.RemoveByInstance:                      var content = e.MessageObject as IContent;                      if (content == null) return;                      if (content.ContentType.Alias.InvariantEquals("Articulate"))                      {                          //ensure routes are rebuilt                          ApplicationContext.Current.ApplicationCache.RequestCache.GetCacheItem("articulate-refresh-routes"' () => true);                      }                      break;              }
