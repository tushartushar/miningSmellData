Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FastCgiNet,NvpEnumerator,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Nvp\NvpEnumerator.cs,MoveNext,Cyclomatic complexity of the method is 9
Complex Method,FastCgiNet,RecordFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordFactory.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,FastCgiNet,RecordFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordFactory.cs,CreateRecord,Cyclomatic complexity of the method is 10
Complex Method,FastCgiNet,RecordFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordFactory.cs,CreateRecord,Cyclomatic complexity of the method is 9
Complex Method,FastCgiNet,RecordFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordFactory.cs,CreateRecordFromHeader,Cyclomatic complexity of the method is 11
Complex Method,FastCgiNet.Streams,RecordContentsStream,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Streams\RecordContentsStream.cs,Read,Cyclomatic complexity of the method is 10
Complex Method,FastCgiNet.Streams,SocketStream,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Streams\SocketStream.cs,Flush,Cyclomatic complexity of the method is 8
Complex Method,FastCgiNet.Requests,FastCgiRequest,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Request\FastCgiRequest.cs,AddReceivedRecord,Cyclomatic complexity of the method is 9
Long Parameter List,FastCgiNet,StreamRecordBase,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\StreamRecordBase.cs,StreamRecordBase,The method has 5 parameters. Parameters: recordType' data' offset' length' endOfRecord
Long Parameter List,FastCgiNet,NvpFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Nvp\NvpFactory.cs,TryCreateNvp,The method has 5 parameters. Parameters: firstData' offset' length' createdNvp' endOfNvp
Long Identifier,FastCgiNet.Requests,WebServerSocketRequest,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Request\WebServerSocketRequest.cs,SendBeginRequest,The length of the parameter applicationMustCloseConnection is 30.
Long Statement,FastCgiNet,RecordBase,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordBase.cs,Equals,The length of the statement  "			return RecordType == b.RecordType && RequestId == b.RequestId && ContentLength == b.ContentLength && Version == b.Version;" is 122.
Long Statement,FastCgiNet,ExtensionMethods,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordType.cs,IsStreamType,The length of the statement  "            return type == RecordType.FCGIStderr || type == RecordType.FCGIStdin || type == RecordType.FCGIStdout || type == RecordType.FCGIParams || type == RecordType.FCGIData;" is 166.
Long Statement,FastCgiNet,RecordFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordFactory.cs,Read,The length of the statement  "                        if (LastIncompleteRecord.ContentLength + BuiltContentSize > MaxInMemoryContentSize && LastIncompleteRecord.IsByteStreamRecord)" is 126.
Long Statement,FastCgiNet,RecordFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordFactory.cs,Read,The length of the statement  "                            LastIncompleteRecord.FeedBytes(data.Array' data.Offset + neededForFullHeader' bytesLeft - neededForFullHeader' out lastByteOfRecord);" is 133.
Long Statement,FastCgiNet,RecordFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordFactory.cs,Read,The length of the statement  "                        if (LastIncompleteRecord.ContentLength + BuiltContentSize > MaxInMemoryContentSize && LastIncompleteRecord.IsByteStreamRecord)" is 126.
Long Statement,FastCgiNet,RecordFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordFactory.cs,CreateRecordFromHeader,The length of the statement  "                throw new InsufficientBytesException("There are not enough bytes in the array for a complete header. Make sure at least 8 bytes are available");" is 144.
Long Statement,FastCgiNet.Streams,RecordContentsStream,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Streams\RecordContentsStream.cs,Write,The length of the statement  "				throw new InvalidOperationException("You can't write more than " + RecordBase.MaxContentLength + " bytes to a record's contents");" is 130.
Long Statement,FastCgiNet.Streams,FastCgiStream,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Streams\FastCgiStream.cs,Write,The length of the statement  "                throw new InvalidOperationException("You can't write to this stream. You should either append a Record's Stream or initialize this stream with Read Mode = false");" is 163.
Virtual Method Call from Constructor,FastCgiNet.Streams,FastCgiStream,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Streams\FastCgiStream.cs,FastCgiStream,The constructor "FastCgiStream" calls a virtual method "AppendStream".
Magic Number,FastCgiNet,RecordBase,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordBase.cs,RecordBase,The following statement contains a magic number: Header = new byte[8];
Magic Number,FastCgiNet,RecordBase,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordBase.cs,RecordBase,The following statement contains a magic number: length < 8 || data.Length < 8
Magic Number,FastCgiNet,RecordBase,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordBase.cs,RecordBase,The following statement contains a magic number: length < 8 || data.Length < 8
Magic Number,FastCgiNet,RecordBase,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordBase.cs,RecordBase,The following statement contains a magic number: Array.Copy(data' offset' Header' 0' 8);
Magic Number,FastCgiNet,StreamRecordBase,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\StreamRecordBase.cs,StreamRecordBase,The following statement contains a magic number: endOfRecord = offset + 7;
Magic Number,FastCgiNet,BeginRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\BeginRequest\BeginRequestRecord.cs,FeedBytes,The following statement contains a magic number: fedBytes == 8
Magic Number,FastCgiNet,BeginRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\BeginRequest\BeginRequestRecord.cs,FeedBytes,The following statement contains a magic number: int bytesNeeded = 8 - fedBytes;
Magic Number,FastCgiNet,BeginRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\BeginRequest\BeginRequestRecord.cs,FeedBytes,The following statement contains a magic number: fedBytes = 8;
Magic Number,FastCgiNet,BeginRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\BeginRequest\BeginRequestRecord.cs,BeginRequestRecord,The following statement contains a magic number: RoleAndFlags = new byte[8];
Magic Number,FastCgiNet,BeginRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\BeginRequest\BeginRequestRecord.cs,BeginRequestRecord,The following statement contains a magic number: RoleAndFlags = new byte[8];
Magic Number,FastCgiNet,BeginRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\BeginRequest\BeginRequestRecord.cs,BeginRequestRecord,The following statement contains a magic number: FeedBytes(data' offset + 8' length - 8' out endOfRecord);
Magic Number,FastCgiNet,BeginRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\BeginRequest\BeginRequestRecord.cs,BeginRequestRecord,The following statement contains a magic number: FeedBytes(data' offset + 8' length - 8' out endOfRecord);
Magic Number,FastCgiNet,BeginRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\BeginRequest\BeginRequestRecord.cs,BeginRequestRecord,The following statement contains a magic number: length > 8
Magic Number,FastCgiNet,EndRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\EndRequest\EndRequestRecord.cs,FeedBytes,The following statement contains a magic number: fedBytes == 5
Magic Number,FastCgiNet,EndRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\EndRequest\EndRequestRecord.cs,FeedBytes,The following statement contains a magic number: int bytesNeeded = 5 - fedBytes;
Magic Number,FastCgiNet,EndRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\EndRequest\EndRequestRecord.cs,FeedBytes,The following statement contains a magic number: fedBytes = 5;
Magic Number,FastCgiNet,EndRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\EndRequest\EndRequestRecord.cs,EndRequestRecord,The following statement contains a magic number: AppAndProtocolStatus = new byte[5];
Magic Number,FastCgiNet,EndRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\EndRequest\EndRequestRecord.cs,EndRequestRecord,The following statement contains a magic number: AppAndProtocolStatus = new byte[5];
Magic Number,FastCgiNet,EndRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\EndRequest\EndRequestRecord.cs,EndRequestRecord,The following statement contains a magic number: FeedBytes(data' offset + 8' length - 8' out endOfRecord);
Magic Number,FastCgiNet,EndRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\EndRequest\EndRequestRecord.cs,EndRequestRecord,The following statement contains a magic number: FeedBytes(data' offset + 8' length - 8' out endOfRecord);
Magic Number,FastCgiNet,EndRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\EndRequest\EndRequestRecord.cs,EndRequestRecord,The following statement contains a magic number: length > 8
Magic Number,FastCgiNet,NvpEnumerator,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Nvp\NvpEnumerator.cs,NvpEnumerator,The following statement contains a magic number: bufsize = 16;
Magic Number,FastCgiNet,NvpEnumerator,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Nvp\NvpEnumerator.cs,NvpEnumerator,The following statement contains a magic number: bufSmall = new byte[8];
Magic Number,FastCgiNet,NvpFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Nvp\NvpFactory.cs,GetLengthFromByteArray,The following statement contains a magic number: (arr[offset] >> 7) == 0
Magic Number,FastCgiNet,NvpFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Nvp\NvpFactory.cs,TryCreateNvp,The following statement contains a magic number: bytesRead += 4;
Magic Number,FastCgiNet,NvpFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Nvp\NvpFactory.cs,TryCreateNvp,The following statement contains a magic number: valueLength = GetLengthFromByteArray(firstData' offset + 4' length - 4);
Magic Number,FastCgiNet,NvpFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Nvp\NvpFactory.cs,TryCreateNvp,The following statement contains a magic number: valueLength = GetLengthFromByteArray(firstData' offset + 4' length - 4);
Magic Number,FastCgiNet,NvpFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Nvp\NvpFactory.cs,TryCreateNvp,The following statement contains a magic number: bytesRead += (valueLength > 0x7f) ? 4 : 1;
Magic Number,FastCgiNet,NameValuePair,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Nvp\NameValuePair.cs,GetHeaderBytes,The following statement contains a magic number: length < 128
Magic Number,FastCgiNet,RecordFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordFactory.cs,Read,The following statement contains a magic number: NumUnusedBytes + bytesLeft < 8
Magic Number,FastCgiNet,RecordFactory,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\RecordFactory.cs,CreateRecordFromHeader,The following statement contains a magic number: offset + 8 > header.Length
Magic Number,FastCgiNet,AbortRequestRecord,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Records\AbortRequestRecord.cs,AbortRequestRecord,The following statement contains a magic number: endOfRecord = offset + 8 - 1;
Magic Number,FastCgiNet.Streams,RecordContentsStream,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Streams\RecordContentsStream.cs,Equals,The following statement contains a magic number: byte[] bufForB = new byte[128];
Magic Number,FastCgiNet.Streams,RecordContentsStream,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Streams\RecordContentsStream.cs,Equals,The following statement contains a magic number: byte[] bufForA = new byte[128];
Magic Number,FastCgiNet.Streams,RecordContentsStream,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Streams\RecordContentsStream.cs,GetHashCode,The following statement contains a magic number: return length + 31 * MemoryBlocks.Take(1).Sum(mb => mb.GetHashCode());
Missing Default,FastCgiNet.Requests,FastCgiRequest,C:\research\architectureSmells\repos\mzabani_FastCgiNet\FastCgiNet\Request\FastCgiRequest.cs,AddReceivedRecord,The following switch statement is missing a default case: switch (rec.RecordType)             {                 case RecordType.FCGIBeginRequest:                     // Make sure we are not getting a BeginRequest once again' as this could be serious.                     if (BeginRequestReceived)                         throw new InvalidOperationException("A BeginRequest Record has already been received by this Request");                      BeginRequestReceived = true;                     RequestId = ((BeginRequestRecord)rec).RequestId;                     break;                  case RecordType.FCGIEndRequest:                     // Make sure we are not getting a BeginRequest once again' as this could be serious.                     if (EndRequestReceived)                         throw new InvalidOperationException("An EndRequest Record has already been received by this Request");                                          EndRequestReceived = true;                     break;                  case RecordType.FCGIParams:                     Params.AppendStream(((StreamRecordBase)rec).Contents);                     break;                 case RecordType.FCGIStdin:                     Stdin.AppendStream(((StreamRecordBase)rec).Contents);                     break;                 case RecordType.FCGIStdout:                     Stdout.AppendStream(((StreamRecordBase)rec).Contents);                     break;                 case RecordType.FCGIStderr:                     Stderr.AppendStream(((StreamRecordBase)rec).Contents);                     break;             }
