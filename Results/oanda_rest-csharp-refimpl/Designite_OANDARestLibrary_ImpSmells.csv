Implementation smell,Namespace,Class,File,Method,Description
Long Statement,OANDARestLibrary,Rest,C:\repos\oanda_rest-csharp-refimpl\Reference Implementation\OANDARestLibrary\Rest.cs,StartRatesSession,The length of the statement  "			string requestString = Server(EServer.StreamingRates) + "prices?accountId=" + accountId + "&instruments=" + instrumentList; " is 123.
Long Statement,OANDARestLibrary,Rest,C:\repos\oanda_rest-csharp-refimpl\Reference Implementation\OANDARestLibrary\Rest.cs,GetHistoricalPostionRatioData,The length of the statement  "			string requestString = Server(EServer.Labs) + "" + "historical_position_ratios?instrument=" + instrument + "&period=" + period; " is 127.
Long Statement,OANDARestLibrary,Rest,C:\repos\oanda_rest-csharp-refimpl\Reference Implementation\OANDARestLibrary\Rest.cs,GetSpreadData,The length of the statement  "			string requestString = Server(EServer.Labs) + "" + "spreads?instrument=" + instrument + "&period=" + period + "&unique=" + uniqueParam; " is 135.
Long Statement,OANDARestLibrary.TradeLibrary.DataTypes.Communications,CommitmentsOfTradersResponse,C:\repos\oanda_rest-csharp-refimpl\Reference Implementation\OANDARestLibrary\TradeLibrary\DataTypes\Communications\CommitmentsOfTradersResponse.cs,GetData,The length of the statement  "			// Built in assumption' there's only one HprData in this object (since we can only request data for one instrument at a time) " is 125.
Long Statement,OANDARestLibrary.TradeLibrary.DataTypes.Communications,HistoricalPositionRatioResponse,C:\repos\oanda_rest-csharp-refimpl\Reference Implementation\OANDARestLibrary\TradeLibrary\DataTypes\Communications\HistoricalPositionRatioResponse.cs,GetData,The length of the statement  "			// Built in assumption' there's only one HprData in this object (since we can only request data for one instrument at a time) " is 125.
Complex Conditional,OANDARestLibrary.TradeLibrary.DataTypes.Communications,Response,C:\repos\oanda_rest-csharp-refimpl\Reference Implementation\OANDARestLibrary\TradeLibrary\DataTypes\Communications\Response.cs,ToString,The conditional expression  "prop.Name != "Content" && prop.Name != "Subtitle" && prop.Name != "Title" && prop.Name != "UniqueId""  is complex.
Magic Number,OANDARestLibrary,Credentials,C:\repos\oanda_rest-csharp-refimpl\Reference Implementation\OANDARestLibrary\Credentials.cs,GetPracticeCredentials,The following statement contains a magic number: return new Credentials()  				{  					DefaultAccountId = 621396'  					Environment = EEnvironment.Practice'  					AccessToken = "73eba38ad5b44778f9a0c0fec1a66ed1-44f47f052c897b3e1e7f24196bbc071f"'  				};
Magic Number,OANDARestLibrary,Rest,C:\repos\oanda_rest-csharp-refimpl\Reference Implementation\OANDARestLibrary\Rest.cs,GetFullTransactionHistoryAsync,The following statement contains a magic number: for (int retries = 0; retries < 20; retries++)  			{  				try  				{  					var response = await client.GetAsync(location);  					if (response.IsSuccessStatusCode)  					{  						var serializer = new DataContractJsonSerializer(typeof (List<Transaction>));  						var archive = new ZipArchive(await response.Content.ReadAsStreamAsync());  						return (List<Transaction>) serializer.ReadObject(archive.Entries[0].Open());  					}  					else if (response.StatusCode == HttpStatusCode.NotFound)  					{	// Not found is expected until the resource is ready  						// Delay a bit to wait for the response  						await Task.Delay(500);  					}  					else  					{  						var stream = new StreamReader(await response.Content.ReadAsStreamAsync());  						var result = stream.ReadToEnd();  						throw new Exception(result);  					}  				}  				catch (WebException ex)  				{  					var response = (HttpWebResponse) ex.Response;  					var stream = new StreamReader(response.GetResponseStream());  					var result = stream.ReadToEnd();  					throw new Exception(result);	  				}  			}
Magic Number,OANDARestLibrary,Rest,C:\repos\oanda_rest-csharp-refimpl\Reference Implementation\OANDARestLibrary\Rest.cs,GetFullTransactionHistoryAsync,The following statement contains a magic number: for (int retries = 0; retries < 20; retries++)  			{  				try  				{  					var response = await client.GetAsync(location);  					if (response.IsSuccessStatusCode)  					{  						var serializer = new DataContractJsonSerializer(typeof (List<Transaction>));  						var archive = new ZipArchive(await response.Content.ReadAsStreamAsync());  						return (List<Transaction>) serializer.ReadObject(archive.Entries[0].Open());  					}  					else if (response.StatusCode == HttpStatusCode.NotFound)  					{	// Not found is expected until the resource is ready  						// Delay a bit to wait for the response  						await Task.Delay(500);  					}  					else  					{  						var stream = new StreamReader(await response.Content.ReadAsStreamAsync());  						var result = stream.ReadToEnd();  						throw new Exception(result);  					}  				}  				catch (WebException ex)  				{  					var response = (HttpWebResponse) ex.Response;  					var stream = new StreamReader(response.GetResponseStream());  					var result = stream.ReadToEnd();  					throw new Exception(result);	  				}  			}
Magic Number,OANDARestLibrary.TradeLibrary.DataTypes.Communications,HprData,C:\repos\oanda_rest-csharp-refimpl\Reference Implementation\OANDARestLibrary\TradeLibrary\DataTypes\Communications\HistoricalPositionRatioResponse.cs,GetData,The following statement contains a magic number: foreach (var list in data)  			{  				var hpr = new HistoricalPositionRatio()  					{  						exchangeRate = double.Parse(list[2])'  						longPositionRatio = double.Parse(list[1])'  						timestamp = long.Parse(list[0])  					};  				result.Add(hpr);  			}
Missing Default,OANDARestLibrary.TradeLibrary.DataTypes,Transaction,C:\repos\oanda_rest-csharp-refimpl\Reference Implementation\OANDARestLibrary\TradeLibrary\DataTypes\Transaction.cs,GetTitle,The following switch statement is missing a default case: switch ( type )              {                  case "CloseOrder":                      return "Order Closed";                  case "SellLimit":                      return "Sell Limit Order Created";                  case "BuyLimit":                      return "Buy Limit Order Created";              }
