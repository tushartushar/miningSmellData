Implementation smell,Namespace,Class,File,Method,Description
Long Method,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The method has 165 lines of code.
Complex Method,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendButton,Cyclomatic complexity of the method is 9
Long Parameter List,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendButton,The method has 5 parameters. Parameters: button' buttonCode' deviceMap' flags' amount
Long Statement,Remote.XBMC.Frodo.Api,MpcHcRemote,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\MpcHc.Remote.cs,GetStatus,The length of the statement  "                                returnContent = returnContent.Replace("OnStatus("' "").TrimEnd(')').Replace("'"' "\"").Replace("\\\""' "'").Replace("' "'"'"); " is 126.
Long Statement,Remote.XBMC.Frodo.Api,XbmcAudioLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.AudioLibrary.cs,GetSongs,The length of the statement  "      var properties = new JsonArray(new[] { "title"' "thumbnail"' "genre"' "genreid"' "artist"' "year"' "duration"' "album"' "albumid"' "track" }); " is 142.
Long Statement,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,CheckTimerTick,The length of the statement  "            _eventClient.SendHelo("Yatse - Remote Control");//' IconType.IconPng' Helper.SkinPath + Helper.Instance.CurrentSkin + @"\Interface\RemoteControl.png"); " is 151.
Long Statement,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,JsonCommand,The length of the statement  "                logparam = parameter.GetType().ToString() == "System.String[]" ? String.Join("'"' (string[])parameter) : parameter.ToString(); " is 126.
Long Statement,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,JsonCommand,The length of the statement  "                if (cmd != "JSONRPC.Ping" && cmd != "VideoPlayer.GetTime" && cmd != "System.GetInfoLabels" && cmd != "AudioPlayer.GetTime") " is 123.
Long Statement,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,JsonArrayCommand,The length of the statement  "                logparam = parameter.GetType().ToString() == "System.String[]" ? String.Join("'"' (string[])parameter) : parameter.ToString(); " is 126.
Long Statement,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,JsonArrayCommand,The length of the statement  "                //if (cmd != "JSONRPC.Ping" && cmd != "VideoPlayer.GetTime" && cmd != "System.GetInfoLabels" && cmd != "AudioPlayer.GetTime") " is 125.
Long Statement,Remote.XBMC.Frodo.Api,XbmcFile,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.File.cs,DownloadImages,The length of the statement  "                    _parent.GenerateThumb(apiImageDownloadInfo.Destination' apiImageDownloadInfo.Destination' apiImageDownloadInfo.MaxHeight); " is 122.
Long Statement,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The length of the statement  "                        var percent = Math.Floor(100.0 * Convert.ToInt32("0" + data[2]' CultureInfo.InvariantCulture) / Convert.ToInt32("0" + data[4]' CultureInfo.InvariantCulture)); " is 158.
Long Statement,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The length of the statement  "                    _nowPlaying.Time = new TimeSpan(0' Convert.ToInt32("0" + time["hours"])' Convert.ToInt32("0" + time["minutes"])' Convert.ToInt32("0" + time["seconds"])); " is 153.
Long Statement,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The length of the statement  "                    _nowPlaying.Duration = new TimeSpan(0' Convert.ToInt32("0" + total["hours"])' Convert.ToInt32("0" + total["minutes"])' Convert.ToInt32("0" + total["seconds"])); " is 160.
Long Statement,Remote.XBMC.Frodo.Api,XbmcVideoLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.VideoLibrary.cs,GetTvEpisodes,The length of the statement  "      var properties = new JsonArray(new[] { "title"' "plot"' "season"' "episode"' "showtitle"' "tvshowid"' "fanart"' "thumbnail"' "rating"' "playcount"' "firstaired" }); " is 164.
Long Statement,Remote.XBMC.Frodo.Api,XbmcVideoLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.VideoLibrary.cs,GetTvShows,The length of the statement  "      var properties = new JsonArray(new[] { "title"' "plot"' "genre"' "fanart"' "thumbnail"' "rating"' "mpaa"' "studio"' "playcount"' "premiered"' "episode" }); " is 155.
Long Statement,Remote.XBMC.Frodo.Api,XbmcVideoLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.VideoLibrary.cs,GetMovies,The length of the statement  "      var properties = new JsonArray(new[] { "title"' "plot"' "genre"' "year"' "fanart"' "thumbnail"' "playcount"' "studio"' "rating"' "runtime"' "mpaa"' "originaltitle"' "director"' "votes" }); " is 188.
Complex Conditional,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,JsonCommand,The conditional expression  "cmd != "JSONRPC.Ping" && cmd != "VideoPlayer.GetTime" && cmd != "System.GetInfoLabels" && cmd != "AudioPlayer.GetTime""  is complex.
Empty Catch Block,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Connect,The method has an empty catch block.
Empty Catch Block,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Disconnect,The method has an empty catch block.
Empty Catch Block,Remote.XBMC.Frodo.Api,XbmcAudioLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.AudioLibrary.cs,GetGenres,The method has an empty catch block.
Empty Catch Block,Remote.XBMC.Frodo.Api,XbmcAudioLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.AudioLibrary.cs,GetArtists,The method has an empty catch block.
Empty Catch Block,Remote.XBMC.Frodo.Api,XbmcAudioLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.AudioLibrary.cs,GetAlbums,The method has an empty catch block.
Empty Catch Block,Remote.XBMC.Frodo.Api,XbmcAudioLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.AudioLibrary.cs,GetSongs,The method has an empty catch block.
Empty Catch Block,Remote.XBMC.Frodo.Api,XbmcVideoLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.VideoLibrary.cs,GetTvSeasons,The method has an empty catch block.
Empty Catch Block,Remote.XBMC.Frodo.Api,XbmcVideoLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.VideoLibrary.cs,GetTvEpisodes,The method has an empty catch block.
Empty Catch Block,Remote.XBMC.Frodo.Api,XbmcVideoLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.VideoLibrary.cs,GetTvShows,The method has an empty catch block.
Empty Catch Block,Remote.XBMC.Frodo.Api,XbmcVideoLibrary,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.VideoLibrary.cs,GetMovies,The method has an empty catch block.
Magic Number,Remote.XBMC.Frodo.Api,JsonRpcClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\JsonRpcClient.cs,GetWebRequest,The following statement contains a magic number: webRequest.ReadWriteTimeout = 1000000;
Magic Number,Remote.XBMC.Frodo.Api,JsonRpcClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\JsonRpcClient.cs,Invoke,The following statement contains a magic number: try              {                  var request = GetWebRequest(new Uri(Url));                  request.Method = "POST";                  request.Timeout = 300000;                  var utf8EmitBom = new UTF8Encoding(false);                  using (var stream = request.GetRequestStream())                  {                      stream.ReadTimeout = 300000;                      using (var writer = new StreamWriter(stream' utf8EmitBom))                      {                          var call = new JsonObject();                          call["id"] = ++_id;                          call["jsonrpc"] = "2.0";                          call["method"] = method;                          if (args != null)                              call["params"] = args;                          JsonConvert.Export(call' writer);                      }                  }                  object ret;                  using (var response = GetWebResponse(request))                      using (var stream = response.GetResponseStream())                          using (var reader = new StreamReader(stream' Encoding.UTF8))                              ret = OnResponse(JsonText.CreateReader(reader)' returnType);                  return ret;              }              catch (WebException ex)              {                  throw new JsonException("Invalid JSON-RPC response. It contains neither a result nor error : " + ex.Message);              }
Magic Number,Remote.XBMC.Frodo.Api,JsonRpcClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\JsonRpcClient.cs,Invoke,The following statement contains a magic number: try              {                  var request = GetWebRequest(new Uri(Url));                  request.Method = "POST";                  request.Timeout = 300000;                  var utf8EmitBom = new UTF8Encoding(false);                  using (var stream = request.GetRequestStream())                  {                      stream.ReadTimeout = 300000;                      using (var writer = new StreamWriter(stream' utf8EmitBom))                      {                          var call = new JsonObject();                          call["id"] = ++_id;                          call["jsonrpc"] = "2.0";                          call["method"] = method;                          if (args != null)                              call["params"] = args;                          JsonConvert.Export(call' writer);                      }                  }                  object ret;                  using (var response = GetWebResponse(request))                      using (var stream = response.GetResponseStream())                          using (var reader = new StreamReader(stream' Encoding.UTF8))                              ret = OnResponse(JsonText.CreateReader(reader)' returnType);                  return ret;              }              catch (WebException ex)              {                  throw new JsonException("Invalid JSON-RPC response. It contains neither a result nor error : " + ex.Message);              }
Magic Number,Remote.XBMC.Frodo.Api,MpcHcRemote,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\MpcHc.Remote.cs,Command,The following statement contains a magic number: try              {                  request = (HttpWebRequest)WebRequest.Create(new Uri(uri));                  request.Method = "GET";                  request.Timeout = 1000;                  _parent.Log("MPCCOMMAND : " + cmd);                  _parent.Trace(uri);                  using (var response = (HttpWebResponse)request.GetResponse())                  {                      using (var stream = response.GetResponseStream())                      {                          if (stream != null)                              using (var reader = new StreamReader(stream' Encoding.UTF8))                              {                                  var reqContent = reader.ReadToEnd();                                  _parent.Trace(reqContent);                                  returnContent = true;                              }                      }                  }              }              catch (WebException e)              {                  _parent.Log("ERROR - MPCCOMMAND : " + cmd + " - " + e.Message);                  if (e.Status == WebExceptionStatus.Timeout)                  {                      _parent.MpcLoaded = false;                  }              }
Magic Number,Remote.XBMC.Frodo.Api,MpcHcRemote,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\MpcHc.Remote.cs,GetStatus,The following statement contains a magic number: try              {                  request = (HttpWebRequest)WebRequest.Create(new Uri(uri));                  request.Method = "GET";                  request.Timeout = 1000;                  _parent.Trace(uri);                  using (var response = (HttpWebResponse)request.GetResponse())                  {                      using (var stream = response.GetResponseStream())                      {                          if (stream != null)                              using (var reader = new StreamReader(stream' Encoding.UTF8))                              {                                  var reqContent = reader.ReadToEnd();                                  _parent.Trace(reqContent);                                  returnContent = reqContent;                                  returnContent = returnContent.Replace("OnStatus("' "").TrimEnd(')').Replace("'"' "\"").Replace("\\\""' "'").Replace("' "'"'");                              }                      }                  }              }              catch (WebException e)              {                  _parent.Log("ERROR - MPCCOMMAND : Status" + " - " + e.Message);                  if (e.Status == WebExceptionStatus.Timeout)                  {                      _parent.MpcLoaded = false;                  }              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[2] = (byte)'M';
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[3] = (byte)'C';
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[4] = MajorVersion;
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[5] = MinorVersion;
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: if (currentPacket == 1)              {                  header[6] = (byte)(((ushort)packetType & 0xff00) >> 8);                  header[7] = (byte)((ushort)packetType & 0x00ff);              }              else              {                  header[6] = ((ushort)PacketType.PtBlob & 0xff00) >> 8;                  header[7] = (ushort)PacketType.PtBlob & 0x00ff;              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: if (currentPacket == 1)              {                  header[6] = (byte)(((ushort)packetType & 0xff00) >> 8);                  header[7] = (byte)((ushort)packetType & 0x00ff);              }              else              {                  header[6] = ((ushort)PacketType.PtBlob & 0xff00) >> 8;                  header[7] = (ushort)PacketType.PtBlob & 0x00ff;              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: if (currentPacket == 1)              {                  header[6] = (byte)(((ushort)packetType & 0xff00) >> 8);                  header[7] = (byte)((ushort)packetType & 0x00ff);              }              else              {                  header[6] = ((ushort)PacketType.PtBlob & 0xff00) >> 8;                  header[7] = (ushort)PacketType.PtBlob & 0x00ff;              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: if (currentPacket == 1)              {                  header[6] = (byte)(((ushort)packetType & 0xff00) >> 8);                  header[7] = (byte)((ushort)packetType & 0x00ff);              }              else              {                  header[6] = ((ushort)PacketType.PtBlob & 0xff00) >> 8;                  header[7] = (ushort)PacketType.PtBlob & 0x00ff;              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: if (currentPacket == 1)              {                  header[6] = (byte)(((ushort)packetType & 0xff00) >> 8);                  header[7] = (byte)((ushort)packetType & 0x00ff);              }              else              {                  header[6] = ((ushort)PacketType.PtBlob & 0xff00) >> 8;                  header[7] = (ushort)PacketType.PtBlob & 0x00ff;              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: if (currentPacket == 1)              {                  header[6] = (byte)(((ushort)packetType & 0xff00) >> 8);                  header[7] = (byte)((ushort)packetType & 0x00ff);              }              else              {                  header[6] = ((ushort)PacketType.PtBlob & 0xff00) >> 8;                  header[7] = (ushort)PacketType.PtBlob & 0x00ff;              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[8] = (byte)((currentPacket & 0xff000000) >> 24);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[8] = (byte)((currentPacket & 0xff000000) >> 24);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[9] = (byte)((currentPacket & 0x00ff0000) >> 16);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[9] = (byte)((currentPacket & 0x00ff0000) >> 16);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[10] = (byte)((currentPacket & 0x0000ff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[10] = (byte)((currentPacket & 0x0000ff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[11] = (byte)(currentPacket & 0x000000ff);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[12] = (byte)((numberOfPackets & 0xff000000) >> 24);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[12] = (byte)((numberOfPackets & 0xff000000) >> 24);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[13] = (byte)((numberOfPackets & 0x00ff0000) >> 16);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[13] = (byte)((numberOfPackets & 0x00ff0000) >> 16);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[14] = (byte)((numberOfPackets & 0x0000ff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[14] = (byte)((numberOfPackets & 0x0000ff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[15] = (byte)(numberOfPackets & 0x000000ff);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[16] = (byte)((payloadSize & 0xff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[16] = (byte)((payloadSize & 0xff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[17] = (byte)(payloadSize & 0x00ff);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[18] = (byte)((_uniqueToken & 0xff000000) >> 24);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[18] = (byte)((_uniqueToken & 0xff000000) >> 24);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[19] = (byte)((_uniqueToken & 0x00ff0000) >> 16);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[19] = (byte)((_uniqueToken & 0x00ff0000) >> 16);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[20] = (byte)((_uniqueToken & 0x0000ff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[20] = (byte)((_uniqueToken & 0x0000ff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,Header,The following statement contains a magic number: header[21] = (byte)(_uniqueToken & 0x000000ff);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendHelo,The following statement contains a magic number: var payload = new byte[devName.Length + 12 + icon.Length];
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendHelo,The following statement contains a magic number: for (var i = 0; i < 8; i++)                  payload[offset++] = 0;
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendHelo,The following statement contains a magic number: Array.Copy(icon' 0' payload' devName.Length + 12' icon.Length);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendNotification,The following statement contains a magic number: var payload = new byte[caption.Length + message.Length + 7 + icon.Length];
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendNotification,The following statement contains a magic number: for (var i = 0; i < 4; i++)                  payload[offset++] = 0;
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendNotification,The following statement contains a magic number: Array.Copy(icon' 0' payload' caption.Length + message.Length + 7' icon.Length);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendButton,The following statement contains a magic number: var payload = new byte[button.Length + deviceMap.Length + 8];
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendButton,The following statement contains a magic number: payload[offset++] = (byte)((buttonCode & 0xff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendButton,The following statement contains a magic number: payload[offset++] = (byte)(((ushort)flags & 0xff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendButton,The following statement contains a magic number: payload[offset++] = (byte)((amount & 0xff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendMouse,The following statement contains a magic number: var payload = new byte[9];
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendMouse,The following statement contains a magic number: payload[offset++] = (byte)((x & 0xff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendMouse,The following statement contains a magic number: payload[offset++] = (byte)((y & 0xff00) >> 8);
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendLog,The following statement contains a magic number: var payload = new byte[message.Length + 2];
Magic Number,Remote.XBMC.Frodo.Api,XbmcEventClient,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.EventClient.cs,SendAction,The following statement contains a magic number: var payload = new byte[message.Length + 2];
Magic Number,Remote.XBMC.Frodo.Api,XbmcAudioPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.AudioPlayer.cs,AsyncPlayFiles,The following statement contains a magic number: while (_bw.IsBusy)              {                  Thread.Sleep(50);                  System.Windows.Forms.Application.DoEvents();              }
Magic Number,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,Hash,The following statement contains a magic number: for (var index = 0; index < chars.Length; index++)              {                  if (chars[index] <= 127)                      chars[index] = Char.ToLowerInvariant(chars[index]);              }
Magic Number,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,Hash,The following statement contains a magic number: foreach (var myByte in bytes)              {                  mCrc ^= ((uint)(myByte) << 24);                  for (var i = 0; i < 8; i++)                  {                      if ((Convert.ToUInt32(mCrc) & 0x80000000) == 0x80000000)                      {                          mCrc = (mCrc << 1) ^ 0x04C11DB7;                      }                      else                      {                          mCrc <<= 1;                      }                  }              }
Magic Number,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,Hash,The following statement contains a magic number: foreach (var myByte in bytes)              {                  mCrc ^= ((uint)(myByte) << 24);                  for (var i = 0; i < 8; i++)                  {                      if ((Convert.ToUInt32(mCrc) & 0x80000000) == 0x80000000)                      {                          mCrc = (mCrc << 1) ^ 0x04C11DB7;                      }                      else                      {                          mCrc <<= 1;                      }                  }              }
Magic Number,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,CheckRemote,The following statement contains a magic number: if (cAdditional != additional && force)              {                  _eventClient.SendAction( "LoadProfile(" + additional + ")");                  Thread.Sleep(400);                  cAdditional = GetAdditionalInfo();                  return cAdditional == additional;              }
Magic Number,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,TestConnection,The following statement contains a magic number: if (res)              {                  var version = GetVersion();                  var build = new Regex(@"r(\d+)");                  var m = build.Match(version);                  if (m.Success)                  {                      var ver = Convert.ToInt32("0" + m.Groups[1]'CultureInfo.InvariantCulture);                      if (ver < 29000 )                      {                          Log("Target version : " + ver + " not compatible !");                          return 2; // Plugin not compatible                      }                  }                  // If not build found just go will perhaps works              }
Magic Number,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,TestConnection,The following statement contains a magic number: if (res)              {                  var version = GetVersion();                  var build = new Regex(@"r(\d+)");                  var m = build.Match(version);                  if (m.Success)                  {                      var ver = Convert.ToInt32("0" + m.Groups[1]'CultureInfo.InvariantCulture);                      if (ver < 29000 )                      {                          Log("Target version : " + ver + " not compatible !");                          return 2; // Plugin not compatible                      }                  }                  // If not build found just go will perhaps works              }
Magic Number,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,Configure,The following statement contains a magic number: if (_checkTimer == null)              {                  _checkTimer = new Timer { Interval = 1500' SynchronizingObject = null };                  _checkTimer.Elapsed += CheckTimerTick;                  _checkTimer.Start();              }
Magic Number,Remote.XBMC.Frodo.Api,Xbmc,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.cs,Configure,The following statement contains a magic number: if (_nowplayingTimer == null)              {                  _nowplayingTimer = new Timer { Interval = 1000' SynchronizingObject = null };                  _nowplayingTimer.Elapsed += NowPlayingTimerTick;                  _nowplayingTimer.Start();              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcFile,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.File.cs,AsyncDownloadImages,The following statement contains a magic number: while (_workerDownloads.IsBusy)              {                  Thread.Sleep(50);                  System.Windows.Forms.Application.DoEvents();              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The following statement contains a magic number: lock (Locker)              {                  if (_parent.MpcLoaded)                  {                      var result = _parent.MpcHcRemote.GetStatus();                      var result2 = new ArrayList();                      MpcHcRemote.ParseCSVFields(result2' result);                      var data = (string[])result2.ToArray(typeof(string));                      if (data.Length > 6)                      {                          _nowPlaying.MediaType = "Video";                          _nowPlaying.Title = "Media Player Classic";                          _nowPlaying.Time = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[2]) / 1000);                          _nowPlaying.Duration = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[4]) / 1000);                          var percent = Math.Floor(100.0 * Convert.ToInt32("0" + data[2]' CultureInfo.InvariantCulture) / Convert.ToInt32("0" + data[4]' CultureInfo.InvariantCulture));                          if (Double.IsNaN(percent))                              percent = 0;                          _nowPlaying.Volume = Convert.ToInt32("0" + data[7]' CultureInfo.InvariantCulture);                          _nowPlaying.IsMuted = data[6] == "1";                          _nowPlaying.Progress = (int)percent;                      }                  }                  else                  {                      if (!_parent.IsConnected())                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var current = -1;                      var players = (JsonArray)_parent.JsonCommand("Player.GetActivePlayers"' null);                      if (players.Count > 0)                      {                          foreach (JsonObject player in players)                          {                              if (player["type"].ToString() == "picture")                                  continue;                              current = Int32.Parse(player["playerid"].ToString());                              _nowPlaying.MediaType = (string)player["type"];                          }                      }                        if (current == -1)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var items = new JsonObject();                      items["playerid"] = current;                      items["properties"] = new[]{                                              "file"'                                              "comment"'                                              "tvshowid"'                                              "albumartist"'                                              "duration"'                                              //"id"'                                              "album"'                                              //"votes"'                                             // "mpaa"'                                             // "writer"'                                             //"albumid"'                                              //"type"'                                              "genre"'                                              "year"'                                              //"plotoutline"'                                              "track"'                                              "artist"'                                              //"season"'                                              //"imdbnumber"'                                             // "studio"'                                              //"showlink"'                                              "showtitle"'                                              "episode"'                                              "season"'                                              "plot"'                                              "director"'                                              "studio"'                                              "rating"'                                              //"productioncode"'                                              //"country"'                                              //"premiered"'                                              //"originaltitle"'                                              //"artistid"'                                              //"firstaired"'                                              "tagline"'                                              "thumbnail"'                                              "fanart"                                              //"top250"'                                              //"trailer"                                          };                        var properties = new JsonObject();                      properties["playerid"] = current;                      properties["properties"] = new[]{                                              "totaltime"'                                              "percentage"'                                              "time"'                                              "speed"                                          };                        var appproperties = new JsonObject();                      appproperties["properties"] = new[]                                                        {                                                            "muted"'                                                            "volume"                                                        };                        var result1 = (JsonObject)_parent.JsonCommand("Player.GetProperties"' properties);                      var result2 = (JsonObject)_parent.JsonCommand("Player.GetItem"' items);                      var result3 = (JsonObject)_parent.JsonCommand("Application.GetProperties"' appproperties);                        if (result1 == null || result2 == null || result3 == null)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        result2 = (JsonObject)(result2)["item"];                        _nowPlaying.IsPaused = Convert.ToInt32("0" + result1["speed"].ToString().Replace("-"' "")) == 0;                      _nowPlaying.IsPlaying = !_nowPlaying.IsPaused;                      var time = (JsonObject)result1["time"];                      var total = (JsonObject)result1["totaltime"];                      _nowPlaying.Time = new TimeSpan(0' Convert.ToInt32("0" + time["hours"])' Convert.ToInt32("0" + time["minutes"])' Convert.ToInt32("0" + time["seconds"]));                      _nowPlaying.Duration = new TimeSpan(0' Convert.ToInt32("0" + total["hours"])' Convert.ToInt32("0" + total["minutes"])' Convert.ToInt32("0" + total["seconds"]));                      _nowPlaying.Progress = Convert.ToInt32("0" + result1["percentage"].ToString().Split('.')[0]);                      _nowPlaying.Volume = Convert.ToInt32("0" + result3["volume"]);                      _nowPlaying.IsMuted = (bool)result3["muted"];                        _parent.MpcLoaded = _nowPlaying.Duration == new TimeSpan(0' 0' 0' 1);                        _nowPlaying.FileName = result2["file"].ToString();                        if (_nowPlaying.MediaType == "audio")                      {                          _nowPlaying.MediaType = "Audio";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.Track = Convert.ToInt32("0" + result2["track"]);                          _nowPlaying.Artist = _parent.JsonArrayToString((JsonArray)result2["artist"]);                          _nowPlaying.Album = result2["album"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                        if (_nowPlaying.MediaType == "video")                      {                          _nowPlaying.MediaType = result2["type"].ToString() == "episode" ? "TvShow" : "Movie";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.SeasonNumber = Convert.ToInt32("0" + result2["season"].ToString().Replace("-"' ""));                          _nowPlaying.EpisodeNumber = Convert.ToInt32("0" + result2["episode"].ToString().Replace("-"' ""));                          _nowPlaying.ShowTitle = result2["showtitle"].ToString();                          _nowPlaying.Plot = result2["plot"].ToString();                          _nowPlaying.Director = _parent.JsonArrayToString((JsonArray)result2["director"]);                          _nowPlaying.Studio = _parent.JsonArrayToString((JsonArray)result2["studio"]);                          _nowPlaying.Tagline = result2["tagline"].ToString();                          _nowPlaying.Rating = result2["rating"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                  }              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The following statement contains a magic number: lock (Locker)              {                  if (_parent.MpcLoaded)                  {                      var result = _parent.MpcHcRemote.GetStatus();                      var result2 = new ArrayList();                      MpcHcRemote.ParseCSVFields(result2' result);                      var data = (string[])result2.ToArray(typeof(string));                      if (data.Length > 6)                      {                          _nowPlaying.MediaType = "Video";                          _nowPlaying.Title = "Media Player Classic";                          _nowPlaying.Time = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[2]) / 1000);                          _nowPlaying.Duration = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[4]) / 1000);                          var percent = Math.Floor(100.0 * Convert.ToInt32("0" + data[2]' CultureInfo.InvariantCulture) / Convert.ToInt32("0" + data[4]' CultureInfo.InvariantCulture));                          if (Double.IsNaN(percent))                              percent = 0;                          _nowPlaying.Volume = Convert.ToInt32("0" + data[7]' CultureInfo.InvariantCulture);                          _nowPlaying.IsMuted = data[6] == "1";                          _nowPlaying.Progress = (int)percent;                      }                  }                  else                  {                      if (!_parent.IsConnected())                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var current = -1;                      var players = (JsonArray)_parent.JsonCommand("Player.GetActivePlayers"' null);                      if (players.Count > 0)                      {                          foreach (JsonObject player in players)                          {                              if (player["type"].ToString() == "picture")                                  continue;                              current = Int32.Parse(player["playerid"].ToString());                              _nowPlaying.MediaType = (string)player["type"];                          }                      }                        if (current == -1)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var items = new JsonObject();                      items["playerid"] = current;                      items["properties"] = new[]{                                              "file"'                                              "comment"'                                              "tvshowid"'                                              "albumartist"'                                              "duration"'                                              //"id"'                                              "album"'                                              //"votes"'                                             // "mpaa"'                                             // "writer"'                                             //"albumid"'                                              //"type"'                                              "genre"'                                              "year"'                                              //"plotoutline"'                                              "track"'                                              "artist"'                                              //"season"'                                              //"imdbnumber"'                                             // "studio"'                                              //"showlink"'                                              "showtitle"'                                              "episode"'                                              "season"'                                              "plot"'                                              "director"'                                              "studio"'                                              "rating"'                                              //"productioncode"'                                              //"country"'                                              //"premiered"'                                              //"originaltitle"'                                              //"artistid"'                                              //"firstaired"'                                              "tagline"'                                              "thumbnail"'                                              "fanart"                                              //"top250"'                                              //"trailer"                                          };                        var properties = new JsonObject();                      properties["playerid"] = current;                      properties["properties"] = new[]{                                              "totaltime"'                                              "percentage"'                                              "time"'                                              "speed"                                          };                        var appproperties = new JsonObject();                      appproperties["properties"] = new[]                                                        {                                                            "muted"'                                                            "volume"                                                        };                        var result1 = (JsonObject)_parent.JsonCommand("Player.GetProperties"' properties);                      var result2 = (JsonObject)_parent.JsonCommand("Player.GetItem"' items);                      var result3 = (JsonObject)_parent.JsonCommand("Application.GetProperties"' appproperties);                        if (result1 == null || result2 == null || result3 == null)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        result2 = (JsonObject)(result2)["item"];                        _nowPlaying.IsPaused = Convert.ToInt32("0" + result1["speed"].ToString().Replace("-"' "")) == 0;                      _nowPlaying.IsPlaying = !_nowPlaying.IsPaused;                      var time = (JsonObject)result1["time"];                      var total = (JsonObject)result1["totaltime"];                      _nowPlaying.Time = new TimeSpan(0' Convert.ToInt32("0" + time["hours"])' Convert.ToInt32("0" + time["minutes"])' Convert.ToInt32("0" + time["seconds"]));                      _nowPlaying.Duration = new TimeSpan(0' Convert.ToInt32("0" + total["hours"])' Convert.ToInt32("0" + total["minutes"])' Convert.ToInt32("0" + total["seconds"]));                      _nowPlaying.Progress = Convert.ToInt32("0" + result1["percentage"].ToString().Split('.')[0]);                      _nowPlaying.Volume = Convert.ToInt32("0" + result3["volume"]);                      _nowPlaying.IsMuted = (bool)result3["muted"];                        _parent.MpcLoaded = _nowPlaying.Duration == new TimeSpan(0' 0' 0' 1);                        _nowPlaying.FileName = result2["file"].ToString();                        if (_nowPlaying.MediaType == "audio")                      {                          _nowPlaying.MediaType = "Audio";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.Track = Convert.ToInt32("0" + result2["track"]);                          _nowPlaying.Artist = _parent.JsonArrayToString((JsonArray)result2["artist"]);                          _nowPlaying.Album = result2["album"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                        if (_nowPlaying.MediaType == "video")                      {                          _nowPlaying.MediaType = result2["type"].ToString() == "episode" ? "TvShow" : "Movie";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.SeasonNumber = Convert.ToInt32("0" + result2["season"].ToString().Replace("-"' ""));                          _nowPlaying.EpisodeNumber = Convert.ToInt32("0" + result2["episode"].ToString().Replace("-"' ""));                          _nowPlaying.ShowTitle = result2["showtitle"].ToString();                          _nowPlaying.Plot = result2["plot"].ToString();                          _nowPlaying.Director = _parent.JsonArrayToString((JsonArray)result2["director"]);                          _nowPlaying.Studio = _parent.JsonArrayToString((JsonArray)result2["studio"]);                          _nowPlaying.Tagline = result2["tagline"].ToString();                          _nowPlaying.Rating = result2["rating"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                  }              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The following statement contains a magic number: lock (Locker)              {                  if (_parent.MpcLoaded)                  {                      var result = _parent.MpcHcRemote.GetStatus();                      var result2 = new ArrayList();                      MpcHcRemote.ParseCSVFields(result2' result);                      var data = (string[])result2.ToArray(typeof(string));                      if (data.Length > 6)                      {                          _nowPlaying.MediaType = "Video";                          _nowPlaying.Title = "Media Player Classic";                          _nowPlaying.Time = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[2]) / 1000);                          _nowPlaying.Duration = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[4]) / 1000);                          var percent = Math.Floor(100.0 * Convert.ToInt32("0" + data[2]' CultureInfo.InvariantCulture) / Convert.ToInt32("0" + data[4]' CultureInfo.InvariantCulture));                          if (Double.IsNaN(percent))                              percent = 0;                          _nowPlaying.Volume = Convert.ToInt32("0" + data[7]' CultureInfo.InvariantCulture);                          _nowPlaying.IsMuted = data[6] == "1";                          _nowPlaying.Progress = (int)percent;                      }                  }                  else                  {                      if (!_parent.IsConnected())                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var current = -1;                      var players = (JsonArray)_parent.JsonCommand("Player.GetActivePlayers"' null);                      if (players.Count > 0)                      {                          foreach (JsonObject player in players)                          {                              if (player["type"].ToString() == "picture")                                  continue;                              current = Int32.Parse(player["playerid"].ToString());                              _nowPlaying.MediaType = (string)player["type"];                          }                      }                        if (current == -1)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var items = new JsonObject();                      items["playerid"] = current;                      items["properties"] = new[]{                                              "file"'                                              "comment"'                                              "tvshowid"'                                              "albumartist"'                                              "duration"'                                              //"id"'                                              "album"'                                              //"votes"'                                             // "mpaa"'                                             // "writer"'                                             //"albumid"'                                              //"type"'                                              "genre"'                                              "year"'                                              //"plotoutline"'                                              "track"'                                              "artist"'                                              //"season"'                                              //"imdbnumber"'                                             // "studio"'                                              //"showlink"'                                              "showtitle"'                                              "episode"'                                              "season"'                                              "plot"'                                              "director"'                                              "studio"'                                              "rating"'                                              //"productioncode"'                                              //"country"'                                              //"premiered"'                                              //"originaltitle"'                                              //"artistid"'                                              //"firstaired"'                                              "tagline"'                                              "thumbnail"'                                              "fanart"                                              //"top250"'                                              //"trailer"                                          };                        var properties = new JsonObject();                      properties["playerid"] = current;                      properties["properties"] = new[]{                                              "totaltime"'                                              "percentage"'                                              "time"'                                              "speed"                                          };                        var appproperties = new JsonObject();                      appproperties["properties"] = new[]                                                        {                                                            "muted"'                                                            "volume"                                                        };                        var result1 = (JsonObject)_parent.JsonCommand("Player.GetProperties"' properties);                      var result2 = (JsonObject)_parent.JsonCommand("Player.GetItem"' items);                      var result3 = (JsonObject)_parent.JsonCommand("Application.GetProperties"' appproperties);                        if (result1 == null || result2 == null || result3 == null)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        result2 = (JsonObject)(result2)["item"];                        _nowPlaying.IsPaused = Convert.ToInt32("0" + result1["speed"].ToString().Replace("-"' "")) == 0;                      _nowPlaying.IsPlaying = !_nowPlaying.IsPaused;                      var time = (JsonObject)result1["time"];                      var total = (JsonObject)result1["totaltime"];                      _nowPlaying.Time = new TimeSpan(0' Convert.ToInt32("0" + time["hours"])' Convert.ToInt32("0" + time["minutes"])' Convert.ToInt32("0" + time["seconds"]));                      _nowPlaying.Duration = new TimeSpan(0' Convert.ToInt32("0" + total["hours"])' Convert.ToInt32("0" + total["minutes"])' Convert.ToInt32("0" + total["seconds"]));                      _nowPlaying.Progress = Convert.ToInt32("0" + result1["percentage"].ToString().Split('.')[0]);                      _nowPlaying.Volume = Convert.ToInt32("0" + result3["volume"]);                      _nowPlaying.IsMuted = (bool)result3["muted"];                        _parent.MpcLoaded = _nowPlaying.Duration == new TimeSpan(0' 0' 0' 1);                        _nowPlaying.FileName = result2["file"].ToString();                        if (_nowPlaying.MediaType == "audio")                      {                          _nowPlaying.MediaType = "Audio";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.Track = Convert.ToInt32("0" + result2["track"]);                          _nowPlaying.Artist = _parent.JsonArrayToString((JsonArray)result2["artist"]);                          _nowPlaying.Album = result2["album"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                        if (_nowPlaying.MediaType == "video")                      {                          _nowPlaying.MediaType = result2["type"].ToString() == "episode" ? "TvShow" : "Movie";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.SeasonNumber = Convert.ToInt32("0" + result2["season"].ToString().Replace("-"' ""));                          _nowPlaying.EpisodeNumber = Convert.ToInt32("0" + result2["episode"].ToString().Replace("-"' ""));                          _nowPlaying.ShowTitle = result2["showtitle"].ToString();                          _nowPlaying.Plot = result2["plot"].ToString();                          _nowPlaying.Director = _parent.JsonArrayToString((JsonArray)result2["director"]);                          _nowPlaying.Studio = _parent.JsonArrayToString((JsonArray)result2["studio"]);                          _nowPlaying.Tagline = result2["tagline"].ToString();                          _nowPlaying.Rating = result2["rating"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                  }              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The following statement contains a magic number: lock (Locker)              {                  if (_parent.MpcLoaded)                  {                      var result = _parent.MpcHcRemote.GetStatus();                      var result2 = new ArrayList();                      MpcHcRemote.ParseCSVFields(result2' result);                      var data = (string[])result2.ToArray(typeof(string));                      if (data.Length > 6)                      {                          _nowPlaying.MediaType = "Video";                          _nowPlaying.Title = "Media Player Classic";                          _nowPlaying.Time = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[2]) / 1000);                          _nowPlaying.Duration = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[4]) / 1000);                          var percent = Math.Floor(100.0 * Convert.ToInt32("0" + data[2]' CultureInfo.InvariantCulture) / Convert.ToInt32("0" + data[4]' CultureInfo.InvariantCulture));                          if (Double.IsNaN(percent))                              percent = 0;                          _nowPlaying.Volume = Convert.ToInt32("0" + data[7]' CultureInfo.InvariantCulture);                          _nowPlaying.IsMuted = data[6] == "1";                          _nowPlaying.Progress = (int)percent;                      }                  }                  else                  {                      if (!_parent.IsConnected())                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var current = -1;                      var players = (JsonArray)_parent.JsonCommand("Player.GetActivePlayers"' null);                      if (players.Count > 0)                      {                          foreach (JsonObject player in players)                          {                              if (player["type"].ToString() == "picture")                                  continue;                              current = Int32.Parse(player["playerid"].ToString());                              _nowPlaying.MediaType = (string)player["type"];                          }                      }                        if (current == -1)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var items = new JsonObject();                      items["playerid"] = current;                      items["properties"] = new[]{                                              "file"'                                              "comment"'                                              "tvshowid"'                                              "albumartist"'                                              "duration"'                                              //"id"'                                              "album"'                                              //"votes"'                                             // "mpaa"'                                             // "writer"'                                             //"albumid"'                                              //"type"'                                              "genre"'                                              "year"'                                              //"plotoutline"'                                              "track"'                                              "artist"'                                              //"season"'                                              //"imdbnumber"'                                             // "studio"'                                              //"showlink"'                                              "showtitle"'                                              "episode"'                                              "season"'                                              "plot"'                                              "director"'                                              "studio"'                                              "rating"'                                              //"productioncode"'                                              //"country"'                                              //"premiered"'                                              //"originaltitle"'                                              //"artistid"'                                              //"firstaired"'                                              "tagline"'                                              "thumbnail"'                                              "fanart"                                              //"top250"'                                              //"trailer"                                          };                        var properties = new JsonObject();                      properties["playerid"] = current;                      properties["properties"] = new[]{                                              "totaltime"'                                              "percentage"'                                              "time"'                                              "speed"                                          };                        var appproperties = new JsonObject();                      appproperties["properties"] = new[]                                                        {                                                            "muted"'                                                            "volume"                                                        };                        var result1 = (JsonObject)_parent.JsonCommand("Player.GetProperties"' properties);                      var result2 = (JsonObject)_parent.JsonCommand("Player.GetItem"' items);                      var result3 = (JsonObject)_parent.JsonCommand("Application.GetProperties"' appproperties);                        if (result1 == null || result2 == null || result3 == null)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        result2 = (JsonObject)(result2)["item"];                        _nowPlaying.IsPaused = Convert.ToInt32("0" + result1["speed"].ToString().Replace("-"' "")) == 0;                      _nowPlaying.IsPlaying = !_nowPlaying.IsPaused;                      var time = (JsonObject)result1["time"];                      var total = (JsonObject)result1["totaltime"];                      _nowPlaying.Time = new TimeSpan(0' Convert.ToInt32("0" + time["hours"])' Convert.ToInt32("0" + time["minutes"])' Convert.ToInt32("0" + time["seconds"]));                      _nowPlaying.Duration = new TimeSpan(0' Convert.ToInt32("0" + total["hours"])' Convert.ToInt32("0" + total["minutes"])' Convert.ToInt32("0" + total["seconds"]));                      _nowPlaying.Progress = Convert.ToInt32("0" + result1["percentage"].ToString().Split('.')[0]);                      _nowPlaying.Volume = Convert.ToInt32("0" + result3["volume"]);                      _nowPlaying.IsMuted = (bool)result3["muted"];                        _parent.MpcLoaded = _nowPlaying.Duration == new TimeSpan(0' 0' 0' 1);                        _nowPlaying.FileName = result2["file"].ToString();                        if (_nowPlaying.MediaType == "audio")                      {                          _nowPlaying.MediaType = "Audio";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.Track = Convert.ToInt32("0" + result2["track"]);                          _nowPlaying.Artist = _parent.JsonArrayToString((JsonArray)result2["artist"]);                          _nowPlaying.Album = result2["album"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                        if (_nowPlaying.MediaType == "video")                      {                          _nowPlaying.MediaType = result2["type"].ToString() == "episode" ? "TvShow" : "Movie";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.SeasonNumber = Convert.ToInt32("0" + result2["season"].ToString().Replace("-"' ""));                          _nowPlaying.EpisodeNumber = Convert.ToInt32("0" + result2["episode"].ToString().Replace("-"' ""));                          _nowPlaying.ShowTitle = result2["showtitle"].ToString();                          _nowPlaying.Plot = result2["plot"].ToString();                          _nowPlaying.Director = _parent.JsonArrayToString((JsonArray)result2["director"]);                          _nowPlaying.Studio = _parent.JsonArrayToString((JsonArray)result2["studio"]);                          _nowPlaying.Tagline = result2["tagline"].ToString();                          _nowPlaying.Rating = result2["rating"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                  }              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The following statement contains a magic number: lock (Locker)              {                  if (_parent.MpcLoaded)                  {                      var result = _parent.MpcHcRemote.GetStatus();                      var result2 = new ArrayList();                      MpcHcRemote.ParseCSVFields(result2' result);                      var data = (string[])result2.ToArray(typeof(string));                      if (data.Length > 6)                      {                          _nowPlaying.MediaType = "Video";                          _nowPlaying.Title = "Media Player Classic";                          _nowPlaying.Time = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[2]) / 1000);                          _nowPlaying.Duration = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[4]) / 1000);                          var percent = Math.Floor(100.0 * Convert.ToInt32("0" + data[2]' CultureInfo.InvariantCulture) / Convert.ToInt32("0" + data[4]' CultureInfo.InvariantCulture));                          if (Double.IsNaN(percent))                              percent = 0;                          _nowPlaying.Volume = Convert.ToInt32("0" + data[7]' CultureInfo.InvariantCulture);                          _nowPlaying.IsMuted = data[6] == "1";                          _nowPlaying.Progress = (int)percent;                      }                  }                  else                  {                      if (!_parent.IsConnected())                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var current = -1;                      var players = (JsonArray)_parent.JsonCommand("Player.GetActivePlayers"' null);                      if (players.Count > 0)                      {                          foreach (JsonObject player in players)                          {                              if (player["type"].ToString() == "picture")                                  continue;                              current = Int32.Parse(player["playerid"].ToString());                              _nowPlaying.MediaType = (string)player["type"];                          }                      }                        if (current == -1)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var items = new JsonObject();                      items["playerid"] = current;                      items["properties"] = new[]{                                              "file"'                                              "comment"'                                              "tvshowid"'                                              "albumartist"'                                              "duration"'                                              //"id"'                                              "album"'                                              //"votes"'                                             // "mpaa"'                                             // "writer"'                                             //"albumid"'                                              //"type"'                                              "genre"'                                              "year"'                                              //"plotoutline"'                                              "track"'                                              "artist"'                                              //"season"'                                              //"imdbnumber"'                                             // "studio"'                                              //"showlink"'                                              "showtitle"'                                              "episode"'                                              "season"'                                              "plot"'                                              "director"'                                              "studio"'                                              "rating"'                                              //"productioncode"'                                              //"country"'                                              //"premiered"'                                              //"originaltitle"'                                              //"artistid"'                                              //"firstaired"'                                              "tagline"'                                              "thumbnail"'                                              "fanart"                                              //"top250"'                                              //"trailer"                                          };                        var properties = new JsonObject();                      properties["playerid"] = current;                      properties["properties"] = new[]{                                              "totaltime"'                                              "percentage"'                                              "time"'                                              "speed"                                          };                        var appproperties = new JsonObject();                      appproperties["properties"] = new[]                                                        {                                                            "muted"'                                                            "volume"                                                        };                        var result1 = (JsonObject)_parent.JsonCommand("Player.GetProperties"' properties);                      var result2 = (JsonObject)_parent.JsonCommand("Player.GetItem"' items);                      var result3 = (JsonObject)_parent.JsonCommand("Application.GetProperties"' appproperties);                        if (result1 == null || result2 == null || result3 == null)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        result2 = (JsonObject)(result2)["item"];                        _nowPlaying.IsPaused = Convert.ToInt32("0" + result1["speed"].ToString().Replace("-"' "")) == 0;                      _nowPlaying.IsPlaying = !_nowPlaying.IsPaused;                      var time = (JsonObject)result1["time"];                      var total = (JsonObject)result1["totaltime"];                      _nowPlaying.Time = new TimeSpan(0' Convert.ToInt32("0" + time["hours"])' Convert.ToInt32("0" + time["minutes"])' Convert.ToInt32("0" + time["seconds"]));                      _nowPlaying.Duration = new TimeSpan(0' Convert.ToInt32("0" + total["hours"])' Convert.ToInt32("0" + total["minutes"])' Convert.ToInt32("0" + total["seconds"]));                      _nowPlaying.Progress = Convert.ToInt32("0" + result1["percentage"].ToString().Split('.')[0]);                      _nowPlaying.Volume = Convert.ToInt32("0" + result3["volume"]);                      _nowPlaying.IsMuted = (bool)result3["muted"];                        _parent.MpcLoaded = _nowPlaying.Duration == new TimeSpan(0' 0' 0' 1);                        _nowPlaying.FileName = result2["file"].ToString();                        if (_nowPlaying.MediaType == "audio")                      {                          _nowPlaying.MediaType = "Audio";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.Track = Convert.ToInt32("0" + result2["track"]);                          _nowPlaying.Artist = _parent.JsonArrayToString((JsonArray)result2["artist"]);                          _nowPlaying.Album = result2["album"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                        if (_nowPlaying.MediaType == "video")                      {                          _nowPlaying.MediaType = result2["type"].ToString() == "episode" ? "TvShow" : "Movie";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.SeasonNumber = Convert.ToInt32("0" + result2["season"].ToString().Replace("-"' ""));                          _nowPlaying.EpisodeNumber = Convert.ToInt32("0" + result2["episode"].ToString().Replace("-"' ""));                          _nowPlaying.ShowTitle = result2["showtitle"].ToString();                          _nowPlaying.Plot = result2["plot"].ToString();                          _nowPlaying.Director = _parent.JsonArrayToString((JsonArray)result2["director"]);                          _nowPlaying.Studio = _parent.JsonArrayToString((JsonArray)result2["studio"]);                          _nowPlaying.Tagline = result2["tagline"].ToString();                          _nowPlaying.Rating = result2["rating"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                  }              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The following statement contains a magic number: lock (Locker)              {                  if (_parent.MpcLoaded)                  {                      var result = _parent.MpcHcRemote.GetStatus();                      var result2 = new ArrayList();                      MpcHcRemote.ParseCSVFields(result2' result);                      var data = (string[])result2.ToArray(typeof(string));                      if (data.Length > 6)                      {                          _nowPlaying.MediaType = "Video";                          _nowPlaying.Title = "Media Player Classic";                          _nowPlaying.Time = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[2]) / 1000);                          _nowPlaying.Duration = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[4]) / 1000);                          var percent = Math.Floor(100.0 * Convert.ToInt32("0" + data[2]' CultureInfo.InvariantCulture) / Convert.ToInt32("0" + data[4]' CultureInfo.InvariantCulture));                          if (Double.IsNaN(percent))                              percent = 0;                          _nowPlaying.Volume = Convert.ToInt32("0" + data[7]' CultureInfo.InvariantCulture);                          _nowPlaying.IsMuted = data[6] == "1";                          _nowPlaying.Progress = (int)percent;                      }                  }                  else                  {                      if (!_parent.IsConnected())                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var current = -1;                      var players = (JsonArray)_parent.JsonCommand("Player.GetActivePlayers"' null);                      if (players.Count > 0)                      {                          foreach (JsonObject player in players)                          {                              if (player["type"].ToString() == "picture")                                  continue;                              current = Int32.Parse(player["playerid"].ToString());                              _nowPlaying.MediaType = (string)player["type"];                          }                      }                        if (current == -1)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var items = new JsonObject();                      items["playerid"] = current;                      items["properties"] = new[]{                                              "file"'                                              "comment"'                                              "tvshowid"'                                              "albumartist"'                                              "duration"'                                              //"id"'                                              "album"'                                              //"votes"'                                             // "mpaa"'                                             // "writer"'                                             //"albumid"'                                              //"type"'                                              "genre"'                                              "year"'                                              //"plotoutline"'                                              "track"'                                              "artist"'                                              //"season"'                                              //"imdbnumber"'                                             // "studio"'                                              //"showlink"'                                              "showtitle"'                                              "episode"'                                              "season"'                                              "plot"'                                              "director"'                                              "studio"'                                              "rating"'                                              //"productioncode"'                                              //"country"'                                              //"premiered"'                                              //"originaltitle"'                                              //"artistid"'                                              //"firstaired"'                                              "tagline"'                                              "thumbnail"'                                              "fanart"                                              //"top250"'                                              //"trailer"                                          };                        var properties = new JsonObject();                      properties["playerid"] = current;                      properties["properties"] = new[]{                                              "totaltime"'                                              "percentage"'                                              "time"'                                              "speed"                                          };                        var appproperties = new JsonObject();                      appproperties["properties"] = new[]                                                        {                                                            "muted"'                                                            "volume"                                                        };                        var result1 = (JsonObject)_parent.JsonCommand("Player.GetProperties"' properties);                      var result2 = (JsonObject)_parent.JsonCommand("Player.GetItem"' items);                      var result3 = (JsonObject)_parent.JsonCommand("Application.GetProperties"' appproperties);                        if (result1 == null || result2 == null || result3 == null)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        result2 = (JsonObject)(result2)["item"];                        _nowPlaying.IsPaused = Convert.ToInt32("0" + result1["speed"].ToString().Replace("-"' "")) == 0;                      _nowPlaying.IsPlaying = !_nowPlaying.IsPaused;                      var time = (JsonObject)result1["time"];                      var total = (JsonObject)result1["totaltime"];                      _nowPlaying.Time = new TimeSpan(0' Convert.ToInt32("0" + time["hours"])' Convert.ToInt32("0" + time["minutes"])' Convert.ToInt32("0" + time["seconds"]));                      _nowPlaying.Duration = new TimeSpan(0' Convert.ToInt32("0" + total["hours"])' Convert.ToInt32("0" + total["minutes"])' Convert.ToInt32("0" + total["seconds"]));                      _nowPlaying.Progress = Convert.ToInt32("0" + result1["percentage"].ToString().Split('.')[0]);                      _nowPlaying.Volume = Convert.ToInt32("0" + result3["volume"]);                      _nowPlaying.IsMuted = (bool)result3["muted"];                        _parent.MpcLoaded = _nowPlaying.Duration == new TimeSpan(0' 0' 0' 1);                        _nowPlaying.FileName = result2["file"].ToString();                        if (_nowPlaying.MediaType == "audio")                      {                          _nowPlaying.MediaType = "Audio";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.Track = Convert.ToInt32("0" + result2["track"]);                          _nowPlaying.Artist = _parent.JsonArrayToString((JsonArray)result2["artist"]);                          _nowPlaying.Album = result2["album"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                        if (_nowPlaying.MediaType == "video")                      {                          _nowPlaying.MediaType = result2["type"].ToString() == "episode" ? "TvShow" : "Movie";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.SeasonNumber = Convert.ToInt32("0" + result2["season"].ToString().Replace("-"' ""));                          _nowPlaying.EpisodeNumber = Convert.ToInt32("0" + result2["episode"].ToString().Replace("-"' ""));                          _nowPlaying.ShowTitle = result2["showtitle"].ToString();                          _nowPlaying.Plot = result2["plot"].ToString();                          _nowPlaying.Director = _parent.JsonArrayToString((JsonArray)result2["director"]);                          _nowPlaying.Studio = _parent.JsonArrayToString((JsonArray)result2["studio"]);                          _nowPlaying.Tagline = result2["tagline"].ToString();                          _nowPlaying.Rating = result2["rating"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                  }              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The following statement contains a magic number: lock (Locker)              {                  if (_parent.MpcLoaded)                  {                      var result = _parent.MpcHcRemote.GetStatus();                      var result2 = new ArrayList();                      MpcHcRemote.ParseCSVFields(result2' result);                      var data = (string[])result2.ToArray(typeof(string));                      if (data.Length > 6)                      {                          _nowPlaying.MediaType = "Video";                          _nowPlaying.Title = "Media Player Classic";                          _nowPlaying.Time = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[2]) / 1000);                          _nowPlaying.Duration = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[4]) / 1000);                          var percent = Math.Floor(100.0 * Convert.ToInt32("0" + data[2]' CultureInfo.InvariantCulture) / Convert.ToInt32("0" + data[4]' CultureInfo.InvariantCulture));                          if (Double.IsNaN(percent))                              percent = 0;                          _nowPlaying.Volume = Convert.ToInt32("0" + data[7]' CultureInfo.InvariantCulture);                          _nowPlaying.IsMuted = data[6] == "1";                          _nowPlaying.Progress = (int)percent;                      }                  }                  else                  {                      if (!_parent.IsConnected())                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var current = -1;                      var players = (JsonArray)_parent.JsonCommand("Player.GetActivePlayers"' null);                      if (players.Count > 0)                      {                          foreach (JsonObject player in players)                          {                              if (player["type"].ToString() == "picture")                                  continue;                              current = Int32.Parse(player["playerid"].ToString());                              _nowPlaying.MediaType = (string)player["type"];                          }                      }                        if (current == -1)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var items = new JsonObject();                      items["playerid"] = current;                      items["properties"] = new[]{                                              "file"'                                              "comment"'                                              "tvshowid"'                                              "albumartist"'                                              "duration"'                                              //"id"'                                              "album"'                                              //"votes"'                                             // "mpaa"'                                             // "writer"'                                             //"albumid"'                                              //"type"'                                              "genre"'                                              "year"'                                              //"plotoutline"'                                              "track"'                                              "artist"'                                              //"season"'                                              //"imdbnumber"'                                             // "studio"'                                              //"showlink"'                                              "showtitle"'                                              "episode"'                                              "season"'                                              "plot"'                                              "director"'                                              "studio"'                                              "rating"'                                              //"productioncode"'                                              //"country"'                                              //"premiered"'                                              //"originaltitle"'                                              //"artistid"'                                              //"firstaired"'                                              "tagline"'                                              "thumbnail"'                                              "fanart"                                              //"top250"'                                              //"trailer"                                          };                        var properties = new JsonObject();                      properties["playerid"] = current;                      properties["properties"] = new[]{                                              "totaltime"'                                              "percentage"'                                              "time"'                                              "speed"                                          };                        var appproperties = new JsonObject();                      appproperties["properties"] = new[]                                                        {                                                            "muted"'                                                            "volume"                                                        };                        var result1 = (JsonObject)_parent.JsonCommand("Player.GetProperties"' properties);                      var result2 = (JsonObject)_parent.JsonCommand("Player.GetItem"' items);                      var result3 = (JsonObject)_parent.JsonCommand("Application.GetProperties"' appproperties);                        if (result1 == null || result2 == null || result3 == null)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        result2 = (JsonObject)(result2)["item"];                        _nowPlaying.IsPaused = Convert.ToInt32("0" + result1["speed"].ToString().Replace("-"' "")) == 0;                      _nowPlaying.IsPlaying = !_nowPlaying.IsPaused;                      var time = (JsonObject)result1["time"];                      var total = (JsonObject)result1["totaltime"];                      _nowPlaying.Time = new TimeSpan(0' Convert.ToInt32("0" + time["hours"])' Convert.ToInt32("0" + time["minutes"])' Convert.ToInt32("0" + time["seconds"]));                      _nowPlaying.Duration = new TimeSpan(0' Convert.ToInt32("0" + total["hours"])' Convert.ToInt32("0" + total["minutes"])' Convert.ToInt32("0" + total["seconds"]));                      _nowPlaying.Progress = Convert.ToInt32("0" + result1["percentage"].ToString().Split('.')[0]);                      _nowPlaying.Volume = Convert.ToInt32("0" + result3["volume"]);                      _nowPlaying.IsMuted = (bool)result3["muted"];                        _parent.MpcLoaded = _nowPlaying.Duration == new TimeSpan(0' 0' 0' 1);                        _nowPlaying.FileName = result2["file"].ToString();                        if (_nowPlaying.MediaType == "audio")                      {                          _nowPlaying.MediaType = "Audio";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.Track = Convert.ToInt32("0" + result2["track"]);                          _nowPlaying.Artist = _parent.JsonArrayToString((JsonArray)result2["artist"]);                          _nowPlaying.Album = result2["album"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                        if (_nowPlaying.MediaType == "video")                      {                          _nowPlaying.MediaType = result2["type"].ToString() == "episode" ? "TvShow" : "Movie";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.SeasonNumber = Convert.ToInt32("0" + result2["season"].ToString().Replace("-"' ""));                          _nowPlaying.EpisodeNumber = Convert.ToInt32("0" + result2["episode"].ToString().Replace("-"' ""));                          _nowPlaying.ShowTitle = result2["showtitle"].ToString();                          _nowPlaying.Plot = result2["plot"].ToString();                          _nowPlaying.Director = _parent.JsonArrayToString((JsonArray)result2["director"]);                          _nowPlaying.Studio = _parent.JsonArrayToString((JsonArray)result2["studio"]);                          _nowPlaying.Tagline = result2["tagline"].ToString();                          _nowPlaying.Rating = result2["rating"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                  }              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The following statement contains a magic number: lock (Locker)              {                  if (_parent.MpcLoaded)                  {                      var result = _parent.MpcHcRemote.GetStatus();                      var result2 = new ArrayList();                      MpcHcRemote.ParseCSVFields(result2' result);                      var data = (string[])result2.ToArray(typeof(string));                      if (data.Length > 6)                      {                          _nowPlaying.MediaType = "Video";                          _nowPlaying.Title = "Media Player Classic";                          _nowPlaying.Time = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[2]) / 1000);                          _nowPlaying.Duration = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[4]) / 1000);                          var percent = Math.Floor(100.0 * Convert.ToInt32("0" + data[2]' CultureInfo.InvariantCulture) / Convert.ToInt32("0" + data[4]' CultureInfo.InvariantCulture));                          if (Double.IsNaN(percent))                              percent = 0;                          _nowPlaying.Volume = Convert.ToInt32("0" + data[7]' CultureInfo.InvariantCulture);                          _nowPlaying.IsMuted = data[6] == "1";                          _nowPlaying.Progress = (int)percent;                      }                  }                  else                  {                      if (!_parent.IsConnected())                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var current = -1;                      var players = (JsonArray)_parent.JsonCommand("Player.GetActivePlayers"' null);                      if (players.Count > 0)                      {                          foreach (JsonObject player in players)                          {                              if (player["type"].ToString() == "picture")                                  continue;                              current = Int32.Parse(player["playerid"].ToString());                              _nowPlaying.MediaType = (string)player["type"];                          }                      }                        if (current == -1)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var items = new JsonObject();                      items["playerid"] = current;                      items["properties"] = new[]{                                              "file"'                                              "comment"'                                              "tvshowid"'                                              "albumartist"'                                              "duration"'                                              //"id"'                                              "album"'                                              //"votes"'                                             // "mpaa"'                                             // "writer"'                                             //"albumid"'                                              //"type"'                                              "genre"'                                              "year"'                                              //"plotoutline"'                                              "track"'                                              "artist"'                                              //"season"'                                              //"imdbnumber"'                                             // "studio"'                                              //"showlink"'                                              "showtitle"'                                              "episode"'                                              "season"'                                              "plot"'                                              "director"'                                              "studio"'                                              "rating"'                                              //"productioncode"'                                              //"country"'                                              //"premiered"'                                              //"originaltitle"'                                              //"artistid"'                                              //"firstaired"'                                              "tagline"'                                              "thumbnail"'                                              "fanart"                                              //"top250"'                                              //"trailer"                                          };                        var properties = new JsonObject();                      properties["playerid"] = current;                      properties["properties"] = new[]{                                              "totaltime"'                                              "percentage"'                                              "time"'                                              "speed"                                          };                        var appproperties = new JsonObject();                      appproperties["properties"] = new[]                                                        {                                                            "muted"'                                                            "volume"                                                        };                        var result1 = (JsonObject)_parent.JsonCommand("Player.GetProperties"' properties);                      var result2 = (JsonObject)_parent.JsonCommand("Player.GetItem"' items);                      var result3 = (JsonObject)_parent.JsonCommand("Application.GetProperties"' appproperties);                        if (result1 == null || result2 == null || result3 == null)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        result2 = (JsonObject)(result2)["item"];                        _nowPlaying.IsPaused = Convert.ToInt32("0" + result1["speed"].ToString().Replace("-"' "")) == 0;                      _nowPlaying.IsPlaying = !_nowPlaying.IsPaused;                      var time = (JsonObject)result1["time"];                      var total = (JsonObject)result1["totaltime"];                      _nowPlaying.Time = new TimeSpan(0' Convert.ToInt32("0" + time["hours"])' Convert.ToInt32("0" + time["minutes"])' Convert.ToInt32("0" + time["seconds"]));                      _nowPlaying.Duration = new TimeSpan(0' Convert.ToInt32("0" + total["hours"])' Convert.ToInt32("0" + total["minutes"])' Convert.ToInt32("0" + total["seconds"]));                      _nowPlaying.Progress = Convert.ToInt32("0" + result1["percentage"].ToString().Split('.')[0]);                      _nowPlaying.Volume = Convert.ToInt32("0" + result3["volume"]);                      _nowPlaying.IsMuted = (bool)result3["muted"];                        _parent.MpcLoaded = _nowPlaying.Duration == new TimeSpan(0' 0' 0' 1);                        _nowPlaying.FileName = result2["file"].ToString();                        if (_nowPlaying.MediaType == "audio")                      {                          _nowPlaying.MediaType = "Audio";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.Track = Convert.ToInt32("0" + result2["track"]);                          _nowPlaying.Artist = _parent.JsonArrayToString((JsonArray)result2["artist"]);                          _nowPlaying.Album = result2["album"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                        if (_nowPlaying.MediaType == "video")                      {                          _nowPlaying.MediaType = result2["type"].ToString() == "episode" ? "TvShow" : "Movie";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.SeasonNumber = Convert.ToInt32("0" + result2["season"].ToString().Replace("-"' ""));                          _nowPlaying.EpisodeNumber = Convert.ToInt32("0" + result2["episode"].ToString().Replace("-"' ""));                          _nowPlaying.ShowTitle = result2["showtitle"].ToString();                          _nowPlaying.Plot = result2["plot"].ToString();                          _nowPlaying.Director = _parent.JsonArrayToString((JsonArray)result2["director"]);                          _nowPlaying.Studio = _parent.JsonArrayToString((JsonArray)result2["studio"]);                          _nowPlaying.Tagline = result2["tagline"].ToString();                          _nowPlaying.Rating = result2["rating"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                  }              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The following statement contains a magic number: lock (Locker)              {                  if (_parent.MpcLoaded)                  {                      var result = _parent.MpcHcRemote.GetStatus();                      var result2 = new ArrayList();                      MpcHcRemote.ParseCSVFields(result2' result);                      var data = (string[])result2.ToArray(typeof(string));                      if (data.Length > 6)                      {                          _nowPlaying.MediaType = "Video";                          _nowPlaying.Title = "Media Player Classic";                          _nowPlaying.Time = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[2]) / 1000);                          _nowPlaying.Duration = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[4]) / 1000);                          var percent = Math.Floor(100.0 * Convert.ToInt32("0" + data[2]' CultureInfo.InvariantCulture) / Convert.ToInt32("0" + data[4]' CultureInfo.InvariantCulture));                          if (Double.IsNaN(percent))                              percent = 0;                          _nowPlaying.Volume = Convert.ToInt32("0" + data[7]' CultureInfo.InvariantCulture);                          _nowPlaying.IsMuted = data[6] == "1";                          _nowPlaying.Progress = (int)percent;                      }                  }                  else                  {                      if (!_parent.IsConnected())                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var current = -1;                      var players = (JsonArray)_parent.JsonCommand("Player.GetActivePlayers"' null);                      if (players.Count > 0)                      {                          foreach (JsonObject player in players)                          {                              if (player["type"].ToString() == "picture")                                  continue;                              current = Int32.Parse(player["playerid"].ToString());                              _nowPlaying.MediaType = (string)player["type"];                          }                      }                        if (current == -1)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var items = new JsonObject();                      items["playerid"] = current;                      items["properties"] = new[]{                                              "file"'                                              "comment"'                                              "tvshowid"'                                              "albumartist"'                                              "duration"'                                              //"id"'                                              "album"'                                              //"votes"'                                             // "mpaa"'                                             // "writer"'                                             //"albumid"'                                              //"type"'                                              "genre"'                                              "year"'                                              //"plotoutline"'                                              "track"'                                              "artist"'                                              //"season"'                                              //"imdbnumber"'                                             // "studio"'                                              //"showlink"'                                              "showtitle"'                                              "episode"'                                              "season"'                                              "plot"'                                              "director"'                                              "studio"'                                              "rating"'                                              //"productioncode"'                                              //"country"'                                              //"premiered"'                                              //"originaltitle"'                                              //"artistid"'                                              //"firstaired"'                                              "tagline"'                                              "thumbnail"'                                              "fanart"                                              //"top250"'                                              //"trailer"                                          };                        var properties = new JsonObject();                      properties["playerid"] = current;                      properties["properties"] = new[]{                                              "totaltime"'                                              "percentage"'                                              "time"'                                              "speed"                                          };                        var appproperties = new JsonObject();                      appproperties["properties"] = new[]                                                        {                                                            "muted"'                                                            "volume"                                                        };                        var result1 = (JsonObject)_parent.JsonCommand("Player.GetProperties"' properties);                      var result2 = (JsonObject)_parent.JsonCommand("Player.GetItem"' items);                      var result3 = (JsonObject)_parent.JsonCommand("Application.GetProperties"' appproperties);                        if (result1 == null || result2 == null || result3 == null)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        result2 = (JsonObject)(result2)["item"];                        _nowPlaying.IsPaused = Convert.ToInt32("0" + result1["speed"].ToString().Replace("-"' "")) == 0;                      _nowPlaying.IsPlaying = !_nowPlaying.IsPaused;                      var time = (JsonObject)result1["time"];                      var total = (JsonObject)result1["totaltime"];                      _nowPlaying.Time = new TimeSpan(0' Convert.ToInt32("0" + time["hours"])' Convert.ToInt32("0" + time["minutes"])' Convert.ToInt32("0" + time["seconds"]));                      _nowPlaying.Duration = new TimeSpan(0' Convert.ToInt32("0" + total["hours"])' Convert.ToInt32("0" + total["minutes"])' Convert.ToInt32("0" + total["seconds"]));                      _nowPlaying.Progress = Convert.ToInt32("0" + result1["percentage"].ToString().Split('.')[0]);                      _nowPlaying.Volume = Convert.ToInt32("0" + result3["volume"]);                      _nowPlaying.IsMuted = (bool)result3["muted"];                        _parent.MpcLoaded = _nowPlaying.Duration == new TimeSpan(0' 0' 0' 1);                        _nowPlaying.FileName = result2["file"].ToString();                        if (_nowPlaying.MediaType == "audio")                      {                          _nowPlaying.MediaType = "Audio";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.Track = Convert.ToInt32("0" + result2["track"]);                          _nowPlaying.Artist = _parent.JsonArrayToString((JsonArray)result2["artist"]);                          _nowPlaying.Album = result2["album"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                        if (_nowPlaying.MediaType == "video")                      {                          _nowPlaying.MediaType = result2["type"].ToString() == "episode" ? "TvShow" : "Movie";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.SeasonNumber = Convert.ToInt32("0" + result2["season"].ToString().Replace("-"' ""));                          _nowPlaying.EpisodeNumber = Convert.ToInt32("0" + result2["episode"].ToString().Replace("-"' ""));                          _nowPlaying.ShowTitle = result2["showtitle"].ToString();                          _nowPlaying.Plot = result2["plot"].ToString();                          _nowPlaying.Director = _parent.JsonArrayToString((JsonArray)result2["director"]);                          _nowPlaying.Studio = _parent.JsonArrayToString((JsonArray)result2["studio"]);                          _nowPlaying.Tagline = result2["tagline"].ToString();                          _nowPlaying.Rating = result2["rating"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                  }              }
Magic Number,Remote.XBMC.Frodo.Api,XbmcPlayer,C:\repos\Tolriq_Yatse2\Yatse2\Plugins\Remote.XBMC.Frodo\Api\Xbmc.Player.cs,RefreshNowPlaying,The following statement contains a magic number: lock (Locker)              {                  if (_parent.MpcLoaded)                  {                      var result = _parent.MpcHcRemote.GetStatus();                      var result2 = new ArrayList();                      MpcHcRemote.ParseCSVFields(result2' result);                      var data = (string[])result2.ToArray(typeof(string));                      if (data.Length > 6)                      {                          _nowPlaying.MediaType = "Video";                          _nowPlaying.Title = "Media Player Classic";                          _nowPlaying.Time = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[2]) / 1000);                          _nowPlaying.Duration = new TimeSpan(0' 0' 0' Convert.ToInt32("0" + data[4]) / 1000);                          var percent = Math.Floor(100.0 * Convert.ToInt32("0" + data[2]' CultureInfo.InvariantCulture) / Convert.ToInt32("0" + data[4]' CultureInfo.InvariantCulture));                          if (Double.IsNaN(percent))                              percent = 0;                          _nowPlaying.Volume = Convert.ToInt32("0" + data[7]' CultureInfo.InvariantCulture);                          _nowPlaying.IsMuted = data[6] == "1";                          _nowPlaying.Progress = (int)percent;                      }                  }                  else                  {                      if (!_parent.IsConnected())                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var current = -1;                      var players = (JsonArray)_parent.JsonCommand("Player.GetActivePlayers"' null);                      if (players.Count > 0)                      {                          foreach (JsonObject player in players)                          {                              if (player["type"].ToString() == "picture")                                  continue;                              current = Int32.Parse(player["playerid"].ToString());                              _nowPlaying.MediaType = (string)player["type"];                          }                      }                        if (current == -1)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        var items = new JsonObject();                      items["playerid"] = current;                      items["properties"] = new[]{                                              "file"'                                              "comment"'                                              "tvshowid"'                                              "albumartist"'                                              "duration"'                                              //"id"'                                              "album"'                                              //"votes"'                                             // "mpaa"'                                             // "writer"'                                             //"albumid"'                                              //"type"'                                              "genre"'                                              "year"'                                              //"plotoutline"'                                              "track"'                                              "artist"'                                              //"season"'                                              //"imdbnumber"'                                             // "studio"'                                              //"showlink"'                                              "showtitle"'                                              "episode"'                                              "season"'                                              "plot"'                                              "director"'                                              "studio"'                                              "rating"'                                              //"productioncode"'                                              //"country"'                                              //"premiered"'                                              //"originaltitle"'                                              //"artistid"'                                              //"firstaired"'                                              "tagline"'                                              "thumbnail"'                                              "fanart"                                              //"top250"'                                              //"trailer"                                          };                        var properties = new JsonObject();                      properties["playerid"] = current;                      properties["properties"] = new[]{                                              "totaltime"'                                              "percentage"'                                              "time"'                                              "speed"                                          };                        var appproperties = new JsonObject();                      appproperties["properties"] = new[]                                                        {                                                            "muted"'                                                            "volume"                                                        };                        var result1 = (JsonObject)_parent.JsonCommand("Player.GetProperties"' properties);                      var result2 = (JsonObject)_parent.JsonCommand("Player.GetItem"' items);                      var result3 = (JsonObject)_parent.JsonCommand("Application.GetProperties"' appproperties);                        if (result1 == null || result2 == null || result3 == null)                      {                          _nowPlaying.FileName = "";                          _nowPlaying.Title = "";                          _nowPlaying.IsPlaying = false;                          _nowPlaying.IsPaused = false;                          return;                      }                        result2 = (JsonObject)(result2)["item"];                        _nowPlaying.IsPaused = Convert.ToInt32("0" + result1["speed"].ToString().Replace("-"' "")) == 0;                      _nowPlaying.IsPlaying = !_nowPlaying.IsPaused;                      var time = (JsonObject)result1["time"];                      var total = (JsonObject)result1["totaltime"];                      _nowPlaying.Time = new TimeSpan(0' Convert.ToInt32("0" + time["hours"])' Convert.ToInt32("0" + time["minutes"])' Convert.ToInt32("0" + time["seconds"]));                      _nowPlaying.Duration = new TimeSpan(0' Convert.ToInt32("0" + total["hours"])' Convert.ToInt32("0" + total["minutes"])' Convert.ToInt32("0" + total["seconds"]));                      _nowPlaying.Progress = Convert.ToInt32("0" + result1["percentage"].ToString().Split('.')[0]);                      _nowPlaying.Volume = Convert.ToInt32("0" + result3["volume"]);                      _nowPlaying.IsMuted = (bool)result3["muted"];                        _parent.MpcLoaded = _nowPlaying.Duration == new TimeSpan(0' 0' 0' 1);                        _nowPlaying.FileName = result2["file"].ToString();                        if (_nowPlaying.MediaType == "audio")                      {                          _nowPlaying.MediaType = "Audio";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.Track = Convert.ToInt32("0" + result2["track"]);                          _nowPlaying.Artist = _parent.JsonArrayToString((JsonArray)result2["artist"]);                          _nowPlaying.Album = result2["album"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                        if (_nowPlaying.MediaType == "video")                      {                          _nowPlaying.MediaType = result2["type"].ToString() == "episode" ? "TvShow" : "Movie";                          _nowPlaying.Genre = _parent.JsonArrayToString((JsonArray)result2["genre"]);                          _nowPlaying.Title = result2["label"].ToString();                          _nowPlaying.Year = Convert.ToInt32("0" + result2["year"]);                          _nowPlaying.SeasonNumber = Convert.ToInt32("0" + result2["season"].ToString().Replace("-"' ""));                          _nowPlaying.EpisodeNumber = Convert.ToInt32("0" + result2["episode"].ToString().Replace("-"' ""));                          _nowPlaying.ShowTitle = result2["showtitle"].ToString();                          _nowPlaying.Plot = result2["plot"].ToString();                          _nowPlaying.Director = _parent.JsonArrayToString((JsonArray)result2["director"]);                          _nowPlaying.Studio = _parent.JsonArrayToString((JsonArray)result2["studio"]);                          _nowPlaying.Tagline = result2["tagline"].ToString();                          _nowPlaying.Rating = result2["rating"].ToString();                          _nowPlaying.ThumbURL = result2["thumbnail"].ToString();                          _nowPlaying.FanartURL = result2["fanart"].ToString();                      }                  }              }
